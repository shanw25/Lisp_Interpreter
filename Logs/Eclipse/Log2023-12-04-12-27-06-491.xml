<Events startTimestamp="1701710826491" logVersion="1.0.0.202308221630">
  <Command __id="1" _type="MoveCaretCommand" caretOffset="1384" date="Mon Dec 04 12:27:06 EST 2023" docOffset="1498" starttimestamp="1701710826491" timestamp="147" />
  <Command __id="2" _type="ShellCommand" date="Mon Dec 04 12:27:06 EST 2023" starttimestamp="1701710826491" timestamp="422" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3" _type="EclipseCommand" commandID="" date="Mon Dec 04 12:27:07 EST 2023" starttimestamp="1701710826491" timestamp="744" />
  <Command __id="4" _type="EclipseCommand" commandID="" date="Mon Dec 04 12:27:07 EST 2023" starttimestamp="1701710826491" timestamp="823" />
  <Command __id="5" _type="EclipseCommand" commandID="" date="Mon Dec 04 12:27:07 EST 2023" starttimestamp="1701710826491" timestamp="824" />
  <Command __id="6" _type="EclipseCommand" commandID="" date="Mon Dec 04 12:27:07 EST 2023" starttimestamp="1701710826491" timestamp="876" />
  <Command __id="7" _type="EclipseCommand" commandID="" date="Mon Dec 04 12:27:07 EST 2023" starttimestamp="1701710826491" timestamp="877" />
  <Command __id="8" _type="EclipseCommand" commandID="" date="Mon Dec 04 12:27:07 EST 2023" starttimestamp="1701710826491" timestamp="934" />
  <Command __id="9" _type="EclipseCommand" commandID="" date="Mon Dec 04 12:27:07 EST 2023" starttimestamp="1701710826491" timestamp="935" />
  <Command __id="10" _type="EclipseCommand" commandID="" date="Mon Dec 04 12:27:07 EST 2023" starttimestamp="1701710826491" timestamp="991" />
  <Command __id="11" _type="EclipseCommand" commandID="" date="Mon Dec 04 12:27:07 EST 2023" starttimestamp="1701710826491" timestamp="992" />
  <Command __id="12" _type="EclipseCommand" commandID="" date="Mon Dec 04 12:27:07 EST 2023" starttimestamp="1701710826491" timestamp="994" />
  <Command __id="13" _type="EclipseCommand" commandID="" date="Mon Dec 04 12:27:07 EST 2023" starttimestamp="1701710826491" timestamp="995" />
  <Command __id="14" _type="EclipseCommand" commandID="" date="Mon Dec 04 12:27:07 EST 2023" starttimestamp="1701710826491" timestamp="1006" />
  <Command __id="15" _type="ShellCommand" date="Mon Dec 04 12:27:12 EST 2023" starttimestamp="1701710826491" timestamp="5562" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="16" _type="ShellCommand" date="Mon Dec 04 12:40:43 EST 2023" starttimestamp="1701710826491" timestamp="817474" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="17" _type="MoveCaretCommand" caretOffset="913" date="Mon Dec 04 12:40:44 EST 2023" docOffset="1027" starttimestamp="1701710826491" timestamp="817533" />
  <Command __id="18" _type="ShellCommand" date="Mon Dec 04 12:40:45 EST 2023" starttimestamp="1701710826491" timestamp="818561" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 12:27:06 EST 2023" docASTNodeCount="197" docActiveCodeLength="1725" docExpressionCount="136" docLength="1725" projectName="Assignment5" starttimestamp="1701710826491" timestamp="44">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.OperationRegisterer;
import main.lisp.evaluator.BasicOperationRegisterer;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{
	
	public static void registerBasic() {
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());
	}
	
	public static void registerArithmetic() {
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());
	}
	
	public static void registerLogic() {
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());
	}
	
	

	@Override
	public void registerOperations() {
		registerAll();
	}
	
	public static void registerAll() {
		registerBasic();
		registerArithmetic();
		registerLogic();
	}

}
]]></snapshot>
  </Command>
  <Command __id="19" _type="ShellCommand" date="Mon Dec 04 12:46:42 EST 2023" starttimestamp="1701710826491" timestamp="1175710" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="20" _type="MoveCaretCommand" caretOffset="1290" date="Mon Dec 04 12:46:42 EST 2023" docOffset="1404" starttimestamp="1701710826491" timestamp="1176447" />
  <Command __id="22" _type="MoveCaretCommand" caretOffset="629" date="Mon Dec 04 12:46:44 EST 2023" docOffset="746" starttimestamp="1701710826491" timestamp="1178158" />
  <Command __id="23" _type="MoveCaretCommand" caretOffset="387" date="Mon Dec 04 12:46:45 EST 2023" docOffset="504" starttimestamp="1701710826491" timestamp="1178531" />
  <Command __id="24" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Mon Dec 04 12:46:47 EST 2023" starttimestamp="1701710826491" timestamp="1181400" />
  <Command __id="25" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 12:46:48 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1181571" type="Run" />
  <Command __id="26" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 12:46:48 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1181572" type="Run" />
  <Command __id="27" _type="ShellCommand" date="Mon Dec 04 12:46:48 EST 2023" starttimestamp="1701710826491" timestamp="1182360" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="28" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190938" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="29" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190943" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="30" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190947" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="31" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190947" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,

Test execution time (ms):9
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="32" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190948" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:"), Diff(INSERT,"Main"), Diff(EQUAL,"Class"), Diff(DELETE,"Registry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶"), Diff(DELETE,"¶Test execution time (ms):9¶")]]]></diff>
  </Command>
  <Command __id="33" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190977" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):38
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):38"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="34" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190979" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

Test execution time (ms):39
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):3"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="35" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190979" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:BasicAndChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:"), Diff(DELETE,"LoadLisp"), Diff(INSERT,"BasicAnd"), Diff(EQUAL,"Checker,100.0% complete,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,¶"), Diff(DELETE,"¶Test execution time (ms):39¶")]]]></diff>
  </Command>
  <Command __id="36" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190980" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:BasicAndChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="37" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190981" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:BasicOrChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:BasicOrChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="38" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190982" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:BasicOrChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="39" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190982" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:NotChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:NotChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="40" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190984" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:NotChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="41" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190985" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:VariableArgumentAndChecker,100.0% complete,10.0,10.0,

Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:VariableArgumentAndChecker,100.0% complete,10.0,10.0,¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="42" _type="ConsoleOutput" date="Mon Dec 04 12:46:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1190986" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:VariableArgumentOrChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:VariableArgument"), Diff(DELETE,"And"), Diff(INSERT,"Or"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶"), Diff(DELETE,"¶Test execution time (ms):0¶")]]]></diff>
  </Command>
  <Command __id="43" _type="ConsoleOutput" date="Mon Dec 04 12:47:07 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1200898" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:GreaterChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
Test Result:GreaterOrEqualChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:VariableArgumentOr"), Diff(INSERT,"execution time (ms):1¶Test Result:GreaterChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:GreaterOrEqual"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"¶")]]]></diff>
  </Command>
  <Command __id="44" _type="ConsoleOutput" date="Mon Dec 04 12:47:07 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1200901" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Test Result:LessChecker,100.0% complete,10.0,10.0,

Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶Test Result:"), Diff(DELETE,"Greater"), Diff(INSERT,"Less"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):"), Diff(DELETE,"1¶Test Result:GreaterOrEqualChecker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="45" _type="ConsoleOutput" date="Mon Dec 04 12:47:07 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1200901" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LessOrEqualChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):0¶"), Diff(EQUAL,"Test Result:Less"), Diff(INSERT,"OrEqual"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶"), Diff(DELETE,"¶Test execution time (ms):0¶")]]]></diff>
  </Command>
  <Command __id="46" _type="ExceptionCommand" date="Mon Dec 04 12:47:28 EST 2023" starttimestamp="1701710826491" timestamp="1221953" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'SETQ'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase.java:171)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="47" _type="ExceptionCommand" date="Mon Dec 04 12:47:28 EST 2023" starttimestamp="1701710826491" timestamp="1221961" type="Exception">
    <exceptionString><![CDATA[	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):9
Test Result:LispSetqChecker,0.0% complete,0.0,10.0,Expected strings:8actual string 

java.lang.IllegalStateException: No evaluator registered for operator 'SETQ'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase.java:171)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="48" _type="ConsoleOutput" date="Mon Dec 04 12:47:28 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1221967" type="ConsoleOutput">
    <outputString><![CDATA[	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):6
Test Result:LispSetqChecker2,0.0% complete,0.0,10.0,Expected strings:(8 . 3)actual string 


Test execution time (ms):0
Test Result:LoadSetqChecker,0.0% complete,0.0,15.0,Expecting in test file a call to ( SETQ A 29) with result 29


Test execution time (ms):0
Test Result:LoadSetqChecker2,0.0% complete,0.0,15.0,Expecting in test file a call to ( SETQ B (+ A 13)) with result 42


Test execution time (ms):0
Test Result:LoadSetqChecker3,0.0% complete,0.0,15.0,Expecting in test file a call to ( B  ) with result 42
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:LessOrEqualChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)¶	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)¶¶Test execution time (ms):6¶Test Result:LispSetqChecker2,0.0% complete,0.0,10.0,Expected strings:(8 . 3)actual string ¶¶¶Test execution time (ms):0¶Test Result:LoadSetqChecker,0.0% complete,0.0,15.0,Expecting in test file a call to ( SETQ A 29) with result 29¶¶¶Test execution time (ms):0¶Test Result:LoadSetqChecker2,0.0% complete,0.0,15.0,Expecting in test file a call to ( SETQ B (+ A 13)) with result 42¶¶¶Test execution time (ms):0¶Test Result:LoadSetqChecker3,0.0% complete,0.0,15.0,Expecting in test file a call to ( B  ) with result 42"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="49" _type="ConsoleOutput" date="Mon Dec 04 12:47:28 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1221982" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Mon Dec 04 12:47:28 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)¶	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)¶¶Test execution time (ms):6¶Test Result:LispSetqChecker2,0.0% complete,0.0,10.0,Expected strings:(8 . 3)actual string ¶¶¶Test execution time (ms):0¶Test Result:LoadSetqChecker,0.0% complete,0.0,15.0,Expecting in test file a call to ( SETQ A 29) with result 29¶¶¶Test execution time (ms):0¶Test Result:LoadSetqChecker2,0.0% complete,0.0,15.0,Expecting in test file a call to ( SETQ B (+ A 13)) with result 42¶¶¶Test execution time (ms):0¶Test Result:LoadSetqChecker3,0.0% complete,0.0,15.0,Expecting in test file a call to ( B  ) with result 42"), Diff(INSERT,"Building symbol table and running first pass checks:Mon Dec 04 12:47:28 EST 2023"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="50" _type="ConsoleOutput" date="Mon Dec 04 12:47:29 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1222604" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:30
Running second pass checks Mon Dec 04 12:47:29 EST 2023
Start O(n2) inter- and intra class method calls:Mon Dec 04 12:47:29 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and r"), Diff(INSERT,"size:30¶R"), Diff(EQUAL,"unning "), Diff(DELETE,"first"), Diff(INSERT,"second"), Diff(EQUAL," pass checks"), Diff(INSERT," Mon Dec 04 12:47:29 EST 2023¶Start O(n2) inter- and intra class method calls"), Diff(EQUAL,":Mon Dec 04 12:47:2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EST 2023¶")]]]></diff>
  </Command>
  <Command __id="51" _type="ConsoleOutput" date="Mon Dec 04 12:47:29 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1222615" type="ConsoleOutput">
    <outputString><![CDATA[End O(n2) inter- and intra class method calls:Mon Dec 04 12:47:29 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:30¶Running second pass checks Mon Dec 04 12:47:29 EST 2023¶Start"), Diff(INSERT,"End"), Diff(EQUAL," O(n2) inter- and intra class method calls:Mon Dec 04 12:47:29 EST 2023¶")]]]></diff>
  </Command>
  <Command __id="52" _type="ConsoleOutput" date="Mon Dec 04 12:47:29 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1222995" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Mon Dec 04 12:47:29 EST 2023
Generating checks:Mon Dec 04 12:47:29 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"End O(n2) inter- and intra class method call"), Diff(INSERT,"Finished second pass checks:Mon Dec 04 12:47:29 EST 2023¶Generating check"), Diff(EQUAL,"s:Mon Dec 04 12:47:29 EST 2023¶")]]]></diff>
  </Command>
  <Command __id="53" _type="ConsoleOutput" date="Mon Dec 04 12:47:29 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1222999" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating checks:Mon Dec 04 12:47:29 EST 2023
Generating externals:Mon Dec 04 12:47:29 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass"), Diff(INSERT,"Generating"), Diff(EQUAL," checks:Mon Dec 04 12:47:29 EST 2023¶Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Mon Dec 04 12:47:29 EST 2023¶")]]]></diff>
  </Command>
  <Command __id="54" _type="ConsoleOutput" date="Mon Dec 04 12:47:29 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1223032" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Mon Dec 04 12:47:29 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"Generating checks:Mon Dec 04 12:47:29 EST 2023¶"), Diff(EQUAL,"Generating externals:Mon Dec 04 12:47:29 EST 2023¶")]]]></diff>
  </Command>
  <Command __id="55" _type="ConsoleOutput" date="Mon Dec 04 12:47:29 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1223044" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):1082
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Mon Dec 04 12:47:29 EST 2023"), Diff(INSERT,"¶Test execution time (ms):1082"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="56" _type="ConsoleOutput" date="Mon Dec 04 12:47:29 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1223046" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:EnvironmentCallsGetParent,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*NestedLexicalEnvironment(.*) main.lisp.evaluator.environment.AbstractEnvironment!getParent:->Environment(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1082"), Diff(INSERT,"Result:EnvironmentCallsGetParent,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*NestedLexicalEnvironment(.*) main.lisp.evaluator.environment.AbstractEnvironment!getParent:->Environment(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="57" _type="ConsoleOutput" date="Mon Dec 04 12:47:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1228683" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):13
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"Result:EnvironmentCallsGetParent,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*NestedLexicalEnvironment(.*) main.lisp.evaluator.environment.AbstractEnvironment!getParent:->Environment(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?"), Diff(INSERT,"execution time (ms):13"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="58" _type="ConsoleOutput" date="Mon Dec 04 12:47:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1228687" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:IdentifierCallsEnvironmentLookup,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*IdentifierAtomWithLookup(.*) main.lisp.evaluator.Environment!lookup:main.lisp.parser.terms.IdentifierAtom->Optional(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):13"), Diff(INSERT,"Result:IdentifierCallsEnvironmentLookup,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*IdentifierAtomWithLookup(.*) main.lisp.evaluator.Environment!lookup:main.lisp.parser.terms.IdentifierAtom->Optional(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="66" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 12:47:58 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1252218" type="Run" />
  <Command __id="67" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 12:47:58 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1252219" type="Run" />
  <Command __id="68" _type="ShellCommand" date="Mon Dec 04 12:47:59 EST 2023" starttimestamp="1701710826491" timestamp="1252534" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="69" _type="ConsoleOutput" date="Mon Dec 04 12:48:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1265456" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:IdentifierCallsEnvironmentLookup,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*IdentifierAtomWithLookup(.*) main.lisp.evaluator.Environment!lookup:main.lisp.parser.terms.IdentifierAtom->Optional(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?"), Diff(INSERT,"execution time (ms):1¶Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="70" _type="ConsoleOutput" date="Mon Dec 04 12:48:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1265461" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"1¶Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="71" _type="ConsoleOutput" date="Mon Dec 04 12:48:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1265461" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):5"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="72" _type="ConsoleOutput" date="Mon Dec 04 12:48:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1265464" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):7¶"), Diff(EQUAL,"Test Result:"), Diff(INSERT,"Main"), Diff(EQUAL,"Class"), Diff(DELETE,"Registry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶")]]]></diff>
  </Command>
  <Command __id="73" _type="ConsoleOutput" date="Mon Dec 04 12:48:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1265490" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):35
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"7¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"35"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="74" _type="ExceptionCommand" date="Mon Dec 04 12:48:11 EST 2023" starttimestamp="1701710826491" timestamp="1265492" type="Exception">
    <exceptionString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

java.lang.IllegalStateException: No evaluator registered for operator 'SETQ'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="75" _type="ConsoleOutput" date="Mon Dec 04 12:48:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1265494" type="ConsoleOutput">
    <outputString><![CDATA[	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase.java:171)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):35"), Diff(INSERT,"	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)¶	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)¶	at grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase.java:171)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="76" _type="ConsoleOutput" date="Mon Dec 04 12:48:12 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1265553" type="ConsoleOutput">
    <outputString><![CDATA[
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶"), Diff(EQUAL,"	at "), Diff(DELETE,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner"), Diff(INSERT,"java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"57"), Diff(INSERT,"270"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$3.run(ParentRunn"), Diff(INSERT,"bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"290"), Diff(INSERT,"1444"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$1.schedule(ParentRunn"), Diff(INSERT,"bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndo"), Diff(EQUAL,"er.java:"), Diff(DELETE,"71"), Diff(INSERT,"99"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.runChildren(ParentRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"288"), Diff(INSERT,"1906"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.access$000(ParentRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"58"), Diff(INSERT,"1701"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$2.evaluate(ParentRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"268"), Diff(INSERT,"1585"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.run(ParentRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"363"), Diff(INSERT,"1538"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager"), Diff(EQUAL,".java:"), Diff(INSERT,"15"), Diff(EQUAL,"31"), Diff(DELETE,"7"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager"), Diff(EQUAL,".java:"), Diff(DELETE,"52"), Diff(INSERT,"1406"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager"), Diff(EQUAL,".java:"), Diff(DELETE,"62"), Diff(INSERT,"1357"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase"), Diff(INSERT,"bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster"), Diff(EQUAL,".java:"), Diff(DELETE,"171"), Diff(INSERT,"278"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"226"), Diff(INSERT,"6638"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"111"), Diff(INSERT,"6400"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"62"), Diff(INSERT,"4843"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container"), Diff(EQUAL,".java:4"), Diff(DELETE,"3"), Diff(INSERT,"556"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/java.lang.reflect.Method.invoke(Method"), Diff(INSERT,"desktop/java.awt.LightweightDispatcher.dispatchEvent(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"566"), Diff(INSERT,"4488"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod"), Diff(INSERT,"java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"50"), Diff(INSERT,"2307"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable"), Diff(INSERT,"java.desktop/java.awt.Window.dispatchEventImpl(Window"), Diff(EQUAL,".java:"), Diff(DELETE,"1"), Diff(INSERT,"277"), Diff(EQUAL,"2)¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod"), Diff(INSERT,"java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(EQUAL,".java:4"), Diff(DELETE,"7"), Diff(INSERT,"843"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod"), Diff(INSERT,"java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"1"), Diff(EQUAL,"7"), Diff(INSERT,"21"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.runLeaf(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"32"), Diff(INSERT,"71"), Diff(EQUAL,"5)¶	at "), Diff(DELETE,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner"), Diff(INSERT,"java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(INSERT,"8"), Diff(EQUAL,"5"), Diff(DELETE,"7"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$3.run(ParentRunner"), Diff(INSERT,"java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(DELETE,"290"), Diff(INSERT,"95"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$1.schedule(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue$5.run(EventQueue"), Diff(EQUAL,".java:7"), Diff(DELETE,"1"), Diff(INSERT,"45"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.runChildren(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue$5.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"288"), Diff(INSERT,"743"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner"), Diff(INSERT,"java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(DELETE,"26"), Diff(EQUAL,"8"), Diff(INSERT,"5"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.run(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"363"), Diff(INSERT,"742"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest"), Diff(INSERT,"java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread"), Diff(EQUAL,".java:"), Diff(DELETE,"317"), Diff(INSERT,"203"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite"), Diff(INSERT,"java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread"), Diff(EQUAL,".java:1"), Diff(DELETE,"91"), Diff(INSERT,"24"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread"), Diff(EQUAL,".java:"), Diff(DELETE,"62"), Diff(INSERT,"109"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="77" _type="ExceptionCommand" date="Mon Dec 04 12:48:12 EST 2023" starttimestamp="1701710826491" timestamp="1265559" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):40
Test Result:LispSetqChecker,0.0% complete,0.0,10.0,Expected strings:8actual string 

java.lang.IllegalStateException: No evaluator registered for operator 'SETQ'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase.java:171)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="78" _type="ConsoleOutput" date="Mon Dec 04 12:48:12 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1266147" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:30
Running second pass checks Mon Dec 04 12:48:12 EST 2023
Start O(n2) inter- and intra class method calls:Mon Dec 04 12:48:12 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)"), Diff(INSERT,"Symbol table size:30¶Running second pass checks Mon Dec 04 12:48:12 EST 2023¶Start O(n2) inter- and intra class method calls:Mon Dec 04 12:48:12 EST 2023"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="79" _type="ConsoleOutput" date="Mon Dec 04 12:48:12 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1266153" type="ConsoleOutput">
    <outputString><![CDATA[End O(n2) inter- and intra class method calls:Mon Dec 04 12:48:12 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:30¶Running second pass checks Mon Dec 04 12:48:12 EST 2023¶Start"), Diff(INSERT,"End"), Diff(EQUAL," O(n2) inter- and intra class method calls:Mon Dec 04 12:48:12 EST 2023¶")]]]></diff>
  </Command>
  <Command __id="80" _type="ConsoleOutput" date="Mon Dec 04 12:48:13 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1266548" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Mon Dec 04 12:48:13 EST 2023
Generating checks:Mon Dec 04 12:48:13 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"End O(n2) inter- and intra class method call"), Diff(INSERT,"Finished second pass checks:Mon Dec 04 12:48:13 EST 2023¶Generating check"), Diff(EQUAL,"s:Mon Dec 04 12:48:1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL," EST 2023¶")]]]></diff>
  </Command>
  <Command __id="81" _type="ConsoleOutput" date="Mon Dec 04 12:48:13 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1266553" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating checks:Mon Dec 04 12:48:13 EST 2023
Generating externals:Mon Dec 04 12:48:13 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass"), Diff(INSERT,"Generating"), Diff(EQUAL," checks:Mon Dec 04 12:48:13 EST 2023¶Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Mon Dec 04 12:48:13 EST 2023¶")]]]></diff>
  </Command>
  <Command __id="82" _type="ConsoleOutput" date="Mon Dec 04 12:48:13 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1266574" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Mon Dec 04 12:48:13 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"Generating checks:Mon Dec 04 12:48:13 EST 2023¶"), Diff(EQUAL,"Generating externals:Mon Dec 04 12:48:13 EST 2023¶")]]]></diff>
  </Command>
  <Command __id="83" _type="ConsoleOutput" date="Mon Dec 04 12:48:13 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1266585" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):1082
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Mon Dec 04 12:48:13 EST 2023"), Diff(INSERT,"¶Test execution time (ms):1082"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="84" _type="ConsoleOutput" date="Mon Dec 04 12:48:13 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1266587" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:EnvironmentCallsGetParent,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*NestedLexicalEnvironment(.*) main.lisp.evaluator.environment.AbstractEnvironment!getParent:->Environment(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1082"), Diff(INSERT,"Result:EnvironmentCallsGetParent,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*NestedLexicalEnvironment(.*) main.lisp.evaluator.environment.AbstractEnvironment!getParent:->Environment(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="85" _type="ConsoleOutput" date="Mon Dec 04 12:48:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1269072" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):15
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"Result:EnvironmentCallsGetParent,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*NestedLexicalEnvironment(.*) main.lisp.evaluator.environment.AbstractEnvironment!getParent:->Environment(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?"), Diff(INSERT,"execution time (ms):15"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="86" _type="ConsoleOutput" date="Mon Dec 04 12:48:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1269075" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:EnvironmentCallsPut,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*NestedLexicalEnvironment(.*) main.lisp.evaluator.environment.AbstractEnvironment!put:main.lisp.parser.terms.IdentifierAtom;main.lisp.parser.terms.SExpression->void(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):15"), Diff(INSERT,"Result:EnvironmentCallsPut,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*NestedLexicalEnvironment(.*) main.lisp.evaluator.environment.AbstractEnvironment!put:main.lisp.parser.terms.IdentifierAtom;main.lisp.parser.terms.SExpression->void(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="87" _type="ConsoleOutput" date="Mon Dec 04 12:48:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1271169" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.2631578947368421
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- index (19)
  |~ OperationRegistererImpl.java (43)
  |~ CondEvaluator.java (33)
  |~ ClassRegistryImpl.java (162)
  |~ index.java (14)
  |~ LoadEvaluator.java (51)
  |~ LesserEqualEvaluator.java (19)
  |~ AndEvaluator.java (27)
  |~ ListEvaluator.java (24)
  |~ OrEvaluator.java (30)
  |~ GreaterEvaluator.java (18)
  |~ GreaterEqualEvaluator.java (18)
  |~ ArithmeticEvaluatorHelper.java (60)
  |~ BasicExpressionImpl.java (57)
  |~ NotEvaluator.java (23)
  |~ EvalEvaluator.java (31)
  |~ LesserEvaluator.java (21)
  |~ RunF23A5Tests.java (28)
  |~ QuoteEvaluator.java (14)
  |~ EnvironmentImpl.java (50)

Attempting to match to the structure:
|- .* (19)
 |- [a-z]?.*[Ll]ogical.* (3)
  |~ AndEval.*.java (0)
  |~ OrEval.*.java (0)
  |~ NotEval.*.java (0)
 |- [a-z]?.*[Rr]elational.* (4)
  |~ G.*T.*Eval.*.java (0)
  |~ L.*T.*Eval.*.java (0)
  |~ G.*T.*E.*Eval.*.java (0)
  |~ L.*T.*E.*Eval.*.java (0)
 |- [a-z]?.*[Ee]xpression.* (5)
  |~ QuoteEval.*.java (0)
  |~ EvalEval.*.java (0)
  |~ CondEval.*.java (0)
  |~ LoadEval.*.java (0)
  |~ ListEval.*.java (0)
 |- [a-z]?.*[Ff]unctional.* (3)
  |~ FuncallEval.*.java (0)
  |~ LambdaEval.*.java (0)
  |~ SetqEval.*.java (0)


]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:EnvironmentCallsPut,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*NestedLexicalEnvironment(.*) main.lisp.evaluator.environment.AbstractEnvironment!put:main.lisp.parser.terms.IdentifierAtom;main.lisp.parser.terms.SExpression->void(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?"), Diff(INSERT,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.2631578947368421¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- index (19)¶  |~ OperationRegistererImpl.java (43)¶  |~ CondEvaluator.java (33)¶  |~ ClassRegistryImpl.java (162)¶  |~ index.java (14)¶  |~ LoadEvaluator.java (51)¶  |~ LesserEqualEvaluator.java (19)¶  |~ AndEvaluator.java (27)¶  |~ ListEvaluator.java (24)¶  |~ OrEvaluator.java (30)¶  |~ GreaterEvaluator.java (18)¶  |~ GreaterEqualEvaluator.java (18)¶  |~ ArithmeticEvaluatorHelper.java (60)¶  |~ BasicExpressionImpl.java (57)¶  |~ NotEvaluator.java (23)¶  |~ EvalEvaluator.java (31)¶  |~ LesserEvaluator.java (21)¶  |~ RunF23A5Tests.java (28)¶  |~ QuoteEvaluator.java (14)¶  |~ EnvironmentImpl.java (50)¶¶Attempting to match to the structure:¶|- .* (19)¶ |- [a-z]?.*[Ll]ogical.* (3)¶  |~ AndEval.*.java (0)¶  |~ OrEval.*.java (0)¶  |~ NotEval.*.java (0)¶ |- [a-z]?.*[Rr]elational.* (4)¶  |~ G.*T.*Eval.*.java (0)¶  |~ L.*T.*Eval.*.java (0)¶  |~ G.*T.*E.*Eval.*.java (0)¶  |~ L.*T.*E.*Eval.*.java (0)¶ |- [a-z]?.*[Ee]xpression.* (5)¶  |~ QuoteEval.*.java (0)¶  |~ EvalEval.*.java (0)¶  |~ CondEval.*.java (0)¶  |~ LoadEval.*.java (0)¶  |~ ListEval.*.java (0)¶ |- [a-z]?.*[Ff]unctional.* (3)¶  |~ FuncallEval.*.java (0)¶  |~ LambdaEval.*.java (0)¶  |~ SetqEval.*.java (0)¶¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="88" _type="ExceptionCommand" date="Mon Dec 04 12:48:17 EST 2023" starttimestamp="1701710826491" timestamp="1271172" type="Exception">
    <exceptionString><![CDATA[Test Result:ProjectStructureOrganizesEvaluators,0.0% complete,0.0,7.0,View console for more information

java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase.java:171)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="89" _type="ExceptionCommand" date="Mon Dec 04 12:48:17 EST 2023" starttimestamp="1701710826491" timestamp="1271176" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):4
Test Result:LispLambdaChecker2,0.0% complete,0.0,10.0,Expected strings:1actual string 

java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="90" _type="ConsoleOutput" date="Mon Dec 04 12:48:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1271223" type="ConsoleOutput">
    <outputString><![CDATA[	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase.java:171)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.2631578947368421¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- index (19)¶  |~ OperationRegistere"), Diff(INSERT,"	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)¶	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)¶	at grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase.java:171)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccesso"), Diff(EQUAL,"rImpl.java"), Diff(DELETE," ("), Diff(INSERT,":"), Diff(EQUAL,"43)¶"), Diff(DELETE,"  |~ CondEvaluator.java (33)¶  |~ ClassRegistryImpl"), Diff(INSERT,"	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable"), Diff(EQUAL,".java"), Diff(DELETE," (162)¶  |~ index.java (14)¶  |~ LoadEvaluator.java (51)¶  |~ LesserEqualEvaluator.java (19)¶  |~ AndEvaluator.java (27)¶  |~ ListEvaluator.java (24)¶  |~ OrEvaluato"), Diff(INSERT,":12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunne"), Diff(EQUAL,"r.java"), Diff(DELETE," (3"), Diff(INSERT,":29"), Diff(EQUAL,"0)¶"), Diff(DELETE,"  |~ GreaterEvaluator.java (18)¶  |~ GreaterEqualEvalu"), Diff(INSERT,"	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(INSERT,"g"), Diff(EQUAL,".j"), Diff(DELETE,"ava (18)¶  |~ ArithmeticEvaluatorHelper.java (60)¶  |~ BasicExpressionImpl"), Diff(INSERT,"unit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest"), Diff(EQUAL,".java"), Diff(DELETE," (5"), Diff(INSERT,":31"), Diff(EQUAL,"7)¶"), Diff(DELETE,"  |~ NotEvaluator.java (23)¶  |~ EvalEvaluator"), Diff(INSERT,"	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite"), Diff(EQUAL,".java"), Diff(DELETE," (3"), Diff(INSERT,":19"), Diff(EQUAL,"1)¶"), Diff(DELETE,"  |~ LesserEvaluator.java (21)¶  |~ RunF23A5Tests.java (28)¶  |~ QuoteEvaluator.java (14)¶  |~ EnvironmentImpl.java (50)¶¶Attempting to match to the structure:¶|- .* (19)¶ |- [a-z]?.*[Ll]ogical.* (3)¶  |~ AndEval.*.java (0)¶  |~ OrEval.*.java (0)¶  |~ NotEval.*.java (0)¶ |- [a-z]?.*[Rr]elational.* (4)¶  |~ G.*T.*Eval.*.java (0)¶  |~ L.*T.*Eval.*.java (0)¶  |~ G.*T.*E.*Eval.*.java (0)¶  |~ L.*T.*E.*Eval.*.java (0)¶ |- [a-z]?.*[Ee]xpression.* (5)¶  |~ QuoteEval.*.java (0)¶  |~ EvalEval.*.java (0)¶  |~ CondEval.*.java (0)¶  |~ LoadEval.*.java (0)¶  |~ ListEval.*.java (0)¶ |- [a-z]?.*[Ff]unctional.* (3)¶  |~ FuncallEval.*.java (0)¶  |~ LambdaEval.*.java (0)¶  |~ SetqEval.*.java (0)¶¶"), Diff(INSERT,"	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="91" _type="ConsoleOutput" date="Mon Dec 04 12:48:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1271293" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):0
Test Result:LoadLambdaChecker,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 0 parameters with result 42


Test execution time (ms):0
Test Result:LoadLambdaChecker2,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 1 parameters with result 42


Test execution time (ms):0
Test Result:LoadLambdaChecker3,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 2 parameters with result 42


Test execution time (ms):25
Test Result:FuncallCallsExpressionFactory,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*BasicFuncallEvaluator(.*) main.lisp.parser.terms.ExpressionFactory!newInstance:main.lisp.parser.terms.SExpression;main.lisp.parser.terms.SExpression->SExpression(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?


Test execution time (ms):6
Test Result:IdentifierCallsEnvironmentLookup,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*IdentifierAtomWithLookup(.*) main.lisp.evaluator.Environment!lookup:main.lisp.parser.terms.IdentifierAtom->Optional(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?


Test execution time (ms):2
Test Result:IdentifierCallsOptionalGet,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*IdentifierAtomWithLookup(.*) java.util.Optional!get:->Object(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?


Test execution time (ms):3
Test Result:LambdaCallsLambdaFactory,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*LambdaEvaluator(.*) main.lisp.evaluator.function.LambdaFactory!newInstance:main.lisp.parser.terms.IdentifierAtom\[\];main.lisp.parser.terms.SExpression-\>Lambda(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)¶	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)¶	at grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase.java:171)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk."), Diff(INSERT,"¶Test execution time (ms):0¶Test Result:LoadLambdaChecker,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 0 parameters with result 42¶¶¶Test execution time (ms):0¶Test Result:LoadLambdaChecker2,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 1 parameters with result 42¶¶¶Test execution time (ms):0¶Test Result:LoadLambdaChecker3,0.0% complete,0.0,15.0,Expecting "), Diff(EQUAL,"in"), Diff(INSERT," "), Diff(EQUAL,"te"), Diff(DELETE,"rnal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runn"), Diff(INSERT,"st file a call to LAMBDA takes 2 parameters with result 42¶¶¶Test execution time (ms):25¶Test Result:FuncallCallsExpressionFactory,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*BasicFuncallEvaluator(.*) main.lisp.parser.terms.ExpressionFactory!newInstance:main.lisp.parser.t"), Diff(EQUAL,"er"), Diff(INSERT,"m"), Diff(EQUAL,"s."), Diff(DELETE,"ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runn"), Diff(INSERT,"SExpression;main.lisp.parser.t"), Diff(EQUAL,"er"), Diff(INSERT,"m"), Diff(EQUAL,"s."), Diff(DELETE,"ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)"), Diff(INSERT,"SExpression->SExpression(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?¶¶¶Test execution time (ms):6¶Test Result:IdentifierCallsEnvironmentLookup,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*IdentifierAtomWithLookup(.*) main.lisp.evaluator.Environment!lookup:main.lisp.parser.terms.IdentifierAtom->Optional(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?¶¶¶Test execution time (ms):2¶Test Result:IdentifierCallsOptionalGet,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*IdentifierAtomWithLookup(.*) java.util.Optional!get:->Object(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?¶¶¶Test execution time (ms):3¶Test Result:LambdaCallsLambdaFactory,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*LambdaEvaluator(.*) main.lisp.evaluator.function.LambdaFactory!newInstance:main.lisp.parser.terms.IdentifierAtom\[\];main.lisp.parser.terms.SExpression-\>Lambda(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="92" _type="ShellCommand" date="Mon Dec 04 12:48:44 EST 2023" starttimestamp="1701710826491" timestamp="1297939" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="93" _type="MoveCaretCommand" caretOffset="248" date="Mon Dec 04 12:48:44 EST 2023" docOffset="365" starttimestamp="1701710826491" timestamp="1298032" />
  <Command __id="21" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 12:46:44 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1178044">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp524f23.assignment6.F23Assignment6Suite;
import trace.grader.basics.GraderBasicsTraceUtility;

public class RunF23A5Tests {
	public static void main(final String[] args) {
		
		final int maxPrintedTraces = 600;
		final int maxTraces = 2000;
		final int processTimeOut = 5;
		
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		GraderBasicsTraceUtility.setBufferTracedMessages(true);
		// Change this number if a test trace gets longer than 600 and is clipped
		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);
		// Change this number if all traces together are longer than 2000
		GraderBasicsTraceUtility.setMaxTraces(maxTraces);
		// Change this number if your process times out prematurely
		BasicProjectExecution.setProcessTimeOut(processTimeOut);
		// You need to always call such a method
		F23Assignment6Suite.main(args);
	}
}
]]></snapshot>
  </Command>
  <Command __id="95" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 12:48:47 EST 2023" docASTNodeCount="192" docActiveCodeLength="1039" docExpressionCount="124" docLength="1107" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1300650">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EnvironmentImpl.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import java.util.Optional;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.environment.AbstractEnvironment;
import main.lisp.evaluator.function.Function;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class EnvironmentImpl extends AbstractEnvironment{

	public EnvironmentImpl(Environment parent) {
		super(parent);
	}

	@Override
	public void assign(IdentifierAtom arg0, SExpression arg1) {
		put(arg0, arg1);
	}

	@Override
	public void assignFun(IdentifierAtom arg0, Function arg1) {
		
	}

	@Override
	public Environment copy() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Optional<SExpression> lookup(IdentifierAtom arg0) {
		Optional<SExpression> retVal = get(arg0);
		return (retVal == null && getParent() != null) ? getParent().lookup(arg0) : retVal;
	}

	@Override
	public Optional<Function> lookupFun(IdentifierAtom arg0) {
		// TODO Auto-generated method stub
		return Optional.empty();
	}

	@Override
	public Environment newChild() {
		return new EnvironmentImpl(this);
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="97" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 12:48:47 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1301209">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="99" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 12:48:49 EST 2023" docASTNodeCount="197" docActiveCodeLength="1725" docExpressionCount="136" docLength="1725" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1302538">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}			@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="94" _type="MoveCaretCommand" caretOffset="14" date="Mon Dec 04 12:48:46 EST 2023" docOffset="14" starttimestamp="1701710826491" timestamp="1300091" />
  <Command __id="96" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 12:48:47 EST 2023" docOffset="267" starttimestamp="1701710826491" timestamp="1300722" />
  <Command __id="98" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 12:48:47 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="1301265" />
  <Command __id="100" _type="MoveCaretCommand" caretOffset="1290" date="Mon Dec 04 12:48:49 EST 2023" docOffset="1404" starttimestamp="1701710826491" timestamp="1302592" />
  <Command __id="102" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 12:48:50 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="1303981" />
  <Command __id="103" _type="ShellCommand" date="Mon Dec 04 12:48:51 EST 2023" starttimestamp="1701710826491" timestamp="1305057" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="104" _type="LocalChecksRawCommand" date="Mon Dec 04 12:48:51 EST 2023" starttimestamp="1701710826491" timestamp="1305110">
    <CSVRow><![CDATA[63,Mon Dec 04 12:48:17 EST 2023,22,0,F21A6SpecificStyle,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,23,2,true,EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory ProjectStructureOrganizesEvaluators ,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ProjectStructureOrganizesEvaluators ,EnvironmentCallsGetParent-(0.0/2.0) EnvironmentCallsPut-(0.0/2.0) FuncallCallsExpressionFactory-(0.0/2.0) IdentifierCallsEnvironmentLookup-(0.0/2.0) IdentifierCallsOptionalGet-(0.0/2.0) LambdaCallsLambdaFactory-(0.0/2.0) ProjectStructureOrganizesEvaluators-(0.0/7.0) , ,]]></CSVRow>
  </Command>
  <Command __id="105" _type="LocalChecksRawCommand" date="Mon Dec 04 12:48:51 EST 2023" starttimestamp="1701710826491" timestamp="1305110">
    <CSVRow><![CDATA[63,Mon Dec 04 12:48:17 EST 2023,22,0,F21A6SpecificStyle,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,23,2,true,EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory ProjectStructureOrganizesEvaluators ,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ProjectStructureOrganizesEvaluators ,EnvironmentCallsGetParent-(0.0/2.0) EnvironmentCallsPut-(0.0/2.0) FuncallCallsExpressionFactory-(0.0/2.0) IdentifierCallsEnvironmentLookup-(0.0/2.0) IdentifierCallsOptionalGet-(0.0/2.0) LambdaCallsLambdaFactory-(0.0/2.0) ProjectStructureOrganizesEvaluators-(0.0/7.0) , ,]]></CSVRow>
  </Command>
  <Command __id="106" _type="ShellCommand" date="Mon Dec 04 12:48:52 EST 2023" starttimestamp="1701710826491" timestamp="1305555" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="107" _type="ShellCommand" date="Mon Dec 04 12:48:53 EST 2023" starttimestamp="1701710826491" timestamp="1306748" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="108" _type="ShellCommand" date="Mon Dec 04 12:50:46 EST 2023" starttimestamp="1701710826491" timestamp="1419718" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="109" _type="ShellCommand" date="Mon Dec 04 12:50:48 EST 2023" starttimestamp="1701710826491" timestamp="1421887" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="110" _type="ShellCommand" date="Mon Dec 04 12:51:10 EST 2023" starttimestamp="1701710826491" timestamp="1444334" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="111" _type="MoveCaretCommand" caretOffset="241" date="Mon Dec 04 12:51:10 EST 2023" docOffset="367" starttimestamp="1701710826491" timestamp="1444431" />
  <Command __id="113" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 12:51:43 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1477208" type="Run" />
  <Command __id="114" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 12:51:43 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1477208" type="Run" />
  <Command __id="116" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 12:52:00 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1493851" type="Run" />
  <Command __id="117" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 12:52:00 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1493851" type="Run" />
  <Command __id="118" _type="ShellCommand" date="Mon Dec 04 12:52:00 EST 2023" starttimestamp="1701710826491" timestamp="1494182" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="119" _type="ConsoleOutput" date="Mon Dec 04 12:52:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1498904" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"0¶Test Result:LoadLambdaChecker,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 0 parameters with result 42¶¶¶Test execution time (ms):0¶Test Result:LoadLambdaChecker2,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 1 parameters with result 42¶¶¶Test execution time (ms):0¶Test Result:LoadLambdaChecker3,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 2 parameters with result 42¶¶¶Test execution time (ms):25¶Test Result:FuncallCallsExpressionFactory,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*BasicFuncallEvaluator(.*) main.lisp.parser.terms.ExpressionFactory!newInstance:main.lisp.parser.terms.SExpression;main.lisp.parser.terms.SExpression->SExpression(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?¶¶¶Test execution time (ms):6¶Test Result:IdentifierCallsEnvironmentLookup,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*IdentifierAtomWithLookup(.*) main.lisp.evaluator.Environment!lookup:main.lisp.parser.terms.IdentifierAtom->Optional(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?¶¶¶Test execution time (ms):2¶Test Result:IdentifierCallsOptionalGet,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*IdentifierAtomWithLookup(.*) java.util.Optional!get:->Object(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?¶¶¶Test execution time (ms):3¶Test Result:LambdaCallsLambdaFactory,0.0% complete,0.0,2.0,Checkstyle output does not match:.*INFO.*: .*LambdaEvaluator(.*) main.lisp.evaluator.function.LambdaFactory!newInstance:main.lisp.parser.terms.IdentifierAtom\[\];main.lisp.parser.terms.SExpression-\>Lambda(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="120" _type="ConsoleOutput" date="Mon Dec 04 12:52:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1498905" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="121" _type="ConsoleOutput" date="Mon Dec 04 12:52:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1498912" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,

Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFile"), Diff(INSERT,"execution time (ms):6¶Test Result:ClassRegistry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶¶"), Diff(INSERT,"Test execution time (ms):7¶")]]]></diff>
  </Command>
  <Command __id="122" _type="ConsoleOutput" date="Mon Dec 04 12:52:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1498912" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):6¶"), Diff(EQUAL,"Test Result:"), Diff(INSERT,"Main"), Diff(EQUAL,"Class"), Diff(DELETE,"Registry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶"), Diff(DELETE,"¶Test execution time (ms):7¶")]]]></diff>
  </Command>
  <Command __id="123" _type="ConsoleOutput" date="Mon Dec 04 12:52:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1498939" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):35
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):35"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="124" _type="ExceptionCommand" date="Mon Dec 04 12:52:05 EST 2023" starttimestamp="1701710826491" timestamp="1498941" type="Exception">
    <exceptionString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

java.lang.IllegalStateException: No evaluator registered for operator 'SETQ'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="125" _type="ConsoleOutput" date="Mon Dec 04 12:52:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1498942" type="ConsoleOutput">
    <outputString><![CDATA[	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase.java:171)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):35"), Diff(INSERT,"	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)¶	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)¶	at grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase.java:171)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="126" _type="ConsoleOutput" date="Mon Dec 04 12:52:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1498961" type="ConsoleOutput">
    <outputString><![CDATA[	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶"), Diff(EQUAL,"	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.A"), Diff(DELETE,"JUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext"), Diff(INSERT,"GradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl"), Diff(EQUAL,".java:"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL,"2)¶	at "), Diff(DELETE,"grader.basics.junit.JUnitTestsEnvironmen"), Diff(INSERT,"java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflec"), Diff(EQUAL,"t."), Diff(DELETE,"g"), Diff(INSERT,"M"), Diff(EQUAL,"et"), Diff(DELETE,"AndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment"), Diff(INSERT,"hod.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"6"), Diff(EQUAL,"2"), Diff(INSERT,"19"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.possiblyRunAndCheckPrecedingTests(PassFailJUnitTestCase"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager"), Diff(EQUAL,".java:17"), Diff(INSERT,"0"), Diff(EQUAL,"1)¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager"), Diff(EQUAL,".java:"), Diff(DELETE,"22"), Diff(INSERT,"140"), Diff(EQUAL,"6)¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster"), Diff(EQUAL,".java:"), Diff(DELETE,"111"), Diff(INSERT,"278"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk."), Diff(INSERT,"desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Conta"), Diff(EQUAL,"in"), Diff(DELETE,"t"), Diff(EQUAL,"er"), Diff(DELETE,"nal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl"), Diff(INSERT,".processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"62"), Diff(INSERT,"4843"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container"), Diff(EQUAL,".java:4"), Diff(DELETE,"3"), Diff(INSERT,"488"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/java.lang.reflect.Method.invoke(Method"), Diff(INSERT,"desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window"), Diff(EQUAL,".java:"), Diff(DELETE,"566"), Diff(INSERT,"2772"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod"), Diff(INSERT,"java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"50"), Diff(INSERT,"772"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="127" _type="ExceptionCommand" date="Mon Dec 04 12:52:05 EST 2023" starttimestamp="1701710826491" timestamp="1498967" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):41
Test Result:LispSetqChecker,0.0% complete,0.0,10.0,Expected strings:8actual string 

java.lang.IllegalStateException: No evaluator registered for operator 'SETQ'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="128" _type="ConsoleOutput" date="Mon Dec 04 12:52:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1499584" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:30
Running second pass checks Mon Dec 04 12:52:06 EST 2023
Start O(n2) inter- and intra class method calls:Mon Dec 04 12:52:06 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)"), Diff(INSERT,"Symbol table size:30¶Running second pass checks Mon Dec 04 12:52:06 EST 2023¶Start O(n2) inter- and intra class method calls:Mon Dec 04 12:52:06 EST 2023"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="129" _type="ConsoleOutput" date="Mon Dec 04 12:52:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1499590" type="ConsoleOutput">
    <outputString><![CDATA[End O(n2) inter- and intra class method calls:Mon Dec 04 12:52:06 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:30¶Running second pass checks Mon Dec 04 12:52:06 EST 2023¶Start"), Diff(INSERT,"End"), Diff(EQUAL," O(n2) inter- and intra class method calls:Mon Dec 04 12:52:06 EST 2023¶")]]]></diff>
  </Command>
  <Command __id="130" _type="ConsoleOutput" date="Mon Dec 04 12:52:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1499975" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Mon Dec 04 12:52:06 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"End O(n2) inter- and intra class method call"), Diff(INSERT,"Finished second pass check"), Diff(EQUAL,"s:Mon Dec 04 12:52:06 EST 2023¶")]]]></diff>
  </Command>
  <Command __id="131" _type="ConsoleOutput" date="Mon Dec 04 12:52:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1499977" type="ConsoleOutput">
    <outputString><![CDATA[Generating checks:Mon Dec 04 12:52:06 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished second pass"), Diff(INSERT,"Generating"), Diff(EQUAL," checks:Mon Dec 04 12:52:06 EST 2023¶")]]]></diff>
  </Command>
  <Command __id="132" _type="ConsoleOutput" date="Mon Dec 04 12:52:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1499983" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating checks:Mon Dec 04 12:52:06 EST 2023
Generating externals:Mon Dec 04 12:52:06 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Finished "), Diff(EQUAL,"Generating checks:Mon Dec 04 12:52:06 EST 2023¶"), Diff(INSERT,"Generating externals:Mon Dec 04 12:52:06 EST 2023¶")]]]></diff>
  </Command>
  <Command __id="133" _type="ConsoleOutput" date="Mon Dec 04 12:52:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1500006" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Mon Dec 04 12:52:06 EST 2023
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"Generating checks:Mon Dec 04 12:52:06 EST 2023¶"), Diff(EQUAL,"Generating externals:Mon Dec 04 12:52:06 EST 2023¶")]]]></diff>
  </Command>
  <Command __id="134" _type="ConsoleOutput" date="Mon Dec 04 12:52:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1500027" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):1074
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Mon Dec 04 12:52:06 EST 2023"), Diff(INSERT,"¶Test execution time (ms):1074"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="135" _type="ConsoleOutput" date="Mon Dec 04 12:52:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="1500032" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:EnvironmentCallsGetParent,0.0% complete,0.0,2.0,
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1074"), Diff(INSERT,"Result:EnvironmentCallsGetParent,0.0% complete,0.0,2.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="280" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,arg1,arg]]></CSVRow>
  </Command>
  <Command __id="281" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,retVal,ret]]></CSVRow>
  </Command>
  <Command __id="282" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,retVal,val]]></CSVRow>
  </Command>
  <Command __id="283" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,expectedSignature,lookupFun:main.lisp.parser.terms.IdentifierAtom->java.util.Optional,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="284" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,expectedSignature,assign:main.lisp.parser.terms.IdentifierAtom;main.lisp.parser.terms.SExpression->void,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="285" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,expectedSignature,copy:->main.lisp.evaluator.Environment,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="286" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,expectedSignature,lookup:main.lisp.parser.terms.IdentifierAtom->java.util.Optional,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="287" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,expectedSignature,newChild:->main.lisp.evaluator.Environment,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="288" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,expectedSignature,assignFun:main.lisp.parser.terms.IdentifierAtom;main.lisp.evaluator.function.Function->void,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="289" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,expectedSuperType,main.lisp.evaluator.environment.AbstractEnvironment,index.EnvironmentImpl[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="290" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,publicMethodsOverride,[]]]></CSVRow>
  </Command>
  <Command __id="291" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,missingMethodCall,main.lisp.evaluator.environment.AbstractEnvironment!getScope:->CopyableScope,No method,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="292" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,expectedMethodCall,main.lisp.evaluator.environment.AbstractEnvironment!getParent:->Environment,Some method (lookup:main.lisp.parser.terms.IdentifierAtom->Optional),index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="293" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,expectedMethodCall,main.lisp.evaluator.environment.AbstractEnvironment!get:*->.*,Some method (lookup:main.lisp.parser.terms.IdentifierAtom->Optional),index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="294" _type="CheckStyleCommand" date="Mon Dec 04 12:52:20 EST 2023" starttimestamp="1701710826491" timestamp="1513995">
    <CSVRow><![CDATA[20,Mon Dec 04 12:52:06 EST 2023,true,index/EnvironmentImpl.java,expectedMethodCall,main.lisp.evaluator.environment.AbstractEnvironment!put:main.lisp.parser.terms.IdentifierAtom;main.lisp.parser.terms.SExpression->void,Some method (assign:main.lisp.parser.terms.IdentifierAtom;main.lisp.parser.terms.SExpression->void),index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="295" _type="ShellCommand" date="Mon Dec 04 12:52:21 EST 2023" starttimestamp="1701710826491" timestamp="1514579" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="101" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 12:48:50 EST 2023" docASTNodeCount="233" docActiveCodeLength="1448" docExpressionCount="171" docLength="1448" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1303926">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionImpl.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.parser.terms.AbstractSExpression;
import main.lisp.parser.terms.Atom;
import main.lisp.parser.terms.BasicExpression;
import main.lisp.parser.terms.SExpression;

public class BasicExpressionImpl extends BasicExpression implements SExpression{
	
	public BasicExpressionImpl(SExpression head, SExpression tail) {
		super(head, tail);
	}

	@Override
	public boolean isList() {
		if((this.getTail() instanceof Atom)) {
			return this.getTail().isNIL();
		}else {
			return this.getTail().isList();
		}
	}

	@Override
	public String toStringAsSExpressionDeep() {
		if(this.isAtom()) {
			return "(" + this.toString() + ")";
		}
		return "(" + this.getHead().toStringAsSExpressionDeep() + " " + "." + " " +
				this.getTail().toStringAsSExpressionDeep() + ")";
	}

	@Override
	public String toStringAsSExpression() {
		return "(" + this.getHead().toString() + " " + "." + " " +
				this.getTail().toString() + ")";
	}

	@Override
	public String toStringAsList() {
		return "("+((AbstractSExpression)this).toStringAsListHelperPublic()+")";
	}

	@Override
	public String toString() {
		return this.isList()? this.toStringAsList() : this.toStringAsSExpression();
	}

	@Override
	public String toStringAsListHelperPublic() {
		if(this.getTail().isNIL()) {
			return this.getHead().toString();
		}else {
			return this.getHead().toString() + " " + ((AbstractSExpression)this.getTail()).toStringAsListHelperPublic();	
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="296" _type="ShellCommand" date="Mon Dec 04 12:52:31 EST 2023" starttimestamp="1701710826491" timestamp="1524564" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="298" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 12:52:41 EST 2023" docOffset="267" starttimestamp="1701710826491" timestamp="1534538" />
  <Command __id="299" _type="MoveCaretCommand" caretOffset="401" date="Mon Dec 04 12:52:43 EST 2023" docOffset="401" starttimestamp="1701710826491" timestamp="1537154" />
  <Command __id="300" _type="MoveCaretCommand" caretOffset="416" date="Mon Dec 04 12:52:44 EST 2023" docOffset="416" starttimestamp="1701710826491" timestamp="1537686" />
  <Command __id="301" _type="MoveCaretCommand" caretOffset="433" date="Mon Dec 04 12:52:45 EST 2023" docOffset="433" starttimestamp="1701710826491" timestamp="1538737" />
  <Command __id="302" _type="MoveCaretCommand" caretOffset="1030" date="Mon Dec 04 12:52:47 EST 2023" docOffset="1030" starttimestamp="1701710826491" timestamp="1541037" />
  <Command __id="303" _type="MoveCaretCommand" caretOffset="1056" date="Mon Dec 04 12:52:47 EST 2023" docOffset="1056" starttimestamp="1701710826491" timestamp="1541484" />
  <Command __id="304" _type="MoveCaretCommand" caretOffset="434" date="Mon Dec 04 12:52:54 EST 2023" docOffset="434" starttimestamp="1701710826491" timestamp="1547621" />
  <Command __id="305" _type="MoveCaretCommand" caretOffset="529" date="Mon Dec 04 12:52:54 EST 2023" docOffset="529" starttimestamp="1701710826491" timestamp="1548137" />
  <Command __id="306" _type="ShellCommand" date="Mon Dec 04 12:52:56 EST 2023" starttimestamp="1701710826491" timestamp="1550008" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="307" _type="ShellCommand" date="Mon Dec 04 12:53:39 EST 2023" starttimestamp="1701710826491" timestamp="1593216" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="308" _type="ShellCommand" date="Mon Dec 04 12:53:42 EST 2023" starttimestamp="1701710826491" timestamp="1596389" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="309" _type="ShellCommand" date="Mon Dec 04 12:53:58 EST 2023" starttimestamp="1701710826491" timestamp="1611954" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="310" _type="ShellCommand" date="Mon Dec 04 12:53:59 EST 2023" starttimestamp="1701710826491" timestamp="1612824" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="311" _type="ShellCommand" date="Mon Dec 04 13:23:16 EST 2023" starttimestamp="1701710826491" timestamp="3369884" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="316" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:23:22 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3375525" type="Run" />
  <Command __id="317" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:23:22 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3375525" type="Run" />
  <Command __id="319" _type="ShellCommand" date="Mon Dec 04 13:23:22 EST 2023" starttimestamp="1701710826491" timestamp="3375856" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="320" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:23:23 EST 2023" starttimestamp="1701710826491" timestamp="3376542" />
  <Command __id="321" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:23:23 EST 2023" starttimestamp="1701710826491" timestamp="3376555" />
  <Command __id="322" _type="ConsoleOutput" date="Mon Dec 04 13:23:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3386760" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:EnvironmentCallsGetParent,0.0% complete,0.0,2.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="323" _type="ConsoleOutput" date="Mon Dec 04 13:23:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3386761" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="324" _type="ConsoleOutput" date="Mon Dec 04 13:23:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3386768" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="325" _type="ConsoleOutput" date="Mon Dec 04 13:23:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3386770" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,

Test execution time (ms):8
Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):6"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,¶¶Test execution time (ms):8¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="326" _type="ConsoleOutput" date="Mon Dec 04 13:23:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3386797" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):36
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,¶¶Test execution time (ms):8¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):36"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="327" _type="ExceptionCommand" date="Mon Dec 04 13:23:33 EST 2023" starttimestamp="1701710826491" timestamp="3386799" type="Exception">
    <exceptionString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

java.lang.IllegalStateException: No evaluator registered for operator 'SETQ'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="328" _type="ConsoleOutput" date="Mon Dec 04 13:23:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3386801" type="ConsoleOutput">
    <outputString><![CDATA[	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):36"), Diff(INSERT,"	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="329" _type="ConsoleOutput" date="Mon Dec 04 13:23:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3386818" type="ConsoleOutput">
    <outputString><![CDATA[	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):40
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469"), Diff(INSERT,"java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85"), Diff(EQUAL,")¶	at java.desktop/java.awt."), Diff(DELETE,"AWT"), Diff(EQUAL,"Event"), Diff(DELETE,"Multicaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster"), Diff(INSERT,"Queue.dispatchEvent(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"277"), Diff(INSERT,"742"), Diff(EQUAL,")¶	at java.desktop/java.awt."), Diff(DELETE,"Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JCo"), Diff(INSERT,"EventDispatchThread.pu"), Diff(EQUAL,"mp"), Diff(DELETE,"o"), Diff(INSERT,"O"), Diff(EQUAL,"ne"), Diff(DELETE,"nt.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container"), Diff(INSERT,"EventForFilters(EventDispatchThread"), Diff(EQUAL,".java:2"), Diff(DELETE,"26"), Diff(INSERT,"0"), Diff(EQUAL,"3)¶	at java.desktop/java.awt."), Diff(DELETE,"Compon"), Diff(INSERT,"Ev"), Diff(EQUAL,"ent"), Diff(DELETE,".d"), Diff(INSERT,"D"), Diff(EQUAL,"ispatch"), Diff(DELETE,"EventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Compon"), Diff(INSERT,"Thread.pumpEventsForFilter(Ev"), Diff(EQUAL,"ent"), Diff(DELETE,".d"), Diff(INSERT,"D"), Diff(EQUAL,"ispatch"), Diff(DELETE,"Event(Component"), Diff(INSERT,"Thread"), Diff(EQUAL,".java:"), Diff(DELETE,"4843"), Diff(INSERT,"124"), Diff(EQUAL,")¶	at java.desktop/java.awt."), Diff(DELETE,"Lightweigh"), Diff(INSERT,"Even"), Diff(EQUAL,"tDispatch"), Diff(DELETE,"er.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container"), Diff(INSERT,"Thread.pumpEventsForHierarchy(EventDispatchThread"), Diff(EQUAL,".java:"), Diff(DELETE,"4556"), Diff(INSERT,"113"), Diff(EQUAL,")¶	at java.desktop/java.awt."), Diff(DELETE,"LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(INSERT,"EventDispatchThread.pumpEvents(EventDispatchThread"), Diff(EQUAL,".java:"), Diff(DELETE,"2307"), Diff(INSERT,"109"), Diff(EQUAL,")¶	at java.desktop/java.awt."), Diff(DELETE,"Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatch"), Diff(INSERT,"EventDispatchThread.pump"), Diff(EQUAL,"Event"), Diff(DELETE,"Impl"), Diff(INSERT,"s"), Diff(EQUAL,"(Event"), Diff(DELETE,"Queue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(INSERT,"DispatchThread"), Diff(EQUAL,".java:"), Diff(DELETE,"72"), Diff(INSERT,"10"), Diff(EQUAL,"1)¶	at java.desktop/java.awt.Event"), Diff(DELETE,"Queue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(INSERT,"DispatchThread.run(EventDispatchThread"), Diff(EQUAL,".java:9"), Diff(DELETE,"5"), Diff(INSERT,"0"), Diff(EQUAL,")¶"), Diff(DELETE,"	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)"), Diff(INSERT,"¶Test execution time (ms):40"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="330" _type="ExceptionCommand" date="Mon Dec 04 13:23:33 EST 2023" starttimestamp="1701710826491" timestamp="3386822" type="Exception">
    <exceptionString><![CDATA[Test Result:LispSetqChecker,0.0% complete,0.0,10.0,Expected strings:8actual string 

java.lang.IllegalStateException: No evaluator registered for operator 'SETQ'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="297" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 12:52:40 EST 2023" docASTNodeCount="192" docActiveCodeLength="1039" docExpressionCount="124" docLength="1107" projectName="Assignment5" starttimestamp="1701710826491" timestamp="1534487">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EnvironmentImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.evaluator.environment.AbstractEnvironment;import main.lisp.evaluator.function.Function;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class EnvironmentImpl extends AbstractEnvironment{	public EnvironmentImpl(Environment parent) {		super(parent);	}	@Override	public void assign(IdentifierAtom arg0, SExpression arg1) {		put(arg0, arg1);	}	@Override	public void assignFun(IdentifierAtom arg0, Function arg1) {			}	@Override	public Environment copy() {		// TODO Auto-generated method stub		return null;	}	@Override	public Optional<SExpression> lookup(IdentifierAtom arg0) {		Optional<SExpression> retVal = get(arg0);		return (retVal == null && getParent() != null) ? getParent().lookup(arg0) : retVal;	}	@Override	public Optional<Function> lookupFun(IdentifierAtom arg0) {		// TODO Auto-generated method stub		return Optional.empty();	}	@Override	public Environment newChild() {		return new EnvironmentImpl(this);	}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="318" _type="Replace" date="Mon Dec 04 13:23:22 EST 2023" docASTNodeCount="197" docActiveCodeLength="1082" docExpressionCount="125" docLength="1150" endLine="50" insertionLength="1150" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1107" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="3375650">
    <deletedText><![CDATA[package index;

import java.util.Optional;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.environment.AbstractEnvironment;
import main.lisp.evaluator.function.Function;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class EnvironmentImpl extends AbstractEnvironment{

	public EnvironmentImpl(Environment parent) {
		super(parent);
	}

	@Override
	public void assign(IdentifierAtom arg0, SExpression arg1) {
		put(arg0, arg1);
	}

	@Override
	public void assignFun(IdentifierAtom arg0, Function arg1) {
		
	}

	@Override
	public Environment copy() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Optional<SExpression> lookup(IdentifierAtom arg0) {
		Optional<SExpression> retVal = get(arg0);
		return (retVal == null && getParent() != null) ? getParent().lookup(arg0) : retVal;
	}

	@Override
	public Optional<Function> lookupFun(IdentifierAtom arg0) {
		// TODO Auto-generated method stub
		return Optional.empty();
	}

	@Override
	public Environment newChild() {
		return new EnvironmentImpl(this);
	}
	
}
]]></deletedText>
    <insertedText><![CDATA[package index;

import java.util.Optional;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.environment.AbstractEnvironment;
import main.lisp.evaluator.function.Function;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class EnvironmentImpl extends AbstractEnvironment{

	public EnvironmentImpl() {
		super();
	}

	public EnvironmentImpl(Environment parent) {
		super(parent);
	}

	@Override
	public void assign(IdentifierAtom arg0, SExpression arg1) {
		put(arg0, arg1);
	}

	@Override
	public void assignFun(IdentifierAtom arg0, Function arg1) {
		
	}

	@Override
	public Environment copy() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Optional<SExpression> lookup(IdentifierAtom arg0) {
		Optional<SExpression> retVal = get(arg0);
		return (retVal == null && getParent() != null) ? getParent().lookup(arg0) : retVal;
	}

	@Override
	public Optional<Function> lookupFun(IdentifierAtom arg0) {
		// TODO Auto-generated method stub
		return Optional.empty();
	}

	@Override
	public Environment newChild() {
		return new EnvironmentImpl(this);
	}
	
}
]]></insertedText>
  </DocumentChange>
  <Command __id="331" _type="ShellCommand" date="Mon Dec 04 13:23:47 EST 2023" starttimestamp="1701710826491" timestamp="3400538" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="332" _type="MoveCaretCommand" caretOffset="338" date="Mon Dec 04 13:23:47 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="3400616" />
  <Command __id="334" _type="MoveCaretCommand" caretOffset="1290" date="Mon Dec 04 13:23:48 EST 2023" docOffset="1404" starttimestamp="1701710826491" timestamp="3401970" />
  <Command __id="335" _type="MoveCaretCommand" caretOffset="1436" date="Mon Dec 04 13:23:49 EST 2023" docOffset="1550" starttimestamp="1701710826491" timestamp="3403406" />
  <Command __id="336" _type="MoveCaretCommand" caretOffset="1434" date="Mon Dec 04 13:23:50 EST 2023" docOffset="1548" starttimestamp="1701710826491" timestamp="3404255" />
  <Command __id="337" _type="ShellCommand" date="Mon Dec 04 13:23:53 EST 2023" starttimestamp="1701710826491" timestamp="3406768" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="338" _type="LocalChecksRawCommand" date="Mon Dec 04 13:23:53 EST 2023" starttimestamp="1701710826491" timestamp="3406772">
    <CSVRow><![CDATA[65,Mon Dec 04 13:23:33 EST 2023,22,0,LispSetqSuite,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,25,0,true,LispSetqChecker LispSetqChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispSetqChecker-(0.0/10.0) LispSetqChecker2-(0.0/10.0) LoadSetqChecker-(0.0/15.0) LoadSetqChecker2-(0.0/15.0) LoadSetqChecker3-(0.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="339" _type="LocalChecksRawCommand" date="Mon Dec 04 13:23:53 EST 2023" starttimestamp="1701710826491" timestamp="3406772">
    <CSVRow><![CDATA[65,Mon Dec 04 13:23:33 EST 2023,22,0,LispSetqSuite,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,25,0,true,LispSetqChecker LispSetqChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispSetqChecker-(0.0/10.0) LispSetqChecker2-(0.0/10.0) LoadSetqChecker-(0.0/15.0) LoadSetqChecker2-(0.0/15.0) LoadSetqChecker3-(0.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="340" _type="ShellCommand" date="Mon Dec 04 13:23:53 EST 2023" starttimestamp="1701710826491" timestamp="3407264" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="341" _type="ShellCommand" date="Mon Dec 04 13:23:54 EST 2023" starttimestamp="1701710826491" timestamp="3408456" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="342" _type="ShellCommand" date="Mon Dec 04 13:23:55 EST 2023" starttimestamp="1701710826491" timestamp="3409223" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="343" _type="ShellCommand" date="Mon Dec 04 13:23:56 EST 2023" starttimestamp="1701710826491" timestamp="3410143" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="344" _type="ShellCommand" date="Mon Dec 04 13:24:09 EST 2023" starttimestamp="1701710826491" timestamp="3422863" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="345" _type="ShellCommand" date="Mon Dec 04 13:24:10 EST 2023" starttimestamp="1701710826491" timestamp="3424279" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="346" _type="ShellCommand" date="Mon Dec 04 13:24:22 EST 2023" starttimestamp="1701710826491" timestamp="3436469" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="347" _type="ShellCommand" date="Mon Dec 04 13:24:25 EST 2023" starttimestamp="1701710826491" timestamp="3438866" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="348" _type="ShellCommand" date="Mon Dec 04 13:24:30 EST 2023" starttimestamp="1701710826491" timestamp="3444143" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="349" _type="ShellCommand" date="Mon Dec 04 13:24:31 EST 2023" starttimestamp="1701710826491" timestamp="3444920" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="350" _type="ShellCommand" date="Mon Dec 04 13:24:31 EST 2023" starttimestamp="1701710826491" timestamp="3445422" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="351" _type="ShellCommand" date="Mon Dec 04 13:24:33 EST 2023" starttimestamp="1701710826491" timestamp="3447294" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="333" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:23:48 EST 2023" docASTNodeCount="197" docActiveCodeLength="1725" docExpressionCount="136" docLength="1725" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3401923">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}			@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="352" _type="ShellCommand" date="Mon Dec 04 13:24:39 EST 2023" starttimestamp="1701710826491" timestamp="3452661" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="353" _type="Insert" date="Mon Dec 04 13:24:40 EST 2023" docASTNodeCount="197" docActiveCodeLength="1729" docExpressionCount="136" docLength="1729" length="4" offset="1548" repeat="3" starttimestamp="1701710826491" timestamp="3454173" timestamp2="3454630">
    <text><![CDATA[
	pb]]></text>
  </DocumentChange>
  <Command __id="354" _type="InsertStringCommand" date="Mon Dec 04 13:24:40 EST 2023" starttimestamp="1701710826491" timestamp="3454179" timestamp2="3454179">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="356" _type="InsertStringCommand" date="Mon Dec 04 13:24:40 EST 2023" starttimestamp="1701710826491" timestamp="3454459" timestamp2="3454459">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="358" _type="InsertStringCommand" date="Mon Dec 04 13:24:41 EST 2023" starttimestamp="1701710826491" timestamp="3454632" timestamp2="3454632">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="359" _type="Delete" date="Mon Dec 04 13:24:41 EST 2023" docASTNodeCount="197" docActiveCodeLength="1728" docExpressionCount="136" docLength="1728" endLine="29" length="1" offset="1551" startLine="29" starttimestamp="1701710826491" timestamp="3454953">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="360" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:24:41 EST 2023" starttimestamp="1701710826491" timestamp="3454961" />
  <Command __id="362" _type="InsertStringCommand" date="Mon Dec 04 13:24:42 EST 2023" starttimestamp="1701710826491" timestamp="3455647" timestamp2="3455647">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="364" _type="InsertStringCommand" date="Mon Dec 04 13:24:42 EST 2023" starttimestamp="1701710826491" timestamp="3455725" timestamp2="3455725">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="366" _type="InsertStringCommand" date="Mon Dec 04 13:24:42 EST 2023" starttimestamp="1701710826491" timestamp="3455807" timestamp2="3455807">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="368" _type="InsertStringCommand" date="Mon Dec 04 13:24:42 EST 2023" starttimestamp="1701710826491" timestamp="3455871" timestamp2="3455871">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="370" _type="InsertStringCommand" date="Mon Dec 04 13:24:42 EST 2023" starttimestamp="1701710826491" timestamp="3455959" timestamp2="3455959">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="372" _type="InsertStringCommand" date="Mon Dec 04 13:24:42 EST 2023" starttimestamp="1701710826491" timestamp="3455985" timestamp2="3455985">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="374" _type="InsertStringCommand" date="Mon Dec 04 13:24:43 EST 2023" starttimestamp="1701710826491" timestamp="3456538" timestamp2="3456538">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="376" _type="InsertStringCommand" date="Mon Dec 04 13:24:43 EST 2023" starttimestamp="1701710826491" timestamp="3456656" timestamp2="3456656">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="378" _type="InsertStringCommand" date="Mon Dec 04 13:24:43 EST 2023" starttimestamp="1701710826491" timestamp="3456765" timestamp2="3456765">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="380" _type="InsertStringCommand" date="Mon Dec 04 13:24:43 EST 2023" starttimestamp="1701710826491" timestamp="3456825" timestamp2="3456825">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="382" _type="InsertStringCommand" date="Mon Dec 04 13:24:43 EST 2023" starttimestamp="1701710826491" timestamp="3456958" timestamp2="3456958">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="384" _type="InsertStringCommand" date="Mon Dec 04 13:24:43 EST 2023" starttimestamp="1701710826491" timestamp="3457092" timestamp2="3457092">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="386" _type="InsertStringCommand" date="Mon Dec 04 13:24:43 EST 2023" starttimestamp="1701710826491" timestamp="3457153" timestamp2="3457153">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="388" _type="InsertStringCommand" date="Mon Dec 04 13:24:43 EST 2023" starttimestamp="1701710826491" timestamp="3457281" timestamp2="3457281">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="390" _type="InsertStringCommand" date="Mon Dec 04 13:24:43 EST 2023" starttimestamp="1701710826491" timestamp="3457358" timestamp2="3457358">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="392" _type="InsertStringCommand" date="Mon Dec 04 13:24:43 EST 2023" starttimestamp="1701710826491" timestamp="3457420" timestamp2="3457420">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="394" _type="InsertStringCommand" date="Mon Dec 04 13:24:43 EST 2023" starttimestamp="1701710826491" timestamp="3457472" timestamp2="3457472">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="396" _type="InsertStringCommand" date="Mon Dec 04 13:24:44 EST 2023" starttimestamp="1701710826491" timestamp="3457524" timestamp2="3457524">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="398" _type="InsertStringCommand" date="Mon Dec 04 13:24:45 EST 2023" starttimestamp="1701710826491" timestamp="3458835" timestamp2="3458835">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="400" _type="InsertStringCommand" date="Mon Dec 04 13:24:45 EST 2023" starttimestamp="1701710826491" timestamp="3458878" timestamp2="3458878">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="402" _type="InsertStringCommand" date="Mon Dec 04 13:24:45 EST 2023" starttimestamp="1701710826491" timestamp="3459032" timestamp2="3459032">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="404" _type="InsertStringCommand" date="Mon Dec 04 13:24:45 EST 2023" starttimestamp="1701710826491" timestamp="3459467" timestamp2="3459467">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="406" _type="InsertStringCommand" date="Mon Dec 04 13:24:46 EST 2023" starttimestamp="1701710826491" timestamp="3459577" timestamp2="3459577">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="408" _type="InsertStringCommand" date="Mon Dec 04 13:24:46 EST 2023" starttimestamp="1701710826491" timestamp="3459733" timestamp2="3459733">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="410" _type="InsertStringCommand" date="Mon Dec 04 13:24:46 EST 2023" starttimestamp="1701710826491" timestamp="3459849" timestamp2="3459849">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="412" _type="InsertStringCommand" date="Mon Dec 04 13:24:46 EST 2023" starttimestamp="1701710826491" timestamp="3459937" timestamp2="3459937">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="414" _type="InsertStringCommand" date="Mon Dec 04 13:24:46 EST 2023" starttimestamp="1701710826491" timestamp="3460045" timestamp2="3460045">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="416" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:24:46 EST 2023" starttimestamp="1701710826491" timestamp="3460348" />
  <Command __id="417" _type="ShellCommand" date="Mon Dec 04 13:24:47 EST 2023" starttimestamp="1701710826491" timestamp="3460993" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="418" _type="ShellCommand" date="Mon Dec 04 13:24:48 EST 2023" starttimestamp="1701710826491" timestamp="3461964" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="419" _type="ShellCommand" date="Mon Dec 04 13:24:51 EST 2023" starttimestamp="1701710826491" timestamp="3465262" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="420" _type="ShellCommand" date="Mon Dec 04 13:24:52 EST 2023" starttimestamp="1701710826491" timestamp="3466115" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="421" _type="ShellCommand" date="Mon Dec 04 13:24:55 EST 2023" starttimestamp="1701710826491" timestamp="3469432" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="361" _type="Insert" date="Mon Dec 04 13:24:42 EST 2023" docASTNodeCount="199" docActiveCodeLength="1755" docExpressionCount="136" docLength="1755" length="27" offset="1551" repeat="27" starttimestamp="1701710826491" timestamp="3455646" timestamp2="3460044">
    <text><![CDATA[ublic static void register ]]></text>
  </DocumentChange>
  <DocumentChange __id="415" _type="Delete" date="Mon Dec 04 13:24:46 EST 2023" docASTNodeCount="199" docActiveCodeLength="1754" docExpressionCount="136" docLength="1754" endLine="29" length="1" offset="1577" startLine="29" starttimestamp="1701710826491" timestamp="3460344">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="422" _type="ShellCommand" date="Mon Dec 04 13:24:57 EST 2023" starttimestamp="1701710826491" timestamp="3470649" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="424" _type="InsertStringCommand" date="Mon Dec 04 13:25:01 EST 2023" starttimestamp="1701710826491" timestamp="3475084" timestamp2="3475084">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="426" _type="InsertStringCommand" date="Mon Dec 04 13:25:01 EST 2023" starttimestamp="1701710826491" timestamp="3475289" timestamp2="3475289">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="428" _type="InsertStringCommand" date="Mon Dec 04 13:25:02 EST 2023" starttimestamp="1701710826491" timestamp="3475918" timestamp2="3475918">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="430" _type="InsertStringCommand" date="Mon Dec 04 13:25:02 EST 2023" starttimestamp="1701710826491" timestamp="3475999" timestamp2="3475999">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="432" _type="InsertStringCommand" date="Mon Dec 04 13:25:02 EST 2023" starttimestamp="1701710826491" timestamp="3476099" timestamp2="3476099">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="434" _type="InsertStringCommand" date="Mon Dec 04 13:25:02 EST 2023" starttimestamp="1701710826491" timestamp="3476171" timestamp2="3476171">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="436" _type="InsertStringCommand" date="Mon Dec 04 13:25:02 EST 2023" starttimestamp="1701710826491" timestamp="3476338" timestamp2="3476338">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="438" _type="InsertStringCommand" date="Mon Dec 04 13:25:03 EST 2023" starttimestamp="1701710826491" timestamp="3476623" timestamp2="3476623">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="439" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 13:25:03 EST 2023" starttimestamp="1701710826491" timestamp="3477287" />
  <Command __id="441" _type="InsertStringCommand" date="Mon Dec 04 13:25:04 EST 2023" starttimestamp="1701710826491" timestamp="3478016" timestamp2="3478016">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="443" _type="InsertStringCommand" date="Mon Dec 04 13:25:04 EST 2023" starttimestamp="1701710826491" timestamp="3478178" timestamp2="3478178">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="423" _type="Insert" date="Mon Dec 04 13:25:01 EST 2023" docASTNodeCount="203" docActiveCodeLength="1771" docExpressionCount="137" docLength="1771" length="17" offset="1577" repeat="10" starttimestamp="1701710826491" timestamp="3475081" timestamp2="3478176">
    <text><![CDATA[Advance() {
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="447" _type="Replace" date="Mon Dec 04 13:25:06 EST 2023" docASTNodeCount="214" docActiveCodeLength="1820" docExpressionCount="147" docLength="1820" endLine="30" insertionLength="51" int_docASTNodeCount="203" int_docActiveCodeLength="1769" int_docExpressionCount="137" int_docLength="1769" length="2" offset="1589" startLine="30" starttimestamp="1701710826491" timestamp="3480105">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		import main.lisp.parser.terms.ExpressionFactory;
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="449" _type="Replace" date="Mon Dec 04 13:25:07 EST 2023" docASTNodeCount="203" docActiveCodeLength="1771" docExpressionCount="137" docLength="1771" endLine="31" insertionLength="2" int_docASTNodeCount="203" int_docActiveCodeLength="1769" int_docExpressionCount="137" int_docLength="1769" length="51" offset="1589" startLine="30" starttimestamp="1701710826491" timestamp="3480804">
    <deletedText><![CDATA[		import main.lisp.parser.terms.ExpressionFactory;
]]></deletedText>
    <insertedText><![CDATA[		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="457" _type="Replace" date="Mon Dec 04 13:25:09 EST 2023" docASTNodeCount="213" docActiveCodeLength="1861" docExpressionCount="145" docLength="1861" endLine="30" insertionLength="92" int_docASTNodeCount="203" int_docActiveCodeLength="1769" int_docExpressionCount="137" int_docLength="1769" length="2" offset="1589" startLine="30" starttimestamp="1701710826491" timestamp="3482935">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());
]]></insertedText>
  </DocumentChange>
  <Command __id="444" _type="MoveCaretCommand" caretOffset="1198" date="Mon Dec 04 13:25:05 EST 2023" docOffset="1312" starttimestamp="1701710826491" timestamp="3479428" />
  <Command __id="445" _type="InsertStringCommand" date="Mon Dec 04 13:25:05 EST 2023" starttimestamp="1701710826491" timestamp="3479488" timestamp2="3479488">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="446" _type="MoveCaretCommand" caretOffset="1477" date="Mon Dec 04 13:25:06 EST 2023" docOffset="1591" starttimestamp="1701710826491" timestamp="3480027" />
  <Command __id="448" _type="PasteCommand" date="Mon Dec 04 13:25:06 EST 2023" starttimestamp="1701710826491" timestamp="3480112" />
  <Command __id="450" _type="UndoCommand" date="Mon Dec 04 13:25:07 EST 2023" starttimestamp="1701710826491" timestamp="3480810" />
  <Command __id="451" _type="MoveCaretCommand" caretOffset="1195" date="Mon Dec 04 13:25:07 EST 2023" docOffset="1309" starttimestamp="1701710826491" timestamp="3481275" />
  <Command __id="452" _type="MoveCaretCommand" caretOffset="1191" date="Mon Dec 04 13:25:08 EST 2023" docOffset="1305" starttimestamp="1701710826491" timestamp="3481729" />
  <Command __id="453" _type="SelectTextCommand" caretOffset="1194" date="Mon Dec 04 13:25:08 EST 2023" end="1194" start="1191" starttimestamp="1701710826491" timestamp="3481863" />
  <Command __id="454" _type="SelectTextCommand" caretOffset="1248" date="Mon Dec 04 13:25:08 EST 2023" end="1248" start="1156" starttimestamp="1701710826491" timestamp="3482024" />
  <Command __id="455" _type="CopyCommand" date="Mon Dec 04 13:25:08 EST 2023" starttimestamp="1701710826491" timestamp="3482217" />
  <Command __id="456" _type="MoveCaretCommand" caretOffset="1477" date="Mon Dec 04 13:25:09 EST 2023" docOffset="1591" starttimestamp="1701710826491" timestamp="3482845" />
  <Command __id="458" _type="PasteCommand" date="Mon Dec 04 13:25:09 EST 2023" starttimestamp="1701710826491" timestamp="3482945" />
  <Command __id="460" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:25:10 EST 2023" starttimestamp="1701710826491" timestamp="3484079" />
  <DocumentChange __id="459" _type="Delete" date="Mon Dec 04 13:25:10 EST 2023" docASTNodeCount="213" docActiveCodeLength="1860" docExpressionCount="145" docLength="1860" endLine="31" length="1" offset="1680" startLine="30" starttimestamp="1701710826491" timestamp="3484073">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="463" _type="Replace" date="Mon Dec 04 13:25:11 EST 2023" docASTNodeCount="213" docActiveCodeLength="1858" docExpressionCount="145" docLength="1858" endLine="30" insertionLength="1" int_docASTNodeCount="213" int_docActiveCodeLength="1857" int_docExpressionCount="145" int_docLength="1857" length="3" offset="1654" startLine="30" starttimestamp="1701710826491" timestamp="3485478">
    <deletedText><![CDATA[AND]]></deletedText>
    <insertedText><![CDATA[S]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="465" _type="Insert" date="Mon Dec 04 13:25:12 EST 2023" docASTNodeCount="213" docActiveCodeLength="1861" docExpressionCount="145" docLength="1861" length="3" offset="1655" repeat="3" starttimestamp="1701710826491" timestamp="3485571" timestamp2="3485821">
    <text><![CDATA[ETQ]]></text>
  </DocumentChange>
  <DocumentChange __id="473" _type="Replace" date="Mon Dec 04 13:25:15 EST 2023" docASTNodeCount="213" docActiveCodeLength="1850" docExpressionCount="145" docLength="1850" endLine="30" insertionLength="1" int_docASTNodeCount="203" int_docActiveCodeLength="1849" int_docExpressionCount="137" int_docLength="1849" length="12" offset="1665" startLine="30" starttimestamp="1701710826491" timestamp="3488716">
    <deletedText><![CDATA[AndEvaluator]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="475" _type="Insert" date="Mon Dec 04 13:25:15 EST 2023" docASTNodeCount="213" docActiveCodeLength="1852" docExpressionCount="145" docLength="1852" length="2" offset="1666" repeat="2" starttimestamp="1701710826491" timestamp="3488858" timestamp2="3488995">
    <text><![CDATA[et]]></text>
  </DocumentChange>
  <DocumentChange __id="479" _type="Delete" date="Mon Dec 04 13:25:15 EST 2023" docASTNodeCount="203" docActiveCodeLength="1849" docExpressionCount="137" docLength="1849" endLine="30" length="3" offset="1665" repeat="3" startLine="30" starttimestamp="1701710826491" timestamp="3489195" timestamp2="3489400">
    <text><![CDATA[set]]></text>
  </DocumentChange>
  <DocumentChange __id="485" _type="Insert" date="Mon Dec 04 13:25:16 EST 2023" docASTNodeCount="213" docActiveCodeLength="1853" docExpressionCount="145" docLength="1853" length="4" offset="1665" repeat="4" starttimestamp="1701710826491" timestamp="3489536" timestamp2="3489958">
    <text><![CDATA[Setq]]></text>
  </DocumentChange>
  <Command __id="461" _type="MoveCaretCommand" caretOffset="1541" date="Mon Dec 04 13:25:11 EST 2023" docOffset="1655" starttimestamp="1701710826491" timestamp="3485178" />
  <Command __id="462" _type="SelectTextCommand" caretOffset="1543" date="Mon Dec 04 13:25:11 EST 2023" end="1543" start="1540" starttimestamp="1701710826491" timestamp="3485328" />
  <Command __id="464" _type="InsertStringCommand" date="Mon Dec 04 13:25:11 EST 2023" starttimestamp="1701710826491" timestamp="3485484" timestamp2="3485484">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="466" _type="InsertStringCommand" date="Mon Dec 04 13:25:12 EST 2023" starttimestamp="1701710826491" timestamp="3485573" timestamp2="3485573">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="468" _type="InsertStringCommand" date="Mon Dec 04 13:25:12 EST 2023" starttimestamp="1701710826491" timestamp="3485709" timestamp2="3485709">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="470" _type="InsertStringCommand" date="Mon Dec 04 13:25:12 EST 2023" starttimestamp="1701710826491" timestamp="3485823" timestamp2="3485823">
    <data><![CDATA[Q]]></data>
  </Command>
  <Command __id="471" _type="MoveCaretCommand" caretOffset="1557" date="Mon Dec 04 13:25:13 EST 2023" docOffset="1671" starttimestamp="1701710826491" timestamp="3486545" />
  <Command __id="472" _type="SelectTextCommand" caretOffset="1563" date="Mon Dec 04 13:25:13 EST 2023" end="1563" start="1551" starttimestamp="1701710826491" timestamp="3486662" />
  <Command __id="474" _type="InsertStringCommand" date="Mon Dec 04 13:25:15 EST 2023" starttimestamp="1701710826491" timestamp="3488722" timestamp2="3488722">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="476" _type="InsertStringCommand" date="Mon Dec 04 13:25:15 EST 2023" starttimestamp="1701710826491" timestamp="3488863" timestamp2="3488863">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="478" _type="InsertStringCommand" date="Mon Dec 04 13:25:15 EST 2023" starttimestamp="1701710826491" timestamp="3488999" timestamp2="3488999">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="480" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:25:15 EST 2023" starttimestamp="1701710826491" timestamp="3489198" />
  <Command __id="482" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:25:15 EST 2023" starttimestamp="1701710826491" timestamp="3489299" />
  <Command __id="484" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:25:15 EST 2023" starttimestamp="1701710826491" timestamp="3489403" />
  <Command __id="486" _type="InsertStringCommand" date="Mon Dec 04 13:25:16 EST 2023" starttimestamp="1701710826491" timestamp="3489539" timestamp2="3489539">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="488" _type="InsertStringCommand" date="Mon Dec 04 13:25:16 EST 2023" starttimestamp="1701710826491" timestamp="3489786" timestamp2="3489786">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="490" _type="InsertStringCommand" date="Mon Dec 04 13:25:16 EST 2023" starttimestamp="1701710826491" timestamp="3489892" timestamp2="3489892">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="492" _type="InsertStringCommand" date="Mon Dec 04 13:25:16 EST 2023" starttimestamp="1701710826491" timestamp="3489961" timestamp2="3489961">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="494" _type="InsertStringCommand" date="Mon Dec 04 13:25:18 EST 2023" starttimestamp="1701710826491" timestamp="3491967" timestamp2="3491967">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="496" _type="InsertStringCommand" date="Mon Dec 04 13:25:18 EST 2023" starttimestamp="1701710826491" timestamp="3492229" timestamp2="3492229">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="498" _type="InsertStringCommand" date="Mon Dec 04 13:25:18 EST 2023" starttimestamp="1701710826491" timestamp="3492297" timestamp2="3492297">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="500" _type="InsertStringCommand" date="Mon Dec 04 13:25:19 EST 2023" starttimestamp="1701710826491" timestamp="3493068" timestamp2="3493068">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="502" _type="InsertStringCommand" date="Mon Dec 04 13:25:19 EST 2023" starttimestamp="1701710826491" timestamp="3493160" timestamp2="3493160">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="504" _type="InsertStringCommand" date="Mon Dec 04 13:25:19 EST 2023" starttimestamp="1701710826491" timestamp="3493269" timestamp2="3493269">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="506" _type="InsertStringCommand" date="Mon Dec 04 13:25:19 EST 2023" starttimestamp="1701710826491" timestamp="3493352" timestamp2="3493352">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="508" _type="InsertStringCommand" date="Mon Dec 04 13:25:19 EST 2023" starttimestamp="1701710826491" timestamp="3493461" timestamp2="3493461">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="510" _type="InsertStringCommand" date="Mon Dec 04 13:25:20 EST 2023" starttimestamp="1701710826491" timestamp="3493519" timestamp2="3493519">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="511" _type="MoveCaretCommand" caretOffset="1474" date="Mon Dec 04 13:25:20 EST 2023" docOffset="1588" starttimestamp="1701710826491" timestamp="3494040" />
  <Command __id="515" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:26 EST 2023" starttimestamp="1701710826491" timestamp="3500165" />
  <Command __id="516" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:26 EST 2023" starttimestamp="1701710826491" timestamp="3500189" />
  <Command __id="517" _type="ShellCommand" date="Mon Dec 04 13:25:38 EST 2023" starttimestamp="1701710826491" timestamp="3511677" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="518" _type="ShellCommand" date="Mon Dec 04 13:25:44 EST 2023" starttimestamp="1701710826491" timestamp="3518017" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="519" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521756" />
  <Command __id="520" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521894" />
  <Command __id="521" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521894" />
  <Command __id="522" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521894" />
  <Command __id="523" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521895" />
  <Command __id="524" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521895" />
  <Command __id="525" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521895" />
  <Command __id="526" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521895" />
  <Command __id="527" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521895" />
  <Command __id="528" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521896" />
  <Command __id="529" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521909" />
  <Command __id="530" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521914" />
  <Command __id="531" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:25:48 EST 2023" starttimestamp="1701710826491" timestamp="3521915" />
  <Command __id="532" _type="MoveCaretCommand" caretOffset="1117" date="Mon Dec 04 13:25:50 EST 2023" docOffset="1231" starttimestamp="1701710826491" timestamp="3524051" />
  <Command __id="533" _type="MoveCaretCommand" caretOffset="1115" date="Mon Dec 04 13:25:51 EST 2023" docOffset="1229" starttimestamp="1701710826491" timestamp="3525428" />
  <Command __id="534" _type="InsertStringCommand" date="Mon Dec 04 13:25:52 EST 2023" starttimestamp="1701710826491" timestamp="3525656" timestamp2="3525656">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="539" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:25:56 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3529778" type="Run" />
  <Command __id="540" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:25:56 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3529779" type="Run" />
  <Command __id="541" _type="ShellCommand" date="Mon Dec 04 13:25:56 EST 2023" starttimestamp="1701710826491" timestamp="3530084" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="542" _type="ConsoleOutput" date="Mon Dec 04 13:26:00 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3534177" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)¶	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"4"), Diff(EQUAL,"0¶")]]]></diff>
  </Command>
  <Command __id="543" _type="ConsoleOutput" date="Mon Dec 04 13:26:00 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3534178" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="544" _type="ConsoleOutput" date="Mon Dec 04 13:26:00 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3534184" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="545" _type="ConsoleOutput" date="Mon Dec 04 13:26:00 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3534185" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):6"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="546" _type="ConsoleOutput" date="Mon Dec 04 13:26:00 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3534186" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="547" _type="ConsoleOutput" date="Mon Dec 04 13:26:00 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3534186" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="548" _type="ConsoleOutput" date="Mon Dec 04 13:26:00 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3534213" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):34
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):34"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="549" _type="ExceptionCommand" date="Mon Dec 04 13:26:00 EST 2023" starttimestamp="1701710826491" timestamp="3534214" type="Exception">
    <exceptionString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

java.lang.IllegalStateException: No evaluator registered for operator 'SETQ'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="550" _type="ConsoleOutput" date="Mon Dec 04 13:26:00 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3534215" type="ConsoleOutput">
    <outputString><![CDATA[	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):34"), Diff(INSERT,"	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="551" _type="ConsoleOutput" date="Mon Dec 04 13:26:00 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3534232" type="ConsoleOutput">
    <outputString><![CDATA[	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunn"), Diff(INSERT,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(EQUAL,"er.java:2"), Diff(DELETE,"68"), Diff(INSERT,"77"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.run(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.Component.processMouseEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"63"), Diff(INSERT,"8"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTes"), Diff(INSERT,"java.desktop/javax.swing.JComponent.processMouseEvent(JComponen"), Diff(EQUAL,"t.java:3"), Diff(DELETE,"17"), Diff(INSERT,"342"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite"), Diff(INSERT,"java.desktop/java.awt.Component.processEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"348"), Diff(INSERT,"6400"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite"), Diff(INSERT,"java.desktop/java.awt.Container.processEvent(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"191"), Diff(INSERT,"2263"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"6"), Diff(EQUAL,"2"), Diff(INSERT,"321"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.Component.dispatchEvent(Component"), Diff(EQUAL,".java:"), Diff(INSERT,"48"), Diff(EQUAL,"43)¶	at java."), Diff(DELETE,"base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod"), Diff(INSERT,"desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"270"), Diff(INSERT,"4918"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(INSERT,"java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Contain"), Diff(EQUAL,"er.java:"), Diff(DELETE,"1444"), Diff(INSERT,"4556"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndo"), Diff(INSERT,"java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Contain"), Diff(EQUAL,"er.java:"), Diff(DELETE,"99"), Diff(INSERT,"4488"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManag"), Diff(INSERT,"java.desktop/java.awt.Container.dispatchEventImpl(Contain"), Diff(EQUAL,"er.java:"), Diff(DELETE,"1906"), Diff(INSERT,"2307"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager"), Diff(INSERT,"java.desktop/java.awt.Window.dispatchEventImpl(Window"), Diff(EQUAL,".java:"), Diff(DELETE,"1701"), Diff(INSERT,"2772"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager"), Diff(INSERT,"java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"1585"), Diff(INSERT,"4843"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager"), Diff(INSERT,"java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"1538"), Diff(INSERT,"772"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager"), Diff(INSERT,"java.desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"153"), Diff(INSERT,"72"), Diff(EQUAL,"1)¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager"), Diff(INSERT,"java.desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"1406"), Diff(INSERT,"715"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter"), Diff(INSERT,"java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(DELETE,"469"), Diff(INSERT,"85"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster"), Diff(INSERT,"base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(DELETE,"278"), Diff(INSERT,"95"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="552" _type="ExceptionCommand" date="Mon Dec 04 13:26:00 EST 2023" starttimestamp="1701710826491" timestamp="3534237" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):39
Test Result:LispSetqChecker,0.0% complete,0.0,10.0,Expected strings:8actual string 

java.lang.IllegalStateException: No evaluator registered for operator 'SETQ'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <DocumentChange __id="493" _type="Insert" date="Mon Dec 04 13:25:18 EST 2023" docASTNodeCount="213" docActiveCodeLength="1862" docExpressionCount="145" docLength="1862" length="9" offset="1669" repeat="9" starttimestamp="1701710826491" timestamp="3491964" timestamp2="3493515">
    <text><![CDATA[Evaluator]]></text>
  </DocumentChange>
  <DocumentChange __id="558" _type="Insert" date="Mon Dec 04 13:26:09 EST 2023" docASTNodeCount="214" docActiveCodeLength="1878" docExpressionCount="145" docLength="1878" length="16" offset="1855" repeat="2" starttimestamp="1701710826491" timestamp="3543027" timestamp2="3543144">
    <text><![CDATA[]registerAdvance]]></text>
  </DocumentChange>
  <DocumentChange __id="562" _type="Delete" date="Mon Dec 04 13:26:10 EST 2023" docASTNodeCount="213" docActiveCodeLength="1862" docExpressionCount="145" docLength="1862" endLine="42" length="16" offset="1855" repeat="2" startLine="42" starttimestamp="1701710826491" timestamp="3543700" timestamp2="3544088">
    <text><![CDATA[]registerAdvance]]></text>
  </DocumentChange>
  <DocumentChange __id="566" _type="Insert" date="Mon Dec 04 13:26:11 EST 2023" docASTNodeCount="213" docActiveCodeLength="1865" docExpressionCount="145" docLength="1865" length="3" offset="1855" starttimestamp="1701710826491" timestamp="3544929">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="568" _type="Replace" date="Mon Dec 04 13:26:11 EST 2023" docASTNodeCount="215" docActiveCodeLength="1880" docExpressionCount="146" docLength="1880" endLine="43" insertionLength="17" int_docASTNodeCount="213" int_docActiveCodeLength="1863" int_docExpressionCount="145" int_docLength="1863" length="2" offset="1856" startLine="43" starttimestamp="1701710826491" timestamp="3545066">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		registerAdvance]]></insertedText>
  </DocumentChange>
  <Command __id="553" _type="ShellCommand" date="Mon Dec 04 13:26:08 EST 2023" starttimestamp="1701710826491" timestamp="3541862" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="554" _type="MoveCaretCommand" caretOffset="1463" date="Mon Dec 04 13:26:08 EST 2023" docOffset="1577" starttimestamp="1701710826491" timestamp="3541927" />
  <Command __id="555" _type="SelectTextCommand" caretOffset="1470" date="Mon Dec 04 13:26:08 EST 2023" end="1470" start="1455" starttimestamp="1701710826491" timestamp="3542060" />
  <Command __id="556" _type="CopyCommand" date="Mon Dec 04 13:26:08 EST 2023" starttimestamp="1701710826491" timestamp="3542134" />
  <Command __id="557" _type="MoveCaretCommand" caretOffset="1741" date="Mon Dec 04 13:26:09 EST 2023" docOffset="1855" starttimestamp="1701710826491" timestamp="3542798" />
  <Command __id="559" _type="InsertStringCommand" date="Mon Dec 04 13:26:09 EST 2023" starttimestamp="1701710826491" timestamp="3543030" timestamp2="3543030">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="561" _type="PasteCommand" date="Mon Dec 04 13:26:09 EST 2023" starttimestamp="1701710826491" timestamp="3543146" />
  <Command __id="563" _type="UndoCommand" date="Mon Dec 04 13:26:10 EST 2023" starttimestamp="1701710826491" timestamp="3543706" />
  <Command __id="565" _type="UndoCommand" date="Mon Dec 04 13:26:10 EST 2023" starttimestamp="1701710826491" timestamp="3544096" />
  <Command __id="567" _type="InsertStringCommand" date="Mon Dec 04 13:26:11 EST 2023" starttimestamp="1701710826491" timestamp="3544934" timestamp2="3544934">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="569" _type="PasteCommand" date="Mon Dec 04 13:26:11 EST 2023" starttimestamp="1701710826491" timestamp="3545071" />
  <Command __id="571" _type="InsertStringCommand" date="Mon Dec 04 13:26:12 EST 2023" starttimestamp="1701710826491" timestamp="3546077" timestamp2="3546077">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="572" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 13:26:13 EST 2023" starttimestamp="1701710826491" timestamp="3546540" />
  <Command __id="574" _type="InsertStringCommand" date="Mon Dec 04 13:26:13 EST 2023" starttimestamp="1701710826491" timestamp="3546805" timestamp2="3546805">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="575" _type="MoveCaretCommand" caretOffset="1722" date="Mon Dec 04 13:26:14 EST 2023" docOffset="1836" starttimestamp="1701710826491" timestamp="3547546" />
  <Command __id="576" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 13:26:14 EST 2023" starttimestamp="1701710826491" timestamp="3547671" />
  <Command __id="577" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:26:14 EST 2023" starttimestamp="1701710826491" timestamp="3547772" />
  <Command __id="578" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:26:14 EST 2023" starttimestamp="1701710826491" timestamp="3547786" />
  <Command __id="583" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:26:17 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3551456" type="Run" />
  <Command __id="584" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:26:17 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3551456" type="Run" />
  <Command __id="585" _type="ShellCommand" date="Mon Dec 04 13:26:18 EST 2023" starttimestamp="1701710826491" timestamp="3551756" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="601" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:26:36 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3569554" type="Run" />
  <Command __id="602" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:26:36 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3569554" type="Run" />
  <Command __id="603" _type="LocalChecksRawCommand" date="Mon Dec 04 13:26:36 EST 2023" starttimestamp="1701710826491" timestamp="3569556">
    <CSVRow><![CDATA[67,Mon Dec 04 13:26:21 EST 2023,23,1,LispSetqSuite,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker+ ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,27,0,true,LispSetqChecker LispSetqChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispSetqChecker-(10.0/10.0) LispSetqChecker2-(0.0/10.0) LoadSetqChecker-(0.0/15.0) LoadSetqChecker2-(0.0/15.0) LoadSetqChecker3-(0.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="604" _type="LocalChecksRawCommand" date="Mon Dec 04 13:26:36 EST 2023" starttimestamp="1701710826491" timestamp="3569556">
    <CSVRow><![CDATA[67,Mon Dec 04 13:26:21 EST 2023,23,1,LispSetqSuite,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker+ ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,27,0,true,LispSetqChecker LispSetqChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispSetqChecker-(10.0/10.0) LispSetqChecker2-(0.0/10.0) LoadSetqChecker-(0.0/15.0) LoadSetqChecker2-(0.0/15.0) LoadSetqChecker3-(0.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="605" _type="ShellCommand" date="Mon Dec 04 13:26:36 EST 2023" starttimestamp="1701710826491" timestamp="3569579" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="606" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:26:36 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3570479" type="Run" />
  <Command __id="607" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:26:36 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3570479" type="Run" />
  <Command __id="608" _type="ShellCommand" date="Mon Dec 04 13:26:37 EST 2023" starttimestamp="1701710826491" timestamp="3570778" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="609" _type="ConsoleOutput" date="Mon Dec 04 13:26:41 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3574979" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test execution time (ms):0¶"), Diff(DELETE,"Test Result:LoadSetqChecker3,0.0% complete,0.0,15.0,Expecting in test file a call to ( B  ) with result 42¶")]]]></diff>
  </Command>
  <Command __id="610" _type="ConsoleOutput" date="Mon Dec 04 13:26:41 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3574982" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="611" _type="ConsoleOutput" date="Mon Dec 04 13:26:41 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3574985" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="612" _type="ConsoleOutput" date="Mon Dec 04 13:26:41 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3574986" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):5"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="613" _type="ConsoleOutput" date="Mon Dec 04 13:26:41 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3574987" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="614" _type="ConsoleOutput" date="Mon Dec 04 13:26:41 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3574987" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):6"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="615" _type="ConsoleOutput" date="Mon Dec 04 13:26:41 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3575014" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):34
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):34"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="616" _type="ConsoleOutput" date="Mon Dec 04 13:26:41 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3575016" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

Test execution time (ms):35
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):3"), Diff(DELETE,"4"), Diff(INSERT,"5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="617" _type="ConsoleOutput" date="Mon Dec 04 13:26:41 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3575017" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispSetqChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:L"), Diff(DELETE,"oadLisp"), Diff(INSERT,"ispSetq"), Diff(EQUAL,"Checker,100.0% complete,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,¶"), Diff(DELETE,"¶Test execution time (ms):35¶")]]]></diff>
  </Command>
  <Command __id="618" _type="ConsoleOutput" date="Mon Dec 04 13:26:48 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3581733" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):5
Test Result:LispSetqChecker2,0.0% complete,0.0,10.0,Expected strings:(8 . 3)actual string (C . 3)
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶Test execution time (ms):5¶"), Diff(EQUAL,"Test Result:LispSetqChecker"), Diff(INSERT,"2"), Diff(EQUAL,","), Diff(DELETE,"10"), Diff(EQUAL,"0.0% complete,"), Diff(DELETE,"1"), Diff(EQUAL,"0.0,10.0,"), Diff(INSERT,"Expected strings:(8 . 3)actual string (C . 3)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="619" _type="ShellCommand" date="Mon Dec 04 13:26:56 EST 2023" starttimestamp="1701710826491" timestamp="3589524" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="621" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 13:26:56 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="3589642" />
  <Command __id="623" _type="MoveCaretCommand" caretOffset="1722" date="Mon Dec 04 13:26:57 EST 2023" docOffset="1836" starttimestamp="1701710826491" timestamp="3590621" />
  <Command __id="624" _type="ShellCommand" date="Mon Dec 04 13:26:58 EST 2023" starttimestamp="1701710826491" timestamp="3592211" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="625" _type="LocalChecksRawCommand" date="Mon Dec 04 13:26:58 EST 2023" starttimestamp="1701710826491" timestamp="3592213">
    <CSVRow><![CDATA[68,Mon Dec 04 13:26:41 EST 2023,23,0,LispSetqChecker,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,28,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispSetqChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="626" _type="LocalChecksRawCommand" date="Mon Dec 04 13:26:58 EST 2023" starttimestamp="1701710826491" timestamp="3592213">
    <CSVRow><![CDATA[68,Mon Dec 04 13:26:41 EST 2023,23,0,LispSetqChecker,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,28,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispSetqChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="627" _type="LocalChecksRawCommand" date="Mon Dec 04 13:26:58 EST 2023" starttimestamp="1701710826491" timestamp="3592213">
    <CSVRow><![CDATA[69,Mon Dec 04 13:26:48 EST 2023,23,0,LispSetqChecker2,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,28,1,false, , , ,LispSetqChecker2-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="628" _type="LocalChecksRawCommand" date="Mon Dec 04 13:26:58 EST 2023" starttimestamp="1701710826491" timestamp="3592213">
    <CSVRow><![CDATA[69,Mon Dec 04 13:26:48 EST 2023,23,0,LispSetqChecker2,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,28,1,false, , , ,LispSetqChecker2-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="629" _type="BalloonCommand" date="Mon Dec 04 13:27:06 EST 2023" message="*******************************************
Worked 9 minutes(fixed)/60 minutes(context based) from
Mon Dec 04 12:27:06 EST 2023 to Mon Dec 04 13:26:58 EST 2023
Edited 1 Projects: 
	Assignment5
Edited 1 Files: 
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java
Number of insert: 88
Number of delete: 22
" starttimestamp="1701710826491" timestamp="3600049">
    <fineGrainedWorkTime><![CDATA[60]]></fineGrainedWorkTime>
    <insert><![CDATA[88]]></insert>
    <startTime><![CDATA[1701710826535]]></startTime>
    <endTime><![CDATA[1701714418704]]></endTime>
    <workTime><![CDATA[9]]></workTime>
    <delete><![CDATA[22]]></delete>
  </Command>
  <Command __id="630" _type="ShellCommand" date="Mon Dec 04 13:27:06 EST 2023" starttimestamp="1701710826491" timestamp="3600138" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="631" _type="MoveCaretCommand" caretOffset="1585" date="Mon Dec 04 13:27:06 EST 2023" docOffset="1699" starttimestamp="1701710826491" timestamp="3600173" />
  <Command __id="632" _type="InsertStringCommand" date="Mon Dec 04 13:27:06 EST 2023" starttimestamp="1701710826491" timestamp="3600263" timestamp2="3600263">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="633" _type="ShellCommand" date="Mon Dec 04 13:27:07 EST 2023" starttimestamp="1701710826491" timestamp="3600818" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="634" _type="ShellCommand" date="Mon Dec 04 13:27:08 EST 2023" starttimestamp="1701710826491" timestamp="3601891" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="639" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:27:11 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3605365" type="Run" />
  <Command __id="640" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:27:11 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3605366" type="Run" />
  <Command __id="641" _type="ShellCommand" date="Mon Dec 04 13:27:12 EST 2023" starttimestamp="1701710826491" timestamp="3605666" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="642" _type="ConsoleOutput" date="Mon Dec 04 13:27:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3610925" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"5¶Test Result:LispSetqChecker2,0.0% complete,0.0,10.0,Expected strings:(8 . 3)actual string (C . 3)"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="643" _type="ConsoleOutput" date="Mon Dec 04 13:27:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3610926" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="644" _type="ConsoleOutput" date="Mon Dec 04 13:27:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3610932" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="645" _type="ConsoleOutput" date="Mon Dec 04 13:27:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3610933" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):6"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="646" _type="ConsoleOutput" date="Mon Dec 04 13:27:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3610933" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="647" _type="ConsoleOutput" date="Mon Dec 04 13:27:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3610934" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="648" _type="ConsoleOutput" date="Mon Dec 04 13:27:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3610960" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):34
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):34"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="649" _type="ConsoleOutput" date="Mon Dec 04 13:27:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3610962" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,


Test execution time (ms):36
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶¶"), Diff(EQUAL,"Test execution time (ms):3"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="650" _type="ConsoleOutput" date="Mon Dec 04 13:27:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3610964" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispSetqChecker,0.0% complete,0.0,10.0,Expected strings:8actual string (C 8)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:L"), Diff(DELETE,"oadLisp"), Diff(INSERT,"ispSetq"), Diff(EQUAL,"Checker,"), Diff(DELETE,"10"), Diff(EQUAL,"0.0% complete,0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(DELETE,"¶¶¶Test execution time (ms):36"), Diff(INSERT,"Expected strings:8actual string (C 8)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="652" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:27:43 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3637154" type="Run" />
  <Command __id="653" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:27:43 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3637154" type="Run" />
  <Command __id="654" _type="LocalChecksRawCommand" date="Mon Dec 04 13:27:43 EST 2023" starttimestamp="1701710826491" timestamp="3637156">
    <CSVRow><![CDATA[70,Mon Dec 04 13:27:17 EST 2023,22,-1,LispSetqChecker,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker- LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,29,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispSetqChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="655" _type="LocalChecksRawCommand" date="Mon Dec 04 13:27:43 EST 2023" starttimestamp="1701710826491" timestamp="3637156">
    <CSVRow><![CDATA[70,Mon Dec 04 13:27:17 EST 2023,22,-1,LispSetqChecker,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker- LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,29,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispSetqChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="656" _type="LocalChecksRawCommand" date="Mon Dec 04 13:27:43 EST 2023" starttimestamp="1701710826491" timestamp="3637156">
    <CSVRow><![CDATA[71,Mon Dec 04 13:27:26 EST 2023,22,0,LispSetqChecker2,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,29,1,false, , , ,LispSetqChecker2-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="657" _type="LocalChecksRawCommand" date="Mon Dec 04 13:27:43 EST 2023" starttimestamp="1701710826491" timestamp="3637156">
    <CSVRow><![CDATA[71,Mon Dec 04 13:27:26 EST 2023,22,0,LispSetqChecker2,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker ListChecker ListChecker2 LoadLispChecker MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker LispSetqChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,29,1,false, , , ,LispSetqChecker2-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="658" _type="ShellCommand" date="Mon Dec 04 13:27:43 EST 2023" starttimestamp="1701710826491" timestamp="3637157" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="659" _type="ShellCommand" date="Mon Dec 04 13:27:43 EST 2023" starttimestamp="1701710826491" timestamp="3637240" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="660" _type="ShellCommand" date="Mon Dec 04 13:27:44 EST 2023" starttimestamp="1701710826491" timestamp="3637967" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="661" _type="ShellCommand" date="Mon Dec 04 13:27:45 EST 2023" starttimestamp="1701710826491" timestamp="3639057" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="662" _type="ShellCommand" date="Mon Dec 04 13:27:52 EST 2023" starttimestamp="1701710826491" timestamp="3646311" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="663" _type="ShellCommand" date="Mon Dec 04 13:27:54 EST 2023" starttimestamp="1701710826491" timestamp="3647592" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="664" _type="ShellCommand" date="Mon Dec 04 13:28:27 EST 2023" starttimestamp="1701710826491" timestamp="3680712" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="665" _type="ShellCommand" date="Mon Dec 04 13:28:27 EST 2023" starttimestamp="1701710826491" timestamp="3681433" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="570" _type="Insert" date="Mon Dec 04 13:26:12 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" length="3" offset="1873" repeat="2" starttimestamp="1701710826491" timestamp="3546073" timestamp2="3546799">
    <text><![CDATA[();]]></text>
  </DocumentChange>
  <Command __id="620" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:26:56 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3589610">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="622" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:26:57 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3590579">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		"), Diff(INSERT,"public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}	"), Diff(EQUAL,"	@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();	"), Diff(INSERT,"	registerAdvance();	"), Diff(EQUAL,"}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.OperationRegisterer;
import main.lisp.evaluator.BasicOperationRegisterer;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{
	
	public static void registerBasic() {
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());
	}
	
	public static void registerArithmetic() {
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());
	}
	
	public static void registerLogic() {
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());
	}
	
	public static void registerAdvance() {
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());
	}
	

	@Override
	public void registerOperations() {
		registerAll();
	}
	
	public static void registerAll() {
		registerBasic();
		registerArithmetic();
		registerLogic();
		registerAdvance();
	}

}
]]></snapshot>
  </Command>
  <Command __id="666" _type="ShellCommand" date="Mon Dec 04 13:31:53 EST 2023" starttimestamp="1701710826491" timestamp="3887218" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="668" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 13:32:00 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="3894002" />
  <Command __id="669" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Mon Dec 04 13:32:03 EST 2023" starttimestamp="1701710826491" timestamp="3896608" />
  <Command __id="670" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:32:03 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3896781" type="Run" />
  <Command __id="671" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:32:03 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3896781" type="Run" />
  <Command __id="672" _type="ConsoleInput" date="Mon Dec 04 13:32:10 EST 2023" starttimestamp="1701710826491" timestamp="3904500" type="Exception">
    <outputString><![CDATA[(setq C 3)
]]></outputString>
  </Command>
  <Command __id="673" _type="ConsoleOutput" date="Mon Dec 04 13:32:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3904512" type="ConsoleOutput">
    <outputString><![CDATA[(C 3)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Test execution time (ms):2¶Test Result:LispSetqChecker2,0.0% complete,0.0,10.0,Expected strings:(8 . 3)actual string (D (CONS C 3)"), Diff(INSERT,"(C 3"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="674" _type="ConsoleInput" date="Mon Dec 04 13:32:14 EST 2023" starttimestamp="1701710826491" timestamp="3907772" type="Exception">
    <outputString><![CDATA[C
]]></outputString>
  </Command>
  <Command __id="675" _type="ConsoleOutput" date="Mon Dec 04 13:32:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3907778" type="ConsoleOutput">
    <outputString><![CDATA[C
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(C 3)"), Diff(INSERT,"C"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="676" _type="ConsoleInput" date="Mon Dec 04 13:32:18 EST 2023" starttimestamp="1701710826491" timestamp="3912275" type="Exception">
    <outputString><![CDATA[eval C
]]></outputString>
  </Command>
  <Command __id="677" _type="ConsoleOutput" date="Mon Dec 04 13:32:18 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3912282" type="ConsoleOutput">
    <outputString><![CDATA[EVAL
C
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"EVAL¶"), Diff(EQUAL,"C¶")]]]></diff>
  </Command>
  <Command __id="678" _type="ConsoleInput" date="Mon Dec 04 13:32:21 EST 2023" starttimestamp="1701710826491" timestamp="3914781" type="Exception">
    <outputString><![CDATA[(eval C)
]]></outputString>
  </Command>
  <Command __id="679" _type="ConsoleOutput" date="Mon Dec 04 13:32:21 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="3914788" type="ConsoleOutput">
    <outputString><![CDATA[C
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"EVAL¶"), Diff(EQUAL,"C¶")]]]></diff>
  </Command>
  <Command __id="667" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:32:00 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3893934">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import main.Main;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.evaluator.environment.EnvironmentFactory;

public class index {

	public static void main(String[] args) {
		EnvironmentFactory.setClass(EnvironmentImpl.class);
		OperationRegistererImpl.registerAll();
		ExpressionFactory.setClass(BasicExpressionImpl.class);
		Main.main(args);
	}

}
]]></snapshot>
  </Command>
  <Command __id="680" _type="MoveCaretCommand" caretOffset="152" date="Mon Dec 04 13:32:30 EST 2023" docOffset="260" starttimestamp="1701710826491" timestamp="3923548" />
  <Command __id="681" _type="MoveCaretCommand" caretOffset="138" date="Mon Dec 04 13:32:30 EST 2023" docOffset="246" starttimestamp="1701710826491" timestamp="3924014" />
  <Command __id="683" _type="MoveCaretCommand" caretOffset="338" date="Mon Dec 04 13:32:32 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="3926336" />
  <Command __id="684" _type="MoveCaretCommand" caretOffset="459" date="Mon Dec 04 13:32:34 EST 2023" docOffset="459" starttimestamp="1701710826491" timestamp="3927798" />
  <Command __id="685" _type="MoveCaretCommand" caretOffset="479" date="Mon Dec 04 13:32:34 EST 2023" docOffset="479" starttimestamp="1701710826491" timestamp="3928248" />
  <Command __id="686" _type="MoveCaretCommand" caretOffset="539" date="Mon Dec 04 13:32:35 EST 2023" docOffset="539" starttimestamp="1701710826491" timestamp="3929365" />
  <Command __id="682" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:32:32 EST 2023" docASTNodeCount="197" docActiveCodeLength="1082" docExpressionCount="125" docLength="1150" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3926279">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EnvironmentImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.evaluator.environment.AbstractEnvironment;import main.lisp.evaluator.function.Function;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class EnvironmentImpl extends AbstractEnvironment{"), Diff(INSERT,"	public EnvironmentImpl() {		super();	}"), Diff(EQUAL,"	public EnvironmentImpl(Environment parent) {		super(parent);	}	@Override	public void assign(IdentifierAtom arg0, SExpression arg1) {		put(arg0, arg1);	}	@Override	public void assignFun(IdentifierAtom arg0, Function arg1) {			}	@Override	public Environment copy() {		// TODO Auto-generated method stub		return null;	}	@Override	public Optional<SExpression> lookup(IdentifierAtom arg0) {		Optional<SExpression> retVal = get(arg0);		return (retVal == null && getParent() != null) ? getParent().lookup(arg0) : retVal;	}	@Override	public Optional<Function> lookupFun(IdentifierAtom arg0) {		// TODO Auto-generated method stub		return Optional.empty();	}	@Override	public Environment newChild() {		return new EnvironmentImpl(this);	}	}")]]></diff>
    <snapshot><![CDATA[package index;

import java.util.Optional;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.environment.AbstractEnvironment;
import main.lisp.evaluator.function.Function;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class EnvironmentImpl extends AbstractEnvironment{

	public EnvironmentImpl() {
		super();
	}

	public EnvironmentImpl(Environment parent) {
		super(parent);
	}

	@Override
	public void assign(IdentifierAtom arg0, SExpression arg1) {
		put(arg0, arg1);
	}

	@Override
	public void assignFun(IdentifierAtom arg0, Function arg1) {
		
	}

	@Override
	public Environment copy() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Optional<SExpression> lookup(IdentifierAtom arg0) {
		Optional<SExpression> retVal = get(arg0);
		return (retVal == null && getParent() != null) ? getParent().lookup(arg0) : retVal;
	}

	@Override
	public Optional<Function> lookupFun(IdentifierAtom arg0) {
		// TODO Auto-generated method stub
		return Optional.empty();
	}

	@Override
	public Environment newChild() {
		return new EnvironmentImpl(this);
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="687" _type="MoveCaretCommand" caretOffset="554" date="Mon Dec 04 13:32:37 EST 2023" docOffset="554" starttimestamp="1701710826491" timestamp="3930515" />
  <Command __id="688" _type="MoveCaretCommand" caretOffset="573" date="Mon Dec 04 13:32:37 EST 2023" docOffset="573" starttimestamp="1701710826491" timestamp="3930934" />
  <Command __id="689" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:32:38 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3932080">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="690" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 13:32:38 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="3932126" />
  <Command __id="691" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:32:45 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3938749">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="692" _type="MoveCaretCommand" caretOffset="1585" date="Mon Dec 04 13:32:45 EST 2023" docOffset="1699" starttimestamp="1701710826491" timestamp="3938800" />
  <Command __id="693" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:32:46 EST 2023" docASTNodeCount="233" docActiveCodeLength="1448" docExpressionCount="171" docLength="1448" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3940109">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.parser.terms.AbstractSExpression;import main.lisp.parser.terms.Atom;import main.lisp.parser.terms.BasicExpression;import main.lisp.parser.terms.SExpression;public class BasicExpressionImpl extends BasicExpression implements SExpression{		public BasicExpressionImpl(SExpression head, SExpression tail) {		super(head, tail);	}	@Override	public boolean isList() {		if((this.getTail() instanceof Atom)) {			return this.getTail().isNIL();		}else {			return this.getTail().isList();		}	}	@Override	public String toStringAsSExpressionDeep() {		if(this.isAtom()) {			return "(" + this.toString() + ")";		}		return "(" + this.getHead().toStringAsSExpressionDeep() + " " + "." + " " +				this.getTail().toStringAsSExpressionDeep() + ")";	}	@Override	public String toStringAsSExpression() {		return "(" + this.getHead().toString() + " " + "." + " " +				this.getTail().toString() + ")";	}	@Override	public String toStringAsList() {		return "("+((AbstractSExpression)this).toStringAsListHelperPublic()+")";	}	@Override	public String toString() {		return this.isList()? this.toStringAsList() : this.toStringAsSExpression();	}	@Override	public String toStringAsListHelperPublic() {		if(this.getTail().isNIL()) {			return this.getHead().toString();		}else {			return this.getHead().toString() + " " + ((AbstractSExpression)this.getTail()).toStringAsListHelperPublic();			}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="694" _type="MoveCaretCommand" caretOffset="241" date="Mon Dec 04 13:32:46 EST 2023" docOffset="367" starttimestamp="1701710826491" timestamp="3940150" />
  <Command __id="695" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:32:48 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3942350">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="696" _type="MoveCaretCommand" caretOffset="1585" date="Mon Dec 04 13:32:48 EST 2023" docOffset="1699" starttimestamp="1701710826491" timestamp="3942405" />
  <Command __id="697" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:32:53 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3947225">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="698" _type="MoveCaretCommand" caretOffset="138" date="Mon Dec 04 13:32:53 EST 2023" docOffset="246" starttimestamp="1701710826491" timestamp="3947267" />
  <Command __id="699" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:32:59 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3952814">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="700" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 13:32:59 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="3952858" />
  <Command __id="701" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:33:04 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3957564">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="702" _type="MoveCaretCommand" caretOffset="138" date="Mon Dec 04 13:33:04 EST 2023" docOffset="246" starttimestamp="1701710826491" timestamp="3957620" />
  <Command __id="703" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:33:04 EST 2023" docASTNodeCount="197" docActiveCodeLength="1082" docExpressionCount="125" docLength="1150" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3958237">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EnvironmentImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.evaluator.environment.AbstractEnvironment;import main.lisp.evaluator.function.Function;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class EnvironmentImpl extends AbstractEnvironment{	public EnvironmentImpl() {		super();	}	public EnvironmentImpl(Environment parent) {		super(parent);	}	@Override	public void assign(IdentifierAtom arg0, SExpression arg1) {		put(arg0, arg1);	}	@Override	public void assignFun(IdentifierAtom arg0, Function arg1) {			}	@Override	public Environment copy() {		// TODO Auto-generated method stub		return null;	}	@Override	public Optional<SExpression> lookup(IdentifierAtom arg0) {		Optional<SExpression> retVal = get(arg0);		return (retVal == null && getParent() != null) ? getParent().lookup(arg0) : retVal;	}	@Override	public Optional<Function> lookupFun(IdentifierAtom arg0) {		// TODO Auto-generated method stub		return Optional.empty();	}	@Override	public Environment newChild() {		return new EnvironmentImpl(this);	}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="704" _type="MoveCaretCommand" caretOffset="573" date="Mon Dec 04 13:33:04 EST 2023" docOffset="573" starttimestamp="1701710826491" timestamp="3958284" />
  <Command __id="705" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:33:08 EST 2023" docASTNodeCount="115" docActiveCodeLength="650" docExpressionCount="78" docLength="690" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3961522">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class SetqEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		// return evalHelper(expr, environment);
        return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
        SExpression e2 = expr.getTail().getHead();
        SExpression e2Eval = e2.eval(environment);
        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);
        return e2Eval;
	}
}
]]></snapshot>
  </Command>
  <Command __id="710" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:33:20 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3973642" type="Run" />
  <Command __id="711" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:33:20 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3973642" type="Run" />
  <Command __id="712" _type="MoveCaretCommand" caretOffset="542" date="Mon Dec 04 13:33:21 EST 2023" docOffset="542" starttimestamp="1701710826491" timestamp="3974967" />
  <Command __id="713" _type="MoveCaretCommand" caretOffset="593" date="Mon Dec 04 13:33:21 EST 2023" docOffset="593" starttimestamp="1701710826491" timestamp="3975490" />
  <Command __id="714" _type="MoveCaretCommand" caretOffset="661" date="Mon Dec 04 13:33:22 EST 2023" docOffset="661" starttimestamp="1701710826491" timestamp="3975950" />
  <Command __id="715" _type="MoveCaretCommand" caretOffset="654" date="Mon Dec 04 13:33:23 EST 2023" docOffset="654" starttimestamp="1701710826491" timestamp="3976965" />
  <Command __id="717" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:33:26 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="3980308">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="718" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 13:33:26 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="3980368" />
  <Command __id="720" _type="MoveCaretCommand" caretOffset="632" date="Mon Dec 04 13:33:28 EST 2023" docOffset="632" starttimestamp="1701710826491" timestamp="3981963" />
  <Command __id="721" _type="ShellCommand" date="Mon Dec 04 13:33:28 EST 2023" starttimestamp="1701710826491" timestamp="3982195" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="727" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:42:33 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4526878" type="Run" />
  <Command __id="728" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:42:33 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4526878" type="Run" />
  <Command __id="729" _type="ShellCommand" date="Mon Dec 04 13:42:33 EST 2023" starttimestamp="1701710826491" timestamp="4527224" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="730" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530633" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"C"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="731" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530634" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="732" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530642" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFile"), Diff(INSERT,"execution time (ms):6¶Test Result:ClassRegistry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶"), Diff(DELETE,"¶")]]]></diff>
  </Command>
  <Command __id="733" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530642" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"¶Test Result:"), Diff(INSERT,"Main"), Diff(EQUAL,"Class"), Diff(DELETE,"Registry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶")]]]></diff>
  </Command>
  <Command __id="734" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530670" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):35
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"7¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"35"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="735" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530671" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,


Test execution time (ms):37
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶¶"), Diff(EQUAL,"Test execution time (ms):3"), Diff(DELETE,"5"), Diff(INSERT,"7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="736" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530672" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispSetqChecker,0.0% complete,0.0,10.0,Expected strings:8actual string (C 8)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:L"), Diff(DELETE,"oadLisp"), Diff(INSERT,"ispSetq"), Diff(EQUAL,"Checker,"), Diff(DELETE,"10"), Diff(EQUAL,"0.0% complete,0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(DELETE,"¶¶¶Test execution time (ms):37"), Diff(INSERT,"Expected strings:8actual string (C 8)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="737" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530674" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):1
Test Result:LispSetqChecker2,0.0% complete,0.0,10.0,Expected strings:(8 . 3)actual string (D (CONS C 3))

]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶Test execution time (ms):1¶"), Diff(EQUAL,"Test Result:LispSetqChecker"), Diff(INSERT,"2"), Diff(EQUAL,",0.0% complete,0.0,10.0,Expected strings:"), Diff(DELETE,"8"), Diff(INSERT,"(8 . 3)"), Diff(EQUAL,"actual string ("), Diff(DELETE,"C 8)"), Diff(INSERT,"D (CONS C 3))¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="738" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530674" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"1¶Test Result:LispSetqChecker2,0.0% complete,0.0,10.0,Expected strings:(8 . 3)actual string (D (CONS C 3))¶"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="739" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530675" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadSetqChecker,0.0% complete,0.0,15.0,Expecting in test file a call to ( SETQ A 29) with result 29
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"ex"), Diff(INSERT,"Result:LoadSetqChecker,0.0% complete,0.0,15.0,Exp"), Diff(EQUAL,"ec"), Diff(DELETE,"u"), Diff(EQUAL,"ti"), Diff(DELETE,"on time (ms):0"), Diff(INSERT,"ng in test file a call to ( SETQ A 29) with result 29"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="740" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530676" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadSetqChecker,0.0% complete,0.0,15.0,Exp"), Diff(INSERT,"ex"), Diff(EQUAL,"ec"), Diff(INSERT,"u"), Diff(EQUAL,"ti"), Diff(DELETE,"ng in test file a call to ( SETQ A 29) with result 29"), Diff(INSERT,"on time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="741" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530676" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadSetqChecker2,0.0% complete,0.0,15.0,Expecting in test file a call to ( SETQ B (+ A 13)) with result 42
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"ex"), Diff(INSERT,"Result:LoadSetqChecker2,0.0% complete,0.0,15.0,Exp"), Diff(EQUAL,"ec"), Diff(DELETE,"u"), Diff(EQUAL,"ti"), Diff(DELETE,"on time (ms):1"), Diff(INSERT,"ng in test file a call to ( SETQ B (+ A 13)) with result 42"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="742" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530677" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadSetqChecker2,0.0% complete,0.0,15.0,Exp"), Diff(INSERT,"ex"), Diff(EQUAL,"ec"), Diff(INSERT,"u"), Diff(EQUAL,"ti"), Diff(DELETE,"ng in test file a call to ( SETQ B (+ A 13)) with result 42"), Diff(INSERT,"on time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="743" _type="ConsoleOutput" date="Mon Dec 04 13:42:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4530677" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadSetqChecker3,0.0% complete,0.0,15.0,Expecting in test file a call to ( B  ) with result 42
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"ex"), Diff(INSERT,"Result:LoadSetqChecker3,0.0% complete,0.0,15.0,Exp"), Diff(EQUAL,"ec"), Diff(DELETE,"u"), Diff(EQUAL,"ti"), Diff(DELETE,"on time (ms):1"), Diff(INSERT,"ng in test file a call to ( B  ) with result 42"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="744" _type="ShellCommand" date="Mon Dec 04 13:42:46 EST 2023" starttimestamp="1701710826491" timestamp="4539781" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="746" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:42:57 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4551232" type="Run" />
  <Command __id="747" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:42:57 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4551232" type="Run" />
  <Command __id="749" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:43:02 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4555858" type="Run" />
  <Command __id="750" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:43:02 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4555858" type="Run" />
  <Command __id="751" _type="ShellCommand" date="Mon Dec 04 13:43:02 EST 2023" starttimestamp="1701710826491" timestamp="4556185" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="752" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:43:03 EST 2023" starttimestamp="1701710826491" timestamp="4556893" />
  <Command __id="753" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:43:03 EST 2023" starttimestamp="1701710826491" timestamp="4556900" />
  <Command __id="754" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558948" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadSetqChecker3,0.0% complete,0.0,15.0,Exp"), Diff(INSERT,"ex"), Diff(EQUAL,"ec"), Diff(INSERT,"u"), Diff(EQUAL,"ti"), Diff(DELETE,"ng in test file a call to ( B  ) with result 42"), Diff(INSERT,"on time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="755" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558949" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="756" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558955" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="757" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558955" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):5"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="758" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558956" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="759" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558957" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="760" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558983" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):34
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):34"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="761" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558984" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

Test execution time (ms):35
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):3"), Diff(DELETE,"4"), Diff(INSERT,"5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="762" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558986" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispSetqChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:L"), Diff(DELETE,"oadLisp"), Diff(INSERT,"ispSetq"), Diff(EQUAL,"Checker,100.0% complete,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,¶¶"), Diff(DELETE,"Test execution time (ms):35¶")]]]></diff>
  </Command>
  <Command __id="763" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558987" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LispSetqChecker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="764" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558988" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispSetqChecker2,0.0% complete,0.0,10.0,Expected strings:(8 . 3)actual string (C . 3)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:LispSetqChecker2,0.0% complete,0.0,10.0,Expected strings:(8 . 3)actual string (C . 3)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="765" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558988" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LispSetqChecker2,0.0% complete,0.0,10.0,Expected strings:(8 . 3)actual string (C . 3)"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="766" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558989" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadSetqChecker,0.0% complete,0.0,15.0,Expecting in test file a call to ( SETQ A 29) with result 29
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"ex"), Diff(INSERT,"Result:LoadSetqChecker,0.0% complete,0.0,15.0,Exp"), Diff(EQUAL,"ec"), Diff(DELETE,"u"), Diff(EQUAL,"ti"), Diff(DELETE,"on time (ms):0"), Diff(INSERT,"ng in test file a call to ( SETQ A 29) with result 29"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="767" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558989" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadSetqChecker,0.0% complete,0.0,15.0,Exp"), Diff(INSERT,"ex"), Diff(EQUAL,"ec"), Diff(INSERT,"u"), Diff(EQUAL,"ti"), Diff(DELETE,"ng in test file a call to ( SETQ A 29) with result 29"), Diff(INSERT,"on time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="768" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558990" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadSetqChecker2,0.0% complete,0.0,15.0,Expecting in test file a call to ( SETQ B (+ A 13)) with result 42
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"ex"), Diff(INSERT,"Result:LoadSetqChecker2,0.0% complete,0.0,15.0,Exp"), Diff(EQUAL,"ec"), Diff(DELETE,"u"), Diff(EQUAL,"ti"), Diff(DELETE,"on time (ms):0"), Diff(INSERT,"ng in test file a call to ( SETQ B (+ A 13)) with result 42"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="769" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558990" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadSetqChecker2,0.0% complete,0.0,15.0,Exp"), Diff(INSERT,"ex"), Diff(EQUAL,"ec"), Diff(INSERT,"u"), Diff(EQUAL,"ti"), Diff(DELETE,"ng in test file a call to ( SETQ B (+ A 13)) with result 42"), Diff(INSERT,"on time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="770" _type="ConsoleOutput" date="Mon Dec 04 13:43:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4558992" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadSetqChecker3,0.0% complete,0.0,15.0,Expecting in test file a call to ( B  ) with result 42
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"ex"), Diff(INSERT,"Result:LoadSetqChecker3,0.0% complete,0.0,15.0,Exp"), Diff(EQUAL,"ec"), Diff(DELETE,"u"), Diff(EQUAL,"ti"), Diff(DELETE,"on time (ms):0"), Diff(INSERT,"ng in test file a call to ( B  ) with result 42"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="771" _type="ShellCommand" date="Mon Dec 04 13:43:29 EST 2023" starttimestamp="1701710826491" timestamp="4582977" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="773" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 13:43:29 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="4583250" />
  <Command __id="775" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:43:29 EST 2023" starttimestamp="1701710826491" timestamp="4583317" />
  <Command __id="776" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:43:29 EST 2023" starttimestamp="1701710826491" timestamp="4583327" />
  <Command __id="719" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:33:28 EST 2023" docASTNodeCount="115" docActiveCodeLength="650" docExpressionCount="78" docLength="690" projectName="Assignment5" starttimestamp="1701710826491" timestamp="3981915">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		// return evalHelper(expr, environment);        return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="772" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:43:29 EST 2023" docASTNodeCount="204" docActiveCodeLength="1233" docExpressionCount="152" docLength="1233" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4583181">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms."), Diff(DELETE,"SExpression;"), Diff(INSERT,"IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;"), Diff(EQUAL,"import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			"), Diff(INSERT,"Optional<SExpression> retVal = environment.lookup((IdentifierAtom)expr);			if(retVal.isPresent()) {				return retVal.get();			}else{				"), Diff(EQUAL,"return expr;		"), Diff(INSERT,"	}		"), Diff(EQUAL,"}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import java.util.Optional;

import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			Optional<SExpression> retVal = environment.lookup((IdentifierAtom)expr);
			if(retVal.isPresent()) {
				return retVal.get();
			}else{
				return expr;
			}
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <DocumentChange __id="774" _type="Replace" date="Mon Dec 04 13:43:29 EST 2023" docASTNodeCount="204" docActiveCodeLength="1233" docExpressionCount="152" docLength="1233" endLine="39" insertionLength="1233" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1233" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="4583254">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import java.util.Optional;

import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			Optional<SExpression> retVal = environment.lookup((IdentifierAtom)expr);
			if(retVal.isPresent()) {
				return retVal.get();
			}else{
				return expr;
			}
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import java.util.Optional;

import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			Optional<SExpression> retVal = environment.lookup((IdentifierAtom)expr);
			if(retVal.isPresent()) {
				return retVal.get();
			}else{
				return expr;
			}
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></insertedText>
  </DocumentChange>
  <Command __id="777" _type="MoveCaretCommand" caretOffset="801" date="Mon Dec 04 13:43:31 EST 2023" docOffset="801" starttimestamp="1701710826491" timestamp="4584797" />
  <Command __id="778" _type="MoveCaretCommand" caretOffset="796" date="Mon Dec 04 13:43:31 EST 2023" docOffset="796" starttimestamp="1701710826491" timestamp="4585248" />
  <Command __id="779" _type="MoveCaretCommand" caretOffset="769" date="Mon Dec 04 13:43:32 EST 2023" docOffset="769" starttimestamp="1701710826491" timestamp="4585696" />
  <Command __id="780" _type="MoveCaretCommand" caretOffset="744" date="Mon Dec 04 13:43:32 EST 2023" docOffset="744" starttimestamp="1701710826491" timestamp="4586147" />
  <Command __id="781" _type="MoveCaretCommand" caretOffset="675" date="Mon Dec 04 13:43:33 EST 2023" docOffset="675" starttimestamp="1701710826491" timestamp="4586615" />
  <Command __id="782" _type="MoveCaretCommand" caretOffset="640" date="Mon Dec 04 13:43:33 EST 2023" docOffset="640" starttimestamp="1701710826491" timestamp="4587097" />
  <Command __id="783" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:44:02 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4616441">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="784" _type="MoveCaretCommand" caretOffset="1585" date="Mon Dec 04 13:44:02 EST 2023" docOffset="1699" starttimestamp="1701710826491" timestamp="4616487" />
  <Command __id="786" _type="MoveCaretCommand" caretOffset="640" date="Mon Dec 04 13:44:06 EST 2023" docOffset="640" starttimestamp="1701710826491" timestamp="4619670" />
  <Command __id="787" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 13:44:07 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="4620717" />
  <Command __id="788" _type="MoveCaretCommand" caretOffset="570" date="Mon Dec 04 13:44:08 EST 2023" docOffset="570" starttimestamp="1701710826491" timestamp="4621817" />
  <Command __id="789" _type="SelectTextCommand" caretOffset="573" date="Mon Dec 04 13:44:08 EST 2023" end="573" start="563" starttimestamp="1701710826491" timestamp="4622262" />
  <Command __id="790" _type="SelectTextCommand" caretOffset="619" date="Mon Dec 04 13:44:08 EST 2023" end="619" start="536" starttimestamp="1701710826491" timestamp="4622449" />
  <Command __id="791" _type="MoveCaretCommand" caretOffset="744" date="Mon Dec 04 13:44:54 EST 2023" docOffset="744" starttimestamp="1701710826491" timestamp="4667605" />
  <Command __id="792" _type="MoveCaretCommand" caretOffset="779" date="Mon Dec 04 13:44:54 EST 2023" docOffset="779" starttimestamp="1701710826491" timestamp="4668167" />
  <Command __id="793" _type="MoveCaretCommand" caretOffset="744" date="Mon Dec 04 13:44:55 EST 2023" docOffset="744" starttimestamp="1701710826491" timestamp="4668683" />
  <Command __id="794" _type="MoveCaretCommand" caretOffset="769" date="Mon Dec 04 13:44:55 EST 2023" docOffset="769" starttimestamp="1701710826491" timestamp="4669134" />
  <Command __id="795" _type="MoveCaretCommand" caretOffset="779" date="Mon Dec 04 13:44:56 EST 2023" docOffset="779" starttimestamp="1701710826491" timestamp="4669584" />
  <Command __id="796" _type="MoveCaretCommand" caretOffset="796" date="Mon Dec 04 13:44:56 EST 2023" docOffset="796" starttimestamp="1701710826491" timestamp="4670068" />
  <Command __id="797" _type="MoveCaretCommand" caretOffset="779" date="Mon Dec 04 13:44:57 EST 2023" docOffset="779" starttimestamp="1701710826491" timestamp="4670569" />
  <Command __id="798" _type="MoveCaretCommand" caretOffset="796" date="Mon Dec 04 13:44:57 EST 2023" docOffset="796" starttimestamp="1701710826491" timestamp="4671235" />
  <Command __id="799" _type="MoveCaretCommand" caretOffset="779" date="Mon Dec 04 13:44:58 EST 2023" docOffset="779" starttimestamp="1701710826491" timestamp="4671732" />
  <Command __id="800" _type="MoveCaretCommand" caretOffset="796" date="Mon Dec 04 13:44:59 EST 2023" docOffset="796" starttimestamp="1701710826491" timestamp="4672921" />
  <Command __id="801" _type="MoveCaretCommand" caretOffset="779" date="Mon Dec 04 13:44:59 EST 2023" docOffset="779" starttimestamp="1701710826491" timestamp="4673488" />
  <Command __id="802" _type="MoveCaretCommand" caretOffset="796" date="Mon Dec 04 13:45:00 EST 2023" docOffset="796" starttimestamp="1701710826491" timestamp="4673953" />
  <Command __id="803" _type="MoveCaretCommand" caretOffset="779" date="Mon Dec 04 13:45:00 EST 2023" docOffset="779" starttimestamp="1701710826491" timestamp="4674405" />
  <Command __id="804" _type="MoveCaretCommand" caretOffset="796" date="Mon Dec 04 13:45:01 EST 2023" docOffset="796" starttimestamp="1701710826491" timestamp="4674805" />
  <Command __id="785" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:44:06 EST 2023" docASTNodeCount="204" docActiveCodeLength="1233" docExpressionCount="152" docLength="1233" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4619622">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			Optional<SExpression> retVal = environment.lookup((IdentifierAtom)expr);			if(retVal.isPresent()) {				return retVal.get();			}else{				return expr;			}		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="807" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:45:23 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4696520" type="Run" />
  <Command __id="808" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 13:45:23 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4696520" type="Run" />
  <Command __id="810" _type="MoveCaretCommand" caretOffset="138" date="Mon Dec 04 13:45:24 EST 2023" docOffset="246" starttimestamp="1701710826491" timestamp="4698204" />
  <Command __id="811" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Mon Dec 04 13:45:27 EST 2023" starttimestamp="1701710826491" timestamp="4701083" />
  <Command __id="812" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:45:27 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4701195" type="Run" />
  <Command __id="813" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:45:27 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4701195" type="Run" />
  <Command __id="814" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:45:27 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="4701428" type="Run" />
  <Command __id="815" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:45:27 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="4701441" type="Run" />
  <Command __id="816" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:45:28 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="4701573" type="Run" />
  <Command __id="809" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:45:24 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4698155">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="818" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:45:36 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="4709881" type="Run" />
  <Command __id="820" _type="MoveCaretCommand" caretOffset="280" date="Mon Dec 04 13:45:40 EST 2023" docOffset="406" starttimestamp="1701710826491" timestamp="4714114" />
  <Command __id="821" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.internal.ui.CompilationUnitEditor.ruler.actions/org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction" date="Mon Dec 04 13:45:41 EST 2023" starttimestamp="1701710826491" timestamp="4714595" />
  <Command __id="819" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:45:40 EST 2023" docASTNodeCount="233" docActiveCodeLength="1448" docExpressionCount="171" docLength="1448" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4714068">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.parser.terms.AbstractSExpression;import main.lisp.parser.terms.Atom;import main.lisp.parser.terms.BasicExpression;import main.lisp.parser.terms.SExpression;public class BasicExpressionImpl extends BasicExpression implements SExpression{		public BasicExpressionImpl(SExpression head, SExpression tail) {		super(head, tail);	}	@Override	public boolean isList() {		if((this.getTail() instanceof Atom)) {			return this.getTail().isNIL();		}else {			return this.getTail().isList();		}	}	@Override	public String toStringAsSExpressionDeep() {		if(this.isAtom()) {			return "(" + this.toString() + ")";		}		return "(" + this.getHead().toStringAsSExpressionDeep() + " " + "." + " " +				this.getTail().toStringAsSExpressionDeep() + ")";	}	@Override	public String toStringAsSExpression() {		return "(" + this.getHead().toString() + " " + "." + " " +				this.getTail().toString() + ")";	}	@Override	public String toStringAsList() {		return "("+((AbstractSExpression)this).toStringAsListHelperPublic()+")";	}	@Override	public String toString() {		return this.isList()? this.toStringAsList() : this.toStringAsSExpression();	}	@Override	public String toStringAsListHelperPublic() {		if(this.getTail().isNIL()) {			return this.getHead().toString();		}else {			return this.getHead().toString() + " " + ((AbstractSExpression)this.getTail()).toStringAsListHelperPublic();			}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="824" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:45:49 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="4723140" type="Run" />
  <Command __id="825" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 13:45:49 EST 2023" starttimestamp="1701710826491" timestamp="4723140" />
  <Command __id="826" _type="ConsoleOutput" date="Mon Dec 04 13:45:49 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4723149" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:LoadSetqChecker3,0.0% complete,0.0,15.0,Expecting in test file a call to ( B  ) with result 42"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="827" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:45:52 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4726068">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="828" _type="MoveCaretCommand" caretOffset="138" date="Mon Dec 04 13:45:52 EST 2023" docOffset="246" starttimestamp="1701710826491" timestamp="4726116" />
  <Command __id="829" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:45:53 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4727051">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="830" _type="MoveCaretCommand" caretOffset="1585" date="Mon Dec 04 13:45:53 EST 2023" docOffset="1699" starttimestamp="1701710826491" timestamp="4727096" />
  <Command __id="831" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:45:54 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4727794">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		"), Diff(DELETE,"// "), Diff(EQUAL,"return evalHelper(expr, environment);"), Diff(DELETE,"        return expr;"), Diff(EQUAL,"	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class SetqEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
        SExpression e2 = expr.getTail().getHead();
        SExpression e2Eval = e2.eval(environment);
        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);
        return e2Eval;
	}
}
]]></snapshot>
  </Command>
  <Command __id="832" _type="MoveCaretCommand" caretOffset="608" date="Mon Dec 04 13:45:54 EST 2023" docOffset="608" starttimestamp="1701710826491" timestamp="4727832" />
  <Command __id="834" _type="MoveCaretCommand" caretOffset="619" date="Mon Dec 04 13:45:57 EST 2023" docOffset="619" starttimestamp="1701710826491" timestamp="4731083" />
  <Command __id="838" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:46:18 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="4752113" type="Run" />
  <Command __id="839" _type="ExceptionCommand" date="Mon Dec 04 13:46:18 EST 2023" starttimestamp="1701710826491" timestamp="4752118" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: Arguments for operator '+' must both evaluate to numbers
	at main.lisp.evaluator.basic.SumEvaluator.eval(SumEvaluator.java:51)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="840" _type="ConsoleOutput" date="Mon Dec 04 13:46:18 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4752121" type="ConsoleOutput">
    <outputString><![CDATA[	at index.SetqEvaluator.evalHelper(SetqEvaluator.java:18)
	at index.SetqEvaluator.eval(SetqEvaluator.java:13)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:13)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"3"), Diff(INSERT,"	at index.SetqEvaluator.evalHelper(SetqEvaluator.java:18)¶	at index.SetqEvaluator.eval(SetqEvaluator.java:13)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:13)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="841" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:46:18 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="4752125" type="Debug" />
  <Command __id="842" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:46:18 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4752125" type="Run" />
  <Command __id="843" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:46:18 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="4752125" type="Debug" />
  <Command __id="844" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:46:18 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4752125" type="Run" />
  <Command __id="847" _type="MoveCaretCommand" caretOffset="619" date="Mon Dec 04 13:46:35 EST 2023" docOffset="619" starttimestamp="1701710826491" timestamp="4769045" />
  <Command __id="848" _type="MoveCaretCommand" caretOffset="530" date="Mon Dec 04 13:46:38 EST 2023" docOffset="530" starttimestamp="1701710826491" timestamp="4772370" />
  <Command __id="849" _type="MoveCaretCommand" caretOffset="533" date="Mon Dec 04 13:46:39 EST 2023" docOffset="533" starttimestamp="1701710826491" timestamp="4772909" />
  <Command __id="850" _type="MoveCaretCommand" caretOffset="533" date="Mon Dec 04 13:46:39 EST 2023" docOffset="533" starttimestamp="1701710826491" timestamp="4773392" />
  <Command __id="851" _type="MoveCaretCommand" caretOffset="530" date="Mon Dec 04 13:46:40 EST 2023" docOffset="530" starttimestamp="1701710826491" timestamp="4773907" />
  <Command __id="852" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:46:41 EST 2023" starttimestamp="1701710826491" timestamp="4774843" />
  <Command __id="853" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:46:42 EST 2023" starttimestamp="1701710826491" timestamp="4775509" />
  <Command __id="854" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:46:42 EST 2023" starttimestamp="1701710826491" timestamp="4775870" />
  <Command __id="855" _type="MoveCaretCommand" caretOffset="530" date="Mon Dec 04 13:46:42 EST 2023" docOffset="530" starttimestamp="1701710826491" timestamp="4776374" />
  <Command __id="856" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:46:43 EST 2023" starttimestamp="1701710826491" timestamp="4776588" />
  <Command __id="857" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:46:43 EST 2023" starttimestamp="1701710826491" timestamp="4776596" />
  <Command __id="858" _type="MoveCaretCommand" caretOffset="530" date="Mon Dec 04 13:46:44 EST 2023" docOffset="530" starttimestamp="1701710826491" timestamp="4778042" />
  <Command __id="859" _type="MoveCaretCommand" caretOffset="585" date="Mon Dec 04 13:46:44 EST 2023" docOffset="585" starttimestamp="1701710826491" timestamp="4778506" />
  <Command __id="860" _type="MoveCaretCommand" caretOffset="487" date="Mon Dec 04 13:46:46 EST 2023" docOffset="487" starttimestamp="1701710826491" timestamp="4780273" />
  <Command __id="861" _type="ShellCommand" date="Mon Dec 04 13:46:47 EST 2023" starttimestamp="1701710826491" timestamp="4781233" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="862" _type="ShellCommand" date="Mon Dec 04 13:46:53 EST 2023" starttimestamp="1701710826491" timestamp="4787146" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="863" _type="ShellCommand" date="Mon Dec 04 13:46:55 EST 2023" starttimestamp="1701710826491" timestamp="4788953" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="845" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:46:35 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="4768946">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="846" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:46:35 EST 2023" docASTNodeCount="204" docActiveCodeLength="1233" docExpressionCount="152" docLength="1233" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4768999">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			Optional<SExpression> retVal = environment.lookup((IdentifierAtom)expr);			if(retVal.isPresent()) {				return retVal.get();			}else{				return expr;			}		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="864" _type="ShellCommand" date="Mon Dec 04 13:47:15 EST 2023" starttimestamp="1701710826491" timestamp="4809124" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="866" _type="MoveCaretCommand" caretOffset="138" date="Mon Dec 04 13:47:24 EST 2023" docOffset="246" starttimestamp="1701710826491" timestamp="4817790" />
  <Command __id="867" _type="MoveCaretCommand" caretOffset="264" date="Mon Dec 04 13:47:27 EST 2023" docOffset="372" starttimestamp="1701710826491" timestamp="4821409" />
  <Command __id="868" _type="MoveCaretCommand" caretOffset="264" date="Mon Dec 04 13:47:27 EST 2023" docOffset="372" starttimestamp="1701710826491" timestamp="4821409" />
  <Command __id="869" _type="MoveCaretCommand" caretOffset="272" date="Mon Dec 04 13:47:28 EST 2023" docOffset="380" starttimestamp="1701710826491" timestamp="4821876" />
  <Command __id="870" _type="MoveCaretCommand" caretOffset="272" date="Mon Dec 04 13:47:28 EST 2023" docOffset="380" starttimestamp="1701710826491" timestamp="4821876" />
  <Command __id="871" _type="MoveCaretCommand" caretOffset="269" date="Mon Dec 04 13:47:28 EST 2023" docOffset="377" starttimestamp="1701710826491" timestamp="4822377" />
  <Command __id="872" _type="MoveCaretCommand" caretOffset="269" date="Mon Dec 04 13:47:28 EST 2023" docOffset="377" starttimestamp="1701710826491" timestamp="4822377" />
  <Command __id="873" _type="MoveCaretCommand" caretOffset="14" date="Mon Dec 04 13:47:29 EST 2023" docOffset="14" starttimestamp="1701710826491" timestamp="4823147" />
  <Command __id="874" _type="MoveCaretCommand" caretOffset="14" date="Mon Dec 04 13:47:29 EST 2023" docOffset="14" starttimestamp="1701710826491" timestamp="4823147" />
  <Command __id="876" _type="MoveCaretCommand" caretOffset="608" date="Mon Dec 04 13:47:30 EST 2023" docOffset="608" starttimestamp="1701710826491" timestamp="4823734" />
  <Command __id="878" _type="MoveCaretCommand" caretOffset="487" date="Mon Dec 04 13:47:30 EST 2023" docOffset="487" starttimestamp="1701710826491" timestamp="4824294" />
  <Command __id="879" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 13:47:35 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="4829241" />
  <Command __id="880" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 13:47:35 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="4829241" />
  <Command __id="881" _type="SelectTextCommand" caretOffset="484" date="Mon Dec 04 13:47:35 EST 2023" end="484" start="477" starttimestamp="1701710826491" timestamp="4829395" />
  <Command __id="882" _type="SelectTextCommand" caretOffset="484" date="Mon Dec 04 13:47:35 EST 2023" end="484" start="477" starttimestamp="1701710826491" timestamp="4829395" />
  <Command __id="883" _type="MoveCaretCommand" caretOffset="479" date="Mon Dec 04 13:47:36 EST 2023" docOffset="479" starttimestamp="1701710826491" timestamp="4829948" />
  <Command __id="884" _type="MoveCaretCommand" caretOffset="479" date="Mon Dec 04 13:47:36 EST 2023" docOffset="479" starttimestamp="1701710826491" timestamp="4829948" />
  <Command __id="865" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:47:24 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4817736">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="875" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:47:30 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4823696">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="877" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 13:47:30 EST 2023" docASTNodeCount="204" docActiveCodeLength="1230" docExpressionCount="152" docLength="1230" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4824238">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);	"), Diff(DELETE,"		"), Diff(EQUAL,"}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			Optional<SExpression> retVal = environment.lookup((IdentifierAtom)expr);			if(retVal.isPresent()) {				return retVal.get();			}else{				return expr;			}		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import java.util.Optional;

import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			Optional<SExpression> retVal = environment.lookup((IdentifierAtom)expr);
			if(retVal.isPresent()) {
				return retVal.get();
			}else{
				return expr;
			}
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="885" _type="SelectTextCommand" caretOffset="486" date="Mon Dec 04 13:47:38 EST 2023" end="486" start="476" starttimestamp="1701710826491" timestamp="4831979" />
  <Command __id="886" _type="SelectTextCommand" caretOffset="486" date="Mon Dec 04 13:47:38 EST 2023" end="486" start="476" starttimestamp="1701710826491" timestamp="4831980" />
  <DocumentChange __id="887" _type="Delete" date="Mon Dec 04 13:47:39 EST 2023" docASTNodeCount="202" docActiveCodeLength="1220" docExpressionCount="150" docLength="1220" endLine="15" length="10" offset="476" startLine="15" starttimestamp="1701710826491" timestamp="4833357">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <Command __id="888" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:47:39 EST 2023" starttimestamp="1701710826491" timestamp="4833367" />
  <Command __id="889" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:47:39 EST 2023" starttimestamp="1701710826491" timestamp="4833367" />
  <DocumentChange __id="890" _type="Insert" date="Mon Dec 04 13:47:41 EST 2023" docASTNodeCount="204" docActiveCodeLength="1230" docExpressionCount="152" docLength="1230" length="10" offset="476" starttimestamp="1701710826491" timestamp="4835348">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <Command __id="891" _type="UndoCommand" date="Mon Dec 04 13:47:41 EST 2023" starttimestamp="1701710826491" timestamp="4835351" />
  <Command __id="893" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:47:52 EST 2023" starttimestamp="1701710826491" timestamp="4845606" />
  <Command __id="894" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:47:52 EST 2023" starttimestamp="1701710826491" timestamp="4845606" />
  <Command __id="895" _type="MoveCaretCommand" caretOffset="804" date="Mon Dec 04 13:47:53 EST 2023" docOffset="804" starttimestamp="1701710826491" timestamp="4846813" />
  <Command __id="896" _type="MoveCaretCommand" caretOffset="804" date="Mon Dec 04 13:47:53 EST 2023" docOffset="804" starttimestamp="1701710826491" timestamp="4846813" />
  <Command __id="898" _type="InsertStringCommand" date="Mon Dec 04 13:47:54 EST 2023" starttimestamp="1701710826491" timestamp="4847696" timestamp2="4847696">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="899" _type="InsertStringCommand" date="Mon Dec 04 13:47:54 EST 2023" starttimestamp="1701710826491" timestamp="4847696" timestamp2="4847696">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="901" _type="InsertStringCommand" date="Mon Dec 04 13:47:54 EST 2023" starttimestamp="1701710826491" timestamp="4847793" timestamp2="4847793">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="902" _type="InsertStringCommand" date="Mon Dec 04 13:47:54 EST 2023" starttimestamp="1701710826491" timestamp="4847793" timestamp2="4847793">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="904" _type="InsertStringCommand" date="Mon Dec 04 13:47:54 EST 2023" starttimestamp="1701710826491" timestamp="4847933" timestamp2="4847933">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="905" _type="InsertStringCommand" date="Mon Dec 04 13:47:54 EST 2023" starttimestamp="1701710826491" timestamp="4847933" timestamp2="4847933">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="907" _type="InsertStringCommand" date="Mon Dec 04 13:47:54 EST 2023" starttimestamp="1701710826491" timestamp="4848363" timestamp2="4848363">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="908" _type="InsertStringCommand" date="Mon Dec 04 13:47:54 EST 2023" starttimestamp="1701710826491" timestamp="4848363" timestamp2="4848363">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="910" _type="InsertStringCommand" date="Mon Dec 04 13:47:54 EST 2023" starttimestamp="1701710826491" timestamp="4848478" timestamp2="4848478">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="911" _type="InsertStringCommand" date="Mon Dec 04 13:47:54 EST 2023" starttimestamp="1701710826491" timestamp="4848478" timestamp2="4848478">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="913" _type="InsertStringCommand" date="Mon Dec 04 13:47:55 EST 2023" starttimestamp="1701710826491" timestamp="4848594" timestamp2="4848594">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="914" _type="InsertStringCommand" date="Mon Dec 04 13:47:55 EST 2023" starttimestamp="1701710826491" timestamp="4848595" timestamp2="4848595">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="916" _type="InsertStringCommand" date="Mon Dec 04 13:47:55 EST 2023" starttimestamp="1701710826491" timestamp="4848689" timestamp2="4848689">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="917" _type="InsertStringCommand" date="Mon Dec 04 13:47:55 EST 2023" starttimestamp="1701710826491" timestamp="4848690" timestamp2="4848690">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="919" _type="InsertStringCommand" date="Mon Dec 04 13:47:55 EST 2023" starttimestamp="1701710826491" timestamp="4849085" timestamp2="4849085">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="920" _type="InsertStringCommand" date="Mon Dec 04 13:47:55 EST 2023" starttimestamp="1701710826491" timestamp="4849085" timestamp2="4849085">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="922" _type="InsertStringCommand" date="Mon Dec 04 13:47:55 EST 2023" starttimestamp="1701710826491" timestamp="4849184" timestamp2="4849184">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="923" _type="InsertStringCommand" date="Mon Dec 04 13:47:55 EST 2023" starttimestamp="1701710826491" timestamp="4849184" timestamp2="4849184">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="925" _type="InsertStringCommand" date="Mon Dec 04 13:47:55 EST 2023" starttimestamp="1701710826491" timestamp="4849421" timestamp2="4849421">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="926" _type="InsertStringCommand" date="Mon Dec 04 13:47:55 EST 2023" starttimestamp="1701710826491" timestamp="4849421" timestamp2="4849421">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="927" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 13:47:55 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="4849456" />
  <Command __id="928" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 13:47:56 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="4850032" />
  <DocumentChange __id="892" _type="Delete" date="Mon Dec 04 13:47:52 EST 2023" docASTNodeCount="202" docActiveCodeLength="1220" docExpressionCount="150" docLength="1220" endLine="15" length="10" offset="476" startLine="15" starttimestamp="1701710826491" timestamp="4845602">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <DocumentChange __id="897" _type="Insert" date="Mon Dec 04 13:47:54 EST 2023" docASTNodeCount="204" docActiveCodeLength="1230" docExpressionCount="152" docLength="1230" length="10" offset="804" repeat="10" starttimestamp="1701710826491" timestamp="4847692" timestamp2="4849417">
    <text><![CDATA[getHead().]]></text>
  </DocumentChange>
  <Command __id="929" _type="MoveCaretCommand" caretOffset="522" date="Mon Dec 04 13:47:56 EST 2023" docOffset="522" starttimestamp="1701710826491" timestamp="4850046" />
  <Command __id="930" _type="MoveCaretCommand" caretOffset="522" date="Mon Dec 04 13:47:56 EST 2023" docOffset="522" starttimestamp="1701710826491" timestamp="4850046" />
  <DocumentChange __id="931" _type="Delete" date="Mon Dec 04 13:48:08 EST 2023" docASTNodeCount="202" docActiveCodeLength="1220" docExpressionCount="150" docLength="1220" endLine="28" length="10" offset="804" startLine="28" starttimestamp="1701710826491" timestamp="4861719">
    <text><![CDATA[getHead().]]></text>
  </DocumentChange>
  <Command __id="932" _type="UndoCommand" date="Mon Dec 04 13:48:08 EST 2023" starttimestamp="1701710826491" timestamp="4861726" />
  <Command __id="934" _type="UndoCommand" date="Mon Dec 04 13:48:08 EST 2023" starttimestamp="1701710826491" timestamp="4862136" />
  <Command __id="935" _type="MoveCaretCommand" caretOffset="802" date="Mon Dec 04 13:48:09 EST 2023" docOffset="802" starttimestamp="1701710826491" timestamp="4863036" />
  <Command __id="936" _type="MoveCaretCommand" caretOffset="802" date="Mon Dec 04 13:48:09 EST 2023" docOffset="802" starttimestamp="1701710826491" timestamp="4863036" />
  <Command __id="937" _type="ShellCommand" date="Mon Dec 04 13:48:29 EST 2023" starttimestamp="1701710826491" timestamp="4882760" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="938" _type="ShellCommand" date="Mon Dec 04 13:48:32 EST 2023" starttimestamp="1701710826491" timestamp="4886006" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="939" _type="ShellCommand" date="Mon Dec 04 13:48:33 EST 2023" starttimestamp="1701710826491" timestamp="4887149" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="940" _type="ShellCommand" date="Mon Dec 04 13:49:34 EST 2023" starttimestamp="1701710826491" timestamp="4947868" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="941" _type="ShellCommand" date="Mon Dec 04 13:49:38 EST 2023" starttimestamp="1701710826491" timestamp="4952488" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="942" _type="ShellCommand" date="Mon Dec 04 13:49:47 EST 2023" starttimestamp="1701710826491" timestamp="4960689" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="943" _type="ShellCommand" date="Mon Dec 04 13:49:47 EST 2023" starttimestamp="1701710826491" timestamp="4960912" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="945" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:49:50 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4964418" type="Run" />
  <Command __id="946" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:49:50 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="4964418" type="Run" />
  <Command __id="947" _type="PasteCommand" date="Mon Dec 04 13:49:52 EST 2023" starttimestamp="1701710826491" timestamp="4965960" />
  <Command __id="948" _type="ConsoleOutput" date="Mon Dec 04 13:49:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4966246" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at index.SetqEvaluator.evalHelper(SetqEvaluator.java:18)¶	at index.SetqEvaluator.eval(SetqEvaluator.java:13)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:13)"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="949" _type="ShellCommand" date="Mon Dec 04 13:49:54 EST 2023" starttimestamp="1701710826491" timestamp="4968112" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="950" _type="ShellCommand" date="Mon Dec 04 13:49:57 EST 2023" starttimestamp="1701710826491" timestamp="4970852" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="951" _type="PasteCommand" date="Mon Dec 04 13:49:57 EST 2023" starttimestamp="1701710826491" timestamp="4971435" />
  <Command __id="952" _type="ConsoleOutput" date="Mon Dec 04 13:49:58 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="4971746" type="ConsoleOutput">
    <outputString><![CDATA[7
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="953" _type="SelectTextCommand" caretOffset="476" date="Mon Dec 04 13:50:02 EST 2023" end="487" start="476" starttimestamp="1701710826491" timestamp="4976171" />
  <Command __id="954" _type="SelectTextCommand" caretOffset="476" date="Mon Dec 04 13:50:02 EST 2023" end="487" start="476" starttimestamp="1701710826491" timestamp="4976171" />
  <Command __id="956" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:50:02 EST 2023" starttimestamp="1701710826491" timestamp="4976426" />
  <Command __id="957" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:50:02 EST 2023" starttimestamp="1701710826491" timestamp="4976426" />
  <Command __id="958" _type="MoveCaretCommand" caretOffset="626" date="Mon Dec 04 13:50:03 EST 2023" docOffset="626" starttimestamp="1701710826491" timestamp="4977085" />
  <Command __id="959" _type="MoveCaretCommand" caretOffset="626" date="Mon Dec 04 13:50:03 EST 2023" docOffset="626" starttimestamp="1701710826491" timestamp="4977085" />
  <Command __id="960" _type="MoveCaretCommand" caretOffset="476" date="Mon Dec 04 13:50:06 EST 2023" docOffset="476" starttimestamp="1701710826491" timestamp="4979638" />
  <Command __id="961" _type="MoveCaretCommand" caretOffset="476" date="Mon Dec 04 13:50:06 EST 2023" docOffset="476" starttimestamp="1701710826491" timestamp="4979638" />
  <Command __id="963" _type="InsertStringCommand" date="Mon Dec 04 13:50:06 EST 2023" starttimestamp="1701710826491" timestamp="4979886" timestamp2="4979886">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="964" _type="InsertStringCommand" date="Mon Dec 04 13:50:06 EST 2023" starttimestamp="1701710826491" timestamp="4979886" timestamp2="4979886">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="965" _type="MoveCaretCommand" caretOffset="522" date="Mon Dec 04 13:50:06 EST 2023" docOffset="522" starttimestamp="1701710826491" timestamp="4980426" />
  <Command __id="966" _type="MoveCaretCommand" caretOffset="522" date="Mon Dec 04 13:50:06 EST 2023" docOffset="522" starttimestamp="1701710826491" timestamp="4980426" />
  <Command __id="967" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 13:50:07 EST 2023" starttimestamp="1701710826491" timestamp="4981111" />
  <Command __id="968" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:50:07 EST 2023" starttimestamp="1701710826491" timestamp="4981208" />
  <Command __id="969" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:50:07 EST 2023" starttimestamp="1701710826491" timestamp="4981217" />
  <Command __id="970" _type="MoveCaretCommand" caretOffset="627" date="Mon Dec 04 13:50:08 EST 2023" docOffset="627" starttimestamp="1701710826491" timestamp="4981534" />
  <Command __id="971" _type="MoveCaretCommand" caretOffset="627" date="Mon Dec 04 13:50:08 EST 2023" docOffset="627" starttimestamp="1701710826491" timestamp="4981534" />
  <Command __id="972" _type="MoveCaretCommand" caretOffset="783" date="Mon Dec 04 13:50:09 EST 2023" docOffset="783" starttimestamp="1701710826491" timestamp="4982650" />
  <Command __id="973" _type="MoveCaretCommand" caretOffset="783" date="Mon Dec 04 13:50:09 EST 2023" docOffset="783" starttimestamp="1701710826491" timestamp="4982650" />
  <Command __id="974" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:50:09 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="4983051" />
  <Command __id="975" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:50:09 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="4983051" />
  <Command __id="976" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:50:10 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="4983521" />
  <Command __id="977" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:50:10 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="4983521" />
  <Command __id="978" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:50:24 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="4998472" />
  <Command __id="979" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:50:24 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="4998472" />
  <Command __id="980" _type="MoveCaretCommand" caretOffset="1128" date="Mon Dec 04 13:50:46 EST 2023" docOffset="1128" starttimestamp="1701710826491" timestamp="5020001" />
  <Command __id="981" _type="MoveCaretCommand" caretOffset="1128" date="Mon Dec 04 13:50:46 EST 2023" docOffset="1128" starttimestamp="1701710826491" timestamp="5020002" />
  <Command __id="982" _type="MoveCaretCommand" caretOffset="1140" date="Mon Dec 04 13:50:47 EST 2023" docOffset="1140" starttimestamp="1701710826491" timestamp="5020805" />
  <Command __id="983" _type="MoveCaretCommand" caretOffset="1140" date="Mon Dec 04 13:50:47 EST 2023" docOffset="1140" starttimestamp="1701710826491" timestamp="5020805" />
  <Command __id="984" _type="MoveCaretCommand" caretOffset="1147" date="Mon Dec 04 13:50:47 EST 2023" docOffset="1147" starttimestamp="1701710826491" timestamp="5021352" />
  <Command __id="985" _type="MoveCaretCommand" caretOffset="1147" date="Mon Dec 04 13:50:47 EST 2023" docOffset="1147" starttimestamp="1701710826491" timestamp="5021353" />
  <Command __id="986" _type="SelectTextCommand" caretOffset="1153" date="Mon Dec 04 13:50:47 EST 2023" end="1153" start="1141" starttimestamp="1701710826491" timestamp="5021507" />
  <Command __id="987" _type="SelectTextCommand" caretOffset="1153" date="Mon Dec 04 13:50:47 EST 2023" end="1153" start="1141" starttimestamp="1701710826491" timestamp="5021508" />
  <Command __id="988" _type="MoveCaretCommand" caretOffset="1158" date="Mon Dec 04 13:50:48 EST 2023" docOffset="1158" starttimestamp="1701710826491" timestamp="5022039" />
  <Command __id="989" _type="MoveCaretCommand" caretOffset="1158" date="Mon Dec 04 13:50:48 EST 2023" docOffset="1158" starttimestamp="1701710826491" timestamp="5022039" />
  <Command __id="990" _type="SelectTextCommand" caretOffset="1158" date="Mon Dec 04 13:50:48 EST 2023" end="1158" start="1154" starttimestamp="1701710826491" timestamp="5022187" />
  <Command __id="991" _type="SelectTextCommand" caretOffset="1158" date="Mon Dec 04 13:50:48 EST 2023" end="1158" start="1154" starttimestamp="1701710826491" timestamp="5022187" />
  <Command __id="992" _type="MoveCaretCommand" caretOffset="1166" date="Mon Dec 04 13:50:49 EST 2023" docOffset="1166" starttimestamp="1701710826491" timestamp="5022671" />
  <Command __id="993" _type="MoveCaretCommand" caretOffset="1166" date="Mon Dec 04 13:50:49 EST 2023" docOffset="1166" starttimestamp="1701710826491" timestamp="5022671" />
  <Command __id="994" _type="MoveCaretCommand" caretOffset="1167" date="Mon Dec 04 13:50:49 EST 2023" docOffset="1167" starttimestamp="1701710826491" timestamp="5022819" />
  <Command __id="995" _type="MoveCaretCommand" caretOffset="1167" date="Mon Dec 04 13:50:49 EST 2023" docOffset="1167" starttimestamp="1701710826491" timestamp="5022819" />
  <Command __id="996" _type="MoveCaretCommand" caretOffset="1174" date="Mon Dec 04 13:50:49 EST 2023" docOffset="1174" starttimestamp="1701710826491" timestamp="5023269" />
  <Command __id="997" _type="MoveCaretCommand" caretOffset="1174" date="Mon Dec 04 13:50:49 EST 2023" docOffset="1174" starttimestamp="1701710826491" timestamp="5023269" />
  <Command __id="998" _type="SelectTextCommand" caretOffset="1177" date="Mon Dec 04 13:50:49 EST 2023" end="1177" start="1169" starttimestamp="1701710826491" timestamp="5023437" />
  <Command __id="999" _type="SelectTextCommand" caretOffset="1177" date="Mon Dec 04 13:50:49 EST 2023" end="1177" start="1169" starttimestamp="1701710826491" timestamp="5023437" />
  <Command __id="1000" _type="MoveCaretCommand" caretOffset="1182" date="Mon Dec 04 13:50:50 EST 2023" docOffset="1182" starttimestamp="1701710826491" timestamp="5023921" />
  <Command __id="1001" _type="MoveCaretCommand" caretOffset="1182" date="Mon Dec 04 13:50:50 EST 2023" docOffset="1182" starttimestamp="1701710826491" timestamp="5023921" />
  <Command __id="1002" _type="SelectTextCommand" caretOffset="1185" date="Mon Dec 04 13:50:50 EST 2023" end="1185" start="1181" starttimestamp="1701710826491" timestamp="5024070" />
  <Command __id="1003" _type="SelectTextCommand" caretOffset="1185" date="Mon Dec 04 13:50:50 EST 2023" end="1185" start="1181" starttimestamp="1701710826491" timestamp="5024070" />
  <Command __id="1004" _type="MoveCaretCommand" caretOffset="1172" date="Mon Dec 04 13:50:51 EST 2023" docOffset="1172" starttimestamp="1701710826491" timestamp="5024555" />
  <Command __id="1005" _type="MoveCaretCommand" caretOffset="1172" date="Mon Dec 04 13:50:51 EST 2023" docOffset="1172" starttimestamp="1701710826491" timestamp="5024556" />
  <Command __id="1006" _type="MoveCaretCommand" caretOffset="1156" date="Mon Dec 04 13:50:51 EST 2023" docOffset="1156" starttimestamp="1701710826491" timestamp="5025081" />
  <Command __id="1007" _type="MoveCaretCommand" caretOffset="1156" date="Mon Dec 04 13:50:51 EST 2023" docOffset="1156" starttimestamp="1701710826491" timestamp="5025081" />
  <Command __id="1008" _type="MoveCaretCommand" caretOffset="819" date="Mon Dec 04 13:51:19 EST 2023" docOffset="819" starttimestamp="1701710826491" timestamp="5052823" />
  <Command __id="1009" _type="MoveCaretCommand" caretOffset="819" date="Mon Dec 04 13:51:19 EST 2023" docOffset="819" starttimestamp="1701710826491" timestamp="5052823" />
  <Command __id="1010" _type="MoveCaretCommand" caretOffset="860" date="Mon Dec 04 13:51:21 EST 2023" docOffset="860" starttimestamp="1701710826491" timestamp="5054525" />
  <Command __id="1011" _type="MoveCaretCommand" caretOffset="860" date="Mon Dec 04 13:51:21 EST 2023" docOffset="860" starttimestamp="1701710826491" timestamp="5054525" />
  <Command __id="1012" _type="SelectTextCommand" caretOffset="861" date="Mon Dec 04 13:51:21 EST 2023" end="861" start="851" starttimestamp="1701710826491" timestamp="5054657" />
  <Command __id="1013" _type="SelectTextCommand" caretOffset="861" date="Mon Dec 04 13:51:21 EST 2023" end="861" start="851" starttimestamp="1701710826491" timestamp="5054657" />
  <Command __id="1014" _type="MoveCaretCommand" caretOffset="802" date="Mon Dec 04 13:51:52 EST 2023" docOffset="802" starttimestamp="1701710826491" timestamp="5086360" />
  <Command __id="1015" _type="MoveCaretCommand" caretOffset="802" date="Mon Dec 04 13:51:52 EST 2023" docOffset="802" starttimestamp="1701710826491" timestamp="5086360" />
  <DocumentChange __id="933" _type="Insert" date="Mon Dec 04 13:48:08 EST 2023" docASTNodeCount="204" docActiveCodeLength="1230" docExpressionCount="152" docLength="1230" length="10" offset="476" starttimestamp="1701710826491" timestamp="4862132">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <DocumentChange __id="955" _type="Delete" date="Mon Dec 04 13:50:02 EST 2023" docASTNodeCount="202" docActiveCodeLength="1219" docExpressionCount="150" docLength="1219" endLine="15" length="11" offset="476" startLine="15" starttimestamp="1701710826491" timestamp="4976417">
    <text><![CDATA[.getHead();]]></text>
  </DocumentChange>
  <DocumentChange __id="962" _type="Insert" date="Mon Dec 04 13:50:06 EST 2023" docASTNodeCount="202" docActiveCodeLength="1220" docExpressionCount="150" docLength="1220" length="1" offset="476" starttimestamp="1701710826491" timestamp="4979881">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="1016" _type="MoveCaretCommand" caretOffset="804" date="Mon Dec 04 13:52:34 EST 2023" docOffset="804" starttimestamp="1701710826491" timestamp="5128212" />
  <Command __id="1017" _type="MoveCaretCommand" caretOffset="804" date="Mon Dec 04 13:52:34 EST 2023" docOffset="804" starttimestamp="1701710826491" timestamp="5128213" />
  <DocumentChange __id="1018" _type="Insert" date="Mon Dec 04 13:52:48 EST 2023" docASTNodeCount="202" docActiveCodeLength="1223" docExpressionCount="150" docLength="1223" length="3" offset="804" repeat="3" starttimestamp="1701710826491" timestamp="5142291" timestamp2="5142447">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <Command __id="1019" _type="InsertStringCommand" date="Mon Dec 04 13:52:48 EST 2023" starttimestamp="1701710826491" timestamp="5142293" timestamp2="5142293">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1020" _type="InsertStringCommand" date="Mon Dec 04 13:52:48 EST 2023" starttimestamp="1701710826491" timestamp="5142293" timestamp2="5142293">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1022" _type="InsertStringCommand" date="Mon Dec 04 13:52:48 EST 2023" starttimestamp="1701710826491" timestamp="5142333" timestamp2="5142333">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1023" _type="InsertStringCommand" date="Mon Dec 04 13:52:48 EST 2023" starttimestamp="1701710826491" timestamp="5142333" timestamp2="5142333">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1025" _type="InsertStringCommand" date="Mon Dec 04 13:52:48 EST 2023" starttimestamp="1701710826491" timestamp="5142448" timestamp2="5142448">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1026" _type="InsertStringCommand" date="Mon Dec 04 13:52:48 EST 2023" starttimestamp="1701710826491" timestamp="5142448" timestamp2="5142448">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1027" _type="Delete" date="Mon Dec 04 13:52:49 EST 2023" docASTNodeCount="202" docActiveCodeLength="1220" docExpressionCount="150" docLength="1220" endLine="28" length="3" offset="804" repeat="3" startLine="28" starttimestamp="1701710826491" timestamp="5142664" timestamp2="5142885">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <Command __id="1028" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:52:49 EST 2023" starttimestamp="1701710826491" timestamp="5142668" />
  <Command __id="1029" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:52:49 EST 2023" starttimestamp="1701710826491" timestamp="5142668" />
  <Command __id="1031" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:52:49 EST 2023" starttimestamp="1701710826491" timestamp="5142777" />
  <Command __id="1032" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:52:49 EST 2023" starttimestamp="1701710826491" timestamp="5142777" />
  <Command __id="1034" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:52:49 EST 2023" starttimestamp="1701710826491" timestamp="5142887" />
  <Command __id="1035" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:52:49 EST 2023" starttimestamp="1701710826491" timestamp="5142887" />
  <Command __id="1037" _type="InsertStringCommand" date="Mon Dec 04 13:52:50 EST 2023" starttimestamp="1701710826491" timestamp="5143734" timestamp2="5143734">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1038" _type="InsertStringCommand" date="Mon Dec 04 13:52:50 EST 2023" starttimestamp="1701710826491" timestamp="5143734" timestamp2="5143734">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1040" _type="InsertStringCommand" date="Mon Dec 04 13:52:50 EST 2023" starttimestamp="1701710826491" timestamp="5143781" timestamp2="5143781">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1041" _type="InsertStringCommand" date="Mon Dec 04 13:52:50 EST 2023" starttimestamp="1701710826491" timestamp="5143781" timestamp2="5143781">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1043" _type="InsertStringCommand" date="Mon Dec 04 13:52:50 EST 2023" starttimestamp="1701710826491" timestamp="5143893" timestamp2="5143893">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1044" _type="InsertStringCommand" date="Mon Dec 04 13:52:50 EST 2023" starttimestamp="1701710826491" timestamp="5143893" timestamp2="5143893">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1046" _type="InsertStringCommand" date="Mon Dec 04 13:52:50 EST 2023" starttimestamp="1701710826491" timestamp="5144151" timestamp2="5144151">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1047" _type="InsertStringCommand" date="Mon Dec 04 13:52:50 EST 2023" starttimestamp="1701710826491" timestamp="5144151" timestamp2="5144151">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1049" _type="InsertStringCommand" date="Mon Dec 04 13:52:50 EST 2023" starttimestamp="1701710826491" timestamp="5144324" timestamp2="5144324">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1050" _type="InsertStringCommand" date="Mon Dec 04 13:52:50 EST 2023" starttimestamp="1701710826491" timestamp="5144324" timestamp2="5144324">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1052" _type="InsertStringCommand" date="Mon Dec 04 13:52:50 EST 2023" starttimestamp="1701710826491" timestamp="5144454" timestamp2="5144454">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1053" _type="InsertStringCommand" date="Mon Dec 04 13:52:50 EST 2023" starttimestamp="1701710826491" timestamp="5144454" timestamp2="5144454">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1055" _type="InsertStringCommand" date="Mon Dec 04 13:52:51 EST 2023" starttimestamp="1701710826491" timestamp="5144563" timestamp2="5144563">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1056" _type="InsertStringCommand" date="Mon Dec 04 13:52:51 EST 2023" starttimestamp="1701710826491" timestamp="5144563" timestamp2="5144563">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1058" _type="InsertStringCommand" date="Mon Dec 04 13:52:51 EST 2023" starttimestamp="1701710826491" timestamp="5144823" timestamp2="5144823">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1059" _type="InsertStringCommand" date="Mon Dec 04 13:52:51 EST 2023" starttimestamp="1701710826491" timestamp="5144823" timestamp2="5144823">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1061" _type="InsertStringCommand" date="Mon Dec 04 13:52:51 EST 2023" starttimestamp="1701710826491" timestamp="5144895" timestamp2="5144895">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1062" _type="InsertStringCommand" date="Mon Dec 04 13:52:51 EST 2023" starttimestamp="1701710826491" timestamp="5144895" timestamp2="5144895">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1064" _type="InsertStringCommand" date="Mon Dec 04 13:52:51 EST 2023" starttimestamp="1701710826491" timestamp="5145121" timestamp2="5145121">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1065" _type="InsertStringCommand" date="Mon Dec 04 13:52:51 EST 2023" starttimestamp="1701710826491" timestamp="5145121" timestamp2="5145121">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1066" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 13:52:51 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="5145128" />
  <Command __id="1067" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 13:52:52 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="5146108" />
  <Command __id="1068" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:52:52 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5146125" />
  <Command __id="1069" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:52:52 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5146125" />
  <Command __id="1070" _type="SelectTextCommand" caretOffset="955" date="Mon Dec 04 13:52:55 EST 2023" end="955" start="945" starttimestamp="1701710826491" timestamp="5148998" />
  <Command __id="1071" _type="SelectTextCommand" caretOffset="955" date="Mon Dec 04 13:52:55 EST 2023" end="955" start="945" starttimestamp="1701710826491" timestamp="5148999" />
  <Command __id="1073" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:52:55 EST 2023" starttimestamp="1701710826491" timestamp="5149249" />
  <Command __id="1074" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:52:55 EST 2023" starttimestamp="1701710826491" timestamp="5149249" />
  <Command __id="1075" _type="MoveCaretCommand" caretOffset="1050" date="Mon Dec 04 13:52:56 EST 2023" docOffset="1050" starttimestamp="1701710826491" timestamp="5150329" />
  <Command __id="1076" _type="MoveCaretCommand" caretOffset="1050" date="Mon Dec 04 13:52:56 EST 2023" docOffset="1050" starttimestamp="1701710826491" timestamp="5150329" />
  <Command __id="1077" _type="MoveCaretCommand" caretOffset="1029" date="Mon Dec 04 13:52:59 EST 2023" docOffset="1029" starttimestamp="1701710826491" timestamp="5153148" />
  <Command __id="1078" _type="MoveCaretCommand" caretOffset="1029" date="Mon Dec 04 13:52:59 EST 2023" docOffset="1029" starttimestamp="1701710826491" timestamp="5153148" />
  <Command __id="1080" _type="InsertStringCommand" date="Mon Dec 04 13:53:00 EST 2023" starttimestamp="1701710826491" timestamp="5153524" timestamp2="5153524">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1081" _type="InsertStringCommand" date="Mon Dec 04 13:53:00 EST 2023" starttimestamp="1701710826491" timestamp="5153524" timestamp2="5153524">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1083" _type="InsertStringCommand" date="Mon Dec 04 13:53:00 EST 2023" starttimestamp="1701710826491" timestamp="5153584" timestamp2="5153584">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1084" _type="InsertStringCommand" date="Mon Dec 04 13:53:00 EST 2023" starttimestamp="1701710826491" timestamp="5153584" timestamp2="5153584">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1086" _type="InsertStringCommand" date="Mon Dec 04 13:53:00 EST 2023" starttimestamp="1701710826491" timestamp="5153709" timestamp2="5153709">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1087" _type="InsertStringCommand" date="Mon Dec 04 13:53:00 EST 2023" starttimestamp="1701710826491" timestamp="5153709" timestamp2="5153709">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1089" _type="InsertStringCommand" date="Mon Dec 04 13:53:00 EST 2023" starttimestamp="1701710826491" timestamp="5153998" timestamp2="5153998">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1090" _type="InsertStringCommand" date="Mon Dec 04 13:53:00 EST 2023" starttimestamp="1701710826491" timestamp="5153998" timestamp2="5153998">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1092" _type="InsertStringCommand" date="Mon Dec 04 13:53:00 EST 2023" starttimestamp="1701710826491" timestamp="5154393" timestamp2="5154393">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1093" _type="InsertStringCommand" date="Mon Dec 04 13:53:00 EST 2023" starttimestamp="1701710826491" timestamp="5154393" timestamp2="5154393">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1095" _type="InsertStringCommand" date="Mon Dec 04 13:53:00 EST 2023" starttimestamp="1701710826491" timestamp="5154490" timestamp2="5154490">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1096" _type="InsertStringCommand" date="Mon Dec 04 13:53:00 EST 2023" starttimestamp="1701710826491" timestamp="5154490" timestamp2="5154490">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1098" _type="InsertStringCommand" date="Mon Dec 04 13:53:01 EST 2023" starttimestamp="1701710826491" timestamp="5154580" timestamp2="5154580">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1099" _type="InsertStringCommand" date="Mon Dec 04 13:53:01 EST 2023" starttimestamp="1701710826491" timestamp="5154580" timestamp2="5154580">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1101" _type="InsertStringCommand" date="Mon Dec 04 13:53:01 EST 2023" starttimestamp="1701710826491" timestamp="5154844" timestamp2="5154844">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1102" _type="InsertStringCommand" date="Mon Dec 04 13:53:01 EST 2023" starttimestamp="1701710826491" timestamp="5154844" timestamp2="5154844">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1104" _type="InsertStringCommand" date="Mon Dec 04 13:53:01 EST 2023" starttimestamp="1701710826491" timestamp="5154924" timestamp2="5154924">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1105" _type="InsertStringCommand" date="Mon Dec 04 13:53:01 EST 2023" starttimestamp="1701710826491" timestamp="5154924" timestamp2="5154924">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1107" _type="InsertStringCommand" date="Mon Dec 04 13:53:01 EST 2023" starttimestamp="1701710826491" timestamp="5155124" timestamp2="5155124">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1108" _type="InsertStringCommand" date="Mon Dec 04 13:53:01 EST 2023" starttimestamp="1701710826491" timestamp="5155124" timestamp2="5155124">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1109" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 13:53:01 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="5155131" />
  <Command __id="1110" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 13:53:02 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="5156425" />
  <Command __id="1111" _type="MoveCaretCommand" caretOffset="766" date="Mon Dec 04 13:53:02 EST 2023" docOffset="766" starttimestamp="1701710826491" timestamp="5156442" />
  <Command __id="1112" _type="MoveCaretCommand" caretOffset="766" date="Mon Dec 04 13:53:02 EST 2023" docOffset="766" starttimestamp="1701710826491" timestamp="5156442" />
  <Command __id="1113" _type="MoveCaretCommand" caretOffset="1169" date="Mon Dec 04 13:53:04 EST 2023" docOffset="1169" starttimestamp="1701710826491" timestamp="5158298" />
  <Command __id="1114" _type="MoveCaretCommand" caretOffset="1169" date="Mon Dec 04 13:53:04 EST 2023" docOffset="1169" starttimestamp="1701710826491" timestamp="5158298" />
  <Command __id="1116" _type="InsertStringCommand" date="Mon Dec 04 13:53:05 EST 2023" starttimestamp="1701710826491" timestamp="5158832" timestamp2="5158832">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1117" _type="InsertStringCommand" date="Mon Dec 04 13:53:05 EST 2023" starttimestamp="1701710826491" timestamp="5158832" timestamp2="5158832">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1119" _type="InsertStringCommand" date="Mon Dec 04 13:53:05 EST 2023" starttimestamp="1701710826491" timestamp="5158901" timestamp2="5158901">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1120" _type="InsertStringCommand" date="Mon Dec 04 13:53:05 EST 2023" starttimestamp="1701710826491" timestamp="5158901" timestamp2="5158901">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1122" _type="InsertStringCommand" date="Mon Dec 04 13:53:05 EST 2023" starttimestamp="1701710826491" timestamp="5159013" timestamp2="5159013">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1123" _type="InsertStringCommand" date="Mon Dec 04 13:53:05 EST 2023" starttimestamp="1701710826491" timestamp="5159013" timestamp2="5159013">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1125" _type="InsertStringCommand" date="Mon Dec 04 13:53:05 EST 2023" starttimestamp="1701710826491" timestamp="5159365" timestamp2="5159365">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1126" _type="InsertStringCommand" date="Mon Dec 04 13:53:05 EST 2023" starttimestamp="1701710826491" timestamp="5159365" timestamp2="5159365">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1128" _type="InsertStringCommand" date="Mon Dec 04 13:53:06 EST 2023" starttimestamp="1701710826491" timestamp="5159557" timestamp2="5159557">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1129" _type="InsertStringCommand" date="Mon Dec 04 13:53:06 EST 2023" starttimestamp="1701710826491" timestamp="5159557" timestamp2="5159557">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1131" _type="InsertStringCommand" date="Mon Dec 04 13:53:06 EST 2023" starttimestamp="1701710826491" timestamp="5159632" timestamp2="5159632">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1132" _type="InsertStringCommand" date="Mon Dec 04 13:53:06 EST 2023" starttimestamp="1701710826491" timestamp="5159632" timestamp2="5159632">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1134" _type="InsertStringCommand" date="Mon Dec 04 13:53:06 EST 2023" starttimestamp="1701710826491" timestamp="5159734" timestamp2="5159734">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1135" _type="InsertStringCommand" date="Mon Dec 04 13:53:06 EST 2023" starttimestamp="1701710826491" timestamp="5159734" timestamp2="5159734">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1137" _type="InsertStringCommand" date="Mon Dec 04 13:53:06 EST 2023" starttimestamp="1701710826491" timestamp="5160002" timestamp2="5160002">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1138" _type="InsertStringCommand" date="Mon Dec 04 13:53:06 EST 2023" starttimestamp="1701710826491" timestamp="5160002" timestamp2="5160002">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1140" _type="InsertStringCommand" date="Mon Dec 04 13:53:06 EST 2023" starttimestamp="1701710826491" timestamp="5160070" timestamp2="5160070">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1141" _type="InsertStringCommand" date="Mon Dec 04 13:53:06 EST 2023" starttimestamp="1701710826491" timestamp="5160070" timestamp2="5160070">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1143" _type="InsertStringCommand" date="Mon Dec 04 13:53:06 EST 2023" starttimestamp="1701710826491" timestamp="5160309" timestamp2="5160309">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1144" _type="InsertStringCommand" date="Mon Dec 04 13:53:06 EST 2023" starttimestamp="1701710826491" timestamp="5160309" timestamp2="5160309">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1145" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 13:53:06 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="5160316" />
  <Command __id="1146" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 13:53:07 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="5160899" />
  <Command __id="1158" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:53:12 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="5166264" type="Run" />
  <Command __id="1159" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:53:12 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="5166264" type="Run" />
  <Command __id="1160" _type="ShellCommand" date="Mon Dec 04 13:53:13 EST 2023" starttimestamp="1701710826491" timestamp="5166775" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1161" _type="ShellCommand" date="Mon Dec 04 13:53:14 EST 2023" starttimestamp="1701710826491" timestamp="5167567" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1162" _type="PasteCommand" date="Mon Dec 04 13:53:14 EST 2023" starttimestamp="1701710826491" timestamp="5167813" />
  <Command __id="1163" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:53:14 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="5168121" type="Debug" />
  <Command __id="1164" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:53:14 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="5168121" type="Run" />
  <Command __id="1165" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:53:14 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="5168121" type="Debug" />
  <Command __id="1166" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:53:14 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="5168121" type="Run" />
  <Command __id="1167" _type="ConsoleOutput" date="Mon Dec 04 13:53:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="5168121" type="ConsoleOutput">
    <outputString><![CDATA[Exception in thread "main" java.lang.ClassCastException: class main.lisp.parser.terms.NilAtom cannot be cast to class main.lisp.parser.terms.IdentifierAtom (main.lisp.parser.terms.NilAtom and main.lisp.parser.terms.IdentifierAtom are in unnamed module of loader 'app')
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"7"), Diff(INSERT,"Exception in thread "main" java.lang.ClassCastException: class main.lisp.parser.terms.NilAtom cannot be cast to class main.lisp.parser.terms.IdentifierAtom (main.lisp.parser.terms.NilAtom and main.lisp.parser.terms.IdentifierAtom are in unnamed module of loader 'app')"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1168" _type="ConsoleOutput" date="Mon Dec 04 13:53:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="5168130" type="ConsoleOutput">
    <outputString><![CDATA[	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:22)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:30)
	at index.EvalEvaluator.eval(EvalEvaluator.java:17)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:13)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Exception in thread "main" java.lang.ClassCastException: class main.lisp.parser.terms.NilAtom cannot be cast to class main.lisp.parser.terms.IdentifierAtom (main.lisp.parser.terms.NilAtom and main.lisp.parser.terms.IdentifierAtom are in unnamed module of loader 'app'"), Diff(INSERT,"	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:22)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:30)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:17)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:13"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="1169" _type="MoveCaretCommand" caretOffset="836" date="Mon Dec 04 13:53:22 EST 2023" docOffset="836" starttimestamp="1701710826491" timestamp="5175648" />
  <Command __id="1170" _type="MoveCaretCommand" caretOffset="836" date="Mon Dec 04 13:53:22 EST 2023" docOffset="836" starttimestamp="1701710826491" timestamp="5175648" />
  <Command __id="1171" _type="MoveCaretCommand" caretOffset="845" date="Mon Dec 04 13:53:23 EST 2023" docOffset="845" starttimestamp="1701710826491" timestamp="5177183" />
  <Command __id="1172" _type="MoveCaretCommand" caretOffset="845" date="Mon Dec 04 13:53:23 EST 2023" docOffset="845" starttimestamp="1701710826491" timestamp="5177184" />
  <Command __id="1173" _type="MoveCaretCommand" caretOffset="698" date="Mon Dec 04 13:53:31 EST 2023" docOffset="698" starttimestamp="1701710826491" timestamp="5184849" />
  <Command __id="1174" _type="MoveCaretCommand" caretOffset="698" date="Mon Dec 04 13:53:31 EST 2023" docOffset="698" starttimestamp="1701710826491" timestamp="5184849" />
  <Command __id="1175" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 13:55:12 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="5285889" />
  <Command __id="1176" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 13:55:12 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="5285889" />
  <Command __id="1177" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 13:55:12 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="5286387" />
  <Command __id="1178" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 13:55:12 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="5286387" />
  <Command __id="1179" _type="MoveCaretCommand" caretOffset="517" date="Mon Dec 04 13:55:13 EST 2023" docOffset="517" starttimestamp="1701710826491" timestamp="5286772" />
  <Command __id="1180" _type="MoveCaretCommand" caretOffset="517" date="Mon Dec 04 13:55:13 EST 2023" docOffset="517" starttimestamp="1701710826491" timestamp="5286772" />
  <Command __id="1182" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 13:55:13 EST 2023" starttimestamp="1701710826491" timestamp="5287500" />
  <Command __id="1183" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 13:55:14 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="5288185" />
  <Command __id="1184" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 13:55:14 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="5288185" />
  <Command __id="1186" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5288552" timestamp2="5288552">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1187" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5288552" timestamp2="5288552">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1189" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5288804" timestamp2="5288804">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1190" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5288804" timestamp2="5288804">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1192" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5288889" timestamp2="5288889">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1193" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5288889" timestamp2="5288889">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1195" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5289010" timestamp2="5289010">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1196" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5289010" timestamp2="5289010">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1198" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5289087" timestamp2="5289087">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1199" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5289087" timestamp2="5289087">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1201" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5289193" timestamp2="5289193">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1202" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5289193" timestamp2="5289193">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1204" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5289234" timestamp2="5289234">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1205" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5289234" timestamp2="5289234">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1207" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5289345" timestamp2="5289345">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="1036" _type="Insert" date="Mon Dec 04 13:52:50 EST 2023" docASTNodeCount="204" docActiveCodeLength="1230" docExpressionCount="152" docLength="1230" length="10" offset="804" repeat="10" starttimestamp="1701710826491" timestamp="5143731" timestamp2="5145117">
    <text><![CDATA[getHead().]]></text>
  </DocumentChange>
  <DocumentChange __id="1072" _type="Delete" date="Mon Dec 04 13:52:55 EST 2023" docASTNodeCount="202" docActiveCodeLength="1220" docExpressionCount="150" docLength="1220" endLine="29" length="10" offset="945" startLine="29" starttimestamp="1701710826491" timestamp="5149244">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <DocumentChange __id="1079" _type="Insert" date="Mon Dec 04 13:53:00 EST 2023" docASTNodeCount="204" docActiveCodeLength="1230" docExpressionCount="152" docLength="1230" length="10" offset="1029" repeat="10" starttimestamp="1701710826491" timestamp="5153521" timestamp2="5155120">
    <text><![CDATA[getHead().]]></text>
  </DocumentChange>
  <DocumentChange __id="1115" _type="Insert" date="Mon Dec 04 13:53:05 EST 2023" docASTNodeCount="206" docActiveCodeLength="1240" docExpressionCount="154" docLength="1240" length="10" offset="1169" repeat="10" starttimestamp="1701710826491" timestamp="5158828" timestamp2="5160305">
    <text><![CDATA[getHead().]]></text>
  </DocumentChange>
  <DocumentChange __id="1181" _type="Insert" date="Mon Dec 04 13:55:13 EST 2023" docASTNodeCount="201" docActiveCodeLength="1201" docExpressionCount="150" docLength="1242" length="2" offset="478" starttimestamp="1701710826491" timestamp="5287483">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1208" _type="InsertStringCommand" date="Mon Dec 04 13:55:15 EST 2023" starttimestamp="1701710826491" timestamp="5289345" timestamp2="5289345">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1210" _type="InsertStringCommand" date="Mon Dec 04 13:55:16 EST 2023" starttimestamp="1701710826491" timestamp="5289872" timestamp2="5289872">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1211" _type="InsertStringCommand" date="Mon Dec 04 13:55:16 EST 2023" starttimestamp="1701710826491" timestamp="5289872" timestamp2="5289872">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1213" _type="InsertStringCommand" date="Mon Dec 04 13:55:16 EST 2023" starttimestamp="1701710826491" timestamp="5290040" timestamp2="5290040">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="1214" _type="InsertStringCommand" date="Mon Dec 04 13:55:16 EST 2023" starttimestamp="1701710826491" timestamp="5290040" timestamp2="5290040">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="1216" _type="InsertStringCommand" date="Mon Dec 04 13:55:16 EST 2023" starttimestamp="1701710826491" timestamp="5290208" timestamp2="5290208">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1217" _type="InsertStringCommand" date="Mon Dec 04 13:55:16 EST 2023" starttimestamp="1701710826491" timestamp="5290208" timestamp2="5290208">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1219" _type="InsertStringCommand" date="Mon Dec 04 13:55:16 EST 2023" starttimestamp="1701710826491" timestamp="5290269" timestamp2="5290269">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1220" _type="InsertStringCommand" date="Mon Dec 04 13:55:16 EST 2023" starttimestamp="1701710826491" timestamp="5290269" timestamp2="5290269">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1222" _type="InsertStringCommand" date="Mon Dec 04 13:55:16 EST 2023" starttimestamp="1701710826491" timestamp="5290366" timestamp2="5290366">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1223" _type="InsertStringCommand" date="Mon Dec 04 13:55:16 EST 2023" starttimestamp="1701710826491" timestamp="5290366" timestamp2="5290366">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1224" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 13:55:16 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="5290372" />
  <Command __id="1229" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 13:55:20 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="5293744" />
  <Command __id="1231" _type="InsertStringCommand" date="Mon Dec 04 13:55:20 EST 2023" starttimestamp="1701710826491" timestamp="5293751" timestamp2="5293751">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1232" _type="InsertStringCommand" date="Mon Dec 04 13:55:20 EST 2023" starttimestamp="1701710826491" timestamp="5293751" timestamp2="5293751">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1234" _type="InsertStringCommand" date="Mon Dec 04 13:55:20 EST 2023" starttimestamp="1701710826491" timestamp="5294175" timestamp2="5294175">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1235" _type="InsertStringCommand" date="Mon Dec 04 13:55:20 EST 2023" starttimestamp="1701710826491" timestamp="5294175" timestamp2="5294175">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1239" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:55:24 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="5298355" type="Run" />
  <Command __id="1240" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:55:24 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="5298356" type="Run" />
  <Command __id="1242" _type="PasteCommand" date="Mon Dec 04 13:55:25 EST 2023" starttimestamp="1701710826491" timestamp="5298854" />
  <Command __id="1244" _type="UndoCommand" date="Mon Dec 04 13:55:26 EST 2023" starttimestamp="1701710826491" timestamp="5299653" />
  <Command __id="1245" _type="PasteCommand" date="Mon Dec 04 13:55:26 EST 2023" starttimestamp="1701710826491" timestamp="5300181" />
  <Command __id="1246" _type="ConsoleOutput" date="Mon Dec 04 13:55:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="5300329" type="ConsoleOutput">
    <outputString><![CDATA[(QUOTE (+ 3 4))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:22)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:30)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:17)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:13"), Diff(INSERT,"(QUOTE (+ 3 4)"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <DocumentChange __id="1185" _type="Insert" date="Mon Dec 04 13:55:15 EST 2023" docASTNodeCount="205" docActiveCodeLength="1220" docExpressionCount="153" docLength="1261" length="19" offset="477" repeat="17" starttimestamp="1701710826491" timestamp="5288547" timestamp2="5293505">
    <text><![CDATA[
		return expr.getH]]></text>
  </DocumentChange>
  <DocumentChange __id="1230" _type="Replace" date="Mon Dec 04 13:55:20 EST 2023" docASTNodeCount="205" docActiveCodeLength="1225" docExpressionCount="153" docLength="1266" endLine="16" insertionLength="9" int_docASTNodeCount="203" int_docActiveCodeLength="1216" int_docExpressionCount="151" int_docLength="1257" length="4" offset="492" startLine="16" starttimestamp="1701710826491" timestamp="5293747">
    <deletedText><![CDATA[getH]]></deletedText>
    <insertedText><![CDATA[getHead()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1233" _type="Insert" date="Mon Dec 04 13:55:20 EST 2023" docASTNodeCount="205" docActiveCodeLength="1226" docExpressionCount="153" docLength="1267" length="1" offset="501" starttimestamp="1701710826491" timestamp="5294172">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1241" _type="Insert" date="Mon Dec 04 13:55:25 EST 2023" docASTNodeCount="215" docActiveCodeLength="1248" docExpressionCount="162" docLength="1289" length="22" offset="502" starttimestamp="1701710826491" timestamp="5298846">
    <text><![CDATA[(eval (quote (+ 3 4)))]]></text>
  </DocumentChange>
  <DocumentChange __id="1243" _type="Delete" date="Mon Dec 04 13:55:26 EST 2023" docASTNodeCount="205" docActiveCodeLength="1226" docExpressionCount="153" docLength="1267" endLine="16" length="22" offset="502" startLine="16" starttimestamp="1701710826491" timestamp="5299646">
    <text><![CDATA[(eval (quote (+ 3 4)))]]></text>
  </DocumentChange>
  <Command __id="1247" _type="MoveCaretCommand" caretOffset="501" date="Mon Dec 04 13:55:31 EST 2023" docOffset="501" starttimestamp="1701710826491" timestamp="5305152" />
  <Command __id="1248" _type="MoveCaretCommand" caretOffset="501" date="Mon Dec 04 13:55:31 EST 2023" docOffset="501" starttimestamp="1701710826491" timestamp="5305152" />
  <DocumentChange __id="1249" _type="Insert" date="Mon Dec 04 13:55:32 EST 2023" docASTNodeCount="207" docActiveCodeLength="1231" docExpressionCount="155" docLength="1272" length="5" offset="501" repeat="5" starttimestamp="1701710826491" timestamp="5306164" timestamp2="5306697">
    <text><![CDATA[.getH]]></text>
  </DocumentChange>
  <Command __id="1250" _type="InsertStringCommand" date="Mon Dec 04 13:55:32 EST 2023" starttimestamp="1701710826491" timestamp="5306166" timestamp2="5306166">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1251" _type="InsertStringCommand" date="Mon Dec 04 13:55:32 EST 2023" starttimestamp="1701710826491" timestamp="5306166" timestamp2="5306166">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1252" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 13:55:32 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="5306179" />
  <Command __id="1257" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 13:55:33 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="5307017" />
  <Command __id="1261" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:55:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="5308374" type="Debug" />
  <Command __id="1262" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:55:34 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="5308374" type="Run" />
  <Command __id="1263" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:55:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="5308374" type="Debug" />
  <Command __id="1264" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:55:34 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="5308374" type="Run" />
  <Command __id="1265" _type="ShellCommand" date="Mon Dec 04 13:55:35 EST 2023" starttimestamp="1701710826491" timestamp="5309505" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1272" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:55:41 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="5314614" type="Run" />
  <Command __id="1273" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:55:41 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="5314614" type="Run" />
  <Command __id="1274" _type="PasteCommand" date="Mon Dec 04 13:55:41 EST 2023" starttimestamp="1701710826491" timestamp="5315455" />
  <Command __id="1275" _type="ConsoleOutput" date="Mon Dec 04 13:55:42 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="5315584" type="ConsoleOutput">
    <outputString><![CDATA[QUOTE
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"("), Diff(EQUAL,"QUOTE"), Diff(DELETE," (+ 3 4))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1278" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:55:45 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="5318674" type="Debug" />
  <Command __id="1279" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:55:45 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="5318674" type="Run" />
  <Command __id="1280" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 13:55:45 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="5318674" type="Debug" />
  <Command __id="1281" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 13:55:45 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="5318674" type="Run" />
  <Command __id="1282" _type="MoveCaretCommand" caretOffset="512" date="Mon Dec 04 13:55:46 EST 2023" docOffset="512" starttimestamp="1701710826491" timestamp="5319769" />
  <Command __id="1283" _type="MoveCaretCommand" caretOffset="512" date="Mon Dec 04 13:55:46 EST 2023" docOffset="512" starttimestamp="1701710826491" timestamp="5319769" />
  <Command __id="1284" _type="MoveCaretCommand" caretOffset="554" date="Mon Dec 04 13:55:47 EST 2023" docOffset="554" starttimestamp="1701710826491" timestamp="5320740" />
  <Command __id="1285" _type="MoveCaretCommand" caretOffset="554" date="Mon Dec 04 13:55:47 EST 2023" docOffset="554" starttimestamp="1701710826491" timestamp="5320740" />
  <Command __id="1287" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 13:55:48 EST 2023" starttimestamp="1701710826491" timestamp="5321541" />
  <Command __id="1288" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 13:55:48 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="5322154" />
  <Command __id="1289" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 13:55:48 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="5322154" />
  <Command __id="1290" _type="MoveCaretCommand" caretOffset="512" date="Mon Dec 04 13:55:49 EST 2023" docOffset="512" starttimestamp="1701710826491" timestamp="5322671" />
  <Command __id="1291" _type="MoveCaretCommand" caretOffset="512" date="Mon Dec 04 13:55:49 EST 2023" docOffset="512" starttimestamp="1701710826491" timestamp="5322671" />
  <Command __id="1293" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Dec 04 13:55:49 EST 2023" starttimestamp="1701710826491" timestamp="5323440" />
  <Command __id="1294" _type="MoveCaretCommand" caretOffset="517" date="Mon Dec 04 13:55:50 EST 2023" docOffset="517" starttimestamp="1701710826491" timestamp="5323806" />
  <Command __id="1295" _type="MoveCaretCommand" caretOffset="517" date="Mon Dec 04 13:55:50 EST 2023" docOffset="517" starttimestamp="1701710826491" timestamp="5323806" />
  <Command __id="1296" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 13:55:50 EST 2023" starttimestamp="1701710826491" timestamp="5323886" />
  <Command __id="1297" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:55:50 EST 2023" starttimestamp="1701710826491" timestamp="5323984" />
  <Command __id="1298" _type="EclipseCommand" commandID="" date="Mon Dec 04 13:55:50 EST 2023" starttimestamp="1701710826491" timestamp="5323992" />
  <Command __id="1299" _type="ShellCommand" date="Mon Dec 04 13:56:20 EST 2023" starttimestamp="1701710826491" timestamp="5354001" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1300" _type="ShellCommand" date="Mon Dec 04 13:56:21 EST 2023" starttimestamp="1701710826491" timestamp="5354597" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1301" _type="ShellCommand" date="Mon Dec 04 13:56:22 EST 2023" starttimestamp="1701710826491" timestamp="5355587" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1302" _type="ShellCommand" date="Mon Dec 04 13:56:40 EST 2023" starttimestamp="1701710826491" timestamp="5374451" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1303" _type="MoveCaretCommand" caretOffset="879" date="Mon Dec 04 13:56:42 EST 2023" docOffset="879" starttimestamp="1701710826491" timestamp="5375523" />
  <Command __id="1304" _type="MoveCaretCommand" caretOffset="879" date="Mon Dec 04 13:56:42 EST 2023" docOffset="879" starttimestamp="1701710826491" timestamp="5375523" />
  <Command __id="1305" _type="CheckStyleCommand" date="Mon Dec 04 13:56:42 EST 2023" starttimestamp="1701710826491" timestamp="5375528">
    <CSVRow><![CDATA[29,Mon Dec 04 13:55:50 EST 2023,true,index/EvalEvaluator.java,expectedTypes,[@NestedLexicalEnvironment, @BasicFuncallEvaluator, @LetEvaluator, @IdentifierAtomWithLookup, @FunctionEvaluator, @SetqEvaluator, @FunctionCallingSExpression, @LambdaEvaluator, @LambdaCallingSExpression]]]></CSVRow>
  </Command>
  <Command __id="1306" _type="MoveCaretCommand" caretOffset="868" date="Mon Dec 04 13:56:42 EST 2023" docOffset="868" starttimestamp="1701710826491" timestamp="5375987" />
  <Command __id="1307" _type="MoveCaretCommand" caretOffset="868" date="Mon Dec 04 13:56:42 EST 2023" docOffset="868" starttimestamp="1701710826491" timestamp="5375987" />
  <Command __id="1308" _type="MoveCaretCommand" caretOffset="877" date="Mon Dec 04 13:56:42 EST 2023" docOffset="877" starttimestamp="1701710826491" timestamp="5376457" />
  <Command __id="1309" _type="MoveCaretCommand" caretOffset="877" date="Mon Dec 04 13:56:42 EST 2023" docOffset="877" starttimestamp="1701710826491" timestamp="5376457" />
  <Command __id="1310" _type="MoveCaretCommand" caretOffset="869" date="Mon Dec 04 13:56:43 EST 2023" docOffset="869" starttimestamp="1701710826491" timestamp="5376905" />
  <Command __id="1311" _type="MoveCaretCommand" caretOffset="869" date="Mon Dec 04 13:56:43 EST 2023" docOffset="869" starttimestamp="1701710826491" timestamp="5376905" />
  <Command __id="1312" _type="MoveCaretCommand" caretOffset="877" date="Mon Dec 04 13:56:44 EST 2023" docOffset="877" starttimestamp="1701710826491" timestamp="5377678" />
  <Command __id="1313" _type="MoveCaretCommand" caretOffset="877" date="Mon Dec 04 13:56:44 EST 2023" docOffset="877" starttimestamp="1701710826491" timestamp="5377678" />
  <Command __id="1314" _type="MoveCaretCommand" caretOffset="866" date="Mon Dec 04 13:56:44 EST 2023" docOffset="866" starttimestamp="1701710826491" timestamp="5378175" />
  <Command __id="1315" _type="MoveCaretCommand" caretOffset="866" date="Mon Dec 04 13:56:44 EST 2023" docOffset="866" starttimestamp="1701710826491" timestamp="5378175" />
  <Command __id="1316" _type="MoveCaretCommand" caretOffset="980" date="Mon Dec 04 13:56:45 EST 2023" docOffset="980" starttimestamp="1701710826491" timestamp="5378672" />
  <Command __id="1317" _type="MoveCaretCommand" caretOffset="980" date="Mon Dec 04 13:56:45 EST 2023" docOffset="980" starttimestamp="1701710826491" timestamp="5378672" />
  <Command __id="1318" _type="MoveCaretCommand" caretOffset="990" date="Mon Dec 04 13:56:45 EST 2023" docOffset="990" starttimestamp="1701710826491" timestamp="5379176" />
  <Command __id="1319" _type="MoveCaretCommand" caretOffset="990" date="Mon Dec 04 13:56:45 EST 2023" docOffset="990" starttimestamp="1701710826491" timestamp="5379176" />
  <Command __id="1320" _type="MoveCaretCommand" caretOffset="872" date="Mon Dec 04 13:56:46 EST 2023" docOffset="872" starttimestamp="1701710826491" timestamp="5379706" />
  <Command __id="1321" _type="MoveCaretCommand" caretOffset="872" date="Mon Dec 04 13:56:46 EST 2023" docOffset="872" starttimestamp="1701710826491" timestamp="5379706" />
  <Command __id="1322" _type="MoveCaretCommand" caretOffset="866" date="Mon Dec 04 13:56:46 EST 2023" docOffset="866" starttimestamp="1701710826491" timestamp="5380124" />
  <Command __id="1323" _type="MoveCaretCommand" caretOffset="866" date="Mon Dec 04 13:56:46 EST 2023" docOffset="866" starttimestamp="1701710826491" timestamp="5380124" />
  <Command __id="1324" _type="MoveCaretCommand" caretOffset="465" date="Mon Dec 04 13:56:47 EST 2023" docOffset="465" starttimestamp="1701710826491" timestamp="5381023" />
  <Command __id="1325" _type="MoveCaretCommand" caretOffset="465" date="Mon Dec 04 13:56:47 EST 2023" docOffset="465" starttimestamp="1701710826491" timestamp="5381023" />
  <Command __id="1326" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 13:56:47 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="5381491" />
  <Command __id="1327" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 13:56:47 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="5381491" />
  <Command __id="1328" _type="MoveCaretCommand" caretOffset="465" date="Mon Dec 04 13:56:48 EST 2023" docOffset="465" starttimestamp="1701710826491" timestamp="5381943" />
  <Command __id="1329" _type="MoveCaretCommand" caretOffset="465" date="Mon Dec 04 13:56:48 EST 2023" docOffset="465" starttimestamp="1701710826491" timestamp="5381943" />
  <Command __id="1330" _type="MoveCaretCommand" caretOffset="470" date="Mon Dec 04 13:56:48 EST 2023" docOffset="470" starttimestamp="1701710826491" timestamp="5382356" />
  <Command __id="1331" _type="MoveCaretCommand" caretOffset="470" date="Mon Dec 04 13:56:48 EST 2023" docOffset="470" starttimestamp="1701710826491" timestamp="5382356" />
  <Command __id="1332" _type="MoveCaretCommand" caretOffset="493" date="Mon Dec 04 13:56:49 EST 2023" docOffset="493" starttimestamp="1701710826491" timestamp="5382788" />
  <Command __id="1333" _type="MoveCaretCommand" caretOffset="493" date="Mon Dec 04 13:56:49 EST 2023" docOffset="493" starttimestamp="1701710826491" timestamp="5382788" />
  <Command __id="1334" _type="MoveCaretCommand" caretOffset="642" date="Mon Dec 04 13:56:49 EST 2023" docOffset="642" starttimestamp="1701710826491" timestamp="5383271" />
  <Command __id="1335" _type="MoveCaretCommand" caretOffset="642" date="Mon Dec 04 13:56:49 EST 2023" docOffset="642" starttimestamp="1701710826491" timestamp="5383271" />
  <Command __id="1336" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:56:50 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5383758" />
  <Command __id="1337" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:56:50 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5383758" />
  <Command __id="1338" _type="MoveCaretCommand" caretOffset="859" date="Mon Dec 04 13:56:50 EST 2023" docOffset="859" starttimestamp="1701710826491" timestamp="5384207" />
  <Command __id="1339" _type="MoveCaretCommand" caretOffset="859" date="Mon Dec 04 13:56:50 EST 2023" docOffset="859" starttimestamp="1701710826491" timestamp="5384207" />
  <Command __id="1340" _type="MoveCaretCommand" caretOffset="864" date="Mon Dec 04 13:56:51 EST 2023" docOffset="864" starttimestamp="1701710826491" timestamp="5384744" />
  <Command __id="1341" _type="MoveCaretCommand" caretOffset="864" date="Mon Dec 04 13:56:51 EST 2023" docOffset="864" starttimestamp="1701710826491" timestamp="5384744" />
  <Command __id="1342" _type="MoveCaretCommand" caretOffset="1120" date="Mon Dec 04 13:56:51 EST 2023" docOffset="1120" starttimestamp="1701710826491" timestamp="5385224" />
  <Command __id="1343" _type="MoveCaretCommand" caretOffset="1120" date="Mon Dec 04 13:56:51 EST 2023" docOffset="1120" starttimestamp="1701710826491" timestamp="5385224" />
  <Command __id="1344" _type="MoveCaretCommand" caretOffset="1101" date="Mon Dec 04 13:56:53 EST 2023" docOffset="1101" starttimestamp="1701710826491" timestamp="5387007" />
  <Command __id="1345" _type="MoveCaretCommand" caretOffset="1101" date="Mon Dec 04 13:56:53 EST 2023" docOffset="1101" starttimestamp="1701710826491" timestamp="5387007" />
  <Command __id="1346" _type="MoveCaretCommand" caretOffset="809" date="Mon Dec 04 13:57:04 EST 2023" docOffset="809" starttimestamp="1701710826491" timestamp="5398295" />
  <Command __id="1347" _type="MoveCaretCommand" caretOffset="809" date="Mon Dec 04 13:57:04 EST 2023" docOffset="809" starttimestamp="1701710826491" timestamp="5398295" />
  <Command __id="1348" _type="MoveCaretCommand" caretOffset="817" date="Mon Dec 04 13:57:06 EST 2023" docOffset="817" starttimestamp="1701710826491" timestamp="5400227" />
  <Command __id="1349" _type="MoveCaretCommand" caretOffset="817" date="Mon Dec 04 13:57:06 EST 2023" docOffset="817" starttimestamp="1701710826491" timestamp="5400228" />
  <Command __id="1350" _type="MoveCaretCommand" caretOffset="828" date="Mon Dec 04 13:57:10 EST 2023" docOffset="828" starttimestamp="1701710826491" timestamp="5403848" />
  <Command __id="1351" _type="MoveCaretCommand" caretOffset="828" date="Mon Dec 04 13:57:10 EST 2023" docOffset="828" starttimestamp="1701710826491" timestamp="5403848" />
  <Command __id="1352" _type="MoveCaretCommand" caretOffset="838" date="Mon Dec 04 13:57:10 EST 2023" docOffset="838" starttimestamp="1701710826491" timestamp="5404442" />
  <Command __id="1353" _type="MoveCaretCommand" caretOffset="838" date="Mon Dec 04 13:57:10 EST 2023" docOffset="838" starttimestamp="1701710826491" timestamp="5404442" />
  <Command __id="1354" _type="MoveCaretCommand" caretOffset="845" date="Mon Dec 04 13:57:11 EST 2023" docOffset="845" starttimestamp="1701710826491" timestamp="5405025" />
  <Command __id="1355" _type="MoveCaretCommand" caretOffset="845" date="Mon Dec 04 13:57:11 EST 2023" docOffset="845" starttimestamp="1701710826491" timestamp="5405025" />
  <Command __id="1356" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:57:12 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5405542" />
  <Command __id="1357" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:57:12 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5405542" />
  <Command __id="1358" _type="MoveCaretCommand" caretOffset="837" date="Mon Dec 04 13:57:12 EST 2023" docOffset="837" starttimestamp="1701710826491" timestamp="5406075" />
  <Command __id="1359" _type="MoveCaretCommand" caretOffset="837" date="Mon Dec 04 13:57:12 EST 2023" docOffset="837" starttimestamp="1701710826491" timestamp="5406075" />
  <Command __id="1360" _type="MoveCaretCommand" caretOffset="843" date="Mon Dec 04 13:57:14 EST 2023" docOffset="843" starttimestamp="1701710826491" timestamp="5407531" />
  <Command __id="1361" _type="MoveCaretCommand" caretOffset="843" date="Mon Dec 04 13:57:14 EST 2023" docOffset="843" starttimestamp="1701710826491" timestamp="5407531" />
  <Command __id="1362" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:57:14 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5407991" />
  <Command __id="1363" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:57:14 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5407991" />
  <Command __id="1364" _type="MoveCaretCommand" caretOffset="845" date="Mon Dec 04 13:57:15 EST 2023" docOffset="845" starttimestamp="1701710826491" timestamp="5408843" />
  <Command __id="1365" _type="MoveCaretCommand" caretOffset="845" date="Mon Dec 04 13:57:15 EST 2023" docOffset="845" starttimestamp="1701710826491" timestamp="5408843" />
  <Command __id="1366" _type="MoveCaretCommand" caretOffset="867" date="Mon Dec 04 13:57:24 EST 2023" docOffset="867" starttimestamp="1701710826491" timestamp="5418092" />
  <Command __id="1367" _type="MoveCaretCommand" caretOffset="867" date="Mon Dec 04 13:57:24 EST 2023" docOffset="867" starttimestamp="1701710826491" timestamp="5418092" />
  <Command __id="1368" _type="MoveCaretCommand" caretOffset="878" date="Mon Dec 04 13:57:25 EST 2023" docOffset="878" starttimestamp="1701710826491" timestamp="5418685" />
  <Command __id="1369" _type="MoveCaretCommand" caretOffset="878" date="Mon Dec 04 13:57:25 EST 2023" docOffset="878" starttimestamp="1701710826491" timestamp="5418685" />
  <Command __id="1370" _type="MoveCaretCommand" caretOffset="893" date="Mon Dec 04 13:57:25 EST 2023" docOffset="893" starttimestamp="1701710826491" timestamp="5419226" />
  <Command __id="1371" _type="MoveCaretCommand" caretOffset="893" date="Mon Dec 04 13:57:25 EST 2023" docOffset="893" starttimestamp="1701710826491" timestamp="5419226" />
  <Command __id="1372" _type="MoveCaretCommand" caretOffset="1024" date="Mon Dec 04 13:57:26 EST 2023" docOffset="1024" starttimestamp="1701710826491" timestamp="5419742" />
  <Command __id="1373" _type="MoveCaretCommand" caretOffset="1024" date="Mon Dec 04 13:57:26 EST 2023" docOffset="1024" starttimestamp="1701710826491" timestamp="5419742" />
  <Command __id="1374" _type="ShellCommand" date="Mon Dec 04 13:57:29 EST 2023" starttimestamp="1701710826491" timestamp="5422728" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1375" _type="ShellCommand" date="Mon Dec 04 13:57:31 EST 2023" starttimestamp="1701710826491" timestamp="5425230" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1376" _type="MoveCaretCommand" caretOffset="907" date="Mon Dec 04 13:57:42 EST 2023" docOffset="907" starttimestamp="1701710826491" timestamp="5435714" />
  <Command __id="1377" _type="MoveCaretCommand" caretOffset="907" date="Mon Dec 04 13:57:42 EST 2023" docOffset="907" starttimestamp="1701710826491" timestamp="5435714" />
  <Command __id="1378" _type="MoveCaretCommand" caretOffset="845" date="Mon Dec 04 13:57:42 EST 2023" docOffset="845" starttimestamp="1701710826491" timestamp="5436211" />
  <Command __id="1379" _type="MoveCaretCommand" caretOffset="845" date="Mon Dec 04 13:57:42 EST 2023" docOffset="845" starttimestamp="1701710826491" timestamp="5436211" />
  <Command __id="1380" _type="MoveCaretCommand" caretOffset="909" date="Mon Dec 04 13:57:45 EST 2023" docOffset="909" starttimestamp="1701710826491" timestamp="5439012" />
  <Command __id="1381" _type="MoveCaretCommand" caretOffset="909" date="Mon Dec 04 13:57:45 EST 2023" docOffset="909" starttimestamp="1701710826491" timestamp="5439013" />
  <Command __id="1382" _type="MoveCaretCommand" caretOffset="918" date="Mon Dec 04 13:57:48 EST 2023" docOffset="918" starttimestamp="1701710826491" timestamp="5442363" />
  <Command __id="1383" _type="MoveCaretCommand" caretOffset="918" date="Mon Dec 04 13:57:48 EST 2023" docOffset="918" starttimestamp="1701710826491" timestamp="5442363" />
  <Command __id="1385" _type="InsertStringCommand" date="Mon Dec 04 13:57:49 EST 2023" starttimestamp="1701710826491" timestamp="5443346" timestamp2="5443346">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1386" _type="InsertStringCommand" date="Mon Dec 04 13:57:49 EST 2023" starttimestamp="1701710826491" timestamp="5443346" timestamp2="5443346">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1387" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 13:57:49 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="5443362" />
  <Command __id="1392" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.smartEnter" date="Mon Dec 04 13:57:50 EST 2023" starttimestamp="1701710826491" timestamp="5444337" />
  <Command __id="1393" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 13:57:50 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="5444344" />
  <Command __id="1395" _type="UndoCommand" date="Mon Dec 04 13:57:51 EST 2023" starttimestamp="1701710826491" timestamp="5445085" />
  <Command __id="1396" _type="MoveCaretCommand" caretOffset="922" date="Mon Dec 04 13:57:53 EST 2023" docOffset="922" starttimestamp="1701710826491" timestamp="5446930" />
  <Command __id="1397" _type="MoveCaretCommand" caretOffset="922" date="Mon Dec 04 13:57:53 EST 2023" docOffset="922" starttimestamp="1701710826491" timestamp="5446930" />
  <Command __id="1399" _type="InsertStringCommand" date="Mon Dec 04 13:57:53 EST 2023" starttimestamp="1701710826491" timestamp="5447182" timestamp2="5447182">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1400" _type="InsertStringCommand" date="Mon Dec 04 13:57:53 EST 2023" starttimestamp="1701710826491" timestamp="5447182" timestamp2="5447182">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1402" _type="InsertStringCommand" date="Mon Dec 04 13:57:53 EST 2023" starttimestamp="1701710826491" timestamp="5447463" timestamp2="5447463">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1403" _type="InsertStringCommand" date="Mon Dec 04 13:57:53 EST 2023" starttimestamp="1701710826491" timestamp="5447463" timestamp2="5447463">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1405" _type="InsertStringCommand" date="Mon Dec 04 13:57:54 EST 2023" starttimestamp="1701710826491" timestamp="5447529" timestamp2="5447529">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1406" _type="InsertStringCommand" date="Mon Dec 04 13:57:54 EST 2023" starttimestamp="1701710826491" timestamp="5447529" timestamp2="5447529">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1408" _type="InsertStringCommand" date="Mon Dec 04 13:57:54 EST 2023" starttimestamp="1701710826491" timestamp="5447589" timestamp2="5447589">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1409" _type="InsertStringCommand" date="Mon Dec 04 13:57:54 EST 2023" starttimestamp="1701710826491" timestamp="5447589" timestamp2="5447589">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1411" _type="InsertStringCommand" date="Mon Dec 04 13:57:54 EST 2023" starttimestamp="1701710826491" timestamp="5447853" timestamp2="5447853">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1412" _type="InsertStringCommand" date="Mon Dec 04 13:57:54 EST 2023" starttimestamp="1701710826491" timestamp="5447853" timestamp2="5447853">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1413" _type="InsertStringCommand" date="Mon Dec 04 13:57:54 EST 2023" starttimestamp="1701710826491" timestamp="5447911" timestamp2="5447911">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1414" _type="InsertStringCommand" date="Mon Dec 04 13:57:54 EST 2023" starttimestamp="1701710826491" timestamp="5447911" timestamp2="5447911">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1415" _type="MoveCaretCommand" caretOffset="1111" date="Mon Dec 04 13:57:55 EST 2023" docOffset="1111" starttimestamp="1701710826491" timestamp="5449062" />
  <Command __id="1416" _type="MoveCaretCommand" caretOffset="1111" date="Mon Dec 04 13:57:55 EST 2023" docOffset="1111" starttimestamp="1701710826491" timestamp="5449063" />
  <DocumentChange __id="1258" _type="Replace" date="Mon Dec 04 13:55:33 EST 2023" docASTNodeCount="207" docActiveCodeLength="1236" docExpressionCount="155" docLength="1277" endLine="16" insertionLength="9" int_docASTNodeCount="207" int_docActiveCodeLength="1227" int_docExpressionCount="155" int_docLength="1268" length="4" offset="502" startLine="16" starttimestamp="1701710826491" timestamp="5307020">
    <deletedText><![CDATA[getH]]></deletedText>
    <insertedText><![CDATA[getHead()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1286" _type="Delete" date="Mon Dec 04 13:55:48 EST 2023" docASTNodeCount="206" docActiveCodeLength="1240" docExpressionCount="154" docLength="1240" endLine="17" length="37" offset="478" repeat="2" startLine="16" starttimestamp="1701710826491" timestamp="5321523" timestamp2="5323436">
    <text><![CDATA[		return expr.getHead().getHead();
//]]></text>
  </DocumentChange>
  <DocumentChange __id="1384" _type="Insert" date="Mon Dec 04 13:57:49 EST 2023" docASTNodeCount="208" docActiveCodeLength="1244" docExpressionCount="156" docLength="1244" length="4" offset="918" repeat="4" starttimestamp="1701710826491" timestamp="5443342" timestamp2="5443719">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="1391" _type="Insert" date="Mon Dec 04 13:57:50 EST 2023" docASTNodeCount="208" docActiveCodeLength="1248" docExpressionCount="156" docLength="1248" length="4" offset="965" starttimestamp="1701710826491" timestamp="5444334">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="1394" _type="Delete" date="Mon Dec 04 13:57:51 EST 2023" docASTNodeCount="208" docActiveCodeLength="1244" docExpressionCount="156" docLength="1244" endLine="30" length="4" offset="965" startLine="29" starttimestamp="1701710826491" timestamp="5445079">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="1398" _type="Insert" date="Mon Dec 04 13:57:53 EST 2023" docASTNodeCount="208" docActiveCodeLength="1250" docExpressionCount="156" docLength="1250" length="6" offset="922" repeat="5" starttimestamp="1701710826491" timestamp="5447179" timestamp2="5447849">
    <text><![CDATA[Head()]]></text>
  </DocumentChange>
  <Command __id="1417" _type="MoveCaretCommand" caretOffset="946" date="Mon Dec 04 13:57:58 EST 2023" docOffset="946" starttimestamp="1701710826491" timestamp="5452313" />
  <Command __id="1418" _type="MoveCaretCommand" caretOffset="946" date="Mon Dec 04 13:57:58 EST 2023" docOffset="946" starttimestamp="1701710826491" timestamp="5452313" />
  <DocumentChange __id="1419" _type="Insert" date="Mon Dec 04 13:58:00 EST 2023" docASTNodeCount="210" docActiveCodeLength="1258" docExpressionCount="158" docLength="1258" length="8" offset="946" repeat="8" starttimestamp="1701710826491" timestamp="5454147" timestamp2="5455086">
    <text><![CDATA[getHead.]]></text>
  </DocumentChange>
  <Command __id="1420" _type="InsertStringCommand" date="Mon Dec 04 13:58:00 EST 2023" starttimestamp="1701710826491" timestamp="5454151" timestamp2="5454151">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1421" _type="InsertStringCommand" date="Mon Dec 04 13:58:00 EST 2023" starttimestamp="1701710826491" timestamp="5454151" timestamp2="5454151">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1423" _type="InsertStringCommand" date="Mon Dec 04 13:58:00 EST 2023" starttimestamp="1701710826491" timestamp="5454205" timestamp2="5454205">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1424" _type="InsertStringCommand" date="Mon Dec 04 13:58:00 EST 2023" starttimestamp="1701710826491" timestamp="5454205" timestamp2="5454205">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1426" _type="InsertStringCommand" date="Mon Dec 04 13:58:00 EST 2023" starttimestamp="1701710826491" timestamp="5454331" timestamp2="5454331">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1427" _type="InsertStringCommand" date="Mon Dec 04 13:58:00 EST 2023" starttimestamp="1701710826491" timestamp="5454331" timestamp2="5454331">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1429" _type="InsertStringCommand" date="Mon Dec 04 13:58:01 EST 2023" starttimestamp="1701710826491" timestamp="5454570" timestamp2="5454570">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1430" _type="InsertStringCommand" date="Mon Dec 04 13:58:01 EST 2023" starttimestamp="1701710826491" timestamp="5454570" timestamp2="5454570">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1432" _type="InsertStringCommand" date="Mon Dec 04 13:58:01 EST 2023" starttimestamp="1701710826491" timestamp="5454685" timestamp2="5454685">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1433" _type="InsertStringCommand" date="Mon Dec 04 13:58:01 EST 2023" starttimestamp="1701710826491" timestamp="5454685" timestamp2="5454685">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1435" _type="InsertStringCommand" date="Mon Dec 04 13:58:01 EST 2023" starttimestamp="1701710826491" timestamp="5454770" timestamp2="5454770">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1436" _type="InsertStringCommand" date="Mon Dec 04 13:58:01 EST 2023" starttimestamp="1701710826491" timestamp="5454770" timestamp2="5454770">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1438" _type="InsertStringCommand" date="Mon Dec 04 13:58:01 EST 2023" starttimestamp="1701710826491" timestamp="5454865" timestamp2="5454865">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1439" _type="InsertStringCommand" date="Mon Dec 04 13:58:01 EST 2023" starttimestamp="1701710826491" timestamp="5454865" timestamp2="5454865">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1441" _type="InsertStringCommand" date="Mon Dec 04 13:58:01 EST 2023" starttimestamp="1701710826491" timestamp="5455090" timestamp2="5455090">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1442" _type="InsertStringCommand" date="Mon Dec 04 13:58:01 EST 2023" starttimestamp="1701710826491" timestamp="5455090" timestamp2="5455090">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1443" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 13:58:01 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="5455101" />
  <Command __id="1444" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 13:58:01 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="5455109" />
  <DocumentChange __id="1445" _type="Delete" date="Mon Dec 04 13:58:02 EST 2023" docASTNodeCount="208" docActiveCodeLength="1257" docExpressionCount="156" docLength="1257" endLine="29" length="1" offset="953" startLine="29" starttimestamp="1701710826491" timestamp="5456138">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="1446" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:58:02 EST 2023" starttimestamp="1701710826491" timestamp="5456142" />
  <Command __id="1447" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 13:58:02 EST 2023" starttimestamp="1701710826491" timestamp="5456143" />
  <Command __id="1449" _type="InsertStringCommand" date="Mon Dec 04 13:58:02 EST 2023" starttimestamp="1701710826491" timestamp="5456393" timestamp2="5456393">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1450" _type="InsertStringCommand" date="Mon Dec 04 13:58:02 EST 2023" starttimestamp="1701710826491" timestamp="5456393" timestamp2="5456393">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1452" _type="InsertStringCommand" date="Mon Dec 04 13:58:02 EST 2023" starttimestamp="1701710826491" timestamp="5456464" timestamp2="5456464">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1453" _type="InsertStringCommand" date="Mon Dec 04 13:58:02 EST 2023" starttimestamp="1701710826491" timestamp="5456464" timestamp2="5456464">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1455" _type="InsertStringCommand" date="Mon Dec 04 13:58:03 EST 2023" starttimestamp="1701710826491" timestamp="5456694" timestamp2="5456694">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1456" _type="InsertStringCommand" date="Mon Dec 04 13:58:03 EST 2023" starttimestamp="1701710826491" timestamp="5456694" timestamp2="5456694">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1457" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 13:58:03 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="5456702" />
  <Command __id="1458" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 13:58:04 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="5457860" />
  <Command __id="1459" _type="MoveCaretCommand" caretOffset="845" date="Mon Dec 04 13:58:04 EST 2023" docOffset="845" starttimestamp="1701710826491" timestamp="5457875" />
  <Command __id="1460" _type="MoveCaretCommand" caretOffset="845" date="Mon Dec 04 13:58:04 EST 2023" docOffset="845" starttimestamp="1701710826491" timestamp="5457875" />
  <Command __id="1461" _type="MoveCaretCommand" caretOffset="1121" date="Mon Dec 04 13:58:17 EST 2023" docOffset="1121" starttimestamp="1701710826491" timestamp="5471079" />
  <Command __id="1462" _type="MoveCaretCommand" caretOffset="1121" date="Mon Dec 04 13:58:17 EST 2023" docOffset="1121" starttimestamp="1701710826491" timestamp="5471079" />
  <Command __id="1463" _type="MoveCaretCommand" caretOffset="1091" date="Mon Dec 04 13:58:19 EST 2023" docOffset="1091" starttimestamp="1701710826491" timestamp="5472548" />
  <Command __id="1464" _type="MoveCaretCommand" caretOffset="1091" date="Mon Dec 04 13:58:19 EST 2023" docOffset="1091" starttimestamp="1701710826491" timestamp="5472549" />
  <Command __id="1465" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:59:36 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5550469" />
  <Command __id="1466" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:59:36 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5550469" />
  <Command __id="1467" _type="SelectTextCommand" caretOffset="849" date="Mon Dec 04 13:59:39 EST 2023" end="1249" start="849" starttimestamp="1701710826491" timestamp="5552753" />
  <Command __id="1468" _type="SelectTextCommand" caretOffset="849" date="Mon Dec 04 13:59:39 EST 2023" end="1249" start="849" starttimestamp="1701710826491" timestamp="5552754" />
  <Command __id="1469" _type="MoveCaretCommand" caretOffset="1119" date="Mon Dec 04 13:59:39 EST 2023" docOffset="1119" starttimestamp="1701710826491" timestamp="5553203" />
  <Command __id="1470" _type="MoveCaretCommand" caretOffset="1119" date="Mon Dec 04 13:59:39 EST 2023" docOffset="1119" starttimestamp="1701710826491" timestamp="5553203" />
  <Command __id="1471" _type="MoveCaretCommand" caretOffset="1249" date="Mon Dec 04 13:59:41 EST 2023" docOffset="1249" starttimestamp="1701710826491" timestamp="5555068" />
  <Command __id="1472" _type="MoveCaretCommand" caretOffset="1249" date="Mon Dec 04 13:59:41 EST 2023" docOffset="1249" starttimestamp="1701710826491" timestamp="5555069" />
  <Command __id="1473" _type="MoveCaretCommand" caretOffset="1249" date="Mon Dec 04 13:59:41 EST 2023" docOffset="1249" starttimestamp="1701710826491" timestamp="5555369" />
  <Command __id="1474" _type="MoveCaretCommand" caretOffset="1249" date="Mon Dec 04 13:59:41 EST 2023" docOffset="1249" starttimestamp="1701710826491" timestamp="5555369" />
  <Command __id="1475" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:59:43 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5557214" />
  <Command __id="1476" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:59:43 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5557214" />
  <Command __id="1477" _type="MoveCaretCommand" caretOffset="814" date="Mon Dec 04 13:59:44 EST 2023" docOffset="814" starttimestamp="1701710826491" timestamp="5557733" />
  <Command __id="1478" _type="MoveCaretCommand" caretOffset="814" date="Mon Dec 04 13:59:44 EST 2023" docOffset="814" starttimestamp="1701710826491" timestamp="5557733" />
  <Command __id="1479" _type="MoveCaretCommand" caretOffset="822" date="Mon Dec 04 13:59:44 EST 2023" docOffset="822" starttimestamp="1701710826491" timestamp="5558200" />
  <Command __id="1480" _type="MoveCaretCommand" caretOffset="822" date="Mon Dec 04 13:59:44 EST 2023" docOffset="822" starttimestamp="1701710826491" timestamp="5558200" />
  <Command __id="1481" _type="MoveCaretCommand" caretOffset="828" date="Mon Dec 04 13:59:45 EST 2023" docOffset="828" starttimestamp="1701710826491" timestamp="5558681" />
  <Command __id="1482" _type="MoveCaretCommand" caretOffset="828" date="Mon Dec 04 13:59:45 EST 2023" docOffset="828" starttimestamp="1701710826491" timestamp="5558681" />
  <Command __id="1483" _type="MoveCaretCommand" caretOffset="835" date="Mon Dec 04 13:59:45 EST 2023" docOffset="835" starttimestamp="1701710826491" timestamp="5559135" />
  <Command __id="1484" _type="MoveCaretCommand" caretOffset="835" date="Mon Dec 04 13:59:45 EST 2023" docOffset="835" starttimestamp="1701710826491" timestamp="5559135" />
  <Command __id="1485" _type="MoveCaretCommand" caretOffset="829" date="Mon Dec 04 13:59:46 EST 2023" docOffset="829" starttimestamp="1701710826491" timestamp="5559594" />
  <Command __id="1486" _type="MoveCaretCommand" caretOffset="829" date="Mon Dec 04 13:59:46 EST 2023" docOffset="829" starttimestamp="1701710826491" timestamp="5559594" />
  <Command __id="1487" _type="MoveCaretCommand" caretOffset="819" date="Mon Dec 04 13:59:46 EST 2023" docOffset="819" starttimestamp="1701710826491" timestamp="5560064" />
  <Command __id="1488" _type="MoveCaretCommand" caretOffset="819" date="Mon Dec 04 13:59:46 EST 2023" docOffset="819" starttimestamp="1701710826491" timestamp="5560064" />
  <Command __id="1489" _type="MoveCaretCommand" caretOffset="812" date="Mon Dec 04 13:59:46 EST 2023" docOffset="812" starttimestamp="1701710826491" timestamp="5560469" />
  <Command __id="1490" _type="MoveCaretCommand" caretOffset="812" date="Mon Dec 04 13:59:46 EST 2023" docOffset="812" starttimestamp="1701710826491" timestamp="5560469" />
  <Command __id="1491" _type="MoveCaretCommand" caretOffset="814" date="Mon Dec 04 13:59:50 EST 2023" docOffset="814" starttimestamp="1701710826491" timestamp="5563853" />
  <Command __id="1492" _type="MoveCaretCommand" caretOffset="814" date="Mon Dec 04 13:59:50 EST 2023" docOffset="814" starttimestamp="1701710826491" timestamp="5563853" />
  <Command __id="1493" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:59:51 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5565266" />
  <Command __id="1494" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 13:59:51 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5565267" />
  <Command __id="1495" _type="MoveCaretCommand" caretOffset="814" date="Mon Dec 04 13:59:57 EST 2023" docOffset="814" starttimestamp="1701710826491" timestamp="5570886" />
  <Command __id="1496" _type="MoveCaretCommand" caretOffset="814" date="Mon Dec 04 13:59:57 EST 2023" docOffset="814" starttimestamp="1701710826491" timestamp="5570887" />
  <DocumentChange __id="1448" _type="Insert" date="Mon Dec 04 13:58:02 EST 2023" docASTNodeCount="210" docActiveCodeLength="1260" docExpressionCount="158" docLength="1260" length="3" offset="953" repeat="3" starttimestamp="1701710826491" timestamp="5456388" timestamp2="5456689">
    <text><![CDATA[().]]></text>
  </DocumentChange>
  <Command __id="1497" _type="SelectTextCommand" caretOffset="824" date="Mon Dec 04 14:00:00 EST 2023" end="824" start="814" starttimestamp="1701710826491" timestamp="5573703" />
  <Command __id="1498" _type="SelectTextCommand" caretOffset="824" date="Mon Dec 04 14:00:00 EST 2023" end="824" start="814" starttimestamp="1701710826491" timestamp="5573703" />
  <Command __id="1500" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:00:03 EST 2023" starttimestamp="1701710826491" timestamp="5576966" />
  <Command __id="1501" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:00:03 EST 2023" starttimestamp="1701710826491" timestamp="5576966" />
  <Command __id="1502" _type="MoveCaretCommand" caretOffset="991" date="Mon Dec 04 14:00:04 EST 2023" docOffset="991" starttimestamp="1701710826491" timestamp="5578503" />
  <Command __id="1503" _type="MoveCaretCommand" caretOffset="991" date="Mon Dec 04 14:00:04 EST 2023" docOffset="991" starttimestamp="1701710826491" timestamp="5578503" />
  <Command __id="1504" _type="MoveCaretCommand" caretOffset="819" date="Mon Dec 04 14:00:05 EST 2023" docOffset="819" starttimestamp="1701710826491" timestamp="5578985" />
  <Command __id="1505" _type="MoveCaretCommand" caretOffset="819" date="Mon Dec 04 14:00:05 EST 2023" docOffset="819" starttimestamp="1701710826491" timestamp="5578985" />
  <Command __id="1506" _type="MoveCaretCommand" caretOffset="827" date="Mon Dec 04 14:00:06 EST 2023" docOffset="827" starttimestamp="1701710826491" timestamp="5580252" />
  <Command __id="1507" _type="MoveCaretCommand" caretOffset="827" date="Mon Dec 04 14:00:06 EST 2023" docOffset="827" starttimestamp="1701710826491" timestamp="5580252" />
  <Command __id="1508" _type="MoveCaretCommand" caretOffset="818" date="Mon Dec 04 14:00:07 EST 2023" docOffset="818" starttimestamp="1701710826491" timestamp="5580735" />
  <Command __id="1509" _type="MoveCaretCommand" caretOffset="818" date="Mon Dec 04 14:00:07 EST 2023" docOffset="818" starttimestamp="1701710826491" timestamp="5580735" />
  <Command __id="1510" _type="MoveCaretCommand" caretOffset="858" date="Mon Dec 04 14:00:07 EST 2023" docOffset="858" starttimestamp="1701710826491" timestamp="5581184" />
  <Command __id="1511" _type="MoveCaretCommand" caretOffset="858" date="Mon Dec 04 14:00:07 EST 2023" docOffset="858" starttimestamp="1701710826491" timestamp="5581184" />
  <Command __id="1512" _type="MoveCaretCommand" caretOffset="863" date="Mon Dec 04 14:00:08 EST 2023" docOffset="863" starttimestamp="1701710826491" timestamp="5581865" />
  <Command __id="1513" _type="MoveCaretCommand" caretOffset="863" date="Mon Dec 04 14:00:08 EST 2023" docOffset="863" starttimestamp="1701710826491" timestamp="5581865" />
  <Command __id="1514" _type="MoveCaretCommand" caretOffset="868" date="Mon Dec 04 14:00:09 EST 2023" docOffset="868" starttimestamp="1701710826491" timestamp="5582589" />
  <Command __id="1515" _type="MoveCaretCommand" caretOffset="868" date="Mon Dec 04 14:00:09 EST 2023" docOffset="868" starttimestamp="1701710826491" timestamp="5582589" />
  <Command __id="1516" _type="MoveCaretCommand" caretOffset="835" date="Mon Dec 04 14:00:09 EST 2023" docOffset="835" starttimestamp="1701710826491" timestamp="5583369" />
  <Command __id="1517" _type="MoveCaretCommand" caretOffset="835" date="Mon Dec 04 14:00:09 EST 2023" docOffset="835" starttimestamp="1701710826491" timestamp="5583369" />
  <Command __id="1518" _type="MoveCaretCommand" caretOffset="1017" date="Mon Dec 04 14:00:17 EST 2023" docOffset="1017" starttimestamp="1701710826491" timestamp="5590951" />
  <Command __id="1519" _type="MoveCaretCommand" caretOffset="1017" date="Mon Dec 04 14:00:17 EST 2023" docOffset="1017" starttimestamp="1701710826491" timestamp="5590951" />
  <Command __id="1520" _type="MoveCaretCommand" caretOffset="1031" date="Mon Dec 04 14:00:17 EST 2023" docOffset="1031" starttimestamp="1701710826491" timestamp="5591436" />
  <Command __id="1521" _type="MoveCaretCommand" caretOffset="1031" date="Mon Dec 04 14:00:17 EST 2023" docOffset="1031" starttimestamp="1701710826491" timestamp="5591436" />
  <Command __id="1522" _type="MoveCaretCommand" caretOffset="1047" date="Mon Dec 04 14:00:18 EST 2023" docOffset="1047" starttimestamp="1701710826491" timestamp="5591936" />
  <Command __id="1523" _type="MoveCaretCommand" caretOffset="1047" date="Mon Dec 04 14:00:18 EST 2023" docOffset="1047" starttimestamp="1701710826491" timestamp="5591936" />
  <Command __id="1524" _type="MoveCaretCommand" caretOffset="818" date="Mon Dec 04 14:00:25 EST 2023" docOffset="818" starttimestamp="1701710826491" timestamp="5599503" />
  <Command __id="1525" _type="MoveCaretCommand" caretOffset="818" date="Mon Dec 04 14:00:25 EST 2023" docOffset="818" starttimestamp="1701710826491" timestamp="5599503" />
  <Command __id="1526" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 14:00:27 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5600787" />
  <Command __id="1527" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 14:00:27 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5600787" />
  <Command __id="1528" _type="MoveCaretCommand" caretOffset="823" date="Mon Dec 04 14:00:28 EST 2023" docOffset="823" starttimestamp="1701710826491" timestamp="5602505" />
  <Command __id="1529" _type="MoveCaretCommand" caretOffset="823" date="Mon Dec 04 14:00:28 EST 2023" docOffset="823" starttimestamp="1701710826491" timestamp="5602506" />
  <Command __id="1530" _type="MoveCaretCommand" caretOffset="866" date="Mon Dec 04 14:00:30 EST 2023" docOffset="866" starttimestamp="1701710826491" timestamp="5603688" />
  <Command __id="1531" _type="MoveCaretCommand" caretOffset="866" date="Mon Dec 04 14:00:30 EST 2023" docOffset="866" starttimestamp="1701710826491" timestamp="5603689" />
  <Command __id="1532" _type="SelectTextCommand" caretOffset="920" date="Mon Dec 04 14:00:42 EST 2023" end="920" start="864" starttimestamp="1701710826491" timestamp="5615974" />
  <Command __id="1533" _type="SelectTextCommand" caretOffset="920" date="Mon Dec 04 14:00:42 EST 2023" end="920" start="864" starttimestamp="1701710826491" timestamp="5615974" />
  <Command __id="1535" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:00:43 EST 2023" starttimestamp="1701710826491" timestamp="5616561" />
  <Command __id="1536" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:00:43 EST 2023" starttimestamp="1701710826491" timestamp="5616561" />
  <Command __id="1537" _type="MoveCaretCommand" caretOffset="913" date="Mon Dec 04 14:00:44 EST 2023" docOffset="913" starttimestamp="1701710826491" timestamp="5617856" />
  <Command __id="1538" _type="MoveCaretCommand" caretOffset="913" date="Mon Dec 04 14:00:44 EST 2023" docOffset="913" starttimestamp="1701710826491" timestamp="5617856" />
  <Command __id="1540" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:00:44 EST 2023" starttimestamp="1701710826491" timestamp="5618099" />
  <Command __id="1541" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:00:44 EST 2023" starttimestamp="1701710826491" timestamp="5618099" />
  <Command __id="1542" _type="MoveCaretCommand" caretOffset="914" date="Mon Dec 04 14:00:45 EST 2023" docOffset="914" starttimestamp="1701710826491" timestamp="5618655" />
  <Command __id="1543" _type="MoveCaretCommand" caretOffset="914" date="Mon Dec 04 14:00:45 EST 2023" docOffset="914" starttimestamp="1701710826491" timestamp="5618655" />
  <Command __id="1544" _type="MoveCaretCommand" caretOffset="880" date="Mon Dec 04 14:00:47 EST 2023" docOffset="880" starttimestamp="1701710826491" timestamp="5620706" />
  <Command __id="1545" _type="MoveCaretCommand" caretOffset="880" date="Mon Dec 04 14:00:47 EST 2023" docOffset="880" starttimestamp="1701710826491" timestamp="5620706" />
  <Command __id="1546" _type="MoveCaretCommand" caretOffset="835" date="Mon Dec 04 14:00:48 EST 2023" docOffset="835" starttimestamp="1701710826491" timestamp="5621523" />
  <Command __id="1547" _type="MoveCaretCommand" caretOffset="835" date="Mon Dec 04 14:00:48 EST 2023" docOffset="835" starttimestamp="1701710826491" timestamp="5621523" />
  <Command __id="1548" _type="MoveCaretCommand" caretOffset="890" date="Mon Dec 04 14:00:48 EST 2023" docOffset="890" starttimestamp="1701710826491" timestamp="5622122" />
  <Command __id="1549" _type="MoveCaretCommand" caretOffset="890" date="Mon Dec 04 14:00:48 EST 2023" docOffset="890" starttimestamp="1701710826491" timestamp="5622122" />
  <Command __id="1551" _type="InsertStringCommand" date="Mon Dec 04 14:00:49 EST 2023" starttimestamp="1701710826491" timestamp="5623059" timestamp2="5623059">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1552" _type="InsertStringCommand" date="Mon Dec 04 14:00:49 EST 2023" starttimestamp="1701710826491" timestamp="5623059" timestamp2="5623059">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1554" _type="InsertStringCommand" date="Mon Dec 04 14:00:49 EST 2023" starttimestamp="1701710826491" timestamp="5623149" timestamp2="5623149">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1555" _type="InsertStringCommand" date="Mon Dec 04 14:00:49 EST 2023" starttimestamp="1701710826491" timestamp="5623149" timestamp2="5623149">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1557" _type="InsertStringCommand" date="Mon Dec 04 14:00:49 EST 2023" starttimestamp="1701710826491" timestamp="5623283" timestamp2="5623283">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1558" _type="InsertStringCommand" date="Mon Dec 04 14:00:49 EST 2023" starttimestamp="1701710826491" timestamp="5623284" timestamp2="5623284">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1560" _type="InsertStringCommand" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5623510" timestamp2="5623510">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1561" _type="InsertStringCommand" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5623511" timestamp2="5623511">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1563" _type="InsertStringCommand" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5623622" timestamp2="5623622">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1564" _type="InsertStringCommand" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5623622" timestamp2="5623622">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1566" _type="InsertStringCommand" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5623721" timestamp2="5623721">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1567" _type="InsertStringCommand" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5623722" timestamp2="5623722">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1569" _type="InsertStringCommand" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5623822" timestamp2="5623822">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1570" _type="InsertStringCommand" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5623823" timestamp2="5623823">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1572" _type="InsertStringCommand" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5624010" timestamp2="5624010">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1573" _type="InsertStringCommand" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5624010" timestamp2="5624010">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1574" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 14:00:50 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="5624018" />
  <Command __id="1575" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 14:00:50 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="5624025" />
  <Command __id="1577" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5624257" />
  <Command __id="1578" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5624258" />
  <Command __id="1580" _type="InsertStringCommand" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5624486" timestamp2="5624486">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1581" _type="InsertStringCommand" date="Mon Dec 04 14:00:50 EST 2023" starttimestamp="1701710826491" timestamp="5624486" timestamp2="5624486">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1583" _type="InsertStringCommand" date="Mon Dec 04 14:00:51 EST 2023" starttimestamp="1701710826491" timestamp="5624598" timestamp2="5624598">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1584" _type="InsertStringCommand" date="Mon Dec 04 14:00:51 EST 2023" starttimestamp="1701710826491" timestamp="5624598" timestamp2="5624598">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1586" _type="InsertStringCommand" date="Mon Dec 04 14:00:51 EST 2023" starttimestamp="1701710826491" timestamp="5624792" timestamp2="5624792">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1587" _type="InsertStringCommand" date="Mon Dec 04 14:00:51 EST 2023" starttimestamp="1701710826491" timestamp="5624792" timestamp2="5624792">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1588" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 14:00:51 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="5624800" />
  <Command __id="1589" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 14:00:51 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="5625358" />
  <Command __id="1590" _type="MoveCaretCommand" caretOffset="627" date="Mon Dec 04 14:00:51 EST 2023" docOffset="627" starttimestamp="1701710826491" timestamp="5625376" />
  <Command __id="1591" _type="MoveCaretCommand" caretOffset="627" date="Mon Dec 04 14:00:51 EST 2023" docOffset="627" starttimestamp="1701710826491" timestamp="5625376" />
  <Command __id="1592" _type="SelectTextCommand" caretOffset="899" date="Mon Dec 04 14:01:01 EST 2023" end="899" start="889" starttimestamp="1701710826491" timestamp="5634776" />
  <Command __id="1593" _type="SelectTextCommand" caretOffset="899" date="Mon Dec 04 14:01:01 EST 2023" end="899" start="889" starttimestamp="1701710826491" timestamp="5634776" />
  <Command __id="1595" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:01:01 EST 2023" starttimestamp="1701710826491" timestamp="5635047" />
  <Command __id="1596" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:01:01 EST 2023" starttimestamp="1701710826491" timestamp="5635047" />
  <Command __id="1597" _type="MoveCaretCommand" caretOffset="788" date="Mon Dec 04 14:01:02 EST 2023" docOffset="788" starttimestamp="1701710826491" timestamp="5635754" />
  <Command __id="1598" _type="MoveCaretCommand" caretOffset="788" date="Mon Dec 04 14:01:02 EST 2023" docOffset="788" starttimestamp="1701710826491" timestamp="5635754" />
  <Command __id="1599" _type="MoveCaretCommand" caretOffset="835" date="Mon Dec 04 14:01:05 EST 2023" docOffset="835" starttimestamp="1701710826491" timestamp="5638554" />
  <Command __id="1600" _type="MoveCaretCommand" caretOffset="835" date="Mon Dec 04 14:01:05 EST 2023" docOffset="835" starttimestamp="1701710826491" timestamp="5638554" />
  <Command __id="1601" _type="MoveCaretCommand" caretOffset="808" date="Mon Dec 04 14:01:07 EST 2023" docOffset="808" starttimestamp="1701710826491" timestamp="5641472" />
  <Command __id="1602" _type="MoveCaretCommand" caretOffset="808" date="Mon Dec 04 14:01:07 EST 2023" docOffset="808" starttimestamp="1701710826491" timestamp="5641472" />
  <Command __id="1603" _type="MoveCaretCommand" caretOffset="820" date="Mon Dec 04 14:01:08 EST 2023" docOffset="820" starttimestamp="1701710826491" timestamp="5641997" />
  <Command __id="1604" _type="MoveCaretCommand" caretOffset="820" date="Mon Dec 04 14:01:08 EST 2023" docOffset="820" starttimestamp="1701710826491" timestamp="5641997" />
  <Command __id="1605" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 14:01:09 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5643088" />
  <Command __id="1606" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 14:01:09 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5643088" />
  <Command __id="1607" _type="MoveCaretCommand" caretOffset="828" date="Mon Dec 04 14:01:47 EST 2023" docOffset="828" starttimestamp="1701710826491" timestamp="5681074" />
  <Command __id="1608" _type="MoveCaretCommand" caretOffset="828" date="Mon Dec 04 14:01:47 EST 2023" docOffset="828" starttimestamp="1701710826491" timestamp="5681074" />
  <Command __id="1609" _type="MoveCaretCommand" caretOffset="1054" date="Mon Dec 04 14:01:48 EST 2023" docOffset="1054" starttimestamp="1701710826491" timestamp="5682423" />
  <Command __id="1610" _type="MoveCaretCommand" caretOffset="1054" date="Mon Dec 04 14:01:48 EST 2023" docOffset="1054" starttimestamp="1701710826491" timestamp="5682423" />
  <Command __id="1611" _type="MoveCaretCommand" caretOffset="818" date="Mon Dec 04 14:02:03 EST 2023" docOffset="818" starttimestamp="1701710826491" timestamp="5696990" />
  <Command __id="1612" _type="MoveCaretCommand" caretOffset="818" date="Mon Dec 04 14:02:03 EST 2023" docOffset="818" starttimestamp="1701710826491" timestamp="5696990" />
  <Command __id="1613" _type="MoveCaretCommand" caretOffset="851" date="Mon Dec 04 14:02:04 EST 2023" docOffset="851" starttimestamp="1701710826491" timestamp="5698324" />
  <Command __id="1614" _type="MoveCaretCommand" caretOffset="851" date="Mon Dec 04 14:02:04 EST 2023" docOffset="851" starttimestamp="1701710826491" timestamp="5698324" />
  <Command __id="1615" _type="MoveCaretCommand" caretOffset="854" date="Mon Dec 04 14:02:05 EST 2023" docOffset="854" starttimestamp="1701710826491" timestamp="5698865" />
  <Command __id="1616" _type="MoveCaretCommand" caretOffset="854" date="Mon Dec 04 14:02:05 EST 2023" docOffset="854" starttimestamp="1701710826491" timestamp="5698865" />
  <Command __id="1617" _type="MoveCaretCommand" caretOffset="835" date="Mon Dec 04 14:02:11 EST 2023" docOffset="835" starttimestamp="1701710826491" timestamp="5704608" />
  <Command __id="1618" _type="MoveCaretCommand" caretOffset="835" date="Mon Dec 04 14:02:11 EST 2023" docOffset="835" starttimestamp="1701710826491" timestamp="5704608" />
  <Command __id="1619" _type="MoveCaretCommand" caretOffset="871" date="Mon Dec 04 14:02:11 EST 2023" docOffset="871" starttimestamp="1701710826491" timestamp="5705227" />
  <Command __id="1620" _type="MoveCaretCommand" caretOffset="871" date="Mon Dec 04 14:02:11 EST 2023" docOffset="871" starttimestamp="1701710826491" timestamp="5705228" />
  <Command __id="1621" _type="MoveCaretCommand" caretOffset="870" date="Mon Dec 04 14:02:18 EST 2023" docOffset="870" starttimestamp="1701710826491" timestamp="5711661" />
  <Command __id="1622" _type="MoveCaretCommand" caretOffset="870" date="Mon Dec 04 14:02:18 EST 2023" docOffset="870" starttimestamp="1701710826491" timestamp="5711661" />
  <DocumentChange __id="1499" _type="Delete" date="Mon Dec 04 14:00:03 EST 2023" docASTNodeCount="208" docActiveCodeLength="1250" docExpressionCount="156" docLength="1250" endLine="28" length="10" offset="814" startLine="28" starttimestamp="1701710826491" timestamp="5576960">
    <text><![CDATA[getTail().]]></text>
  </DocumentChange>
  <DocumentChange __id="1534" _type="Delete" date="Mon Dec 04 14:00:43 EST 2023" docASTNodeCount="200" docActiveCodeLength="1194" docExpressionCount="148" docLength="1194" endLine="29" length="56" offset="864" startLine="29" starttimestamp="1701710826491" timestamp="5616555">
    <text><![CDATA[ExpressionFactory.newInstance(expr.getHead().getHead(), ]]></text>
  </DocumentChange>
  <DocumentChange __id="1539" _type="Delete" date="Mon Dec 04 14:00:44 EST 2023" docASTNodeCount="200" docActiveCodeLength="1193" docExpressionCount="148" docLength="1193" endLine="29" length="1" offset="912" startLine="29" starttimestamp="1701710826491" timestamp="5618095">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="1550" _type="Insert" date="Mon Dec 04 14:00:49 EST 2023" docASTNodeCount="202" docActiveCodeLength="1201" docExpressionCount="150" docLength="1201" length="8" offset="890" repeat="8" starttimestamp="1701710826491" timestamp="5623056" timestamp2="5624006">
    <text><![CDATA[getHead.]]></text>
  </DocumentChange>
  <DocumentChange __id="1576" _type="Delete" date="Mon Dec 04 14:00:50 EST 2023" docASTNodeCount="200" docActiveCodeLength="1200" docExpressionCount="148" docLength="1200" endLine="29" length="1" offset="897" startLine="29" starttimestamp="1701710826491" timestamp="5624254">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="1579" _type="Insert" date="Mon Dec 04 14:00:50 EST 2023" docASTNodeCount="202" docActiveCodeLength="1203" docExpressionCount="150" docLength="1203" length="3" offset="897" repeat="3" starttimestamp="1701710826491" timestamp="5624484" timestamp2="5624788">
    <text><![CDATA[().]]></text>
  </DocumentChange>
  <DocumentChange __id="1594" _type="Delete" date="Mon Dec 04 14:01:01 EST 2023" docASTNodeCount="200" docActiveCodeLength="1193" docExpressionCount="148" docLength="1193" endLine="29" length="10" offset="889" startLine="29" starttimestamp="1701710826491" timestamp="5635042">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <Command __id="1623" _type="MoveCaretCommand" caretOffset="966" date="Mon Dec 04 14:02:19 EST 2023" docOffset="966" starttimestamp="1701710826491" timestamp="5713361" />
  <Command __id="1624" _type="MoveCaretCommand" caretOffset="966" date="Mon Dec 04 14:02:19 EST 2023" docOffset="966" starttimestamp="1701710826491" timestamp="5713362" />
  <DocumentChange __id="1625" _type="Insert" date="Mon Dec 04 14:02:20 EST 2023" docASTNodeCount="200" docActiveCodeLength="1194" docExpressionCount="148" docLength="1194" length="1" offset="966" starttimestamp="1701710826491" timestamp="5714496">
    <text><![CDATA[x]]></text>
  </DocumentChange>
  <Command __id="1626" _type="InsertStringCommand" date="Mon Dec 04 14:02:20 EST 2023" starttimestamp="1701710826491" timestamp="5714498" timestamp2="5714498">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="1627" _type="InsertStringCommand" date="Mon Dec 04 14:02:20 EST 2023" starttimestamp="1701710826491" timestamp="5714498" timestamp2="5714498">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="1629" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:02:22 EST 2023" starttimestamp="1701710826491" timestamp="5715804" />
  <Command __id="1630" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:02:22 EST 2023" starttimestamp="1701710826491" timestamp="5715804" />
  <Command __id="1631" _type="ShellCommand" date="Mon Dec 04 14:02:24 EST 2023" starttimestamp="1701710826491" timestamp="5717815" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1632" _type="ShellCommand" date="Mon Dec 04 14:02:24 EST 2023" starttimestamp="1701710826491" timestamp="5718355" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1633" _type="ShellCommand" date="Mon Dec 04 14:02:25 EST 2023" starttimestamp="1701710826491" timestamp="5719021" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1634" _type="ShellCommand" date="Mon Dec 04 14:02:26 EST 2023" starttimestamp="1701710826491" timestamp="5719930" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1635" _type="ShellCommand" date="Mon Dec 04 14:02:27 EST 2023" starttimestamp="1701710826491" timestamp="5721395" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1636" _type="ShellCommand" date="Mon Dec 04 14:02:34 EST 2023" starttimestamp="1701710826491" timestamp="5727705" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1637" _type="MoveCaretCommand" caretOffset="887" date="Mon Dec 04 14:02:35 EST 2023" docOffset="887" starttimestamp="1701710826491" timestamp="5729202" />
  <Command __id="1638" _type="MoveCaretCommand" caretOffset="887" date="Mon Dec 04 14:02:35 EST 2023" docOffset="887" starttimestamp="1701710826491" timestamp="5729202" />
  <Command __id="1639" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 14:02:36 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5729810" />
  <Command __id="1640" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 14:02:36 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="5729810" />
  <Command __id="1641" _type="ShellCommand" date="Mon Dec 04 14:04:12 EST 2023" starttimestamp="1701710826491" timestamp="5825785" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1642" _type="ShellCommand" date="Mon Dec 04 14:04:24 EST 2023" starttimestamp="1701710826491" timestamp="5838138" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1643" _type="ShellCommand" date="Mon Dec 04 14:04:25 EST 2023" starttimestamp="1701710826491" timestamp="5838737" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1644" _type="ShellCommand" date="Mon Dec 04 14:04:25 EST 2023" starttimestamp="1701710826491" timestamp="5839413" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1645" _type="ShellCommand" date="Mon Dec 04 14:04:43 EST 2023" starttimestamp="1701710826491" timestamp="5856922" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1646" _type="ShellCommand" date="Mon Dec 04 14:04:53 EST 2023" starttimestamp="1701710826491" timestamp="5866788" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1647" _type="MoveCaretCommand" caretOffset="1182" date="Mon Dec 04 14:05:23 EST 2023" docOffset="1182" starttimestamp="1701710826491" timestamp="5896968" />
  <Command __id="1648" _type="MoveCaretCommand" caretOffset="1182" date="Mon Dec 04 14:05:23 EST 2023" docOffset="1182" starttimestamp="1701710826491" timestamp="5896968" />
  <Command __id="1649" _type="SelectTextCommand" caretOffset="1181" date="Mon Dec 04 14:05:23 EST 2023" end="1181" start="1054" starttimestamp="1701710826491" timestamp="5897151" />
  <Command __id="1650" _type="SelectTextCommand" caretOffset="1181" date="Mon Dec 04 14:05:23 EST 2023" end="1181" start="1054" starttimestamp="1701710826491" timestamp="5897151" />
  <Command __id="1651" _type="MoveCaretCommand" caretOffset="1190" date="Mon Dec 04 14:05:24 EST 2023" docOffset="1190" starttimestamp="1701710826491" timestamp="5898036" />
  <Command __id="1652" _type="MoveCaretCommand" caretOffset="1190" date="Mon Dec 04 14:05:24 EST 2023" docOffset="1190" starttimestamp="1701710826491" timestamp="5898036" />
  <Command __id="1653" _type="MoveCaretCommand" caretOffset="1190" date="Mon Dec 04 14:05:25 EST 2023" docOffset="1190" starttimestamp="1701710826491" timestamp="5899171" />
  <Command __id="1654" _type="MoveCaretCommand" caretOffset="1190" date="Mon Dec 04 14:05:25 EST 2023" docOffset="1190" starttimestamp="1701710826491" timestamp="5899171" />
  <Command __id="1655" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Mon Dec 04 14:05:25 EST 2023" starttimestamp="1701710826491" timestamp="5899413" />
  <Command __id="1656" _type="CopyCommand" date="Mon Dec 04 14:05:26 EST 2023" starttimestamp="1701710826491" timestamp="5899574" />
  <Command __id="1657" _type="ShellCommand" date="Mon Dec 04 14:05:26 EST 2023" starttimestamp="1701710826491" timestamp="5899980" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1658" _type="ShellCommand" date="Mon Dec 04 14:05:27 EST 2023" starttimestamp="1701710826491" timestamp="5900528" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1659" _type="MoveCaretCommand" caretOffset="783" date="Mon Dec 04 14:05:27 EST 2023" docOffset="783" starttimestamp="1701710826491" timestamp="5901055" />
  <Command __id="1660" _type="MoveCaretCommand" caretOffset="783" date="Mon Dec 04 14:05:27 EST 2023" docOffset="783" starttimestamp="1701710826491" timestamp="5901055" />
  <Command __id="1661" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Mon Dec 04 14:05:28 EST 2023" starttimestamp="1701710826491" timestamp="5902024" />
  <Command __id="1662" _type="CopyCommand" date="Mon Dec 04 14:05:28 EST 2023" starttimestamp="1701710826491" timestamp="5902171" />
  <Command __id="1663" _type="ShellCommand" date="Mon Dec 04 14:05:29 EST 2023" starttimestamp="1701710826491" timestamp="5902614" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1664" _type="ShellCommand" date="Mon Dec 04 14:05:29 EST 2023" starttimestamp="1701710826491" timestamp="5903123" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1665" _type="MoveCaretCommand" caretOffset="752" date="Mon Dec 04 14:05:30 EST 2023" docOffset="752" starttimestamp="1701710826491" timestamp="5903568" />
  <Command __id="1666" _type="MoveCaretCommand" caretOffset="752" date="Mon Dec 04 14:05:30 EST 2023" docOffset="752" starttimestamp="1701710826491" timestamp="5903568" />
  <Command __id="1667" _type="ShellCommand" date="Mon Dec 04 14:05:32 EST 2023" starttimestamp="1701710826491" timestamp="5905883" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1668" _type="ShellCommand" date="Mon Dec 04 14:08:06 EST 2023" starttimestamp="1701710826491" timestamp="6059535" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1669" _type="ShellCommand" date="Mon Dec 04 14:08:06 EST 2023" starttimestamp="1701710826491" timestamp="6060453" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1670" _type="ShellCommand" date="Mon Dec 04 14:08:38 EST 2023" starttimestamp="1701710826491" timestamp="6092396" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1671" _type="ShellCommand" date="Mon Dec 04 14:08:41 EST 2023" starttimestamp="1701710826491" timestamp="6094961" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1672" _type="ShellCommand" date="Mon Dec 04 14:08:47 EST 2023" starttimestamp="1701710826491" timestamp="6100886" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1673" _type="ShellCommand" date="Mon Dec 04 14:08:48 EST 2023" starttimestamp="1701710826491" timestamp="6101937" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1674" _type="ShellCommand" date="Mon Dec 04 14:09:00 EST 2023" starttimestamp="1701710826491" timestamp="6114358" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1675" _type="ShellCommand" date="Mon Dec 04 14:09:04 EST 2023" starttimestamp="1701710826491" timestamp="6118242" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1676" _type="ShellCommand" date="Mon Dec 04 14:09:06 EST 2023" starttimestamp="1701710826491" timestamp="6119775" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1677" _type="ShellCommand" date="Mon Dec 04 14:09:09 EST 2023" starttimestamp="1701710826491" timestamp="6122868" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1678" _type="ShellCommand" date="Mon Dec 04 14:09:10 EST 2023" starttimestamp="1701710826491" timestamp="6123711" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1679" _type="ShellCommand" date="Mon Dec 04 14:09:11 EST 2023" starttimestamp="1701710826491" timestamp="6124680" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="1628" _type="Delete" date="Mon Dec 04 14:02:22 EST 2023" docASTNodeCount="200" docActiveCodeLength="1193" docExpressionCount="148" docLength="1193" endLine="30" length="1" offset="966" startLine="30" starttimestamp="1701710826491" timestamp="5715799">
    <text><![CDATA[x]]></text>
  </DocumentChange>
  <Command __id="1680" _type="ShellCommand" date="Mon Dec 04 14:09:26 EST 2023" starttimestamp="1701710826491" timestamp="6139916" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1681" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:09:37 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6151298">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="1682" _type="MoveCaretCommand" caretOffset="608" date="Mon Dec 04 14:09:37 EST 2023" docOffset="608" starttimestamp="1701710826491" timestamp="6151351" />
  <Command __id="1684" _type="MoveCaretCommand" caretOffset="752" date="Mon Dec 04 14:09:38 EST 2023" docOffset="752" starttimestamp="1701710826491" timestamp="6151875" />
  <Command __id="1685" _type="MoveCaretCommand" caretOffset="522" date="Mon Dec 04 14:09:39 EST 2023" docOffset="522" starttimestamp="1701710826491" timestamp="6152776" />
  <Command __id="1686" _type="MoveCaretCommand" caretOffset="522" date="Mon Dec 04 14:09:39 EST 2023" docOffset="522" starttimestamp="1701710826491" timestamp="6152776" />
  <Command __id="1687" _type="EclipseCommand" commandID="org.eclipse.ui.ide.showInSystemExplorer" date="Mon Dec 04 14:09:45 EST 2023" starttimestamp="1701710826491" timestamp="6159279" />
  <Command __id="1688" _type="ShellCommand" date="Mon Dec 04 14:09:45 EST 2023" starttimestamp="1701710826491" timestamp="6159327" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1689" _type="ShellCommand" date="Mon Dec 04 14:09:59 EST 2023" starttimestamp="1701710826491" timestamp="6173281" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1690" _type="MoveCaretCommand" caretOffset="258" date="Mon Dec 04 14:09:59 EST 2023" docOffset="258" starttimestamp="1701710826491" timestamp="6173398" />
  <Command __id="1691" _type="MoveCaretCommand" caretOffset="258" date="Mon Dec 04 14:09:59 EST 2023" docOffset="258" starttimestamp="1701710826491" timestamp="6173398" />
  <Command __id="1692" _type="MoveCaretCommand" caretOffset="357" date="Mon Dec 04 14:10:00 EST 2023" docOffset="357" starttimestamp="1701710826491" timestamp="6173792" />
  <Command __id="1693" _type="MoveCaretCommand" caretOffset="357" date="Mon Dec 04 14:10:00 EST 2023" docOffset="357" starttimestamp="1701710826491" timestamp="6173792" />
  <Command __id="1694" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Mon Dec 04 14:10:00 EST 2023" starttimestamp="1701710826491" timestamp="6173983" />
  <Command __id="1696" _type="PasteCommand" date="Mon Dec 04 14:10:00 EST 2023" starttimestamp="1701710826491" timestamp="6174173" />
  <Command __id="1697" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 14:10:02 EST 2023" starttimestamp="1701710826491" timestamp="6176376" />
  <Command __id="1698" _type="EclipseCommand" commandID="" date="Mon Dec 04 14:10:02 EST 2023" starttimestamp="1701710826491" timestamp="6176478" />
  <Command __id="1699" _type="EclipseCommand" commandID="" date="Mon Dec 04 14:10:02 EST 2023" starttimestamp="1701710826491" timestamp="6176491" />
  <Command __id="1700" _type="ShellCommand" date="Mon Dec 04 14:10:06 EST 2023" starttimestamp="1701710826491" timestamp="6179582" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1701" _type="ShellCommand" date="Mon Dec 04 14:10:06 EST 2023" starttimestamp="1701710826491" timestamp="6179996" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1702" _type="ShellCommand" date="Mon Dec 04 14:10:07 EST 2023" starttimestamp="1701710826491" timestamp="6180962" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1703" _type="ShellCommand" date="Mon Dec 04 14:10:09 EST 2023" starttimestamp="1701710826491" timestamp="6183236" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1704" _type="MoveCaretCommand" caretOffset="459" date="Mon Dec 04 14:10:09 EST 2023" docOffset="459" starttimestamp="1701710826491" timestamp="6183281" />
  <Command __id="1705" _type="MoveCaretCommand" caretOffset="459" date="Mon Dec 04 14:10:09 EST 2023" docOffset="459" starttimestamp="1701710826491" timestamp="6183281" />
  <Command __id="1706" _type="MoveCaretCommand" caretOffset="459" date="Mon Dec 04 14:10:11 EST 2023" docOffset="459" starttimestamp="1701710826491" timestamp="6185316" />
  <Command __id="1707" _type="MoveCaretCommand" caretOffset="459" date="Mon Dec 04 14:10:11 EST 2023" docOffset="459" starttimestamp="1701710826491" timestamp="6185317" />
  <Command __id="1683" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:09:38 EST 2023" docASTNodeCount="200" docActiveCodeLength="1193" docExpressionCount="148" docLength="1193" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6151826">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail()"), Diff(DELETE,".getHead()"), Diff(EQUAL,";		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			Optional<SExpression> retVal = environment.lookup((IdentifierAtom)expr);			if(retVal.isPresent()) {				return retVal.get();			}else{				return expr;			}		}		if(!expr.get"), Diff(DELETE,"Tail"), Diff(INSERT,"Head"), Diff(EQUAL,"().getHead().isAtom()) {			SExpression expression = "), Diff(DELETE,"ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead"), Diff(INSERT,"evalHelper(expr.getHead().getTail"), Diff(EQUAL,"(), environment)"), Diff(DELETE,")"), Diff(EQUAL,";			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead()."), Diff(INSERT,"getHead()."), Diff(EQUAL,"toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead()."), Diff(INSERT,"getHead()."), Diff(EQUAL,"toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import java.util.Optional;

import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			Optional<SExpression> retVal = environment.lookup((IdentifierAtom)expr);
			if(retVal.isPresent()) {
				return retVal.get();
			}else{
				return expr;
			}
		}
		if(!expr.getHead().getHead().isAtom()) {
			SExpression expression = evalHelper(expr.getHead().getTail(), environment);
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <DocumentChange __id="1695" _type="Replace" date="Mon Dec 04 14:10:00 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" endLine="38" insertionLength="1014" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1193" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="6174163">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import java.util.Optional;

import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			Optional<SExpression> retVal = environment.lookup((IdentifierAtom)expr);
			if(retVal.isPresent()) {
				return retVal.get();
			}else{
				return expr;
			}
		}
		if(!expr.getHead().getHead().isAtom()) {
			SExpression expression = evalHelper(expr.getHead().getTail(), environment);
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></insertedText>
  </DocumentChange>
  <Command __id="1708" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 14:10:16 EST 2023" starttimestamp="1701710826491" timestamp="6190013" />
  <Command __id="1709" _type="BreakPointCommand" date="Mon Dec 04 14:10:16 EST 2023" lineNumber="13" starttimestamp="1701710826491" timestamp="6190014" type="BreakPointAdded" />
  <Command __id="1711" _type="MoveCaretCommand" caretOffset="14" date="Mon Dec 04 14:10:17 EST 2023" docOffset="14" starttimestamp="1701710826491" timestamp="6191340" />
  <Command __id="1712" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Mon Dec 04 14:10:21 EST 2023" starttimestamp="1701710826491" timestamp="6194607" />
  <Command __id="1713" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:10:21 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6194736" type="Run" />
  <Command __id="1714" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:10:21 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6194736" type="Run" />
  <Command __id="1715" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:10:21 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="6194950" type="Run" />
  <Command __id="1716" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:10:21 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="6194961" type="Run" />
  <Command __id="1717" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:10:21 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="6195100" type="Run" />
  <Command __id="1718" _type="ConsoleInput" date="Mon Dec 04 14:10:25 EST 2023" starttimestamp="1701710826491" timestamp="6198549" type="Exception">
    <outputString><![CDATA[(setq C 3)
]]></outputString>
  </Command>
  <Command __id="1719" _type="ConsoleOutput" date="Mon Dec 04 14:10:25 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="6198562" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"QUOTE"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1710" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:10:17 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6191292">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="1741" _type="ConsoleInput" date="Mon Dec 04 14:10:57 EST 2023" starttimestamp="1701710826491" timestamp="6230974" type="Exception">
    <outputString><![CDATA[C
]]></outputString>
  </Command>
  <Command __id="1742" _type="ConsoleOutput" date="Mon Dec 04 14:10:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="6230981" type="ConsoleOutput">
    <outputString><![CDATA[C
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"3"), Diff(INSERT,"C"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1743" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:11:00 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6233591">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms."), Diff(DELETE,"IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;"), Diff(INSERT,"SExpression;"), Diff(EQUAL,"import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail()"), Diff(INSERT,".getHead()"), Diff(EQUAL,";		return evalHelper(expr, environment);	"), Diff(INSERT,"		"), Diff(EQUAL,"}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			"), Diff(DELETE,"Optional<SExpression> retVal = environment.lookup((IdentifierAtom)expr);			if(retVal.isPresent()) {				return retVal.get();			}else{				"), Diff(EQUAL,"return expr;		"), Diff(DELETE,"	"), Diff(DELETE,"}		"), Diff(EQUAL,"}		if(!expr.get"), Diff(DELETE,"Head"), Diff(INSERT,"Tail"), Diff(EQUAL,"().getHead().isAtom()) {			SExpression expression ="), Diff(INSERT," ExpressionFactory.newInstance(expr.getHead(),"), Diff(EQUAL," evalHelper(expr.get"), Diff(DELETE,"Head"), Diff(INSERT,"Tail"), Diff(EQUAL,"().get"), Diff(DELETE,"Tail"), Diff(INSERT,"Head"), Diff(EQUAL,"(), environment)"), Diff(INSERT,")"), Diff(EQUAL,";			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead()."), Diff(DELETE,"getHead()."), Diff(EQUAL,"toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead()."), Diff(DELETE,"getHead()."), Diff(EQUAL,"toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="1744" _type="MoveCaretCommand" caretOffset="379" date="Mon Dec 04 14:11:00 EST 2023" docOffset="379" starttimestamp="1701710826491" timestamp="6233637" />
  <Command __id="1746" _type="MoveCaretCommand" caretOffset="14" date="Mon Dec 04 14:11:02 EST 2023" docOffset="14" starttimestamp="1701710826491" timestamp="6235833" />
  <Command __id="1747" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Mon Dec 04 14:11:04 EST 2023" starttimestamp="1701710826491" timestamp="6237742" />
  <Command __id="1748" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:11:04 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6237828" type="Run" />
  <Command __id="1749" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:11:04 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="6237939" type="Run" />
  <Command __id="1750" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:11:04 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="6237950" type="Run" />
  <Command __id="1751" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:11:04 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="6238086" type="Run" />
  <Command __id="1745" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:11:02 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6235778">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="1752" _type="ConsoleInput" date="Mon Dec 04 14:11:08 EST 2023" starttimestamp="1701710826491" timestamp="6242490" type="Exception">
    <outputString><![CDATA[(setq C 3)
]]></outputString>
  </Command>
  <Command __id="1753" _type="ConsoleOutput" date="Mon Dec 04 14:11:08 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="6242504" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"C"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1754" _type="ConsoleInput" date="Mon Dec 04 14:11:09 EST 2023" starttimestamp="1701710826491" timestamp="6243378" type="Exception">
    <outputString><![CDATA[C
]]></outputString>
  </Command>
  <Command __id="1755" _type="ConsoleOutput" date="Mon Dec 04 14:11:09 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="6243383" type="ConsoleOutput">
    <outputString><![CDATA[C
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"3"), Diff(INSERT,"C"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1757" _type="MoveCaretCommand" caretOffset="379" date="Mon Dec 04 14:11:11 EST 2023" docOffset="379" starttimestamp="1701710826491" timestamp="6245432" />
  <Command __id="1758" _type="ShellCommand" date="Mon Dec 04 14:11:17 EST 2023" starttimestamp="1701710826491" timestamp="6250659" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1759" _type="ShellCommand" date="Mon Dec 04 14:11:17 EST 2023" starttimestamp="1701710826491" timestamp="6250910" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1760" _type="MoveCaretCommand" caretOffset="297" date="Mon Dec 04 14:11:17 EST 2023" docOffset="297" starttimestamp="1701710826491" timestamp="6250960" />
  <Command __id="1761" _type="MoveCaretCommand" caretOffset="297" date="Mon Dec 04 14:11:17 EST 2023" docOffset="297" starttimestamp="1701710826491" timestamp="6250960" />
  <Command __id="1764" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:11:25 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="6258800" type="Run" />
  <Command __id="1765" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 14:11:25 EST 2023" starttimestamp="1701710826491" timestamp="6258800" />
  <Command __id="1766" _type="ConsoleOutput" date="Mon Dec 04 14:11:25 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="6258835" type="ConsoleOutput">
    <outputString><![CDATA[C
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"C¶")]]]></diff>
  </Command>
  <Command __id="1767" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 14:11:35 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="6268923" />
  <Command __id="1768" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 14:11:35 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="6268923" />
  <Command __id="1769" _type="MoveCaretCommand" caretOffset="351" date="Mon Dec 04 14:11:36 EST 2023" docOffset="351" starttimestamp="1701710826491" timestamp="6269783" />
  <Command __id="1770" _type="MoveCaretCommand" caretOffset="351" date="Mon Dec 04 14:11:36 EST 2023" docOffset="351" starttimestamp="1701710826491" timestamp="6269783" />
  <Command __id="1771" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 14:11:36 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="6270249" />
  <Command __id="1772" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 14:11:36 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="6270249" />
  <Command __id="1773" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 14:11:37 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="6270716" />
  <Command __id="1774" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 14:11:37 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="6270716" />
  <Command __id="1775" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 14:11:37 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="6271149" />
  <Command __id="1776" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 14:11:37 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="6271149" />
  <Command __id="1777" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 14:11:38 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="6271598" />
  <Command __id="1778" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 14:11:38 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="6271598" />
  <Command __id="1779" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 14:11:38 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="6272031" />
  <Command __id="1780" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 14:11:38 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="6272031" />
  <Command __id="1781" _type="MoveCaretCommand" caretOffset="582" date="Mon Dec 04 14:11:39 EST 2023" docOffset="582" starttimestamp="1701710826491" timestamp="6272518" />
  <Command __id="1782" _type="MoveCaretCommand" caretOffset="582" date="Mon Dec 04 14:11:39 EST 2023" docOffset="582" starttimestamp="1701710826491" timestamp="6272518" />
  <Command __id="1783" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 14:11:39 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="6273000" />
  <Command __id="1784" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 14:11:39 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="6273000" />
  <Command __id="1785" _type="MoveCaretCommand" caretOffset="582" date="Mon Dec 04 14:11:39 EST 2023" docOffset="582" starttimestamp="1701710826491" timestamp="6273383" />
  <Command __id="1786" _type="MoveCaretCommand" caretOffset="582" date="Mon Dec 04 14:11:39 EST 2023" docOffset="582" starttimestamp="1701710826491" timestamp="6273383" />
  <Command __id="1787" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 14:11:40 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="6273817" />
  <Command __id="1788" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 14:11:40 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="6273817" />
  <Command __id="1790" _type="InsertStringCommand" date="Mon Dec 04 14:11:40 EST 2023" starttimestamp="1701710826491" timestamp="6274290" timestamp2="6274290">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1791" _type="InsertStringCommand" date="Mon Dec 04 14:11:40 EST 2023" starttimestamp="1701710826491" timestamp="6274290" timestamp2="6274290">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1756" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:11:11 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6245380">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="1789" _type="Insert" date="Mon Dec 04 14:11:40 EST 2023" docASTNodeCount="165" docActiveCodeLength="1019" docExpressionCount="124" docLength="1019" length="5" offset="566" repeat="2" starttimestamp="1701710826491" timestamp="6274286" timestamp2="6274845">
    <text><![CDATA[
			l]]></text>
  </DocumentChange>
  <DocumentChange __id="1795" _type="Delete" date="Mon Dec 04 14:11:41 EST 2023" docASTNodeCount="163" docActiveCodeLength="1018" docExpressionCount="123" docLength="1018" endLine="19" length="1" offset="570" startLine="19" starttimestamp="1701710826491" timestamp="6275248">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="1793" _type="InsertStringCommand" date="Mon Dec 04 14:11:41 EST 2023" starttimestamp="1701710826491" timestamp="6274847" timestamp2="6274847">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1794" _type="InsertStringCommand" date="Mon Dec 04 14:11:41 EST 2023" starttimestamp="1701710826491" timestamp="6274848" timestamp2="6274848">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1796" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:11:41 EST 2023" starttimestamp="1701710826491" timestamp="6275250" />
  <Command __id="1797" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:11:41 EST 2023" starttimestamp="1701710826491" timestamp="6275250" />
  <Command __id="1799" _type="InsertStringCommand" date="Mon Dec 04 14:11:42 EST 2023" starttimestamp="1701710826491" timestamp="6276397" timestamp2="6276397">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1800" _type="InsertStringCommand" date="Mon Dec 04 14:11:42 EST 2023" starttimestamp="1701710826491" timestamp="6276397" timestamp2="6276397">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1802" _type="InsertStringCommand" date="Mon Dec 04 14:11:42 EST 2023" starttimestamp="1701710826491" timestamp="6276448" timestamp2="6276448">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1803" _type="InsertStringCommand" date="Mon Dec 04 14:11:42 EST 2023" starttimestamp="1701710826491" timestamp="6276448" timestamp2="6276448">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1805" _type="InsertStringCommand" date="Mon Dec 04 14:11:43 EST 2023" starttimestamp="1701710826491" timestamp="6276586" timestamp2="6276586">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="1806" _type="InsertStringCommand" date="Mon Dec 04 14:11:43 EST 2023" starttimestamp="1701710826491" timestamp="6276586" timestamp2="6276586">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="1808" _type="InsertStringCommand" date="Mon Dec 04 14:11:43 EST 2023" starttimestamp="1701710826491" timestamp="6276674" timestamp2="6276674">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1809" _type="InsertStringCommand" date="Mon Dec 04 14:11:43 EST 2023" starttimestamp="1701710826491" timestamp="6276674" timestamp2="6276674">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1811" _type="InsertStringCommand" date="Mon Dec 04 14:11:43 EST 2023" starttimestamp="1701710826491" timestamp="6276768" timestamp2="6276768">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1812" _type="InsertStringCommand" date="Mon Dec 04 14:11:43 EST 2023" starttimestamp="1701710826491" timestamp="6276768" timestamp2="6276768">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1814" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:11:43 EST 2023" starttimestamp="1701710826491" timestamp="6277494" />
  <Command __id="1815" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:11:43 EST 2023" starttimestamp="1701710826491" timestamp="6277494" />
  <Command __id="1817" _type="InsertStringCommand" date="Mon Dec 04 14:11:44 EST 2023" starttimestamp="1701710826491" timestamp="6278109" timestamp2="6278109">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1818" _type="InsertStringCommand" date="Mon Dec 04 14:11:44 EST 2023" starttimestamp="1701710826491" timestamp="6278109" timestamp2="6278109">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1820" _type="InsertStringCommand" date="Mon Dec 04 14:11:44 EST 2023" starttimestamp="1701710826491" timestamp="6278175" timestamp2="6278175">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1821" _type="InsertStringCommand" date="Mon Dec 04 14:11:44 EST 2023" starttimestamp="1701710826491" timestamp="6278175" timestamp2="6278175">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1823" _type="InsertStringCommand" date="Mon Dec 04 14:11:44 EST 2023" starttimestamp="1701710826491" timestamp="6278266" timestamp2="6278266">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1824" _type="InsertStringCommand" date="Mon Dec 04 14:11:44 EST 2023" starttimestamp="1701710826491" timestamp="6278266" timestamp2="6278266">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1826" _type="InsertStringCommand" date="Mon Dec 04 14:11:44 EST 2023" starttimestamp="1701710826491" timestamp="6278417" timestamp2="6278417">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1827" _type="InsertStringCommand" date="Mon Dec 04 14:11:44 EST 2023" starttimestamp="1701710826491" timestamp="6278417" timestamp2="6278417">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1829" _type="InsertStringCommand" date="Mon Dec 04 14:11:45 EST 2023" starttimestamp="1701710826491" timestamp="6278519" timestamp2="6278519">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1830" _type="InsertStringCommand" date="Mon Dec 04 14:11:45 EST 2023" starttimestamp="1701710826491" timestamp="6278519" timestamp2="6278519">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1832" _type="InsertStringCommand" date="Mon Dec 04 14:11:45 EST 2023" starttimestamp="1701710826491" timestamp="6278578" timestamp2="6278578">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1833" _type="InsertStringCommand" date="Mon Dec 04 14:11:45 EST 2023" starttimestamp="1701710826491" timestamp="6278578" timestamp2="6278578">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1835" _type="InsertStringCommand" date="Mon Dec 04 14:11:45 EST 2023" starttimestamp="1701710826491" timestamp="6278666" timestamp2="6278666">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1836" _type="InsertStringCommand" date="Mon Dec 04 14:11:45 EST 2023" starttimestamp="1701710826491" timestamp="6278666" timestamp2="6278666">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1838" _type="InsertStringCommand" date="Mon Dec 04 14:11:45 EST 2023" starttimestamp="1701710826491" timestamp="6278923" timestamp2="6278923">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1839" _type="InsertStringCommand" date="Mon Dec 04 14:11:45 EST 2023" starttimestamp="1701710826491" timestamp="6278923" timestamp2="6278923">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1840" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 14:11:45 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="6278931" />
  <Command __id="1853" _type="ShellCommand" date="Mon Dec 04 14:11:49 EST 2023" starttimestamp="1701710826491" timestamp="6282783" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1854" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 14:11:49 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="6282818" />
  <Command __id="1855" _type="ShellCommand" date="Mon Dec 04 14:11:50 EST 2023" starttimestamp="1701710826491" timestamp="6284475" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1856" _type="MoveCaretCommand" caretOffset="570" date="Mon Dec 04 14:11:51 EST 2023" docOffset="570" starttimestamp="1701710826491" timestamp="6285383" />
  <Command __id="1857" _type="MoveCaretCommand" caretOffset="570" date="Mon Dec 04 14:11:51 EST 2023" docOffset="570" starttimestamp="1701710826491" timestamp="6285383" />
  <Command __id="1859" _type="InsertStringCommand" date="Mon Dec 04 14:11:52 EST 2023" starttimestamp="1701710826491" timestamp="6286033" timestamp2="6286033">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1860" _type="InsertStringCommand" date="Mon Dec 04 14:11:52 EST 2023" starttimestamp="1701710826491" timestamp="6286033" timestamp2="6286033">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1862" _type="InsertStringCommand" date="Mon Dec 04 14:11:52 EST 2023" starttimestamp="1701710826491" timestamp="6286120" timestamp2="6286120">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1863" _type="InsertStringCommand" date="Mon Dec 04 14:11:52 EST 2023" starttimestamp="1701710826491" timestamp="6286120" timestamp2="6286120">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1865" _type="InsertStringCommand" date="Mon Dec 04 14:11:52 EST 2023" starttimestamp="1701710826491" timestamp="6286211" timestamp2="6286211">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1866" _type="InsertStringCommand" date="Mon Dec 04 14:11:52 EST 2023" starttimestamp="1701710826491" timestamp="6286211" timestamp2="6286211">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1867" _type="ShellCommand" date="Mon Dec 04 14:11:56 EST 2023" starttimestamp="1701710826491" timestamp="6289669" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1868" _type="ShellCommand" date="Mon Dec 04 14:11:56 EST 2023" starttimestamp="1701710826491" timestamp="6290237" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1869" _type="ShellCommand" date="Mon Dec 04 14:11:57 EST 2023" starttimestamp="1701710826491" timestamp="6291279" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="1798" _type="Insert" date="Mon Dec 04 14:11:42 EST 2023" docASTNodeCount="165" docActiveCodeLength="1023" docExpressionCount="124" docLength="1023" length="5" offset="570" repeat="5" starttimestamp="1701710826491" timestamp="6276394" timestamp2="6276766">
    <text><![CDATA[envio]]></text>
  </DocumentChange>
  <DocumentChange __id="1813" _type="Delete" date="Mon Dec 04 14:11:43 EST 2023" docASTNodeCount="165" docActiveCodeLength="1022" docExpressionCount="124" docLength="1022" endLine="19" length="1" offset="574" startLine="19" starttimestamp="1701710826491" timestamp="6277492">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="1816" _type="Insert" date="Mon Dec 04 14:11:44 EST 2023" docASTNodeCount="168" docActiveCodeLength="1030" docExpressionCount="126" docLength="1030" length="8" offset="574" repeat="8" starttimestamp="1701710826491" timestamp="6278107" timestamp2="6278921">
    <text><![CDATA[ronment.]]></text>
  </DocumentChange>
  <DocumentChange __id="1841" _type="Delete" date="Mon Dec 04 14:11:45 EST 2023" docASTNodeCount="163" docActiveCodeLength="1018" docExpressionCount="123" docLength="1018" endLine="19" length="12" offset="570" repeat="12" startLine="19" starttimestamp="1701710826491" timestamp="6279292" timestamp2="6280608">
    <text><![CDATA[environment.]]></text>
  </DocumentChange>
  <DocumentChange __id="1858" _type="Insert" date="Mon Dec 04 14:11:52 EST 2023" docASTNodeCount="165" docActiveCodeLength="1022" docExpressionCount="124" docLength="1022" length="4" offset="570" repeat="3" starttimestamp="1701710826491" timestamp="6286031" timestamp2="6286207">
    <text><![CDATA[if()]]></text>
  </DocumentChange>
  <Command __id="1870" _type="ShellCommand" date="Mon Dec 04 14:12:09 EST 2023" starttimestamp="1701710826491" timestamp="6302797" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="1871" _type="Delete" date="Mon Dec 04 14:12:10 EST 2023" docASTNodeCount="163" docActiveCodeLength="1018" docExpressionCount="123" docLength="1018" endLine="19" length="4" offset="570" repeat="4" startLine="19" starttimestamp="1701710826491" timestamp="6303961" timestamp2="6305248">
    <text><![CDATA[if()]]></text>
  </DocumentChange>
  <Command __id="1872" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:10 EST 2023" starttimestamp="1701710826491" timestamp="6303963" />
  <Command __id="1873" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:10 EST 2023" starttimestamp="1701710826491" timestamp="6303963" />
  <Command __id="1875" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:10 EST 2023" starttimestamp="1701710826491" timestamp="6304078" />
  <Command __id="1876" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:10 EST 2023" starttimestamp="1701710826491" timestamp="6304078" />
  <Command __id="1878" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:10 EST 2023" starttimestamp="1701710826491" timestamp="6304221" />
  <Command __id="1879" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:10 EST 2023" starttimestamp="1701710826491" timestamp="6304221" />
  <Command __id="1880" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 14:12:11 EST 2023" starttimestamp="1701710826491" timestamp="6305174" />
  <Command __id="1881" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 14:12:11 EST 2023" starttimestamp="1701710826491" timestamp="6305174" />
  <Command __id="1883" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:11 EST 2023" starttimestamp="1701710826491" timestamp="6305250" />
  <Command __id="1884" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:11 EST 2023" starttimestamp="1701710826491" timestamp="6305250" />
  <DocumentChange __id="1885" _type="Insert" date="Mon Dec 04 14:12:12 EST 2023" docASTNodeCount="165" docActiveCodeLength="1020" docExpressionCount="124" docLength="1020" length="2" offset="570" repeat="2" starttimestamp="1701710826491" timestamp="6305782" timestamp2="6305975">
    <text><![CDATA[ex]]></text>
  </DocumentChange>
  <Command __id="1886" _type="InsertStringCommand" date="Mon Dec 04 14:12:12 EST 2023" starttimestamp="1701710826491" timestamp="6305784" timestamp2="6305784">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1887" _type="InsertStringCommand" date="Mon Dec 04 14:12:12 EST 2023" starttimestamp="1701710826491" timestamp="6305784" timestamp2="6305784">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1889" _type="InsertStringCommand" date="Mon Dec 04 14:12:12 EST 2023" starttimestamp="1701710826491" timestamp="6305977" timestamp2="6305977">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="1890" _type="InsertStringCommand" date="Mon Dec 04 14:12:12 EST 2023" starttimestamp="1701710826491" timestamp="6305977" timestamp2="6305977">
    <data><![CDATA[x]]></data>
  </Command>
  <DocumentChange __id="1891" _type="Delete" date="Mon Dec 04 14:12:12 EST 2023" docASTNodeCount="163" docActiveCodeLength="1018" docExpressionCount="123" docLength="1018" endLine="19" length="2" offset="570" repeat="2" startLine="19" starttimestamp="1701710826491" timestamp="6306264" timestamp2="6306361">
    <text><![CDATA[ex]]></text>
  </DocumentChange>
  <Command __id="1892" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:12 EST 2023" starttimestamp="1701710826491" timestamp="6306267" />
  <Command __id="1893" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:12 EST 2023" starttimestamp="1701710826491" timestamp="6306267" />
  <Command __id="1895" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:12 EST 2023" starttimestamp="1701710826491" timestamp="6306363" />
  <Command __id="1896" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:12 EST 2023" starttimestamp="1701710826491" timestamp="6306363" />
  <DocumentChange __id="1897" _type="Insert" date="Mon Dec 04 14:12:19 EST 2023" docASTNodeCount="165" docActiveCodeLength="1024" docExpressionCount="124" docLength="1024" length="6" offset="570" repeat="6" starttimestamp="1701710826491" timestamp="6313210" timestamp2="6314431">
    <text><![CDATA[envior]]></text>
  </DocumentChange>
  <Command __id="1898" _type="InsertStringCommand" date="Mon Dec 04 14:12:19 EST 2023" starttimestamp="1701710826491" timestamp="6313212" timestamp2="6313212">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1899" _type="InsertStringCommand" date="Mon Dec 04 14:12:19 EST 2023" starttimestamp="1701710826491" timestamp="6313212" timestamp2="6313212">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1901" _type="InsertStringCommand" date="Mon Dec 04 14:12:19 EST 2023" starttimestamp="1701710826491" timestamp="6313257" timestamp2="6313257">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1902" _type="InsertStringCommand" date="Mon Dec 04 14:12:19 EST 2023" starttimestamp="1701710826491" timestamp="6313257" timestamp2="6313257">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1904" _type="InsertStringCommand" date="Mon Dec 04 14:12:19 EST 2023" starttimestamp="1701710826491" timestamp="6313425" timestamp2="6313425">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="1905" _type="InsertStringCommand" date="Mon Dec 04 14:12:19 EST 2023" starttimestamp="1701710826491" timestamp="6313426" timestamp2="6313426">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="1907" _type="InsertStringCommand" date="Mon Dec 04 14:12:20 EST 2023" starttimestamp="1701710826491" timestamp="6313523" timestamp2="6313523">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1908" _type="InsertStringCommand" date="Mon Dec 04 14:12:20 EST 2023" starttimestamp="1701710826491" timestamp="6313523" timestamp2="6313523">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1910" _type="InsertStringCommand" date="Mon Dec 04 14:12:20 EST 2023" starttimestamp="1701710826491" timestamp="6313625" timestamp2="6313625">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1911" _type="InsertStringCommand" date="Mon Dec 04 14:12:20 EST 2023" starttimestamp="1701710826491" timestamp="6313625" timestamp2="6313625">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1913" _type="InsertStringCommand" date="Mon Dec 04 14:12:20 EST 2023" starttimestamp="1701710826491" timestamp="6314433" timestamp2="6314433">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1914" _type="InsertStringCommand" date="Mon Dec 04 14:12:20 EST 2023" starttimestamp="1701710826491" timestamp="6314433" timestamp2="6314433">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1915" _type="Delete" date="Mon Dec 04 14:12:21 EST 2023" docASTNodeCount="165" docActiveCodeLength="1022" docExpressionCount="124" docLength="1022" endLine="19" length="2" offset="574" repeat="2" startLine="19" starttimestamp="1701710826491" timestamp="6314723" timestamp2="6316102">
    <text><![CDATA[or]]></text>
  </DocumentChange>
  <Command __id="1916" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:21 EST 2023" starttimestamp="1701710826491" timestamp="6314725" />
  <Command __id="1917" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:21 EST 2023" starttimestamp="1701710826491" timestamp="6314725" />
  <Command __id="1919" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:22 EST 2023" starttimestamp="1701710826491" timestamp="6316105" />
  <Command __id="1920" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:12:22 EST 2023" starttimestamp="1701710826491" timestamp="6316105" />
  <DocumentChange __id="1921" _type="Insert" date="Mon Dec 04 14:12:23 EST 2023" docASTNodeCount="167" docActiveCodeLength="1033" docExpressionCount="126" docLength="1033" length="11" offset="574" repeat="11" starttimestamp="1701710826491" timestamp="6316795" timestamp2="6319310">
    <text><![CDATA[ronment.loo]]></text>
  </DocumentChange>
  <Command __id="1922" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6316797" timestamp2="6316797">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1923" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6316797" timestamp2="6316797">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1925" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6316867" timestamp2="6316867">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1926" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6316867" timestamp2="6316867">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1928" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6317011" timestamp2="6317011">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1929" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6317011" timestamp2="6317011">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1931" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6317199" timestamp2="6317199">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1932" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6317199" timestamp2="6317199">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1934" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6317319" timestamp2="6317319">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1935" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6317319" timestamp2="6317319">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1937" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6317365" timestamp2="6317365">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1938" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6317365" timestamp2="6317365">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1940" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6317474" timestamp2="6317474">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1941" _type="InsertStringCommand" date="Mon Dec 04 14:12:23 EST 2023" starttimestamp="1701710826491" timestamp="6317474" timestamp2="6317474">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1943" _type="InsertStringCommand" date="Mon Dec 04 14:12:24 EST 2023" starttimestamp="1701710826491" timestamp="6317536" timestamp2="6317536">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1944" _type="InsertStringCommand" date="Mon Dec 04 14:12:24 EST 2023" starttimestamp="1701710826491" timestamp="6317536" timestamp2="6317536">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1945" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 14:12:24 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="6317542" />
  <Command __id="1949" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 14:12:26 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="6319514" />
  <DocumentChange __id="1950" _type="Replace" date="Mon Dec 04 14:12:26 EST 2023" docASTNodeCount="168" docActiveCodeLength="1042" docExpressionCount="127" docLength="1042" endLine="19" insertionLength="12" int_docASTNodeCount="168" int_docActiveCodeLength="1030" int_docExpressionCount="126" int_docLength="1030" length="3" offset="582" startLine="19" starttimestamp="1701710826491" timestamp="6319517">
    <deletedText><![CDATA[loo]]></deletedText>
    <insertedText><![CDATA[lookup(null)]]></insertedText>
  </DocumentChange>
  <Command __id="1951" _type="InsertStringCommand" date="Mon Dec 04 14:12:26 EST 2023" starttimestamp="1701710826491" timestamp="6319540" timestamp2="6319540">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1952" _type="InsertStringCommand" date="Mon Dec 04 14:12:26 EST 2023" starttimestamp="1701710826491" timestamp="6319541" timestamp2="6319541">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1953" _type="Replace" date="Mon Dec 04 14:12:27 EST 2023" docASTNodeCount="168" docActiveCodeLength="1039" docExpressionCount="127" docLength="1039" endLine="19" insertionLength="1" int_docASTNodeCount="167" int_docActiveCodeLength="1038" int_docExpressionCount="126" int_docLength="1038" length="4" offset="589" startLine="19" starttimestamp="1701710826491" timestamp="6321178">
    <deletedText><![CDATA[null]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <Command __id="1954" _type="InsertStringCommand" date="Mon Dec 04 14:12:27 EST 2023" starttimestamp="1701710826491" timestamp="6321184" timestamp2="6321184">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1955" _type="InsertStringCommand" date="Mon Dec 04 14:12:27 EST 2023" starttimestamp="1701710826491" timestamp="6321184" timestamp2="6321184">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1956" _type="Insert" date="Mon Dec 04 14:12:27 EST 2023" docASTNodeCount="168" docActiveCodeLength="1042" docExpressionCount="127" docLength="1042" length="3" offset="590" repeat="3" starttimestamp="1701710826491" timestamp="6321377" timestamp2="6321574">
    <text><![CDATA[xpr]]></text>
  </DocumentChange>
  <Command __id="1957" _type="InsertStringCommand" date="Mon Dec 04 14:12:27 EST 2023" starttimestamp="1701710826491" timestamp="6321377" timestamp2="6321377">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="1958" _type="InsertStringCommand" date="Mon Dec 04 14:12:27 EST 2023" starttimestamp="1701710826491" timestamp="6321377" timestamp2="6321377">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="1960" _type="InsertStringCommand" date="Mon Dec 04 14:12:27 EST 2023" starttimestamp="1701710826491" timestamp="6321493" timestamp2="6321493">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1961" _type="InsertStringCommand" date="Mon Dec 04 14:12:27 EST 2023" starttimestamp="1701710826491" timestamp="6321493" timestamp2="6321493">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1963" _type="InsertStringCommand" date="Mon Dec 04 14:12:28 EST 2023" starttimestamp="1701710826491" timestamp="6321575" timestamp2="6321575">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1964" _type="InsertStringCommand" date="Mon Dec 04 14:12:28 EST 2023" starttimestamp="1701710826491" timestamp="6321575" timestamp2="6321575">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1965" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 14:12:28 EST 2023" starttimestamp="1701710826491" timestamp="6321800" />
  <Command __id="1966" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 14:12:28 EST 2023" starttimestamp="1701710826491" timestamp="6321800" />
  <DocumentChange __id="1967" _type="Insert" date="Mon Dec 04 14:12:29 EST 2023" docASTNodeCount="168" docActiveCodeLength="1043" docExpressionCount="127" docLength="1043" length="1" offset="594" starttimestamp="1701710826491" timestamp="6322931">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="1968" _type="InsertStringCommand" date="Mon Dec 04 14:12:29 EST 2023" starttimestamp="1701710826491" timestamp="6322933" timestamp2="6322933">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1969" _type="InsertStringCommand" date="Mon Dec 04 14:12:29 EST 2023" starttimestamp="1701710826491" timestamp="6322933" timestamp2="6322933">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1970" _type="MoveCaretCommand" caretOffset="570" date="Mon Dec 04 14:12:30 EST 2023" docOffset="570" starttimestamp="1701710826491" timestamp="6323856" />
  <Command __id="1971" _type="MoveCaretCommand" caretOffset="570" date="Mon Dec 04 14:12:30 EST 2023" docOffset="570" starttimestamp="1701710826491" timestamp="6323856" />
  <Command __id="1973" _type="InsertStringCommand" date="Mon Dec 04 14:12:30 EST 2023" starttimestamp="1701710826491" timestamp="6324021" timestamp2="6324021">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1974" _type="InsertStringCommand" date="Mon Dec 04 14:12:30 EST 2023" starttimestamp="1701710826491" timestamp="6324022" timestamp2="6324022">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1976" _type="InsertStringCommand" date="Mon Dec 04 14:12:30 EST 2023" starttimestamp="1701710826491" timestamp="6324224" timestamp2="6324224">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1977" _type="InsertStringCommand" date="Mon Dec 04 14:12:30 EST 2023" starttimestamp="1701710826491" timestamp="6324224" timestamp2="6324224">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1979" _type="InsertStringCommand" date="Mon Dec 04 14:12:31 EST 2023" starttimestamp="1701710826491" timestamp="6324793" timestamp2="6324793">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1980" _type="InsertStringCommand" date="Mon Dec 04 14:12:31 EST 2023" starttimestamp="1701710826491" timestamp="6324793" timestamp2="6324793">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1982" _type="InsertStringCommand" date="Mon Dec 04 14:12:31 EST 2023" starttimestamp="1701710826491" timestamp="6324896" timestamp2="6324896">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1983" _type="InsertStringCommand" date="Mon Dec 04 14:12:31 EST 2023" starttimestamp="1701710826491" timestamp="6324896" timestamp2="6324896">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1985" _type="InsertStringCommand" date="Mon Dec 04 14:12:31 EST 2023" starttimestamp="1701710826491" timestamp="6324974" timestamp2="6324974">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1986" _type="InsertStringCommand" date="Mon Dec 04 14:12:31 EST 2023" starttimestamp="1701710826491" timestamp="6324974" timestamp2="6324974">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1988" _type="InsertStringCommand" date="Mon Dec 04 14:12:31 EST 2023" starttimestamp="1701710826491" timestamp="6325028" timestamp2="6325028">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1989" _type="InsertStringCommand" date="Mon Dec 04 14:12:31 EST 2023" starttimestamp="1701710826491" timestamp="6325028" timestamp2="6325028">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1991" _type="InsertStringCommand" date="Mon Dec 04 14:12:31 EST 2023" starttimestamp="1701710826491" timestamp="6325127" timestamp2="6325127">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1992" _type="InsertStringCommand" date="Mon Dec 04 14:12:31 EST 2023" starttimestamp="1701710826491" timestamp="6325127" timestamp2="6325127">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1994" _type="InsertStringCommand" date="Mon Dec 04 14:12:31 EST 2023" starttimestamp="1701710826491" timestamp="6325237" timestamp2="6325237">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1995" _type="InsertStringCommand" date="Mon Dec 04 14:12:31 EST 2023" starttimestamp="1701710826491" timestamp="6325237" timestamp2="6325237">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1997" _type="InsertStringCommand" date="Mon Dec 04 14:12:32 EST 2023" starttimestamp="1701710826491" timestamp="6326186" timestamp2="6326186">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="1998" _type="InsertStringCommand" date="Mon Dec 04 14:12:32 EST 2023" starttimestamp="1701710826491" timestamp="6326186" timestamp2="6326186">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="2000" _type="InsertStringCommand" date="Mon Dec 04 14:12:33 EST 2023" starttimestamp="1701710826491" timestamp="6327028" timestamp2="6327028">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2001" _type="InsertStringCommand" date="Mon Dec 04 14:12:33 EST 2023" starttimestamp="1701710826491" timestamp="6327028" timestamp2="6327028">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2003" _type="InsertStringCommand" date="Mon Dec 04 14:12:34 EST 2023" starttimestamp="1701710826491" timestamp="6327535" timestamp2="6327535">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="2004" _type="InsertStringCommand" date="Mon Dec 04 14:12:34 EST 2023" starttimestamp="1701710826491" timestamp="6327535" timestamp2="6327535">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="2006" _type="InsertStringCommand" date="Mon Dec 04 14:12:34 EST 2023" starttimestamp="1701710826491" timestamp="6327949" timestamp2="6327949">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="2007" _type="InsertStringCommand" date="Mon Dec 04 14:12:34 EST 2023" starttimestamp="1701710826491" timestamp="6327949" timestamp2="6327949">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="2009" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6328600" timestamp2="6328600">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2010" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6328600" timestamp2="6328600">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2012" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6328737" timestamp2="6328737">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2013" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6328737" timestamp2="6328737">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2015" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6328791" timestamp2="6328791">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2016" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6328791" timestamp2="6328791">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2018" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6328911" timestamp2="6328911">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2019" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6328911" timestamp2="6328911">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2021" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6329091" timestamp2="6329091">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2022" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6329091" timestamp2="6329091">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2024" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6329166" timestamp2="6329166">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2025" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6329166" timestamp2="6329166">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2027" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6329212" timestamp2="6329212">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2028" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6329213" timestamp2="6329213">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2030" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6329291" timestamp2="6329291">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2031" _type="InsertStringCommand" date="Mon Dec 04 14:12:35 EST 2023" starttimestamp="1701710826491" timestamp="6329291" timestamp2="6329291">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2032" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 14:12:36 EST 2023" starttimestamp="1701710826491" timestamp="6329824" />
  <Command __id="2033" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 14:12:36 EST 2023" starttimestamp="1701710826491" timestamp="6329824" />
  <Command __id="2035" _type="InsertStringCommand" date="Mon Dec 04 14:12:37 EST 2023" starttimestamp="1701710826491" timestamp="6330999" timestamp2="6330999">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2036" _type="InsertStringCommand" date="Mon Dec 04 14:12:37 EST 2023" starttimestamp="1701710826491" timestamp="6330999" timestamp2="6330999">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2038" _type="InsertStringCommand" date="Mon Dec 04 14:12:37 EST 2023" starttimestamp="1701710826491" timestamp="6331489" timestamp2="6331489">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2039" _type="InsertStringCommand" date="Mon Dec 04 14:12:37 EST 2023" starttimestamp="1701710826491" timestamp="6331489" timestamp2="6331489">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2041" _type="InsertStringCommand" date="Mon Dec 04 14:12:38 EST 2023" starttimestamp="1701710826491" timestamp="6331550" timestamp2="6331550">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2042" _type="InsertStringCommand" date="Mon Dec 04 14:12:38 EST 2023" starttimestamp="1701710826491" timestamp="6331550" timestamp2="6331550">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2044" _type="InsertStringCommand" date="Mon Dec 04 14:12:38 EST 2023" starttimestamp="1701710826491" timestamp="6332370" timestamp2="6332370">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2045" _type="InsertStringCommand" date="Mon Dec 04 14:12:38 EST 2023" starttimestamp="1701710826491" timestamp="6332370" timestamp2="6332370">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2047" _type="InsertStringCommand" date="Mon Dec 04 14:12:39 EST 2023" starttimestamp="1701710826491" timestamp="6332720" timestamp2="6332720">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="2048" _type="InsertStringCommand" date="Mon Dec 04 14:12:39 EST 2023" starttimestamp="1701710826491" timestamp="6332720" timestamp2="6332720">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="2050" _type="InsertStringCommand" date="Mon Dec 04 14:12:39 EST 2023" starttimestamp="1701710826491" timestamp="6333069" timestamp2="6333069">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2051" _type="InsertStringCommand" date="Mon Dec 04 14:12:39 EST 2023" starttimestamp="1701710826491" timestamp="6333069" timestamp2="6333069">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2053" _type="InsertStringCommand" date="Mon Dec 04 14:12:39 EST 2023" starttimestamp="1701710826491" timestamp="6333133" timestamp2="6333133">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2054" _type="InsertStringCommand" date="Mon Dec 04 14:12:39 EST 2023" starttimestamp="1701710826491" timestamp="6333133" timestamp2="6333133">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2056" _type="InsertStringCommand" date="Mon Dec 04 14:12:39 EST 2023" starttimestamp="1701710826491" timestamp="6333314" timestamp2="6333314">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2057" _type="InsertStringCommand" date="Mon Dec 04 14:12:39 EST 2023" starttimestamp="1701710826491" timestamp="6333314" timestamp2="6333314">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2059" _type="InsertStringCommand" date="Mon Dec 04 14:12:40 EST 2023" starttimestamp="1701710826491" timestamp="6333528" timestamp2="6333528">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2060" _type="InsertStringCommand" date="Mon Dec 04 14:12:40 EST 2023" starttimestamp="1701710826491" timestamp="6333528" timestamp2="6333528">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2062" _type="InsertStringCommand" date="Mon Dec 04 14:12:40 EST 2023" starttimestamp="1701710826491" timestamp="6333767" timestamp2="6333767">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2063" _type="InsertStringCommand" date="Mon Dec 04 14:12:40 EST 2023" starttimestamp="1701710826491" timestamp="6333767" timestamp2="6333767">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2064" _type="MoveCaretCommand" caretOffset="626" date="Mon Dec 04 14:12:41 EST 2023" docOffset="626" starttimestamp="1701710826491" timestamp="6334808" />
  <Command __id="2065" _type="MoveCaretCommand" caretOffset="626" date="Mon Dec 04 14:12:41 EST 2023" docOffset="626" starttimestamp="1701710826491" timestamp="6334808" />
  <Command __id="2066" _type="ShellCommand" date="Mon Dec 04 14:12:46 EST 2023" starttimestamp="1701710826491" timestamp="6339559" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2067" _type="ShellCommand" date="Mon Dec 04 14:12:46 EST 2023" starttimestamp="1701710826491" timestamp="6339659" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2073" _type="MoveCaretCommand" caretOffset="671" date="Mon Dec 04 14:12:46 EST 2023" docOffset="671" starttimestamp="1701710826491" timestamp="6340270" />
  <Command __id="2074" _type="MoveCaretCommand" caretOffset="671" date="Mon Dec 04 14:12:46 EST 2023" docOffset="671" starttimestamp="1701710826491" timestamp="6340270" />
  <Command __id="2075" _type="MoveCaretCommand" caretOffset="705" date="Mon Dec 04 14:12:47 EST 2023" docOffset="705" starttimestamp="1701710826491" timestamp="6340873" />
  <Command __id="2076" _type="MoveCaretCommand" caretOffset="705" date="Mon Dec 04 14:12:47 EST 2023" docOffset="705" starttimestamp="1701710826491" timestamp="6340873" />
  <Command __id="2077" _type="ShellCommand" date="Mon Dec 04 14:12:52 EST 2023" starttimestamp="1701710826491" timestamp="6345676" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2078" _type="ShellCommand" date="Mon Dec 04 14:12:52 EST 2023" starttimestamp="1701710826491" timestamp="6345751" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="1972" _type="Insert" date="Mon Dec 04 14:12:30 EST 2023" docASTNodeCount="175" docActiveCodeLength="1074" docExpressionCount="130" docLength="1074" length="31" offset="570" repeat="30" starttimestamp="1701710826491" timestamp="6324019" timestamp2="6333764">
    <text><![CDATA[Optional<SExpression> retVal = ]]></text>
  </DocumentChange>
  <DocumentChange __id="2068" _type="Delete" date="Mon Dec 04 14:12:46 EST 2023" docASTNodeCount="174" docActiveCodeLength="1070" docExpressionCount="129" docLength="1070" endLine="19" length="4" offset="620" startLine="19" starttimestamp="1701710826491" timestamp="6339701">
    <text><![CDATA[expr]]></text>
  </DocumentChange>
  <DocumentChange __id="2069" _type="Insert" date="Mon Dec 04 14:12:46 EST 2023" docASTNodeCount="178" docActiveCodeLength="1091" docExpressionCount="132" docLength="1091" length="21" offset="620" repeat="2" starttimestamp="1701710826491" timestamp="6339702" timestamp2="6339702">
    <text><![CDATA[(IdentifierAtom) expr]]></text>
  </DocumentChange>
  <DocumentChange __id="2071" _type="Insert" date="Mon Dec 04 14:12:46 EST 2023" docASTNodeCount="188" docActiveCodeLength="1137" docExpressionCount="141" docLength="1137" length="46" offset="142" repeat="2" starttimestamp="1701710826491" timestamp="6339702" timestamp2="6339702">
    <text><![CDATA[
import main.lisp.parser.terms.IdentifierAtom;]]></text>
  </DocumentChange>
  <DocumentChange __id="2079" _type="Delete" date="Mon Dec 04 14:12:52 EST 2023" docASTNodeCount="188" docActiveCodeLength="1136" docExpressionCount="141" docLength="1136" endLine="7" length="1" offset="231" startLine="6" starttimestamp="1701710826491" timestamp="6345755">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="2080" _type="Insert" date="Mon Dec 04 14:12:52 EST 2023" docASTNodeCount="194" docActiveCodeLength="1166" docExpressionCount="146" docLength="1166" length="30" offset="231" repeat="3" starttimestamp="1701710826491" timestamp="6345755" timestamp2="6345756">
    <text><![CDATA[

import java.util.Optional;

]]></text>
  </DocumentChange>
  <Command __id="2083" _type="MoveCaretCommand" caretOffset="718" date="Mon Dec 04 14:12:53 EST 2023" docOffset="718" starttimestamp="1701710826491" timestamp="6347357" />
  <Command __id="2084" _type="MoveCaretCommand" caretOffset="718" date="Mon Dec 04 14:12:53 EST 2023" docOffset="718" starttimestamp="1701710826491" timestamp="6347357" />
  <DocumentChange __id="2085" _type="Insert" date="Mon Dec 04 14:12:54 EST 2023" docASTNodeCount="198" docActiveCodeLength="1184" docExpressionCount="149" docLength="1184" length="18" offset="718" repeat="14" starttimestamp="1701710826491" timestamp="6347823" timestamp2="6353474">
    <text><![CDATA[
			if(retVal.isP)]]></text>
  </DocumentChange>
  <Command __id="2086" _type="InsertStringCommand" date="Mon Dec 04 14:12:54 EST 2023" starttimestamp="1701710826491" timestamp="6347828" timestamp2="6347828">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2087" _type="InsertStringCommand" date="Mon Dec 04 14:12:54 EST 2023" starttimestamp="1701710826491" timestamp="6347828" timestamp2="6347828">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2089" _type="InsertStringCommand" date="Mon Dec 04 14:12:55 EST 2023" starttimestamp="1701710826491" timestamp="6348954" timestamp2="6348954">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2090" _type="InsertStringCommand" date="Mon Dec 04 14:12:55 EST 2023" starttimestamp="1701710826491" timestamp="6348954" timestamp2="6348954">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2092" _type="InsertStringCommand" date="Mon Dec 04 14:12:55 EST 2023" starttimestamp="1701710826491" timestamp="6348990" timestamp2="6348990">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2093" _type="InsertStringCommand" date="Mon Dec 04 14:12:55 EST 2023" starttimestamp="1701710826491" timestamp="6348990" timestamp2="6348990">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2095" _type="InsertStringCommand" date="Mon Dec 04 14:12:55 EST 2023" starttimestamp="1701710826491" timestamp="6349127" timestamp2="6349127">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2096" _type="InsertStringCommand" date="Mon Dec 04 14:12:55 EST 2023" starttimestamp="1701710826491" timestamp="6349127" timestamp2="6349127">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2098" _type="InsertStringCommand" date="Mon Dec 04 14:12:56 EST 2023" starttimestamp="1701710826491" timestamp="6349926" timestamp2="6349926">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2099" _type="InsertStringCommand" date="Mon Dec 04 14:12:56 EST 2023" starttimestamp="1701710826491" timestamp="6349926" timestamp2="6349926">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2101" _type="InsertStringCommand" date="Mon Dec 04 14:12:56 EST 2023" starttimestamp="1701710826491" timestamp="6349994" timestamp2="6349994">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2102" _type="InsertStringCommand" date="Mon Dec 04 14:12:56 EST 2023" starttimestamp="1701710826491" timestamp="6349994" timestamp2="6349994">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2104" _type="InsertStringCommand" date="Mon Dec 04 14:12:56 EST 2023" starttimestamp="1701710826491" timestamp="6350166" timestamp2="6350166">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2105" _type="InsertStringCommand" date="Mon Dec 04 14:12:56 EST 2023" starttimestamp="1701710826491" timestamp="6350166" timestamp2="6350166">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2107" _type="InsertStringCommand" date="Mon Dec 04 14:12:57 EST 2023" starttimestamp="1701710826491" timestamp="6350586" timestamp2="6350586">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="2108" _type="InsertStringCommand" date="Mon Dec 04 14:12:57 EST 2023" starttimestamp="1701710826491" timestamp="6350586" timestamp2="6350586">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="2110" _type="InsertStringCommand" date="Mon Dec 04 14:12:57 EST 2023" starttimestamp="1701710826491" timestamp="6351480" timestamp2="6351480">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2111" _type="InsertStringCommand" date="Mon Dec 04 14:12:57 EST 2023" starttimestamp="1701710826491" timestamp="6351480" timestamp2="6351480">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2113" _type="InsertStringCommand" date="Mon Dec 04 14:12:58 EST 2023" starttimestamp="1701710826491" timestamp="6351545" timestamp2="6351545">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2114" _type="InsertStringCommand" date="Mon Dec 04 14:12:58 EST 2023" starttimestamp="1701710826491" timestamp="6351545" timestamp2="6351545">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2116" _type="InsertStringCommand" date="Mon Dec 04 14:12:58 EST 2023" starttimestamp="1701710826491" timestamp="6351713" timestamp2="6351713">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2117" _type="InsertStringCommand" date="Mon Dec 04 14:12:58 EST 2023" starttimestamp="1701710826491" timestamp="6351713" timestamp2="6351713">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2118" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 14:12:58 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="6351720" />
  <Command __id="2122" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 14:13:00 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="6353718" />
  <DocumentChange __id="2123" _type="Replace" date="Mon Dec 04 14:13:00 EST 2023" docASTNodeCount="198" docActiveCodeLength="1192" docExpressionCount="149" docLength="1192" endLine="24" insertionLength="11" int_docASTNodeCount="198" int_docActiveCodeLength="1181" int_docExpressionCount="148" int_docLength="1181" length="3" offset="732" startLine="24" starttimestamp="1701710826491" timestamp="6353721">
    <deletedText><![CDATA[isP]]></deletedText>
    <insertedText><![CDATA[isPresent()]]></insertedText>
  </DocumentChange>
  <Command __id="2124" _type="InsertStringCommand" date="Mon Dec 04 14:13:00 EST 2023" starttimestamp="1701710826491" timestamp="6353727" timestamp2="6353727">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2125" _type="InsertStringCommand" date="Mon Dec 04 14:13:00 EST 2023" starttimestamp="1701710826491" timestamp="6353728" timestamp2="6353728">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2126" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 14:13:00 EST 2023" starttimestamp="1701710826491" timestamp="6354321" />
  <Command __id="2127" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 14:13:00 EST 2023" starttimestamp="1701710826491" timestamp="6354321" />
  <DocumentChange __id="2128" _type="Insert" date="Mon Dec 04 14:13:01 EST 2023" docASTNodeCount="201" docActiveCodeLength="1208" docExpressionCount="150" docLength="1208" length="16" offset="744" repeat="6" starttimestamp="1701710826491" timestamp="6355113" timestamp2="6356449">
    <text><![CDATA[ {
				reut
			}]]></text>
  </DocumentChange>
  <Command __id="2129" _type="InsertStringCommand" date="Mon Dec 04 14:13:01 EST 2023" starttimestamp="1701710826491" timestamp="6355115" timestamp2="6355115">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="2130" _type="InsertStringCommand" date="Mon Dec 04 14:13:01 EST 2023" starttimestamp="1701710826491" timestamp="6355115" timestamp2="6355115">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="2132" _type="InsertStringCommand" date="Mon Dec 04 14:13:01 EST 2023" starttimestamp="1701710826491" timestamp="6355306" timestamp2="6355306">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2133" _type="InsertStringCommand" date="Mon Dec 04 14:13:01 EST 2023" starttimestamp="1701710826491" timestamp="6355306" timestamp2="6355306">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2135" _type="InsertStringCommand" date="Mon Dec 04 14:13:02 EST 2023" starttimestamp="1701710826491" timestamp="6356129" timestamp2="6356129">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2136" _type="InsertStringCommand" date="Mon Dec 04 14:13:02 EST 2023" starttimestamp="1701710826491" timestamp="6356129" timestamp2="6356129">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2138" _type="InsertStringCommand" date="Mon Dec 04 14:13:02 EST 2023" starttimestamp="1701710826491" timestamp="6356201" timestamp2="6356201">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2139" _type="InsertStringCommand" date="Mon Dec 04 14:13:02 EST 2023" starttimestamp="1701710826491" timestamp="6356201" timestamp2="6356201">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2141" _type="InsertStringCommand" date="Mon Dec 04 14:13:02 EST 2023" starttimestamp="1701710826491" timestamp="6356429" timestamp2="6356429">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2142" _type="InsertStringCommand" date="Mon Dec 04 14:13:02 EST 2023" starttimestamp="1701710826491" timestamp="6356429" timestamp2="6356429">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2144" _type="InsertStringCommand" date="Mon Dec 04 14:13:02 EST 2023" starttimestamp="1701710826491" timestamp="6356451" timestamp2="6356451">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2145" _type="InsertStringCommand" date="Mon Dec 04 14:13:02 EST 2023" starttimestamp="1701710826491" timestamp="6356451" timestamp2="6356451">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="2146" _type="Delete" date="Mon Dec 04 14:13:03 EST 2023" docASTNodeCount="201" docActiveCodeLength="1206" docExpressionCount="150" docLength="1206" endLine="25" length="2" offset="753" repeat="2" startLine="25" starttimestamp="1701710826491" timestamp="6356710" timestamp2="6356808">
    <text><![CDATA[ut]]></text>
  </DocumentChange>
  <Command __id="2147" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6356713" />
  <Command __id="2148" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6356713" />
  <Command __id="2150" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6356809" />
  <Command __id="2151" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6356809" />
  <DocumentChange __id="2152" _type="Insert" date="Mon Dec 04 14:13:03 EST 2023" docASTNodeCount="200" docActiveCodeLength="1211" docExpressionCount="149" docLength="1211" length="5" offset="753" repeat="5" starttimestamp="1701710826491" timestamp="6356991" timestamp2="6357430">
    <text><![CDATA[turn ]]></text>
  </DocumentChange>
  <Command __id="2153" _type="InsertStringCommand" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6356993" timestamp2="6356993">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2154" _type="InsertStringCommand" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6356993" timestamp2="6356993">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2156" _type="InsertStringCommand" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6357092" timestamp2="6357092">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2157" _type="InsertStringCommand" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6357092" timestamp2="6357092">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2159" _type="InsertStringCommand" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6357211" timestamp2="6357211">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2160" _type="InsertStringCommand" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6357211" timestamp2="6357211">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2162" _type="InsertStringCommand" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6357257" timestamp2="6357257">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2163" _type="InsertStringCommand" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6357257" timestamp2="6357257">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2165" _type="InsertStringCommand" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6357433" timestamp2="6357433">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2166" _type="InsertStringCommand" date="Mon Dec 04 14:13:03 EST 2023" starttimestamp="1701710826491" timestamp="6357433" timestamp2="6357433">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2168" _type="InsertStringCommand" date="Mon Dec 04 14:13:06 EST 2023" starttimestamp="1701710826491" timestamp="6359716" timestamp2="6359716">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2169" _type="InsertStringCommand" date="Mon Dec 04 14:13:06 EST 2023" starttimestamp="1701710826491" timestamp="6359716" timestamp2="6359716">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2171" _type="InsertStringCommand" date="Mon Dec 04 14:13:06 EST 2023" starttimestamp="1701710826491" timestamp="6359809" timestamp2="6359809">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2172" _type="InsertStringCommand" date="Mon Dec 04 14:13:06 EST 2023" starttimestamp="1701710826491" timestamp="6359810" timestamp2="6359810">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2174" _type="InsertStringCommand" date="Mon Dec 04 14:13:06 EST 2023" starttimestamp="1701710826491" timestamp="6359941" timestamp2="6359941">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2175" _type="InsertStringCommand" date="Mon Dec 04 14:13:06 EST 2023" starttimestamp="1701710826491" timestamp="6359941" timestamp2="6359941">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2177" _type="InsertStringCommand" date="Mon Dec 04 14:13:06 EST 2023" starttimestamp="1701710826491" timestamp="6360206" timestamp2="6360206">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="2178" _type="InsertStringCommand" date="Mon Dec 04 14:13:06 EST 2023" starttimestamp="1701710826491" timestamp="6360206" timestamp2="6360206">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="2180" _type="InsertStringCommand" date="Mon Dec 04 14:13:06 EST 2023" starttimestamp="1701710826491" timestamp="6360439" timestamp2="6360439">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2181" _type="InsertStringCommand" date="Mon Dec 04 14:13:06 EST 2023" starttimestamp="1701710826491" timestamp="6360439" timestamp2="6360439">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2183" _type="InsertStringCommand" date="Mon Dec 04 14:13:07 EST 2023" starttimestamp="1701710826491" timestamp="6360836" timestamp2="6360836">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2184" _type="InsertStringCommand" date="Mon Dec 04 14:13:07 EST 2023" starttimestamp="1701710826491" timestamp="6360836" timestamp2="6360836">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2186" _type="InsertStringCommand" date="Mon Dec 04 14:13:07 EST 2023" starttimestamp="1701710826491" timestamp="6361330" timestamp2="6361330">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2187" _type="InsertStringCommand" date="Mon Dec 04 14:13:07 EST 2023" starttimestamp="1701710826491" timestamp="6361330" timestamp2="6361330">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2188" _type="MoveCaretCommand" caretOffset="761" date="Mon Dec 04 14:13:10 EST 2023" docOffset="761" starttimestamp="1701710826491" timestamp="6363725" />
  <Command __id="2189" _type="MoveCaretCommand" caretOffset="761" date="Mon Dec 04 14:13:10 EST 2023" docOffset="761" starttimestamp="1701710826491" timestamp="6363726" />
  <Command __id="2190" _type="SelectTextCommand" caretOffset="764" date="Mon Dec 04 14:13:10 EST 2023" end="764" start="758" starttimestamp="1701710826491" timestamp="6363874" />
  <Command __id="2191" _type="SelectTextCommand" caretOffset="764" date="Mon Dec 04 14:13:10 EST 2023" end="764" start="758" starttimestamp="1701710826491" timestamp="6363874" />
  <Command __id="2227" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:13:22 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6376437" type="Run" />
  <Command __id="2228" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:13:22 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6376437" type="Run" />
  <Command __id="2229" _type="ConsoleInput" date="Mon Dec 04 14:13:27 EST 2023" starttimestamp="1701710826491" timestamp="6380607" type="Exception">
    <outputString><![CDATA[(setq C 3)
]]></outputString>
  </Command>
  <Command __id="2230" _type="ConsoleOutput" date="Mon Dec 04 14:13:27 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="6380620" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"C"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2231" _type="ConsoleInput" date="Mon Dec 04 14:13:30 EST 2023" starttimestamp="1701710826491" timestamp="6383766" type="Exception">
    <outputString><![CDATA[(eval C)
]]></outputString>
  </Command>
  <Command __id="2232" _type="ConsoleOutput" date="Mon Dec 04 14:13:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="6383771" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"3¶")]]]></diff>
  </Command>
  <DocumentChange __id="2167" _type="Insert" date="Mon Dec 04 14:13:06 EST 2023" docASTNodeCount="201" docActiveCodeLength="1218" docExpressionCount="150" docLength="1218" length="7" offset="758" repeat="7" starttimestamp="1701710826491" timestamp="6359713" timestamp2="6361327">
    <text><![CDATA[retVal;]]></text>
  </DocumentChange>
  <DocumentChange __id="2196" _type="Insert" date="Mon Dec 04 14:13:13 EST 2023" docASTNodeCount="202" docActiveCodeLength="1219" docExpressionCount="150" docLength="1219" length="1" offset="764" starttimestamp="1701710826491" timestamp="6367127">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="2199" _type="Delete" date="Mon Dec 04 14:13:14 EST 2023" docASTNodeCount="201" docActiveCodeLength="1218" docExpressionCount="150" docLength="1218" endLine="25" length="1" offset="764" startLine="25" starttimestamp="1701710826491" timestamp="6367691">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="2202" _type="Insert" date="Mon Dec 04 14:13:14 EST 2023" docASTNodeCount="203" docActiveCodeLength="1222" docExpressionCount="152" docLength="1222" length="4" offset="764" repeat="4" starttimestamp="1701710826491" timestamp="6367882" timestamp2="6368564">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="2210" _type="Replace" date="Mon Dec 04 14:13:15 EST 2023" docASTNodeCount="203" docActiveCodeLength="1224" docExpressionCount="152" docLength="1224" endLine="25" insertionLength="5" int_docASTNodeCount="203" int_docActiveCodeLength="1219" int_docExpressionCount="151" int_docLength="1219" length="3" offset="765" startLine="25" starttimestamp="1701710826491" timestamp="6368683">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get()]]></insertedText>
  </DocumentChange>
  <Command __id="2233" _type="ConsoleInput" date="Mon Dec 04 14:13:46 EST 2023" starttimestamp="1701710826491" timestamp="6400495" type="Exception">
    <outputString><![CDATA[(setq C (+ C 1))
]]></outputString>
  </Command>
  <Command __id="2234" _type="ExceptionCommand" date="Mon Dec 04 14:13:46 EST 2023" starttimestamp="1701710826491" timestamp="6400501" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.IllegalStateException: Arguments for operator '+' must both evaluate to numbers
	at main.lisp.evaluator.basic.SumEvaluator.eval(SumEvaluator.java:51)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at index.SetqEvaluator.evalHelper(SetqEvaluator.java:18)
	at index.SetqEvaluator.eval(SetqEvaluator.java:13)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:13)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2235" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:13:46 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="6400506" type="Debug" />
  <Command __id="2236" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:13:46 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6400506" type="Run" />
  <Command __id="2237" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:13:46 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="6400506" type="Debug" />
  <Command __id="2238" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:13:46 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6400507" type="Run" />
  <Command __id="2240" _type="MoveCaretCommand" caretOffset="1585" date="Mon Dec 04 14:14:05 EST 2023" docOffset="1699" starttimestamp="1701710826491" timestamp="6418537" />
  <Command __id="2241" _type="ShellCommand" date="Mon Dec 04 14:14:09 EST 2023" starttimestamp="1701710826491" timestamp="6423356" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2242" _type="ShellCommand" date="Mon Dec 04 14:14:10 EST 2023" starttimestamp="1701710826491" timestamp="6423772" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2243" _type="ShellCommand" date="Mon Dec 04 14:14:10 EST 2023" starttimestamp="1701710826491" timestamp="6424122" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2244" _type="ShellCommand" date="Mon Dec 04 14:14:10 EST 2023" starttimestamp="1701710826491" timestamp="6424371" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2245" _type="ShellCommand" date="Mon Dec 04 14:14:18 EST 2023" starttimestamp="1701710826491" timestamp="6431986" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2239" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:14:04 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6418492">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2246" _type="ShellCommand" date="Mon Dec 04 14:14:38 EST 2023" starttimestamp="1701710826491" timestamp="6451984" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2247" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:14:41 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6454859">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2248" _type="MoveCaretCommand" caretOffset="608" date="Mon Dec 04 14:14:41 EST 2023" docOffset="608" starttimestamp="1701710826491" timestamp="6454898" />
  <Command __id="2251" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:14:42 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="6456243">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2252" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 14:14:42 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="6456276" />
  <Command __id="2253" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:14:43 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6457199">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2254" _type="MoveCaretCommand" caretOffset="14" date="Mon Dec 04 14:14:43 EST 2023" docOffset="14" starttimestamp="1701710826491" timestamp="6457253" />
  <Command __id="2256" _type="MoveCaretCommand" caretOffset="1585" date="Mon Dec 04 14:14:44 EST 2023" docOffset="1699" starttimestamp="1701710826491" timestamp="6458088" />
  <Command __id="2257" _type="ShellCommand" date="Mon Dec 04 14:14:47 EST 2023" starttimestamp="1701710826491" timestamp="6460509" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2258" _type="ShellCommand" date="Mon Dec 04 14:14:48 EST 2023" starttimestamp="1701710826491" timestamp="6461881" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2259" _type="ShellCommand" date="Mon Dec 04 14:14:49 EST 2023" starttimestamp="1701710826491" timestamp="6462859" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2260" _type="ShellCommand" date="Mon Dec 04 14:14:59 EST 2023" starttimestamp="1701710826491" timestamp="6473281" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2261" _type="MoveCaretCommand" caretOffset="1146" date="Mon Dec 04 14:15:07 EST 2023" docOffset="1260" starttimestamp="1701710826491" timestamp="6480780" />
  <Command __id="2262" _type="MoveCaretCommand" caretOffset="1146" date="Mon Dec 04 14:15:07 EST 2023" docOffset="1260" starttimestamp="1701710826491" timestamp="6480781" />
  <Command __id="2263" _type="MoveCaretCommand" caretOffset="1155" date="Mon Dec 04 14:15:08 EST 2023" docOffset="1269" starttimestamp="1701710826491" timestamp="6481863" />
  <Command __id="2264" _type="MoveCaretCommand" caretOffset="1155" date="Mon Dec 04 14:15:08 EST 2023" docOffset="1269" starttimestamp="1701710826491" timestamp="6481864" />
  <Command __id="2265" _type="ShellCommand" date="Mon Dec 04 14:15:08 EST 2023" starttimestamp="1701710826491" timestamp="6482098" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2255" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:14:44 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6458043">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2266" _type="ShellCommand" date="Mon Dec 04 14:15:26 EST 2023" starttimestamp="1701710826491" timestamp="6499623" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2268" _type="MoveCaretCommand" caretOffset="608" date="Mon Dec 04 14:15:27 EST 2023" docOffset="608" starttimestamp="1701710826491" timestamp="6501339" />
  <Command __id="2269" _type="MoveCaretCommand" caretOffset="421" date="Mon Dec 04 14:15:28 EST 2023" docOffset="421" starttimestamp="1701710826491" timestamp="6502047" />
  <Command __id="2270" _type="MoveCaretCommand" caretOffset="421" date="Mon Dec 04 14:15:28 EST 2023" docOffset="421" starttimestamp="1701710826491" timestamp="6502047" />
  <Command __id="2271" _type="MoveCaretCommand" caretOffset="660" date="Mon Dec 04 14:15:28 EST 2023" docOffset="660" starttimestamp="1701710826491" timestamp="6502481" />
  <Command __id="2272" _type="MoveCaretCommand" caretOffset="660" date="Mon Dec 04 14:15:28 EST 2023" docOffset="660" starttimestamp="1701710826491" timestamp="6502481" />
  <Command __id="2273" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Mon Dec 04 14:15:29 EST 2023" starttimestamp="1701710826491" timestamp="6503037" />
  <Command __id="2274" _type="CopyCommand" date="Mon Dec 04 14:15:29 EST 2023" starttimestamp="1701710826491" timestamp="6503251" />
  <Command __id="2275" _type="ShellCommand" date="Mon Dec 04 14:15:35 EST 2023" starttimestamp="1701710826491" timestamp="6509119" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2276" _type="ShellCommand" date="Mon Dec 04 14:16:09 EST 2023" starttimestamp="1701710826491" timestamp="6543121" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2277" _type="MoveCaretCommand" caretOffset="569" date="Mon Dec 04 14:16:10 EST 2023" docOffset="569" starttimestamp="1701710826491" timestamp="6543999" />
  <Command __id="2278" _type="MoveCaretCommand" caretOffset="569" date="Mon Dec 04 14:16:10 EST 2023" docOffset="569" starttimestamp="1701710826491" timestamp="6543999" />
  <Command __id="2267" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:15:27 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6501299">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2279" _type="MoveCaretCommand" caretOffset="518" date="Mon Dec 04 14:16:11 EST 2023" docOffset="518" starttimestamp="1701710826491" timestamp="6545156" />
  <Command __id="2280" _type="MoveCaretCommand" caretOffset="518" date="Mon Dec 04 14:16:11 EST 2023" docOffset="518" starttimestamp="1701710826491" timestamp="6545156" />
  <Command __id="2281" _type="MoveCaretCommand" caretOffset="569" date="Mon Dec 04 14:16:12 EST 2023" docOffset="569" starttimestamp="1701710826491" timestamp="6545699" />
  <Command __id="2282" _type="MoveCaretCommand" caretOffset="569" date="Mon Dec 04 14:16:12 EST 2023" docOffset="569" starttimestamp="1701710826491" timestamp="6545699" />
  <Command __id="2283" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:16:13 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6546763">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2284" _type="MoveCaretCommand" caretOffset="1155" date="Mon Dec 04 14:16:13 EST 2023" docOffset="1269" starttimestamp="1701710826491" timestamp="6546820" />
  <Command __id="2286" _type="MoveCaretCommand" caretOffset="569" date="Mon Dec 04 14:16:14 EST 2023" docOffset="569" starttimestamp="1701710826491" timestamp="6548390" />
  <Command __id="2287" _type="ShellCommand" date="Mon Dec 04 14:16:15 EST 2023" starttimestamp="1701710826491" timestamp="6548717" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2288" _type="ShellCommand" date="Mon Dec 04 14:16:26 EST 2023" starttimestamp="1701710826491" timestamp="6559569" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2289" _type="ShellCommand" date="Mon Dec 04 14:16:28 EST 2023" starttimestamp="1701710826491" timestamp="6561772" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2290" _type="ShellCommand" date="Mon Dec 04 14:16:28 EST 2023" starttimestamp="1701710826491" timestamp="6562304" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2291" _type="ShellCommand" date="Mon Dec 04 14:16:36 EST 2023" starttimestamp="1701710826491" timestamp="6569861" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2292" _type="ShellCommand" date="Mon Dec 04 14:17:06 EST 2023" starttimestamp="1701710826491" timestamp="6599578" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2285" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:16:14 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6548355">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2293" _type="MoveCaretCommand" caretOffset="660" date="Mon Dec 04 14:17:07 EST 2023" docOffset="660" starttimestamp="1701710826491" timestamp="6600987" />
  <Command __id="2294" _type="MoveCaretCommand" caretOffset="660" date="Mon Dec 04 14:17:07 EST 2023" docOffset="660" starttimestamp="1701710826491" timestamp="6600987" />
  <Command __id="2295" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:17:13 EST 2023" docASTNodeCount="203" docActiveCodeLength="1224" docExpressionCount="152" docLength="1224" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6606913">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms."), Diff(DELETE,"SExpression;"), Diff(INSERT,"IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;"), Diff(EQUAL,"import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			"), Diff(INSERT,"Optional<SExpression> retVal = environment.lookup((IdentifierAtom) expr);			if(retVal.isPresent()) {				return retVal.get();			}			"), Diff(EQUAL,"return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

import java.util.Optional;

import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			Optional<SExpression> retVal = environment.lookup((IdentifierAtom) expr);
			if(retVal.isPresent()) {
				return retVal.get();
			}
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="2296" _type="MoveCaretCommand" caretOffset="796" date="Mon Dec 04 14:17:13 EST 2023" docOffset="796" starttimestamp="1701710826491" timestamp="6606961" />
  <Command __id="2298" _type="MoveCaretCommand" caretOffset="660" date="Mon Dec 04 14:17:14 EST 2023" docOffset="660" starttimestamp="1701710826491" timestamp="6607851" />
  <Command __id="2299" _type="ShellCommand" date="Mon Dec 04 14:17:17 EST 2023" starttimestamp="1701710826491" timestamp="6610800" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2297" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:17:14 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6607801">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2300" _type="ShellCommand" date="Mon Dec 04 14:17:48 EST 2023" starttimestamp="1701710826491" timestamp="6641579" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2302" _type="MoveCaretCommand" caretOffset="796" date="Mon Dec 04 14:17:49 EST 2023" docOffset="796" starttimestamp="1701710826491" timestamp="6643445" />
  <Command __id="2303" _type="MoveCaretCommand" caretOffset="776" date="Mon Dec 04 14:17:50 EST 2023" docOffset="776" starttimestamp="1701710826491" timestamp="6644508" />
  <Command __id="2304" _type="MoveCaretCommand" caretOffset="776" date="Mon Dec 04 14:17:50 EST 2023" docOffset="776" starttimestamp="1701710826491" timestamp="6644508" />
  <Command __id="2305" _type="ShellCommand" date="Mon Dec 04 14:17:51 EST 2023" starttimestamp="1701710826491" timestamp="6645366" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2306" _type="ShellCommand" date="Mon Dec 04 14:17:52 EST 2023" starttimestamp="1701710826491" timestamp="6646110" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2307" _type="ShellCommand" date="Mon Dec 04 14:17:57 EST 2023" starttimestamp="1701710826491" timestamp="6650744" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2308" _type="ShellCommand" date="Mon Dec 04 14:17:59 EST 2023" starttimestamp="1701710826491" timestamp="6652852" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2309" _type="ShellCommand" date="Mon Dec 04 14:18:00 EST 2023" starttimestamp="1701710826491" timestamp="6653900" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2310" _type="ShellCommand" date="Mon Dec 04 14:18:00 EST 2023" starttimestamp="1701710826491" timestamp="6654379" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2311" _type="ShellCommand" date="Mon Dec 04 14:18:01 EST 2023" starttimestamp="1701710826491" timestamp="6654687" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2312" _type="ShellCommand" date="Mon Dec 04 14:18:01 EST 2023" starttimestamp="1701710826491" timestamp="6655177" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2313" _type="ShellCommand" date="Mon Dec 04 14:18:02 EST 2023" starttimestamp="1701710826491" timestamp="6655817" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2314" _type="ShellCommand" date="Mon Dec 04 14:18:05 EST 2023" starttimestamp="1701710826491" timestamp="6658712" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2315" _type="MoveCaretCommand" caretOffset="671" date="Mon Dec 04 14:18:06 EST 2023" docOffset="671" starttimestamp="1701710826491" timestamp="6659898" />
  <Command __id="2316" _type="MoveCaretCommand" caretOffset="671" date="Mon Dec 04 14:18:06 EST 2023" docOffset="671" starttimestamp="1701710826491" timestamp="6659899" />
  <Command __id="2317" _type="MoveCaretCommand" caretOffset="682" date="Mon Dec 04 14:18:06 EST 2023" docOffset="682" starttimestamp="1701710826491" timestamp="6660407" />
  <Command __id="2318" _type="MoveCaretCommand" caretOffset="682" date="Mon Dec 04 14:18:06 EST 2023" docOffset="682" starttimestamp="1701710826491" timestamp="6660407" />
  <Command __id="2319" _type="MoveCaretCommand" caretOffset="692" date="Mon Dec 04 14:18:07 EST 2023" docOffset="692" starttimestamp="1701710826491" timestamp="6660907" />
  <Command __id="2320" _type="MoveCaretCommand" caretOffset="692" date="Mon Dec 04 14:18:07 EST 2023" docOffset="692" starttimestamp="1701710826491" timestamp="6660907" />
  <Command __id="2321" _type="MoveCaretCommand" caretOffset="708" date="Mon Dec 04 14:18:07 EST 2023" docOffset="708" starttimestamp="1701710826491" timestamp="6661390" />
  <Command __id="2322" _type="MoveCaretCommand" caretOffset="708" date="Mon Dec 04 14:18:07 EST 2023" docOffset="708" starttimestamp="1701710826491" timestamp="6661390" />
  <Command __id="2323" _type="MoveCaretCommand" caretOffset="717" date="Mon Dec 04 14:18:08 EST 2023" docOffset="717" starttimestamp="1701710826491" timestamp="6661859" />
  <Command __id="2324" _type="MoveCaretCommand" caretOffset="717" date="Mon Dec 04 14:18:08 EST 2023" docOffset="717" starttimestamp="1701710826491" timestamp="6661859" />
  <Command __id="2325" _type="MoveCaretCommand" caretOffset="715" date="Mon Dec 04 14:18:08 EST 2023" docOffset="715" starttimestamp="1701710826491" timestamp="6662441" />
  <Command __id="2326" _type="MoveCaretCommand" caretOffset="715" date="Mon Dec 04 14:18:08 EST 2023" docOffset="715" starttimestamp="1701710826491" timestamp="6662441" />
  <Command __id="2327" _type="MoveCaretCommand" caretOffset="701" date="Mon Dec 04 14:18:10 EST 2023" docOffset="701" starttimestamp="1701710826491" timestamp="6663776" />
  <Command __id="2328" _type="MoveCaretCommand" caretOffset="701" date="Mon Dec 04 14:18:10 EST 2023" docOffset="701" starttimestamp="1701710826491" timestamp="6663777" />
  <Command __id="2329" _type="MoveCaretCommand" caretOffset="685" date="Mon Dec 04 14:18:10 EST 2023" docOffset="685" starttimestamp="1701710826491" timestamp="6664308" />
  <Command __id="2330" _type="MoveCaretCommand" caretOffset="685" date="Mon Dec 04 14:18:10 EST 2023" docOffset="685" starttimestamp="1701710826491" timestamp="6664308" />
  <Command __id="2331" _type="MoveCaretCommand" caretOffset="676" date="Mon Dec 04 14:18:11 EST 2023" docOffset="676" starttimestamp="1701710826491" timestamp="6664859" />
  <Command __id="2332" _type="MoveCaretCommand" caretOffset="676" date="Mon Dec 04 14:18:11 EST 2023" docOffset="676" starttimestamp="1701710826491" timestamp="6664859" />
  <Command __id="2333" _type="MoveCaretCommand" caretOffset="738" date="Mon Dec 04 14:18:11 EST 2023" docOffset="738" starttimestamp="1701710826491" timestamp="6665374" />
  <Command __id="2334" _type="MoveCaretCommand" caretOffset="738" date="Mon Dec 04 14:18:11 EST 2023" docOffset="738" starttimestamp="1701710826491" timestamp="6665374" />
  <Command __id="2335" _type="ShellCommand" date="Mon Dec 04 14:18:12 EST 2023" starttimestamp="1701710826491" timestamp="6666113" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2336" _type="ShellCommand" date="Mon Dec 04 14:18:12 EST 2023" starttimestamp="1701710826491" timestamp="6666181" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2337" _type="MoveCaretCommand" caretOffset="758" date="Mon Dec 04 14:18:13 EST 2023" docOffset="758" starttimestamp="1701710826491" timestamp="6666825" />
  <Command __id="2338" _type="MoveCaretCommand" caretOffset="758" date="Mon Dec 04 14:18:13 EST 2023" docOffset="758" starttimestamp="1701710826491" timestamp="6666825" />
  <Command __id="2339" _type="MoveCaretCommand" caretOffset="754" date="Mon Dec 04 14:18:13 EST 2023" docOffset="754" starttimestamp="1701710826491" timestamp="6667350" />
  <Command __id="2340" _type="MoveCaretCommand" caretOffset="754" date="Mon Dec 04 14:18:13 EST 2023" docOffset="754" starttimestamp="1701710826491" timestamp="6667350" />
  <Command __id="2341" _type="MoveCaretCommand" caretOffset="785" date="Mon Dec 04 14:18:14 EST 2023" docOffset="785" starttimestamp="1701710826491" timestamp="6667792" />
  <Command __id="2342" _type="MoveCaretCommand" caretOffset="785" date="Mon Dec 04 14:18:14 EST 2023" docOffset="785" starttimestamp="1701710826491" timestamp="6667792" />
  <Command __id="2343" _type="MoveCaretCommand" caretOffset="789" date="Mon Dec 04 14:18:14 EST 2023" docOffset="789" starttimestamp="1701710826491" timestamp="6668252" />
  <Command __id="2344" _type="MoveCaretCommand" caretOffset="789" date="Mon Dec 04 14:18:14 EST 2023" docOffset="789" starttimestamp="1701710826491" timestamp="6668252" />
  <Command __id="2345" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 14:18:15 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="6668710" />
  <Command __id="2346" _type="MoveCaretCommand" caretOffset="792" date="Mon Dec 04 14:18:15 EST 2023" docOffset="792" starttimestamp="1701710826491" timestamp="6668710" />
  <Command __id="2347" _type="MoveCaretCommand" caretOffset="789" date="Mon Dec 04 14:18:15 EST 2023" docOffset="789" starttimestamp="1701710826491" timestamp="6669241" />
  <Command __id="2348" _type="MoveCaretCommand" caretOffset="789" date="Mon Dec 04 14:18:15 EST 2023" docOffset="789" starttimestamp="1701710826491" timestamp="6669241" />
  <Command __id="2349" _type="ShellCommand" date="Mon Dec 04 14:18:16 EST 2023" starttimestamp="1701710826491" timestamp="6669705" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2351" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:18:34 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6688291" type="Run" />
  <Command __id="2352" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:18:34 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6688291" type="Run" />
  <Command __id="2353" _type="PasteCommand" date="Mon Dec 04 14:18:35 EST 2023" starttimestamp="1701710826491" timestamp="6689034" />
  <Command __id="2354" _type="ConsoleOutput" date="Mon Dec 04 14:18:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="6689240" type="ConsoleOutput">
    <outputString><![CDATA[+
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"3"), Diff(INSERT,"+"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2355" _type="ShellCommand" date="Mon Dec 04 14:18:39 EST 2023" starttimestamp="1701710826491" timestamp="6692981" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2361" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:18:45 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6698637" type="Run" />
  <Command __id="2362" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:18:45 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6698637" type="Run" />
  <Command __id="2363" _type="PasteCommand" date="Mon Dec 04 14:18:45 EST 2023" starttimestamp="1701710826491" timestamp="6699351" />
  <Command __id="2364" _type="ConsoleInput" date="Mon Dec 04 14:18:49 EST 2023" starttimestamp="1701710826491" timestamp="6702798" type="Exception">
    <outputString><![CDATA[(setq A + (1 2))(
]]></outputString>
  </Command>
  <Command __id="2365" _type="ConsoleOutput" date="Mon Dec 04 14:18:49 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="6702811" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"+"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2366" _type="ConsoleInput" date="Mon Dec 04 14:18:51 EST 2023" starttimestamp="1701710826491" timestamp="6704971" type="Exception">
    <outputString><![CDATA[A
]]></outputString>
  </Command>
  <Command __id="2367" _type="ConsoleOutput" date="Mon Dec 04 14:18:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="6704976" type="ConsoleOutput">
    <outputString><![CDATA[A
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"3"), Diff(INSERT,"A"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2368" _type="ShellCommand" date="Mon Dec 04 14:18:52 EST 2023" starttimestamp="1701710826491" timestamp="6705624" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2369" _type="ShellCommand" date="Mon Dec 04 14:18:53 EST 2023" starttimestamp="1701710826491" timestamp="6707359" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2301" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:17:49 EST 2023" docASTNodeCount="203" docActiveCodeLength="1224" docExpressionCount="152" docLength="1224" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6643385">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			Optional<SExpression> retVal = environment.lookup((IdentifierAtom) expr);			if(retVal.isPresent()) {				return retVal.get();			}			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="2378" _type="Delete" date="Mon Dec 04 14:19:13 EST 2023" docASTNodeCount="203" docActiveCodeLength="1223" docExpressionCount="152" docLength="1223" endLine="18" length="1" offset="530" startLine="18" starttimestamp="1701710826491" timestamp="6726740">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="2386" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:19:25 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6738530">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2388" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:19:27 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6740670">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2390" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:19:28 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6742013">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2392" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:19:29 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6743093">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2370" _type="MoveCaretCommand" caretOffset="528" date="Mon Dec 04 14:19:10 EST 2023" docOffset="528" starttimestamp="1701710826491" timestamp="6724139" />
  <Command __id="2371" _type="MoveCaretCommand" caretOffset="528" date="Mon Dec 04 14:19:10 EST 2023" docOffset="528" starttimestamp="1701710826491" timestamp="6724139" />
  <Command __id="2372" _type="MoveCaretCommand" caretOffset="528" date="Mon Dec 04 14:19:11 EST 2023" docOffset="528" starttimestamp="1701710826491" timestamp="6724635" />
  <Command __id="2373" _type="MoveCaretCommand" caretOffset="528" date="Mon Dec 04 14:19:11 EST 2023" docOffset="528" starttimestamp="1701710826491" timestamp="6724635" />
  <Command __id="2374" _type="MoveCaretCommand" caretOffset="534" date="Mon Dec 04 14:19:12 EST 2023" docOffset="534" starttimestamp="1701710826491" timestamp="6725531" />
  <Command __id="2375" _type="MoveCaretCommand" caretOffset="534" date="Mon Dec 04 14:19:12 EST 2023" docOffset="534" starttimestamp="1701710826491" timestamp="6725531" />
  <Command __id="2376" _type="MoveCaretCommand" caretOffset="531" date="Mon Dec 04 14:19:12 EST 2023" docOffset="531" starttimestamp="1701710826491" timestamp="6726063" />
  <Command __id="2377" _type="MoveCaretCommand" caretOffset="531" date="Mon Dec 04 14:19:12 EST 2023" docOffset="531" starttimestamp="1701710826491" timestamp="6726064" />
  <Command __id="2379" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:19:13 EST 2023" starttimestamp="1701710826491" timestamp="6726747" />
  <Command __id="2380" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:19:13 EST 2023" starttimestamp="1701710826491" timestamp="6726747" />
  <Command __id="2381" _type="MoveCaretCommand" caretOffset="488" date="Mon Dec 04 14:19:13 EST 2023" docOffset="488" starttimestamp="1701710826491" timestamp="6727331" />
  <Command __id="2382" _type="MoveCaretCommand" caretOffset="488" date="Mon Dec 04 14:19:13 EST 2023" docOffset="488" starttimestamp="1701710826491" timestamp="6727331" />
  <Command __id="2383" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 14:19:13 EST 2023" starttimestamp="1701710826491" timestamp="6727441" />
  <Command __id="2384" _type="EclipseCommand" commandID="" date="Mon Dec 04 14:19:14 EST 2023" starttimestamp="1701710826491" timestamp="6727544" />
  <Command __id="2385" _type="EclipseCommand" commandID="" date="Mon Dec 04 14:19:14 EST 2023" starttimestamp="1701710826491" timestamp="6727551" />
  <Command __id="2387" _type="MoveCaretCommand" caretOffset="660" date="Mon Dec 04 14:19:25 EST 2023" docOffset="660" starttimestamp="1701710826491" timestamp="6738578" />
  <Command __id="2389" _type="MoveCaretCommand" caretOffset="14" date="Mon Dec 04 14:19:27 EST 2023" docOffset="14" starttimestamp="1701710826491" timestamp="6740722" />
  <Command __id="2391" _type="MoveCaretCommand" caretOffset="660" date="Mon Dec 04 14:19:28 EST 2023" docOffset="660" starttimestamp="1701710826491" timestamp="6742072" />
  <Command __id="2393" _type="MoveCaretCommand" caretOffset="1155" date="Mon Dec 04 14:19:29 EST 2023" docOffset="1269" starttimestamp="1701710826491" timestamp="6743139" />
  <Command __id="2395" _type="MoveCaretCommand" caretOffset="573" date="Mon Dec 04 14:19:32 EST 2023" docOffset="573" starttimestamp="1701710826491" timestamp="6745791" />
  <Command __id="2396" _type="MoveCaretCommand" caretOffset="818" date="Mon Dec 04 14:19:52 EST 2023" docOffset="818" starttimestamp="1701710826491" timestamp="6765564" />
  <Command __id="2394" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:19:32 EST 2023" docASTNodeCount="197" docActiveCodeLength="1082" docExpressionCount="125" docLength="1150" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6745750">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EnvironmentImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.evaluator.environment.AbstractEnvironment;import main.lisp.evaluator.function.Function;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class EnvironmentImpl extends AbstractEnvironment{	public EnvironmentImpl() {		super();	}	public EnvironmentImpl(Environment parent) {		super(parent);	}	@Override	public void assign(IdentifierAtom arg0, SExpression arg1) {		put(arg0, arg1);	}	@Override	public void assignFun(IdentifierAtom arg0, Function arg1) {			}	@Override	public Environment copy() {		// TODO Auto-generated method stub		return null;	}	@Override	public Optional<SExpression> lookup(IdentifierAtom arg0) {		Optional<SExpression> retVal = get(arg0);		return (retVal == null && getParent() != null) ? getParent().lookup(arg0) : retVal;	}	@Override	public Optional<Function> lookupFun(IdentifierAtom arg0) {		// TODO Auto-generated method stub		return Optional.empty();	}	@Override	public Environment newChild() {		return new EnvironmentImpl(this);	}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2397" _type="MoveCaretCommand" caretOffset="833" date="Mon Dec 04 14:19:53 EST 2023" docOffset="833" starttimestamp="1701710826491" timestamp="6766895" />
  <DocumentChange __id="2398" _type="Insert" date="Mon Dec 04 14:19:57 EST 2023" docASTNodeCount="197" docActiveCodeLength="1085" docExpressionCount="125" docLength="1153" length="3" offset="833" starttimestamp="1701710826491" timestamp="6770806">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="2399" _type="InsertStringCommand" date="Mon Dec 04 14:19:57 EST 2023" starttimestamp="1701710826491" timestamp="6770810" timestamp2="6770810">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2400" _type="Delete" date="Mon Dec 04 14:19:59 EST 2023" docASTNodeCount="197" docActiveCodeLength="1082" docExpressionCount="125" docLength="1150" endLine="39" length="3" offset="833" repeat="3" startLine="38" starttimestamp="1701710826491" timestamp="6773106" timestamp2="6773575">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="2401" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:19:59 EST 2023" starttimestamp="1701710826491" timestamp="6773108" />
  <Command __id="2403" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:19:59 EST 2023" starttimestamp="1701710826491" timestamp="6773251" />
  <Command __id="2405" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:20:00 EST 2023" starttimestamp="1701710826491" timestamp="6773579" />
  <Command __id="2406" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:20:03 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6776874">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2407" _type="MoveCaretCommand" caretOffset="1155" date="Mon Dec 04 14:20:03 EST 2023" docOffset="1269" starttimestamp="1701710826491" timestamp="6776932" />
  <Command __id="2409" _type="MoveCaretCommand" caretOffset="14" date="Mon Dec 04 14:20:14 EST 2023" docOffset="14" starttimestamp="1701710826491" timestamp="6788495" />
  <Command __id="2410" _type="MoveCaretCommand" caretOffset="261" date="Mon Dec 04 14:20:21 EST 2023" docOffset="369" starttimestamp="1701710826491" timestamp="6794636" />
  <Command __id="2411" _type="MoveCaretCommand" caretOffset="261" date="Mon Dec 04 14:20:21 EST 2023" docOffset="369" starttimestamp="1701710826491" timestamp="6794636" />
  <Command __id="2412" _type="ShellCommand" date="Mon Dec 04 14:20:22 EST 2023" starttimestamp="1701710826491" timestamp="6796335" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2413" _type="ShellCommand" date="Mon Dec 04 14:20:24 EST 2023" starttimestamp="1701710826491" timestamp="6797557" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2414" _type="ShellCommand" date="Mon Dec 04 14:20:24 EST 2023" starttimestamp="1701710826491" timestamp="6798475" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2415" _type="BalloonCommand" date="Mon Dec 04 14:27:06 EST 2023" message="*******************************************
Worked 35 minutes(fixed)/53 minutes(context based) from
Mon Dec 04 13:27:06 EST 2023 to Mon Dec 04 14:20:24 EST 2023
Edited 1 Projects: 
	Assignment5
Edited 2 Files: 
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EnvironmentImpl.java
Number of insert: 377
Number of delete: 231
" starttimestamp="1701710826491" timestamp="7200045">
    <fineGrainedWorkTime><![CDATA[53]]></fineGrainedWorkTime>
    <insert><![CDATA[377]]></insert>
    <startTime><![CDATA[1701714426540]]></startTime>
    <endTime><![CDATA[1701717624966]]></endTime>
    <workTime><![CDATA[35]]></workTime>
    <delete><![CDATA[231]]></delete>
  </Command>
  <Command __id="2408" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:20:14 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="6788456">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2416" _type="ShellCommand" date="Mon Dec 04 14:41:49 EST 2023" starttimestamp="1701710826491" timestamp="8083269" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2418" _type="MoveCaretCommand" caretOffset="488" date="Mon Dec 04 14:41:52 EST 2023" docOffset="488" starttimestamp="1701710826491" timestamp="8086012" />
  <Command __id="2419" _type="BreakPointCommand" date="Mon Dec 04 14:41:53 EST 2023" lineNumber="17" starttimestamp="1701710826491" timestamp="8087284" type="BreakPointRemoved" />
  <Command __id="2420" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 14:41:53 EST 2023" starttimestamp="1701710826491" timestamp="8087318" />
  <Command __id="2423" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:41:57 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8091171" type="Debug" />
  <Command __id="2424" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:41:57 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8091171" type="Run" />
  <Command __id="2425" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:41:57 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8091171" type="Debug" />
  <Command __id="2426" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:41:57 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8091171" type="Run" />
  <Command __id="2427" _type="ShellCommand" date="Mon Dec 04 14:41:58 EST 2023" starttimestamp="1701710826491" timestamp="8092395" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2428" _type="ShellCommand" date="Mon Dec 04 14:42:00 EST 2023" starttimestamp="1701710826491" timestamp="8093703" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2429" _type="EclipseCommand" commandID="" date="Mon Dec 04 14:42:00 EST 2023" starttimestamp="1701710826491" timestamp="8093808" />
  <Command __id="2430" _type="EclipseCommand" commandID="" date="Mon Dec 04 14:42:00 EST 2023" starttimestamp="1701710826491" timestamp="8093823" />
  <Command __id="2431" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:42:00 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8094077" type="Run" />
  <Command __id="2432" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:42:00 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8094077" type="Run" />
  <Command __id="2433" _type="ConsoleInput" date="Mon Dec 04 14:42:04 EST 2023" starttimestamp="1701710826491" timestamp="8097972" type="Exception">
    <outputString><![CDATA[(setq C 3)
]]></outputString>
  </Command>
  <Command __id="2434" _type="ConsoleOutput" date="Mon Dec 04 14:42:04 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="8097993" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2417" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:41:52 EST 2023" docASTNodeCount="203" docActiveCodeLength="1223" docExpressionCount="152" docLength="1223" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8085961">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);	"), Diff(DELETE,"	"), Diff(EQUAL,"	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			Optional<SExpression> retVal = environment.lookup((IdentifierAtom) expr);			if(retVal.isPresent()) {				return retVal.get();			}			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

import java.util.Optional;

import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
	
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			Optional<SExpression> retVal = environment.lookup((IdentifierAtom) expr);
			if(retVal.isPresent()) {
				return retVal.get();
			}
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="2438" _type="CheckStyleCommand" date="Mon Dec 04 14:42:08 EST 2023" starttimestamp="1701710826491" timestamp="8101719">
    <CSVRow><![CDATA[42,Mon Dec 04 14:42:00 EST 2023,true,index/EnvironmentImpl.java,expectedTypes,[@NestedLexicalEnvironment, @BasicFuncallEvaluator, @LetEvaluator, @IdentifierAtomWithLookup, @FunctionEvaluator, @SetqEvaluator, @FunctionCallingSExpression, @LambdaEvaluator, @LambdaCallingSExpression]]]></CSVRow>
  </Command>
  <Command __id="2439" _type="CheckStyleCommand" date="Mon Dec 04 14:42:08 EST 2023" starttimestamp="1701710826491" timestamp="8101719">
    <CSVRow><![CDATA[42,Mon Dec 04 14:42:00 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,index.EnvironmentImpl,index]]></CSVRow>
  </Command>
  <Command __id="2440" _type="CheckStyleCommand" date="Mon Dec 04 14:42:08 EST 2023" starttimestamp="1701710826491" timestamp="8101719">
    <CSVRow><![CDATA[42,Mon Dec 04 14:42:00 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,index.EnvironmentImpl,environment]]></CSVRow>
  </Command>
  <Command __id="2441" _type="CheckStyleCommand" date="Mon Dec 04 14:42:08 EST 2023" starttimestamp="1701710826491" timestamp="8101719">
    <CSVRow><![CDATA[42,Mon Dec 04 14:42:00 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,index.EnvironmentImpl,impl]]></CSVRow>
  </Command>
  <Command __id="2442" _type="CheckStyleCommand" date="Mon Dec 04 14:42:08 EST 2023" starttimestamp="1701710826491" timestamp="8101719">
    <CSVRow><![CDATA[42,Mon Dec 04 14:42:00 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,arg0,arg]]></CSVRow>
  </Command>
  <Command __id="2443" _type="CheckStyleCommand" date="Mon Dec 04 14:42:08 EST 2023" starttimestamp="1701710826491" timestamp="8101719">
    <CSVRow><![CDATA[42,Mon Dec 04 14:42:00 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,arg1,arg]]></CSVRow>
  </Command>
  <Command __id="2444" _type="CheckStyleCommand" date="Mon Dec 04 14:42:08 EST 2023" starttimestamp="1701710826491" timestamp="8101719">
    <CSVRow><![CDATA[42,Mon Dec 04 14:42:00 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,retVal,ret]]></CSVRow>
  </Command>
  <Command __id="2445" _type="CheckStyleCommand" date="Mon Dec 04 14:42:08 EST 2023" starttimestamp="1701710826491" timestamp="8101719">
    <CSVRow><![CDATA[42,Mon Dec 04 14:42:00 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,retVal,val]]></CSVRow>
  </Command>
  <Command __id="2446" _type="CheckStyleCommand" date="Mon Dec 04 14:42:08 EST 2023" starttimestamp="1701710826491" timestamp="8101719">
    <CSVRow><![CDATA[42,Mon Dec 04 14:42:00 EST 2023,true,index/EnvironmentImpl.java,publicMethodsOverride,[]]]></CSVRow>
  </Command>
  <Command __id="2447" _type="MoveCaretCommand" caretOffset="261" date="Mon Dec 04 14:42:08 EST 2023" docOffset="369" starttimestamp="1701710826491" timestamp="8101756" />
  <Command __id="2448" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Mon Dec 04 14:42:10 EST 2023" starttimestamp="1701710826491" timestamp="8103954" />
  <Command __id="2449" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:42:10 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8104054" type="Run" />
  <Command __id="2450" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:42:10 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8104168" type="Run" />
  <Command __id="2451" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:42:10 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8104178" type="Run" />
  <Command __id="2452" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:42:10 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8104317" type="Run" />
  <Command __id="2454" _type="MoveCaretCommand" caretOffset="454" date="Mon Dec 04 14:42:11 EST 2023" docOffset="454" starttimestamp="1701710826491" timestamp="8105039" />
  <Command __id="2437" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:42:08 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8101713">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2453" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:42:11 EST 2023" docASTNodeCount="203" docActiveCodeLength="1223" docExpressionCount="152" docLength="1223" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8104974">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);		}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			Optional<SExpression> retVal = environment.lookup((IdentifierAtom) expr);			if(retVal.isPresent()) {				return retVal.get();			}			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2455" _type="ConsoleInput" date="Mon Dec 04 14:42:15 EST 2023" starttimestamp="1701710826491" timestamp="8108587" type="Exception">
    <outputString><![CDATA[(setq C 3)
]]></outputString>
  </Command>
  <Command __id="2456" _type="ConsoleOutput" date="Mon Dec 04 14:42:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="8108607" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"C"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2457" _type="ConsoleInput" date="Mon Dec 04 14:42:15 EST 2023" starttimestamp="1701710826491" timestamp="8109465" type="Exception">
    <outputString><![CDATA[c
]]></outputString>
  </Command>
  <Command __id="2458" _type="ConsoleOutput" date="Mon Dec 04 14:42:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="8109470" type="ConsoleOutput">
    <outputString><![CDATA[C
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"3"), Diff(INSERT,"C"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2459" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:42:24 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8118409">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2460" _type="MoveCaretCommand" caretOffset="660" date="Mon Dec 04 14:42:24 EST 2023" docOffset="660" starttimestamp="1701710826491" timestamp="8118455" />
  <Command __id="2462" _type="MoveCaretCommand" caretOffset="454" date="Mon Dec 04 14:42:25 EST 2023" docOffset="454" starttimestamp="1701710826491" timestamp="8119036" />
  <Command __id="2463" _type="ShellCommand" date="Mon Dec 04 14:42:25 EST 2023" starttimestamp="1701710826491" timestamp="8119205" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2464" _type="ShellCommand" date="Mon Dec 04 14:42:26 EST 2023" starttimestamp="1701710826491" timestamp="8119763" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2465" _type="ShellCommand" date="Mon Dec 04 14:42:27 EST 2023" starttimestamp="1701710826491" timestamp="8120922" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2461" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:42:25 EST 2023" docASTNodeCount="203" docActiveCodeLength="1223" docExpressionCount="152" docLength="1223" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8118988">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);		}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			Optional<SExpression> retVal = environment.lookup((IdentifierAtom) expr);			if(retVal.isPresent()) {				return retVal.get();			}			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2466" _type="ShellCommand" date="Mon Dec 04 14:42:37 EST 2023" starttimestamp="1701710826491" timestamp="8130666" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2468" _type="MoveCaretCommand" caretOffset="833" date="Mon Dec 04 14:42:39 EST 2023" docOffset="833" starttimestamp="1701710826491" timestamp="8133123" />
  <Command __id="2469" _type="MoveCaretCommand" caretOffset="1022" date="Mon Dec 04 14:42:40 EST 2023" docOffset="1022" starttimestamp="1701710826491" timestamp="8134397" />
  <Command __id="2470" _type="MoveCaretCommand" caretOffset="967" date="Mon Dec 04 14:42:41 EST 2023" docOffset="967" starttimestamp="1701710826491" timestamp="8134848" />
  <Command __id="2471" _type="MoveCaretCommand" caretOffset="820" date="Mon Dec 04 14:42:41 EST 2023" docOffset="820" starttimestamp="1701710826491" timestamp="8135430" />
  <Command __id="2472" _type="MoveCaretCommand" caretOffset="764" date="Mon Dec 04 14:42:42 EST 2023" docOffset="764" starttimestamp="1701710826491" timestamp="8136181" />
  <Command __id="2473" _type="MoveCaretCommand" caretOffset="820" date="Mon Dec 04 14:42:43 EST 2023" docOffset="820" starttimestamp="1701710826491" timestamp="8136648" />
  <Command __id="2474" _type="MoveCaretCommand" caretOffset="819" date="Mon Dec 04 14:42:43 EST 2023" docOffset="819" starttimestamp="1701710826491" timestamp="8137364" />
  <Command __id="2475" _type="MoveCaretCommand" caretOffset="825" date="Mon Dec 04 14:42:44 EST 2023" docOffset="825" starttimestamp="1701710826491" timestamp="8137895" />
  <Command __id="2476" _type="MoveCaretCommand" caretOffset="829" date="Mon Dec 04 14:42:44 EST 2023" docOffset="829" starttimestamp="1701710826491" timestamp="8138400" />
  <Command __id="2477" _type="MoveCaretCommand" caretOffset="922" date="Mon Dec 04 14:42:47 EST 2023" docOffset="922" starttimestamp="1701710826491" timestamp="8140613" />
  <Command __id="2478" _type="MoveCaretCommand" caretOffset="868" date="Mon Dec 04 14:42:51 EST 2023" docOffset="868" starttimestamp="1701710826491" timestamp="8145134" />
  <Command __id="2479" _type="MoveCaretCommand" caretOffset="881" date="Mon Dec 04 14:42:53 EST 2023" docOffset="881" starttimestamp="1701710826491" timestamp="8146867" />
  <Command __id="2480" _type="MoveCaretCommand" caretOffset="887" date="Mon Dec 04 14:42:53 EST 2023" docOffset="887" starttimestamp="1701710826491" timestamp="8147364" />
  <Command __id="2481" _type="MoveCaretCommand" caretOffset="866" date="Mon Dec 04 14:42:54 EST 2023" docOffset="866" starttimestamp="1701710826491" timestamp="8148498" />
  <Command __id="2482" _type="MoveCaretCommand" caretOffset="878" date="Mon Dec 04 14:42:55 EST 2023" docOffset="878" starttimestamp="1701710826491" timestamp="8148984" />
  <Command __id="2483" _type="MoveCaretCommand" caretOffset="887" date="Mon Dec 04 14:42:55 EST 2023" docOffset="887" starttimestamp="1701710826491" timestamp="8149449" />
  <Command __id="2484" _type="MoveCaretCommand" caretOffset="896" date="Mon Dec 04 14:42:56 EST 2023" docOffset="896" starttimestamp="1701710826491" timestamp="8149948" />
  <Command __id="2485" _type="MoveCaretCommand" caretOffset="904" date="Mon Dec 04 14:42:57 EST 2023" docOffset="904" starttimestamp="1701710826491" timestamp="8150618" />
  <Command __id="2486" _type="MoveCaretCommand" caretOffset="910" date="Mon Dec 04 14:42:57 EST 2023" docOffset="910" starttimestamp="1701710826491" timestamp="8151181" />
  <Command __id="2487" _type="MoveCaretCommand" caretOffset="916" date="Mon Dec 04 14:42:58 EST 2023" docOffset="916" starttimestamp="1701710826491" timestamp="8151865" />
  <Command __id="2488" _type="MoveCaretCommand" caretOffset="729" date="Mon Dec 04 14:42:59 EST 2023" docOffset="729" starttimestamp="1701710826491" timestamp="8153315" />
  <Command __id="2489" _type="ShellCommand" date="Mon Dec 04 14:43:00 EST 2023" starttimestamp="1701710826491" timestamp="8153584" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2490" _type="ShellCommand" date="Mon Dec 04 14:43:01 EST 2023" starttimestamp="1701710826491" timestamp="8154677" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2491" _type="ShellCommand" date="Mon Dec 04 14:43:01 EST 2023" starttimestamp="1701710826491" timestamp="8154954" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2467" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:42:39 EST 2023" docASTNodeCount="197" docActiveCodeLength="1082" docExpressionCount="125" docLength="1150" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8133065">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EnvironmentImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.evaluator.environment.AbstractEnvironment;import main.lisp.evaluator.function.Function;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class EnvironmentImpl extends AbstractEnvironment{	public EnvironmentImpl() {		super();	}	public EnvironmentImpl(Environment parent) {		super(parent);	}	@Override	public void assign(IdentifierAtom arg0, SExpression arg1) {		put(arg0, arg1);	}	@Override	public void assignFun(IdentifierAtom arg0, Function arg1) {			}	@Override	public Environment copy() {		// TODO Auto-generated method stub		return null;	}	@Override	public Optional<SExpression> lookup(IdentifierAtom arg0) {		Optional<SExpression> retVal = get(arg0);		return (retVal == null && getParent() != null) ? getParent().lookup(arg0) : retVal;	}	@Override	public Optional<Function> lookupFun(IdentifierAtom arg0) {		// TODO Auto-generated method stub		return Optional.empty();	}	@Override	public Environment newChild() {		return new EnvironmentImpl(this);	}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2492" _type="ShellCommand" date="Mon Dec 04 14:43:02 EST 2023" starttimestamp="1701710826491" timestamp="8156427" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2493" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:43:04 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8157888">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2494" _type="MoveCaretCommand" caretOffset="1155" date="Mon Dec 04 14:43:04 EST 2023" docOffset="1269" starttimestamp="1701710826491" timestamp="8157940" />
  <Command __id="2495" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:43:05 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8159011">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2496" _type="MoveCaretCommand" caretOffset="660" date="Mon Dec 04 14:43:05 EST 2023" docOffset="660" starttimestamp="1701710826491" timestamp="8159047" />
  <Command __id="2497" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:43:08 EST 2023" docASTNodeCount="203" docActiveCodeLength="1223" docExpressionCount="152" docLength="1223" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8162194">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);		}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			Optional<SExpression> retVal = environment.lookup((IdentifierAtom) expr);			if(retVal.isPresent()) {				return retVal.get();			}			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2498" _type="MoveCaretCommand" caretOffset="454" date="Mon Dec 04 14:43:08 EST 2023" docOffset="454" starttimestamp="1701710826491" timestamp="8162240" />
  <Command __id="2500" _type="MoveCaretCommand" caretOffset="660" date="Mon Dec 04 14:43:10 EST 2023" docOffset="660" starttimestamp="1701710826491" timestamp="8164100" />
  <Command __id="2501" _type="ShellCommand" date="Mon Dec 04 14:43:31 EST 2023" starttimestamp="1701710826491" timestamp="8184769" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2502" _type="ShellCommand" date="Mon Dec 04 14:43:32 EST 2023" starttimestamp="1701710826491" timestamp="8186279" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2503" _type="MoveCaretCommand" caretOffset="339" date="Mon Dec 04 14:43:34 EST 2023" docOffset="339" starttimestamp="1701710826491" timestamp="8187516" />
  <Command __id="2504" _type="MoveCaretCommand" caretOffset="339" date="Mon Dec 04 14:43:34 EST 2023" docOffset="339" starttimestamp="1701710826491" timestamp="8187516" />
  <Command __id="2505" _type="MoveCaretCommand" caretOffset="379" date="Mon Dec 04 14:43:34 EST 2023" docOffset="379" starttimestamp="1701710826491" timestamp="8188434" />
  <Command __id="2506" _type="MoveCaretCommand" caretOffset="379" date="Mon Dec 04 14:43:34 EST 2023" docOffset="379" starttimestamp="1701710826491" timestamp="8188434" />
  <Command __id="2509" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:43:43 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8197001" type="Run" />
  <Command __id="2510" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 14:43:43 EST 2023" starttimestamp="1701710826491" timestamp="8197001" />
  <Command __id="2511" _type="ConsoleOutput" date="Mon Dec 04 14:43:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="8197035" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"C"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2512" _type="ShellCommand" date="Mon Dec 04 14:43:46 EST 2023" starttimestamp="1701710826491" timestamp="8200334" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2513" _type="ShellCommand" date="Mon Dec 04 14:43:53 EST 2023" starttimestamp="1701710826491" timestamp="8206705" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2514" _type="ShellCommand" date="Mon Dec 04 14:43:53 EST 2023" starttimestamp="1701710826491" timestamp="8207024" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2515" _type="ShellCommand" date="Mon Dec 04 14:44:07 EST 2023" starttimestamp="1701710826491" timestamp="8220781" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2516" _type="ShellCommand" date="Mon Dec 04 14:44:07 EST 2023" starttimestamp="1701710826491" timestamp="8221077" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2517" _type="ShellCommand" date="Mon Dec 04 14:45:10 EST 2023" starttimestamp="1701710826491" timestamp="8284146" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2518" _type="ShellCommand" date="Mon Dec 04 14:45:12 EST 2023" starttimestamp="1701710826491" timestamp="8285763" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2519" _type="ShellCommand" date="Mon Dec 04 14:45:12 EST 2023" starttimestamp="1701710826491" timestamp="8286445" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2520" _type="ShellCommand" date="Mon Dec 04 14:45:13 EST 2023" starttimestamp="1701710826491" timestamp="8286993" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2521" _type="ShellCommand" date="Mon Dec 04 14:45:13 EST 2023" starttimestamp="1701710826491" timestamp="8287506" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2522" _type="MoveCaretCommand" caretOffset="382" date="Mon Dec 04 14:45:14 EST 2023" docOffset="382" starttimestamp="1701710826491" timestamp="8287970" />
  <Command __id="2523" _type="MoveCaretCommand" caretOffset="382" date="Mon Dec 04 14:45:14 EST 2023" docOffset="382" starttimestamp="1701710826491" timestamp="8287971" />
  <Command __id="2524" _type="ShellCommand" date="Mon Dec 04 14:45:15 EST 2023" starttimestamp="1701710826491" timestamp="8288764" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2525" _type="ShellCommand" date="Mon Dec 04 14:48:00 EST 2023" starttimestamp="1701710826491" timestamp="8454297" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2526" _type="MoveCaretCommand" caretOffset="371" date="Mon Dec 04 14:48:01 EST 2023" docOffset="371" starttimestamp="1701710826491" timestamp="8455048" />
  <Command __id="2527" _type="MoveCaretCommand" caretOffset="371" date="Mon Dec 04 14:48:01 EST 2023" docOffset="371" starttimestamp="1701710826491" timestamp="8455048" />
  <Command __id="2528" _type="ShellCommand" date="Mon Dec 04 14:48:05 EST 2023" starttimestamp="1701710826491" timestamp="8459194" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2529" _type="ShellCommand" date="Mon Dec 04 14:48:05 EST 2023" starttimestamp="1701710826491" timestamp="8459434" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2530" _type="ShellCommand" date="Mon Dec 04 14:48:08 EST 2023" starttimestamp="1701710826491" timestamp="8462151" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2531" _type="ShellCommand" date="Mon Dec 04 14:48:11 EST 2023" starttimestamp="1701710826491" timestamp="8465091" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2532" _type="ShellCommand" date="Mon Dec 04 14:48:11 EST 2023" starttimestamp="1701710826491" timestamp="8465434" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2536" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:48:16 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8470265" type="Run" />
  <Command __id="2537" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 14:48:16 EST 2023" starttimestamp="1701710826491" timestamp="8470265" />
  <Command __id="2538" _type="ConsoleOutput" date="Mon Dec 04 14:48:16 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="8470298" type="ConsoleOutput">
    <outputString><![CDATA[7
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2499" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:43:10 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8164046">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="2539" _type="ShellCommand" date="Mon Dec 04 14:48:20 EST 2023" starttimestamp="1701710826491" timestamp="8474209" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2540" _type="ShellCommand" date="Mon Dec 04 14:48:21 EST 2023" starttimestamp="1701710826491" timestamp="8474602" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2542" _type="MoveCaretCommand" caretOffset="454" date="Mon Dec 04 14:48:22 EST 2023" docOffset="454" starttimestamp="1701710826491" timestamp="8475861" />
  <Command __id="2543" _type="BreakPointCommand" date="Mon Dec 04 14:48:22 EST 2023" lineNumber="17" starttimestamp="1701710826491" timestamp="8475982" type="BreakPointRemoved" />
  <Command __id="2544" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 14:48:22 EST 2023" starttimestamp="1701710826491" timestamp="8476000" />
  <Command __id="2545" _type="ShellCommand" date="Mon Dec 04 14:48:23 EST 2023" starttimestamp="1701710826491" timestamp="8476548" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2553" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:48:32 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8485849" type="Debug" />
  <Command __id="2554" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:48:32 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8485849" type="Run" />
  <Command __id="2555" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:48:32 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8485849" type="Debug" />
  <Command __id="2556" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:48:32 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8485849" type="Run" />
  <Command __id="2557" _type="ShellCommand" date="Mon Dec 04 14:48:32 EST 2023" starttimestamp="1701710826491" timestamp="8486404" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2559" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:53:05 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8759148" type="Run" />
  <Command __id="2560" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:53:05 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8759148" type="Run" />
  <Command __id="2561" _type="ShellCommand" date="Mon Dec 04 14:53:07 EST 2023" starttimestamp="1701710826491" timestamp="8761232" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2562" _type="ShellCommand" date="Mon Dec 04 14:53:13 EST 2023" starttimestamp="1701710826491" timestamp="8767144" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2563" _type="ConsoleInput" date="Mon Dec 04 14:53:18 EST 2023" starttimestamp="1701710826491" timestamp="8772198" type="Exception">
    <outputString><![CDATA[(setq A 2)
]]></outputString>
  </Command>
  <Command __id="2564" _type="ConsoleOutput" date="Mon Dec 04 14:53:18 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="8772210" type="ConsoleOutput">
    <outputString><![CDATA[2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"3"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2565" _type="ShellCommand" date="Mon Dec 04 14:53:19 EST 2023" starttimestamp="1701710826491" timestamp="8772612" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2566" _type="ShellCommand" date="Mon Dec 04 14:53:20 EST 2023" starttimestamp="1701710826491" timestamp="8774352" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2567" _type="ConsoleInput" date="Mon Dec 04 14:53:22 EST 2023" starttimestamp="1701710826491" timestamp="8775522" type="Exception">
    <outputString><![CDATA[A
]]></outputString>
  </Command>
  <Command __id="2568" _type="ConsoleOutput" date="Mon Dec 04 14:53:22 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="8775525" type="ConsoleOutput">
    <outputString><![CDATA[A
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"2"), Diff(INSERT,"A"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2569" _type="ShellCommand" date="Mon Dec 04 14:53:22 EST 2023" starttimestamp="1701710826491" timestamp="8776201" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2570" _type="ShellCommand" date="Mon Dec 04 14:53:26 EST 2023" starttimestamp="1701710826491" timestamp="8779865" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2571" _type="ShellCommand" date="Mon Dec 04 14:53:32 EST 2023" starttimestamp="1701710826491" timestamp="8786506" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2572" _type="ShellCommand" date="Mon Dec 04 14:53:33 EST 2023" starttimestamp="1701710826491" timestamp="8787128" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2573" _type="ConsoleInput" date="Mon Dec 04 14:53:34 EST 2023" starttimestamp="1701710826491" timestamp="8788308" type="Exception">
    <outputString><![CDATA[(setq B ()+ A 13
]]></outputString>
  </Command>
  <Command __id="2574" _type="ShellCommand" date="Mon Dec 04 14:53:41 EST 2023" starttimestamp="1701710826491" timestamp="8794512" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2577" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:53:44 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8797713" type="Debug" />
  <Command __id="2578" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:53:44 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8797713" type="Run" />
  <Command __id="2579" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:53:44 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8797713" type="Debug" />
  <Command __id="2580" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:53:44 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8797713" type="Run" />
  <Command __id="2581" _type="ShellCommand" date="Mon Dec 04 14:53:45 EST 2023" starttimestamp="1701710826491" timestamp="8798762" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2582" _type="ShellCommand" date="Mon Dec 04 14:53:45 EST 2023" starttimestamp="1701710826491" timestamp="8799042" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2583" _type="ShellCommand" date="Mon Dec 04 14:53:47 EST 2023" starttimestamp="1701710826491" timestamp="8800590" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2584" _type="ShellCommand" date="Mon Dec 04 14:53:47 EST 2023" starttimestamp="1701710826491" timestamp="8801137" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2585" _type="ShellCommand" date="Mon Dec 04 14:53:48 EST 2023" starttimestamp="1701710826491" timestamp="8802160" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2586" _type="ShellCommand" date="Mon Dec 04 14:53:49 EST 2023" starttimestamp="1701710826491" timestamp="8803157" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2587" _type="ShellCommand" date="Mon Dec 04 14:53:52 EST 2023" starttimestamp="1701710826491" timestamp="8806270" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2588" _type="ShellCommand" date="Mon Dec 04 14:54:26 EST 2023" starttimestamp="1701710826491" timestamp="8840194" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2589" _type="ShellCommand" date="Mon Dec 04 14:54:29 EST 2023" starttimestamp="1701710826491" timestamp="8842737" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2590" _type="ShellCommand" date="Mon Dec 04 14:54:30 EST 2023" starttimestamp="1701710826491" timestamp="8843519" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2591" _type="ShellCommand" date="Mon Dec 04 14:54:31 EST 2023" starttimestamp="1701710826491" timestamp="8845115" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2592" _type="ShellCommand" date="Mon Dec 04 14:54:32 EST 2023" starttimestamp="1701710826491" timestamp="8845943" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2593" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Mon Dec 04 14:54:36 EST 2023" starttimestamp="1701710826491" timestamp="8850469" />
  <Command __id="2594" _type="EclipseCommand" commandID="" date="Mon Dec 04 14:54:37 EST 2023" starttimestamp="1701710826491" timestamp="8850602" />
  <Command __id="2595" _type="EclipseCommand" commandID="" date="Mon Dec 04 14:54:37 EST 2023" starttimestamp="1701710826491" timestamp="8850619" />
  <Command __id="2936" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,lines,nameInDictionary,lines,lines]]></CSVRow>
  </Command>
  <Command __id="2937" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,113.0,bulkierThen,113.0,20.0,5.65]]></CSVRow>
  </Command>
  <Command __id="2938" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,main.lisp.parser.terms.ExpressionFactory!newInstance:main.lisp.parser.terms.SExpression;main.lisp.parser.terms.SExpression->SExpression,expectedMethodCall,main.lisp.parser.terms.ExpressionFactory!newInstance:main.lisp.parser.terms.SExpression;main.lisp.parser.terms.SExpression->SExpression,Some method (evalHelper:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->SExpression),index.ListEvaluator:[@ListEvaluator]]]></CSVRow>
  </Command>
  <Command __id="2939" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,main.lisp.interpreter.InterpreterModelSingleton!newInput:*->.*,expectedMethodCall,main.lisp.interpreter.InterpreterModelSingleton!newInput:*->.*,Some method (eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->SExpression),index.LoadEvaluator:[@LoadEvaluator]]]></CSVRow>
  </Command>
  <Command __id="2940" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,index.index,tags,index.index,@Main]]></CSVRow>
  </Command>
  <Command __id="2941" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,index.index,nameInDictionary,index.index,index]]></CSVRow>
  </Command>
  <Command __id="2942" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,main.lisp.evaluator.OperationRegisterer,expectedInterface,main.lisp.evaluator.OperationRegisterer,index.OperationRegistererImpl[@CustomOperationRegisterer]]]></CSVRow>
  </Command>
  <Command __id="2943" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,args,nameInDictionary,args,args]]></CSVRow>
  </Command>
  <Command __id="2944" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,index.ClassRegistryImpl,nameInDictionary,index.ClassRegistryImpl,class]]></CSVRow>
  </Command>
  <Command __id="2945" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,index.ClassRegistryImpl,nameInDictionary,index.ClassRegistryImpl,impl]]></CSVRow>
  </Command>
  <Command __id="2946" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,index.ClassRegistryImpl,nameInDictionary,index.ClassRegistryImpl,index]]></CSVRow>
  </Command>
  <Command __id="2947" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,index.ClassRegistryImpl,nameInDictionary,index.ClassRegistryImpl,registry]]></CSVRow>
  </Command>
  <Command __id="2948" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,environment,nameInDictionary,environment,environment]]></CSVRow>
  </Command>
  <Command __id="2949" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,@CustomOperationRegisterer!registerAll:->void,expectedMethodCall,@CustomOperationRegisterer!registerAll:->void,Some method (main:String[]->void),index.index:[@Main]]]></CSVRow>
  </Command>
  <Command __id="2950" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,@CustomOperationRegisterer!registerAll:->void,missingMethodCall,@CustomOperationRegisterer!registerAll:->void,No method,index.index:[@Main]]]></CSVRow>
  </Command>
  <Command __id="2951" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,index.OperationRegistererImpl,nameNotInDictionary,index.OperationRegistererImpl,registerer]]></CSVRow>
  </Command>
  <Command __id="2952" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,index.OperationRegistererImpl,tags,index.OperationRegistererImpl,@CustomOperationRegisterer]]></CSVRow>
  </Command>
  <Command __id="2953" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,index.OperationRegistererImpl,nameInDictionary,index.OperationRegistererImpl,index]]></CSVRow>
  </Command>
  <Command __id="2954" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,index.OperationRegistererImpl,nameInDictionary,index.OperationRegistererImpl,operation]]></CSVRow>
  </Command>
  <Command __id="2955" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,index.OperationRegistererImpl,nameInDictionary,index.OperationRegistererImpl,impl]]></CSVRow>
  </Command>
  <Command __id="2956" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,secondEvaled,nameInDictionary,secondEvaled,second]]></CSVRow>
  </Command>
  <Command __id="2957" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,secondEvaled,nameNotInDictionary,secondEvaled,evaled]]></CSVRow>
  </Command>
  <Command __id="2958" _type="CheckStyleCommand" date="Mon Dec 04 14:54:41 EST 2023" starttimestamp="1701710826491" timestamp="8855413">
    <CSVRow><![CDATA[43,Mon Dec 04 14:54:37 EST 2023,false,evalHelper,thenBranching,evalHelper]]></CSVRow>
  </Command>
  <Command __id="2959" _type="ConsoleInput" date="Mon Dec 04 14:54:45 EST 2023" starttimestamp="1701710826491" timestamp="8859259" type="Exception">
    <outputString><![CDATA[(setq A 2)
]]></outputString>
  </Command>
  <Command __id="2960" _type="ConsoleOutput" date="Mon Dec 04 14:54:45 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="8859270" type="ConsoleOutput">
    <outputString><![CDATA[2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2961" _type="ConsoleInput" date="Mon Dec 04 14:54:47 EST 2023" starttimestamp="1701710826491" timestamp="8860839" type="Exception">
    <outputString><![CDATA[a
]]></outputString>
  </Command>
  <Command __id="2962" _type="ConsoleOutput" date="Mon Dec 04 14:54:47 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="8860845" type="ConsoleOutput">
    <outputString><![CDATA[A
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"2"), Diff(INSERT,"A"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2963" _type="ConsoleInput" date="Mon Dec 04 14:54:56 EST 2023" starttimestamp="1701710826491" timestamp="8869940" type="Exception">
    <outputString><![CDATA[()setq b ()+ a 1
]]></outputString>
  </Command>
  <Command __id="2964" _type="ExceptionCommand" date="Mon Dec 04 14:54:56 EST 2023" starttimestamp="1701710826491" timestamp="8869944" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.IllegalStateException: Arguments for operator '+' must both evaluate to numbers
	at main.lisp.evaluator.basic.SumEvaluator.eval(SumEvaluator.java:51)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at index.SetqEvaluator.evalHelper(SetqEvaluator.java:18)
	at index.SetqEvaluator.eval(SetqEvaluator.java:13)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:13)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2965" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:54:56 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8869951" type="Debug" />
  <Command __id="2966" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:54:56 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8869951" type="Run" />
  <Command __id="2967" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:54:56 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8869951" type="Debug" />
  <Command __id="2968" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:54:56 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8869951" type="Run" />
  <Command __id="2969" _type="ShellCommand" date="Mon Dec 04 14:55:02 EST 2023" starttimestamp="1701710826491" timestamp="8876102" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2971" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:55:12 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8886163" type="Run" />
  <Command __id="2972" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:55:12 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8886163" type="Run" />
  <Command __id="2973" _type="ConsoleInput" date="Mon Dec 04 14:55:15 EST 2023" starttimestamp="1701710826491" timestamp="8889450" type="Exception">
    <outputString><![CDATA[(setq a 2)
]]></outputString>
  </Command>
  <Command __id="2974" _type="ConsoleOutput" date="Mon Dec 04 14:55:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="8889462" type="ConsoleOutput">
    <outputString><![CDATA[2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2975" _type="ConsoleInput" date="Mon Dec 04 14:55:23 EST 2023" starttimestamp="1701710826491" timestamp="8897281" type="Exception">
    <outputString><![CDATA[(setq b (+ a 1))
]]></outputString>
  </Command>
  <Command __id="2976" _type="ExceptionCommand" date="Mon Dec 04 14:55:23 EST 2023" starttimestamp="1701710826491" timestamp="8897286" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.IllegalStateException: Arguments for operator '+' must both evaluate to numbers
	at main.lisp.evaluator.basic.SumEvaluator.eval(SumEvaluator.java:51)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at index.SetqEvaluator.evalHelper(SetqEvaluator.java:18)
	at index.SetqEvaluator.eval(SetqEvaluator.java:13)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:13)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2977" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:55:23 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8897293" type="Debug" />
  <Command __id="2978" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:55:23 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8897293" type="Run" />
  <Command __id="2979" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:55:23 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="8897293" type="Debug" />
  <Command __id="2980" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:55:23 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8897293" type="Run" />
  <Command __id="2981" _type="ShellCommand" date="Mon Dec 04 14:55:27 EST 2023" starttimestamp="1701710826491" timestamp="8900630" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2982" _type="ShellCommand" date="Mon Dec 04 14:55:40 EST 2023" starttimestamp="1701710826491" timestamp="8913656" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2983" _type="ShellCommand" date="Mon Dec 04 14:55:41 EST 2023" starttimestamp="1701710826491" timestamp="8914599" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2987" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:56:48 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8982070" type="Run" />
  <Command __id="2988" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:56:48 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8982070" type="Run" />
  <Command __id="2989" _type="ConsoleInput" date="Mon Dec 04 14:56:54 EST 2023" starttimestamp="1701710826491" timestamp="8988028" type="Exception">
    <outputString><![CDATA[(setq a 2)
]]></outputString>
  </Command>
  <Command __id="2990" _type="ConsoleOutput" date="Mon Dec 04 14:56:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="8988041" type="ConsoleOutput">
    <outputString><![CDATA[2
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"2¶")]]]></diff>
  </Command>
  <Command __id="2991" _type="ConsoleInput" date="Mon Dec 04 14:56:55 EST 2023" starttimestamp="1701710826491" timestamp="8988565" type="Exception">
    <outputString><![CDATA[a
]]></outputString>
  </Command>
  <Command __id="2992" _type="ConsoleOutput" date="Mon Dec 04 14:56:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="8988571" type="ConsoleOutput">
    <outputString><![CDATA[A
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"2"), Diff(INSERT,"A"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2993" _type="ShellCommand" date="Mon Dec 04 14:56:56 EST 2023" starttimestamp="1701710826491" timestamp="8989902" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2994" _type="ShellCommand" date="Mon Dec 04 14:56:57 EST 2023" starttimestamp="1701710826491" timestamp="8990797" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3002" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:57:04 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8997764" type="Run" />
  <Command __id="3003" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:57:04 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8997764" type="Run" />
  <Command __id="3004" _type="ConsoleInput" date="Mon Dec 04 14:57:08 EST 2023" starttimestamp="1701710826491" timestamp="9001566" type="Exception">
    <outputString><![CDATA[(setq a 2)
]]></outputString>
  </Command>
  <Command __id="3005" _type="ConsoleOutput" date="Mon Dec 04 14:57:08 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9001579" type="ConsoleOutput">
    <outputString><![CDATA[2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3006" _type="ConsoleInput" date="Mon Dec 04 14:57:08 EST 2023" starttimestamp="1701710826491" timestamp="9002284" type="Exception">
    <outputString><![CDATA[a
]]></outputString>
  </Command>
  <Command __id="3007" _type="ConsoleOutput" date="Mon Dec 04 14:57:08 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9002288" type="ConsoleOutput">
    <outputString><![CDATA[A
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"2"), Diff(INSERT,"A"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3008" _type="ShellCommand" date="Mon Dec 04 14:57:09 EST 2023" starttimestamp="1701710826491" timestamp="9002831" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3014" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:57:25 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9019152" type="Run" />
  <Command __id="3015" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:57:25 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9019152" type="Run" />
  <Command __id="3016" _type="ConsoleInput" date="Mon Dec 04 14:57:28 EST 2023" starttimestamp="1701710826491" timestamp="9022006" type="Exception">
    <outputString><![CDATA[(setq a 2)
]]></outputString>
  </Command>
  <Command __id="3017" _type="ConsoleOutput" date="Mon Dec 04 14:57:28 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9022019" type="ConsoleOutput">
    <outputString><![CDATA[2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3018" _type="ConsoleInput" date="Mon Dec 04 14:57:29 EST 2023" starttimestamp="1701710826491" timestamp="9022544" type="Exception">
    <outputString><![CDATA[a
]]></outputString>
  </Command>
  <Command __id="3019" _type="ConsoleOutput" date="Mon Dec 04 14:57:29 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9022548" type="ConsoleOutput">
    <outputString><![CDATA[A
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"2"), Diff(INSERT,"A"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3020" _type="ShellCommand" date="Mon Dec 04 14:57:29 EST 2023" starttimestamp="1701710826491" timestamp="9023093" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3021" _type="ShellCommand" date="Mon Dec 04 14:57:33 EST 2023" starttimestamp="1701710826491" timestamp="9027170" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3022" _type="ShellCommand" date="Mon Dec 04 14:57:34 EST 2023" starttimestamp="1701710826491" timestamp="9027634" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2541" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:48:22 EST 2023" docASTNodeCount="203" docActiveCodeLength="1223" docExpressionCount="152" docLength="1223" projectName="Assignment5" starttimestamp="1701710826491" timestamp="8475813">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);		}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			Optional<SExpression> retVal = environment.lookup((IdentifierAtom) expr);			if(retVal.isPresent()) {				return retVal.get();			}			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="2547" _type="Insert" date="Mon Dec 04 14:48:26 EST 2023" docASTNodeCount="213" docActiveCodeLength="1248" docExpressionCount="161" docLength="1248" length="25" offset="454" starttimestamp="1701710826491" timestamp="8479822">
    <text><![CDATA[		(eval (quote (+ 1 2)))
]]></text>
  </DocumentChange>
  <DocumentChange __id="2549" _type="Delete" date="Mon Dec 04 14:48:26 EST 2023" docASTNodeCount="203" docActiveCodeLength="1223" docExpressionCount="152" docLength="1223" endLine="17" length="25" offset="454" startLine="16" starttimestamp="1701710826491" timestamp="8480401">
    <text><![CDATA[		(eval (quote (+ 1 2)))
]]></text>
  </DocumentChange>
  <Command __id="3028" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:57:41 EST 2023" docASTNodeCount="89" docActiveCodeLength="555" docExpressionCount="58" docLength="555" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9035013">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import java.util.Optional;

import main.lisp.evaluator.Environment;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{

    public IdentifierAtomImpl(String string) {
        super(string);
    }

    @Override
    public SExpression eval(Environment var1){
        Optional<SExpression> retVal = var1.lookup(this);
        if(retVal.isPresent()) {
            return retVal.get();
        }
        return this;
    }
}
]]></snapshot>
  </Command>
  <DocumentChange __id="3029" _type="Replace" date="Mon Dec 04 14:57:41 EST 2023" docASTNodeCount="89" docActiveCodeLength="555" docExpressionCount="58" docLength="555" endLine="23" insertionLength="555" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="555" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="9035073">
    <deletedText><![CDATA[package index;

import java.util.Optional;

import main.lisp.evaluator.Environment;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{

    public IdentifierAtomImpl(String string) {
        super(string);
    }

    @Override
    public SExpression eval(Environment var1){
        Optional<SExpression> retVal = var1.lookup(this);
        if(retVal.isPresent()) {
            return retVal.get();
        }
        return this;
    }
}
]]></deletedText>
    <insertedText><![CDATA[package index;

import java.util.Optional;

import main.lisp.evaluator.Environment;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{

    public IdentifierAtomImpl(String string) {
        super(string);
    }

    @Override
    public SExpression eval(Environment var1){
        Optional<SExpression> retVal = var1.lookup(this);
        if(retVal.isPresent()) {
            return retVal.get();
        }
        return this;
    }
}
]]></insertedText>
  </DocumentChange>
  <Command __id="3030" _type="EclipseCommand" commandID="" date="Mon Dec 04 14:57:41 EST 2023" starttimestamp="1701710826491" timestamp="9035091" />
  <Command __id="3031" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 14:57:41 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9035096" />
  <Command __id="3032" _type="EclipseCommand" commandID="" date="Mon Dec 04 14:57:41 EST 2023" starttimestamp="1701710826491" timestamp="9035097" />
  <Command __id="3033" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:57:43 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9036879">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3034" _type="MoveCaretCommand" caretOffset="1155" date="Mon Dec 04 14:57:43 EST 2023" docOffset="1269" starttimestamp="1701710826491" timestamp="9036930" />
  <Command __id="3035" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:57:45 EST 2023" docASTNodeCount="89" docActiveCodeLength="555" docExpressionCount="58" docLength="555" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9039153">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3036" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 14:57:45 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9039203" />
  <Command __id="3037" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:57:46 EST 2023" docASTNodeCount="118" docActiveCodeLength="666" docExpressionCount="81" docLength="666" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9040257">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/SetqEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class SetqEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        SExpression e2 = expr.getTail().getHead();        SExpression e2Eval = e2.eval(environment);        environment.assign((IdentifierAtom)expr.getHead(), e2Eval);        return e2Eval;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3038" _type="MoveCaretCommand" caretOffset="371" date="Mon Dec 04 14:57:46 EST 2023" docOffset="371" starttimestamp="1701710826491" timestamp="9040303" />
  <Command __id="3039" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:57:47 EST 2023" docASTNodeCount="89" docActiveCodeLength="555" docExpressionCount="58" docLength="555" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9040769">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3040" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 14:57:47 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9040836" />
  <Command __id="3041" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:57:49 EST 2023" docASTNodeCount="197" docActiveCodeLength="1082" docExpressionCount="125" docLength="1150" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9042757">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EnvironmentImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.evaluator.environment.AbstractEnvironment;import main.lisp.evaluator.function.Function;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class EnvironmentImpl extends AbstractEnvironment{	public EnvironmentImpl() {		super();	}	public EnvironmentImpl(Environment parent) {		super(parent);	}	@Override	public void assign(IdentifierAtom arg0, SExpression arg1) {		put(arg0, arg1);	}	@Override	public void assignFun(IdentifierAtom arg0, Function arg1) {			}	@Override	public Environment copy() {		// TODO Auto-generated method stub		return null;	}	@Override	public Optional<SExpression> lookup(IdentifierAtom arg0) {		Optional<SExpression> retVal = get(arg0);		return (retVal == null && getParent() != null) ? getParent().lookup(arg0) : retVal;	}	@Override	public Optional<Function> lookupFun(IdentifierAtom arg0) {		// TODO Auto-generated method stub		return Optional.empty();	}	@Override	public Environment newChild() {		return new EnvironmentImpl(this);	}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3042" _type="MoveCaretCommand" caretOffset="729" date="Mon Dec 04 14:57:49 EST 2023" docOffset="729" starttimestamp="1701710826491" timestamp="9042811" />
  <Command __id="3043" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:57:51 EST 2023" docASTNodeCount="89" docActiveCodeLength="555" docExpressionCount="58" docLength="555" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9045264">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3044" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 14:57:51 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9045314" />
  <Command __id="3045" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:57:57 EST 2023" docASTNodeCount="216" docActiveCodeLength="1883" docExpressionCount="147" docLength="1883" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9050698">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3046" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 14:57:57 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9050764" />
  <Command __id="3047" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:57:59 EST 2023" docASTNodeCount="89" docActiveCodeLength="555" docExpressionCount="58" docLength="555" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9052877">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3048" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 14:57:59 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9052935" />
  <Command __id="3050" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 14:58:00 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9054105" />
  <Command __id="3051" _type="MoveCaretCommand" caretOffset="2279" date="Mon Dec 04 14:58:05 EST 2023" docOffset="2515" starttimestamp="1701710826491" timestamp="9059479" />
  <Command __id="3052" _type="MoveCaretCommand" caretOffset="2495" date="Mon Dec 04 14:58:06 EST 2023" docOffset="2731" starttimestamp="1701710826491" timestamp="9060396" />
  <Command __id="3053" _type="MoveCaretCommand" caretOffset="2741" date="Mon Dec 04 14:58:08 EST 2023" docOffset="2977" starttimestamp="1701710826491" timestamp="9062193" />
  <Command __id="3054" _type="MoveCaretCommand" caretOffset="2894" date="Mon Dec 04 14:58:09 EST 2023" docOffset="3130" starttimestamp="1701710826491" timestamp="9063246" />
  <Command __id="3055" _type="MoveCaretCommand" caretOffset="3104" date="Mon Dec 04 14:58:10 EST 2023" docOffset="3340" starttimestamp="1701710826491" timestamp="9064098" />
  <Command __id="3056" _type="MoveCaretCommand" caretOffset="3224" date="Mon Dec 04 14:58:11 EST 2023" docOffset="3460" starttimestamp="1701710826491" timestamp="9065260" />
  <Command __id="3057" _type="ShellCommand" date="Mon Dec 04 14:58:13 EST 2023" starttimestamp="1701710826491" timestamp="9066995" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3058" _type="ShellCommand" date="Mon Dec 04 14:58:13 EST 2023" starttimestamp="1701710826491" timestamp="9067508" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3059" _type="ShellCommand" date="Mon Dec 04 14:58:14 EST 2023" starttimestamp="1701710826491" timestamp="9068479" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3060" _type="ShellCommand" date="Mon Dec 04 14:58:31 EST 2023" starttimestamp="1701710826491" timestamp="9085365" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3061" _type="ShellCommand" date="Mon Dec 04 14:58:36 EST 2023" starttimestamp="1701710826491" timestamp="9090457" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3062" _type="ShellCommand" date="Mon Dec 04 14:58:40 EST 2023" starttimestamp="1701710826491" timestamp="9094206" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3063" _type="MoveCaretCommand" caretOffset="3161" date="Mon Dec 04 14:58:44 EST 2023" docOffset="3397" starttimestamp="1701710826491" timestamp="9097998" />
  <Command __id="3064" _type="MoveCaretCommand" caretOffset="3158" date="Mon Dec 04 14:58:45 EST 2023" docOffset="3394" starttimestamp="1701710826491" timestamp="9098792" />
  <Command __id="3065" _type="ShellCommand" date="Mon Dec 04 14:58:45 EST 2023" starttimestamp="1701710826491" timestamp="9099402" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3049" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:58:00 EST 2023" docASTNodeCount="465" docActiveCodeLength="3521" docExpressionCount="230" docLength="4303" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9054045">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;	
import main.lisp.evaluator.OperationRegisterer;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import gradingTools.comp524f23.assignment6.ClassRegistryA6;

public class ClassRegistryImpl implements ClassRegistryA6 {

	@Override
	public Class<? extends Evaluator> getAndEvaluator() {
		// TODO Auto-generated method stub
		return AndEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getCondEvaluator() {
		// TODO Auto-generated method stub
		return CondEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {
		// TODO Auto-generated method stub
		return OperationRegistererImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getEvalEvaluator() {
		// TODO Auto-generated method stub
		return EvalEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEEvaluator() {
		// TODO Auto-generated method stub
		return LesserEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEvaluator() {
		// TODO Auto-generated method stub
		return LesserEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getListEvaluator() {
		// TODO Auto-generated method stub
		return ListEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLoadEvaluator() {
		// TODO Auto-generated method stub
		return LoadEvaluator.class;
	}

	@Override
	public Class<?> getMain() {
		// TODO Auto-generated method stub
		return index.class;
	}

	@Override
	public Class<? extends Evaluator> getNotEvaluator() {
		// TODO Auto-generated method stub
		return NotEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getOrEvaluator() {
		// TODO Auto-generated method stub
		return OrEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getQuoteEvaluator() {
		// TODO Auto-generated method stub
		return QuoteEvaluator.class;
	}

	@Override
	public Class<? extends SExpression> getStringFormattingSExpression() {
		// TODO Auto-generated method stub
		return BasicExpressionImpl.class;
	}

	@Override
	public Class<? extends SExpression> getFunctionCallingSExpression() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");
	}

	@Override
	public Class<? extends Evaluator> getFunctionEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getLetEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getBasicFuncallEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");
	}

	@Override
	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {
		return IdentifierAtomImpl.class;
	}

	@Override
	public Class<? extends SExpression> getLambdaCallingSExpression() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getLambdaCallingSExpression'");
	}

	@Override
	public Class<? extends Evaluator> getLambdaEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getLambdaEvaluator'");
	}

	@Override
	public Class<? extends Environment> getNestedLexicalEnvironment() {
		// TODO Auto-generated method stub
		return EnvironmentImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getSetqEvaluator() {
		return SetqEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");
	}

}
]]></snapshot>
  </Command>
  <Command __id="3067" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:59:05 EST 2023" docASTNodeCount="89" docActiveCodeLength="555" docExpressionCount="58" docLength="555" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9118741">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3066" _type="ShellCommand" date="Mon Dec 04 14:59:04 EST 2023" starttimestamp="1701710826491" timestamp="9117900" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3068" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 14:59:05 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9118794" />
  <Command __id="3070" _type="MoveCaretCommand" caretOffset="261" date="Mon Dec 04 14:59:06 EST 2023" docOffset="369" starttimestamp="1701710826491" timestamp="9120031" />
  <Command __id="3071" _type="MoveCaretCommand" caretOffset="193" date="Mon Dec 04 14:59:07 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="9121199" />
  <Command __id="3072" _type="MoveCaretCommand" caretOffset="193" date="Mon Dec 04 14:59:07 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="9121200" />
  <Command __id="3073" _type="MoveCaretCommand" caretOffset="152" date="Mon Dec 04 14:59:08 EST 2023" docOffset="260" starttimestamp="1701710826491" timestamp="9121799" />
  <Command __id="3074" _type="MoveCaretCommand" caretOffset="152" date="Mon Dec 04 14:59:08 EST 2023" docOffset="260" starttimestamp="1701710826491" timestamp="9121800" />
  <Command __id="3075" _type="MoveCaretCommand" caretOffset="98" date="Mon Dec 04 14:59:09 EST 2023" docOffset="206" starttimestamp="1701710826491" timestamp="9123367" />
  <Command __id="3076" _type="MoveCaretCommand" caretOffset="98" date="Mon Dec 04 14:59:09 EST 2023" docOffset="206" starttimestamp="1701710826491" timestamp="9123367" />
  <Command __id="3078" _type="InsertStringCommand" date="Mon Dec 04 14:59:10 EST 2023" starttimestamp="1701710826491" timestamp="9123890" timestamp2="9123890">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3079" _type="InsertStringCommand" date="Mon Dec 04 14:59:10 EST 2023" starttimestamp="1701710826491" timestamp="9123890" timestamp2="9123890">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3081" _type="InsertStringCommand" date="Mon Dec 04 14:59:11 EST 2023" starttimestamp="1701710826491" timestamp="9124876" timestamp2="9124876">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="3082" _type="InsertStringCommand" date="Mon Dec 04 14:59:11 EST 2023" starttimestamp="1701710826491" timestamp="9124876" timestamp2="9124876">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="3084" _type="InsertStringCommand" date="Mon Dec 04 14:59:11 EST 2023" starttimestamp="1701710826491" timestamp="9125255" timestamp2="9125255">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3085" _type="InsertStringCommand" date="Mon Dec 04 14:59:11 EST 2023" starttimestamp="1701710826491" timestamp="9125255" timestamp2="9125255">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3087" _type="InsertStringCommand" date="Mon Dec 04 14:59:11 EST 2023" starttimestamp="1701710826491" timestamp="9125428" timestamp2="9125428">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="3088" _type="InsertStringCommand" date="Mon Dec 04 14:59:11 EST 2023" starttimestamp="1701710826491" timestamp="9125429" timestamp2="9125429">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="3090" _type="InsertStringCommand" date="Mon Dec 04 14:59:12 EST 2023" starttimestamp="1701710826491" timestamp="9125527" timestamp2="9125527">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3091" _type="InsertStringCommand" date="Mon Dec 04 14:59:12 EST 2023" starttimestamp="1701710826491" timestamp="9125527" timestamp2="9125527">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3093" _type="InsertStringCommand" date="Mon Dec 04 14:59:12 EST 2023" starttimestamp="1701710826491" timestamp="9125999" timestamp2="9125999">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3094" _type="InsertStringCommand" date="Mon Dec 04 14:59:12 EST 2023" starttimestamp="1701710826491" timestamp="9125999" timestamp2="9125999">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3096" _type="InsertStringCommand" date="Mon Dec 04 14:59:12 EST 2023" starttimestamp="1701710826491" timestamp="9126087" timestamp2="9126087">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3097" _type="InsertStringCommand" date="Mon Dec 04 14:59:12 EST 2023" starttimestamp="1701710826491" timestamp="9126087" timestamp2="9126087">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3099" _type="InsertStringCommand" date="Mon Dec 04 14:59:12 EST 2023" starttimestamp="1701710826491" timestamp="9126187" timestamp2="9126187">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3100" _type="InsertStringCommand" date="Mon Dec 04 14:59:12 EST 2023" starttimestamp="1701710826491" timestamp="9126187" timestamp2="9126187">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3102" _type="InsertStringCommand" date="Mon Dec 04 14:59:12 EST 2023" starttimestamp="1701710826491" timestamp="9126365" timestamp2="9126365">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3103" _type="InsertStringCommand" date="Mon Dec 04 14:59:12 EST 2023" starttimestamp="1701710826491" timestamp="9126365" timestamp2="9126365">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3105" _type="InsertStringCommand" date="Mon Dec 04 14:59:12 EST 2023" starttimestamp="1701710826491" timestamp="9126459" timestamp2="9126459">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3106" _type="InsertStringCommand" date="Mon Dec 04 14:59:12 EST 2023" starttimestamp="1701710826491" timestamp="9126459" timestamp2="9126459">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3108" _type="InsertStringCommand" date="Mon Dec 04 14:59:13 EST 2023" starttimestamp="1701710826491" timestamp="9126519" timestamp2="9126519">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3109" _type="InsertStringCommand" date="Mon Dec 04 14:59:13 EST 2023" starttimestamp="1701710826491" timestamp="9126519" timestamp2="9126519">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3111" _type="InsertStringCommand" date="Mon Dec 04 14:59:13 EST 2023" starttimestamp="1701710826491" timestamp="9126623" timestamp2="9126623">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3112" _type="InsertStringCommand" date="Mon Dec 04 14:59:13 EST 2023" starttimestamp="1701710826491" timestamp="9126623" timestamp2="9126623">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3114" _type="InsertStringCommand" date="Mon Dec 04 14:59:14 EST 2023" starttimestamp="1701710826491" timestamp="9127536" timestamp2="9127536">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="3115" _type="InsertStringCommand" date="Mon Dec 04 14:59:14 EST 2023" starttimestamp="1701710826491" timestamp="9127536" timestamp2="9127536">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="3116" _type="ShellCommand" date="Mon Dec 04 14:59:14 EST 2023" starttimestamp="1701710826491" timestamp="9128219" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3117" _type="ShellCommand" date="Mon Dec 04 14:59:16 EST 2023" starttimestamp="1701710826491" timestamp="9130265" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3118" _type="SelectTextCommand" caretOffset="101" date="Mon Dec 04 14:59:18 EST 2023" end="113" start="101" starttimestamp="1701710826491" timestamp="9132018" />
  <Command __id="3119" _type="SelectTextCommand" caretOffset="101" date="Mon Dec 04 14:59:18 EST 2023" end="113" start="101" starttimestamp="1701710826491" timestamp="9132018" />
  <Command __id="3121" _type="PasteCommand" date="Mon Dec 04 14:59:18 EST 2023" starttimestamp="1701710826491" timestamp="9132104" />
  <Command __id="3123" _type="InsertStringCommand" date="Mon Dec 04 14:59:19 EST 2023" starttimestamp="1701710826491" timestamp="9132528" timestamp2="9132528">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3124" _type="InsertStringCommand" date="Mon Dec 04 14:59:19 EST 2023" starttimestamp="1701710826491" timestamp="9132528" timestamp2="9132528">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3125" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 14:59:19 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="9132535" />
  <Command __id="3129" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 14:59:20 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="9133842" />
  <Command __id="3133" _type="InsertStringCommand" date="Mon Dec 04 14:59:20 EST 2023" starttimestamp="1701710826491" timestamp="9133872" timestamp2="9133872">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3134" _type="InsertStringCommand" date="Mon Dec 04 14:59:20 EST 2023" starttimestamp="1701710826491" timestamp="9133872" timestamp2="9133872">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3069" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:59:06 EST 2023" docASTNodeCount="64" docActiveCodeLength="384" docExpressionCount="43" docLength="384" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9119987">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="3077" _type="Insert" date="Mon Dec 04 14:59:10 EST 2023" docASTNodeCount="68" docActiveCodeLength="399" docExpressionCount="44" docLength="399" length="15" offset="206" repeat="13" starttimestamp="1701710826491" timestamp="9123886" timestamp2="9127534">
    <text><![CDATA[
		EnvironmentF]]></text>
  </DocumentChange>
  <DocumentChange __id="3120" _type="Replace" date="Mon Dec 04 14:59:18 EST 2023" docASTNodeCount="68" docActiveCodeLength="408" docExpressionCount="44" docLength="408" endLine="9" insertionLength="23" int_docASTNodeCount="64" int_docActiveCodeLength="385" int_docExpressionCount="43" int_docLength="385" length="14" offset="207" startLine="9" starttimestamp="1701710826491" timestamp="9132101">
    <deletedText><![CDATA[		EnvironmentF]]></deletedText>
    <insertedText><![CDATA[		IdentifierAtomFactory]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3122" _type="Insert" date="Mon Dec 04 14:59:19 EST 2023" docASTNodeCount="70" docActiveCodeLength="412" docExpressionCount="46" docLength="412" length="4" offset="230" repeat="4" starttimestamp="1701710826491" timestamp="9132526" timestamp2="9133406">
    <text><![CDATA[.set]]></text>
  </DocumentChange>
  <DocumentChange __id="3130" _type="Insert" date="Mon Dec 04 14:59:20 EST 2023" docASTNodeCount="80" docActiveCodeLength="465" docExpressionCount="55" docLength="465" length="53" offset="82" repeat="2" starttimestamp="1701710826491" timestamp="9133846" timestamp2="9133847">
    <text><![CDATA[
import main.lisp.parser.terms.IdentifierAtomFactory;]]></text>
  </DocumentChange>
  <DocumentChange __id="3132" _type="Replace" date="Mon Dec 04 14:59:20 EST 2023" docASTNodeCount="79" docActiveCodeLength="477" docExpressionCount="56" docLength="477" endLine="10" insertionLength="15" int_docASTNodeCount="76" int_docActiveCodeLength="462" int_docExpressionCount="54" int_docLength="462" length="3" offset="284" startLine="10" starttimestamp="1701710826491" timestamp="9133848">
    <deletedText><![CDATA[set]]></deletedText>
    <insertedText><![CDATA[setClass(null);]]></insertedText>
  </DocumentChange>
  <Command __id="3135" _type="MoveCaretCommand" caretOffset="134" date="Mon Dec 04 14:59:21 EST 2023" docOffset="295" starttimestamp="1701710826491" timestamp="9135202" />
  <Command __id="3136" _type="MoveCaretCommand" caretOffset="134" date="Mon Dec 04 14:59:21 EST 2023" docOffset="295" starttimestamp="1701710826491" timestamp="9135203" />
  <Command __id="3137" _type="SelectTextCommand" caretOffset="136" date="Mon Dec 04 14:59:21 EST 2023" end="136" start="132" starttimestamp="1701710826491" timestamp="9135333" />
  <Command __id="3138" _type="SelectTextCommand" caretOffset="136" date="Mon Dec 04 14:59:21 EST 2023" end="136" start="132" starttimestamp="1701710826491" timestamp="9135333" />
  <DocumentChange __id="3139" _type="Replace" date="Mon Dec 04 14:59:23 EST 2023" docASTNodeCount="79" docActiveCodeLength="474" docExpressionCount="56" docLength="474" endLine="10" insertionLength="1" int_docASTNodeCount="78" int_docActiveCodeLength="473" int_docExpressionCount="55" int_docLength="473" length="4" offset="293" startLine="10" starttimestamp="1701710826491" timestamp="9136545">
    <deletedText><![CDATA[null]]></deletedText>
    <insertedText><![CDATA[I]]></insertedText>
  </DocumentChange>
  <Command __id="3140" _type="InsertStringCommand" date="Mon Dec 04 14:59:23 EST 2023" starttimestamp="1701710826491" timestamp="9136550" timestamp2="9136550">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3141" _type="InsertStringCommand" date="Mon Dec 04 14:59:23 EST 2023" starttimestamp="1701710826491" timestamp="9136551" timestamp2="9136551">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3143" _type="InsertStringCommand" date="Mon Dec 04 14:59:23 EST 2023" starttimestamp="1701710826491" timestamp="9136971" timestamp2="9136971">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3144" _type="InsertStringCommand" date="Mon Dec 04 14:59:23 EST 2023" starttimestamp="1701710826491" timestamp="9136971" timestamp2="9136971">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3146" _type="InsertStringCommand" date="Mon Dec 04 14:59:23 EST 2023" starttimestamp="1701710826491" timestamp="9137189" timestamp2="9137189">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3147" _type="InsertStringCommand" date="Mon Dec 04 14:59:23 EST 2023" starttimestamp="1701710826491" timestamp="9137189" timestamp2="9137189">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3149" _type="InsertStringCommand" date="Mon Dec 04 14:59:23 EST 2023" starttimestamp="1701710826491" timestamp="9137247" timestamp2="9137247">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3150" _type="InsertStringCommand" date="Mon Dec 04 14:59:23 EST 2023" starttimestamp="1701710826491" timestamp="9137247" timestamp2="9137247">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3152" _type="InsertStringCommand" date="Mon Dec 04 14:59:23 EST 2023" starttimestamp="1701710826491" timestamp="9137481" timestamp2="9137481">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3153" _type="InsertStringCommand" date="Mon Dec 04 14:59:23 EST 2023" starttimestamp="1701710826491" timestamp="9137481" timestamp2="9137481">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3155" _type="InsertStringCommand" date="Mon Dec 04 14:59:24 EST 2023" starttimestamp="1701710826491" timestamp="9137548" timestamp2="9137548">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3156" _type="InsertStringCommand" date="Mon Dec 04 14:59:24 EST 2023" starttimestamp="1701710826491" timestamp="9137548" timestamp2="9137548">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3158" _type="InsertStringCommand" date="Mon Dec 04 14:59:25 EST 2023" starttimestamp="1701710826491" timestamp="9139350" timestamp2="9139350">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="3159" _type="InsertStringCommand" date="Mon Dec 04 14:59:25 EST 2023" starttimestamp="1701710826491" timestamp="9139350" timestamp2="9139350">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="3161" _type="InsertStringCommand" date="Mon Dec 04 14:59:25 EST 2023" starttimestamp="1701710826491" timestamp="9139486" timestamp2="9139486">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3162" _type="InsertStringCommand" date="Mon Dec 04 14:59:25 EST 2023" starttimestamp="1701710826491" timestamp="9139486" timestamp2="9139486">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3164" _type="InsertStringCommand" date="Mon Dec 04 14:59:26 EST 2023" starttimestamp="1701710826491" timestamp="9139682" timestamp2="9139682">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3165" _type="InsertStringCommand" date="Mon Dec 04 14:59:26 EST 2023" starttimestamp="1701710826491" timestamp="9139682" timestamp2="9139682">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3167" _type="InsertStringCommand" date="Mon Dec 04 14:59:26 EST 2023" starttimestamp="1701710826491" timestamp="9139781" timestamp2="9139781">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3168" _type="InsertStringCommand" date="Mon Dec 04 14:59:26 EST 2023" starttimestamp="1701710826491" timestamp="9139782" timestamp2="9139782">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3170" _type="InsertStringCommand" date="Mon Dec 04 14:59:26 EST 2023" starttimestamp="1701710826491" timestamp="9139999" timestamp2="9139999">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="3171" _type="InsertStringCommand" date="Mon Dec 04 14:59:26 EST 2023" starttimestamp="1701710826491" timestamp="9139999" timestamp2="9139999">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="3173" _type="InsertStringCommand" date="Mon Dec 04 14:59:26 EST 2023" starttimestamp="1701710826491" timestamp="9140221" timestamp2="9140221">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3174" _type="InsertStringCommand" date="Mon Dec 04 14:59:26 EST 2023" starttimestamp="1701710826491" timestamp="9140221" timestamp2="9140221">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3176" _type="InsertStringCommand" date="Mon Dec 04 14:59:26 EST 2023" starttimestamp="1701710826491" timestamp="9140309" timestamp2="9140309">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3177" _type="InsertStringCommand" date="Mon Dec 04 14:59:26 EST 2023" starttimestamp="1701710826491" timestamp="9140309" timestamp2="9140309">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3179" _type="InsertStringCommand" date="Mon Dec 04 14:59:26 EST 2023" starttimestamp="1701710826491" timestamp="9140394" timestamp2="9140394">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3180" _type="InsertStringCommand" date="Mon Dec 04 14:59:26 EST 2023" starttimestamp="1701710826491" timestamp="9140395" timestamp2="9140395">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3182" _type="InsertStringCommand" date="Mon Dec 04 14:59:27 EST 2023" starttimestamp="1701710826491" timestamp="9140599" timestamp2="9140599">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3183" _type="InsertStringCommand" date="Mon Dec 04 14:59:27 EST 2023" starttimestamp="1701710826491" timestamp="9140599" timestamp2="9140599">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3185" _type="InsertStringCommand" date="Mon Dec 04 14:59:27 EST 2023" starttimestamp="1701710826491" timestamp="9140773" timestamp2="9140773">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3186" _type="InsertStringCommand" date="Mon Dec 04 14:59:27 EST 2023" starttimestamp="1701710826491" timestamp="9140773" timestamp2="9140773">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3188" _type="InsertStringCommand" date="Mon Dec 04 14:59:27 EST 2023" starttimestamp="1701710826491" timestamp="9140870" timestamp2="9140870">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="3189" _type="InsertStringCommand" date="Mon Dec 04 14:59:27 EST 2023" starttimestamp="1701710826491" timestamp="9140870" timestamp2="9140870">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="3191" _type="InsertStringCommand" date="Mon Dec 04 14:59:27 EST 2023" starttimestamp="1701710826491" timestamp="9141020" timestamp2="9141020">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3192" _type="InsertStringCommand" date="Mon Dec 04 14:59:27 EST 2023" starttimestamp="1701710826491" timestamp="9141020" timestamp2="9141020">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3194" _type="InsertStringCommand" date="Mon Dec 04 14:59:27 EST 2023" starttimestamp="1701710826491" timestamp="9141448" timestamp2="9141448">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3195" _type="InsertStringCommand" date="Mon Dec 04 14:59:27 EST 2023" starttimestamp="1701710826491" timestamp="9141448" timestamp2="9141448">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3196" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 14:59:27 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="9141455" />
  <Command __id="3202" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 14:59:29 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="9142679" />
  <Command __id="3204" _type="InsertStringCommand" date="Mon Dec 04 14:59:29 EST 2023" starttimestamp="1701710826491" timestamp="9142691" timestamp2="9142691">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3205" _type="InsertStringCommand" date="Mon Dec 04 14:59:29 EST 2023" starttimestamp="1701710826491" timestamp="9142691" timestamp2="9142691">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3206" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 14:59:29 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="9142700" />
  <Command __id="3209" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 14:59:29 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="9142989" />
  <Command __id="3211" _type="InsertStringCommand" date="Mon Dec 04 14:59:29 EST 2023" starttimestamp="1701710826491" timestamp="9143107" timestamp2="9143107">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3212" _type="InsertStringCommand" date="Mon Dec 04 14:59:29 EST 2023" starttimestamp="1701710826491" timestamp="9143107" timestamp2="9143107">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3214" _type="InsertStringCommand" date="Mon Dec 04 14:59:29 EST 2023" starttimestamp="1701710826491" timestamp="9143296" timestamp2="9143296">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3215" _type="InsertStringCommand" date="Mon Dec 04 14:59:29 EST 2023" starttimestamp="1701710826491" timestamp="9143296" timestamp2="9143296">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3217" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:59:30 EST 2023" starttimestamp="1701710826491" timestamp="9143586" />
  <Command __id="3218" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 14:59:30 EST 2023" starttimestamp="1701710826491" timestamp="9143586" />
  <Command __id="3248" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:59:35 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9149311" type="Run" />
  <Command __id="3249" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:59:35 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9149311" type="Run" />
  <Command __id="3250" _type="ExceptionCommand" date="Mon Dec 04 14:59:35 EST 2023" starttimestamp="1701710826491" timestamp="9149492" type="Exception">
    <exceptionString><![CDATA[Caused by: java.lang.NoSuchMethodException: index.IdentifierAtomImpl.<init>(main.lisp.scanner.tokens.Token)
	at java.base/java.lang.Class.getConstructor0(Class.java:3349)
	at java.base/java.lang.Class.getDeclaredConstructor(Class.java:2553)
	at main.lisp.parser.terms.IdentifierAtomFactory.setClass(IdentifierAtomFactory.java:36)
	... 1 more
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3251" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:59:35 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9149493" type="Debug" />
  <Command __id="3252" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:59:35 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9149493" type="Run" />
  <Command __id="3253" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:59:35 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9149493" type="Debug" />
  <Command __id="3254" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:59:35 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9149493" type="Run" />
  <Command __id="3255" _type="MoveCaretCommand" caretOffset="437" date="Mon Dec 04 14:59:42 EST 2023" docOffset="437" starttimestamp="1701710826491" timestamp="9156334" />
  <Command __id="3256" _type="MoveCaretCommand" caretOffset="437" date="Mon Dec 04 14:59:42 EST 2023" docOffset="437" starttimestamp="1701710826491" timestamp="9156334" />
  <Command __id="3257" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Mon Dec 04 14:59:45 EST 2023" starttimestamp="1701710826491" timestamp="9158703" />
  <Command __id="3258" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:59:45 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9158862" type="Run" />
  <Command __id="3259" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:59:45 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9158862" type="Run" />
  <Command __id="3260" _type="ExceptionCommand" date="Mon Dec 04 14:59:45 EST 2023" starttimestamp="1701710826491" timestamp="9159041" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.IllegalArgumentException: Identifier Atom class must have a contructor with arguments (Token)
	at main.lisp.parser.terms.IdentifierAtomFactory.setClass(IdentifierAtomFactory.java:51)
	at index.index.main(index.java:11)
Caused by: java.lang.NoSuchMethodException: index.IdentifierAtomImpl.<init>(main.lisp.scanner.tokens.Token)
	at java.base/java.lang.Class.getConstructor0(Class.java:3349)
	at java.base/java.lang.Class.getDeclaredConstructor(Class.java:2553)
	at main.lisp.parser.terms.IdentifierAtomFactory.setClass(IdentifierAtomFactory.java:36)
	... 1 more
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3261" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:59:45 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9159043" type="Debug" />
  <Command __id="3262" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:59:45 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9159044" type="Run" />
  <Command __id="3263" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 14:59:45 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9159044" type="Debug" />
  <Command __id="3264" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 14:59:45 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9159044" type="Run" />
  <DocumentChange __id="3142" _type="Insert" date="Mon Dec 04 14:59:23 EST 2023" docASTNodeCount="81" docActiveCodeLength="492" docExpressionCount="57" docLength="492" length="18" offset="294" repeat="18" starttimestamp="1701710826491" timestamp="9136969" timestamp2="9141445">
    <text><![CDATA[dentifierAtomImpl.]]></text>
  </DocumentChange>
  <DocumentChange __id="3197" _type="Delete" date="Mon Dec 04 14:59:28 EST 2023" docASTNodeCount="79" docActiveCodeLength="489" docExpressionCount="56" docLength="489" endLine="10" length="3" offset="309" repeat="3" startLine="10" starttimestamp="1701710826491" timestamp="9141850" timestamp2="9142082">
    <text><![CDATA[pl.]]></text>
  </DocumentChange>
  <DocumentChange __id="3200" _type="Insert" date="Mon Dec 04 14:59:28 EST 2023" docASTNodeCount="79" docActiveCodeLength="491" docExpressionCount="56" docLength="491" length="2" offset="309" repeat="2" starttimestamp="1701710826491" timestamp="9142287" timestamp2="9142489">
    <text><![CDATA[pl]]></text>
  </DocumentChange>
  <DocumentChange __id="3203" _type="Replace" date="Mon Dec 04 14:59:29 EST 2023" docASTNodeCount="81" docActiveCodeLength="492" docExpressionCount="57" docLength="492" endLine="10" insertionLength="19" int_docASTNodeCount="78" int_docActiveCodeLength="473" int_docExpressionCount="55" int_docLength="473" length="18" offset="293" startLine="10" starttimestamp="1701710826491" timestamp="9142682">
    <deletedText><![CDATA[IdentifierAtomImpl]]></deletedText>
    <insertedText><![CDATA[IdentifierAtomImpl.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3207" _type="Insert" date="Mon Dec 04 14:59:29 EST 2023" docASTNodeCount="81" docActiveCodeLength="496" docExpressionCount="58" docLength="496" length="4" offset="312" repeat="4" starttimestamp="1701710826491" timestamp="9142893" timestamp2="9143294">
    <text><![CDATA[lcas]]></text>
  </DocumentChange>
  <DocumentChange __id="3216" _type="Delete" date="Mon Dec 04 14:59:30 EST 2023" docASTNodeCount="81" docActiveCodeLength="492" docExpressionCount="57" docLength="492" endLine="10" length="4" offset="312" repeat="4" startLine="10" starttimestamp="1701710826491" timestamp="9143581" timestamp2="9143929">
    <text><![CDATA[lcas]]></text>
  </DocumentChange>
  <DocumentChange __id="3228" _type="Insert" date="Mon Dec 04 14:59:30 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" length="5" offset="312" repeat="5" starttimestamp="1701710826491" timestamp="9144029" timestamp2="9144421">
    <text><![CDATA[class]]></text>
  </DocumentChange>
  <Command __id="3265" _type="MoveCaretCommand" caretOffset="345" date="Mon Dec 04 14:59:50 EST 2023" docOffset="345" starttimestamp="1701710826491" timestamp="9164101" />
  <Command __id="3266" _type="MoveCaretCommand" caretOffset="345" date="Mon Dec 04 14:59:50 EST 2023" docOffset="345" starttimestamp="1701710826491" timestamp="9164102" />
  <Command __id="3267" _type="MoveCaretCommand" caretOffset="281" date="Mon Dec 04 14:59:51 EST 2023" docOffset="281" starttimestamp="1701710826491" timestamp="9165065" />
  <Command __id="3268" _type="MoveCaretCommand" caretOffset="281" date="Mon Dec 04 14:59:51 EST 2023" docOffset="281" starttimestamp="1701710826491" timestamp="9165065" />
  <Command __id="3269" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:59:52 EST 2023" docASTNodeCount="89" docActiveCodeLength="555" docExpressionCount="58" docLength="555" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9166413">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3270" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 14:59:52 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9166470" />
  <Command __id="3271" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:59:54 EST 2023" docASTNodeCount="465" docActiveCodeLength="3521" docExpressionCount="230" docLength="4303" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9167681">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaEvaluator'");	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3272" _type="MoveCaretCommand" caretOffset="3158" date="Mon Dec 04 14:59:54 EST 2023" docOffset="3394" starttimestamp="1701710826491" timestamp="9167744" />
  <Command __id="3273" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:59:54 EST 2023" docASTNodeCount="89" docActiveCodeLength="555" docExpressionCount="58" docLength="555" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9168432">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3274" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 14:59:54 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9168485" />
  <Command __id="3275" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 14:59:55 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9168978">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;"), Diff(INSERT,"import main.lisp.parser.terms.IdentifierAtomFactory;"), Diff(EQUAL,"import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		"), Diff(INSERT,"IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		"), Diff(EQUAL,"EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.Main;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtomFactory;
import main.lisp.evaluator.environment.EnvironmentFactory;

public class index {

	public static void main(String[] args) {
		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);
		EnvironmentFactory.setClass(EnvironmentImpl.class);
		OperationRegistererImpl.registerAll();
		ExpressionFactory.setClass(BasicExpressionImpl.class);
		Main.main(args);
	}

}
]]></snapshot>
  </Command>
  <Command __id="3276" _type="MoveCaretCommand" caretOffset="281" date="Mon Dec 04 14:59:55 EST 2023" docOffset="281" starttimestamp="1701710826491" timestamp="9169025" />
  <Command __id="3278" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 14:59:56 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9169530" />
  <Command __id="3279" _type="MoveCaretCommand" caretOffset="329" date="Mon Dec 04 14:59:57 EST 2023" docOffset="329" starttimestamp="1701710826491" timestamp="9171238" />
  <Command __id="3280" _type="MoveCaretCommand" caretOffset="329" date="Mon Dec 04 14:59:57 EST 2023" docOffset="329" starttimestamp="1701710826491" timestamp="9171238" />
  <Command __id="3285" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:00:05 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="9178834">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3286" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 15:00:05 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9178883" />
  <Command __id="3288" _type="MoveCaretCommand" caretOffset="222" date="Mon Dec 04 15:00:06 EST 2023" docOffset="222" starttimestamp="1701710826491" timestamp="9180041" />
  <Command __id="3289" _type="ShellCommand" date="Mon Dec 04 15:00:06 EST 2023" starttimestamp="1701710826491" timestamp="9180088" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3290" _type="ShellCommand" date="Mon Dec 04 15:00:07 EST 2023" starttimestamp="1701710826491" timestamp="9180948" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3291" _type="ShellCommand" date="Mon Dec 04 15:00:08 EST 2023" starttimestamp="1701710826491" timestamp="9182001" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3292" _type="ShellCommand" date="Mon Dec 04 15:00:16 EST 2023" starttimestamp="1701710826491" timestamp="9189578" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3293" _type="MoveCaretCommand" caretOffset="329" date="Mon Dec 04 15:00:16 EST 2023" docOffset="329" starttimestamp="1701710826491" timestamp="9190354" />
  <Command __id="3294" _type="InsertStringCommand" date="Mon Dec 04 15:00:17 EST 2023" starttimestamp="1701710826491" timestamp="9190815" timestamp2="9190815">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3295" _type="MoveCaretCommand" caretOffset="355" date="Mon Dec 04 15:00:18 EST 2023" docOffset="355" starttimestamp="1701710826491" timestamp="9192171" />
  <Command __id="3296" _type="InsertStringCommand" date="Mon Dec 04 15:00:19 EST 2023" starttimestamp="1701710826491" timestamp="9192915" timestamp2="9192915">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3297" _type="InsertStringCommand" date="Mon Dec 04 15:00:19 EST 2023" starttimestamp="1701710826491" timestamp="9193076" timestamp2="9193076">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3298" _type="InsertStringCommand" date="Mon Dec 04 15:00:19 EST 2023" starttimestamp="1701710826491" timestamp="9193168" timestamp2="9193168">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="3299" _type="InsertStringCommand" date="Mon Dec 04 15:00:19 EST 2023" starttimestamp="1701710826491" timestamp="9193309" timestamp2="9193309">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3300" _type="MoveCaretCommand" caretOffset="329" date="Mon Dec 04 15:00:21 EST 2023" docOffset="329" starttimestamp="1701710826491" timestamp="9195222" />
  <Command __id="3301" _type="InsertStringCommand" date="Mon Dec 04 15:00:21 EST 2023" starttimestamp="1701710826491" timestamp="9195303" timestamp2="9195303">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3302" _type="MoveCaretCommand" caretOffset="334" date="Mon Dec 04 15:00:22 EST 2023" docOffset="334" starttimestamp="1701710826491" timestamp="9195722" />
  <Command __id="3303" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:00:22 EST 2023" starttimestamp="1701710826491" timestamp="9196001" />
  <Command __id="3304" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:00:22 EST 2023" starttimestamp="1701710826491" timestamp="9196014" />
  <Command __id="3305" _type="ShellCommand" date="Mon Dec 04 15:00:24 EST 2023" starttimestamp="1701710826491" timestamp="9197623" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3306" _type="ShellCommand" date="Mon Dec 04 15:00:28 EST 2023" starttimestamp="1701710826491" timestamp="9202264" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3307" _type="MoveCaretCommand" caretOffset="43" date="Mon Dec 04 15:00:29 EST 2023" docOffset="43" starttimestamp="1701710826491" timestamp="9202789" />
  <Command __id="3308" _type="InsertStringCommand" date="Mon Dec 04 15:00:29 EST 2023" starttimestamp="1701710826491" timestamp="9203385" timestamp2="9203385">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3309" _type="MoveCaretCommand" caretOffset="83" date="Mon Dec 04 15:00:30 EST 2023" docOffset="83" starttimestamp="1701710826491" timestamp="9203937" />
  <Command __id="3310" _type="InsertStringCommand" date="Mon Dec 04 15:00:30 EST 2023" starttimestamp="1701710826491" timestamp="9204351" timestamp2="9204351">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="3311" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:00:31 EST 2023" starttimestamp="1701710826491" timestamp="9204749" />
  <Command __id="3312" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:00:31 EST 2023" starttimestamp="1701710826491" timestamp="9204999" />
  <Command __id="3313" _type="MoveCaretCommand" caretOffset="168" date="Mon Dec 04 15:00:32 EST 2023" docOffset="168" starttimestamp="1701710826491" timestamp="9205570" />
  <Command __id="3314" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:00:32 EST 2023" starttimestamp="1701710826491" timestamp="9205763" />
  <Command __id="3315" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:00:32 EST 2023" starttimestamp="1701710826491" timestamp="9205772" />
  <Command __id="3287" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:00:06 EST 2023" docASTNodeCount="89" docActiveCodeLength="555" docExpressionCount="58" docLength="555" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9179991">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3316" _type="MoveCaretCommand" caretOffset="373" date="Mon Dec 04 15:00:33 EST 2023" docOffset="373" starttimestamp="1701710826491" timestamp="9207155" />
  <Command __id="3317" _type="MoveCaretCommand" caretOffset="440" date="Mon Dec 04 15:00:34 EST 2023" docOffset="440" starttimestamp="1701710826491" timestamp="9207669" />
  <Command __id="3319" _type="MoveCaretCommand" caretOffset="281" date="Mon Dec 04 15:00:35 EST 2023" docOffset="281" starttimestamp="1701710826491" timestamp="9209257" />
  <Command __id="3320" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:00:36 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9209993" type="Run" />
  <Command __id="3321" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:00:36 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9209993" type="Run" />
  <Command __id="3326" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:00:43 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9216517" type="Debug" />
  <Command __id="3327" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:00:43 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9216517" type="Run" />
  <Command __id="3328" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:00:43 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9216517" type="Debug" />
  <Command __id="3329" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:00:43 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9216517" type="Run" />
  <Command __id="3330" _type="ShellCommand" date="Mon Dec 04 15:00:43 EST 2023" starttimestamp="1701710826491" timestamp="9217322" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3331" _type="ShellCommand" date="Mon Dec 04 15:00:44 EST 2023" starttimestamp="1701710826491" timestamp="9217972" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3332" _type="ShellCommand" date="Mon Dec 04 15:00:46 EST 2023" starttimestamp="1701710826491" timestamp="9219947" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3333" _type="ShellCommand" date="Mon Dec 04 15:01:27 EST 2023" starttimestamp="1701710826491" timestamp="9261288" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3334" _type="ShellCommand" date="Mon Dec 04 15:01:32 EST 2023" starttimestamp="1701710826491" timestamp="9265825" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3335" _type="ShellCommand" date="Mon Dec 04 15:01:36 EST 2023" starttimestamp="1701710826491" timestamp="9269958" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3336" _type="ShellCommand" date="Mon Dec 04 15:01:43 EST 2023" starttimestamp="1701710826491" timestamp="9277054" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3337" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Mon Dec 04 15:01:54 EST 2023" starttimestamp="1701710826491" timestamp="9287797" />
  <Command __id="3338" _type="ShellCommand" date="Mon Dec 04 15:01:56 EST 2023" starttimestamp="1701710826491" timestamp="9290244" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3339" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:01:56 EST 2023" starttimestamp="1701710826491" timestamp="9290262" />
  <Command __id="3340" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:01:56 EST 2023" starttimestamp="1701710826491" timestamp="9290262" />
  <Command __id="3349" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:02:20 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9314148" type="Run" />
  <Command __id="3350" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:02:20 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9314148" type="Run" />
  <Command __id="3351" _type="ConsoleInput" date="Mon Dec 04 15:02:24 EST 2023" starttimestamp="1701710826491" timestamp="9317822" type="Exception">
    <outputString><![CDATA[(setq a 2)
]]></outputString>
  </Command>
  <Command __id="3352" _type="ConsoleOutput" date="Mon Dec 04 15:02:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9317833" type="ConsoleOutput">
    <outputString><![CDATA[2
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"2¶")]]]></diff>
  </Command>
  <Command __id="3353" _type="ConsoleInput" date="Mon Dec 04 15:02:30 EST 2023" starttimestamp="1701710826491" timestamp="9324385" type="Exception">
    <outputString><![CDATA[(setq b (+ a 2))
]]></outputString>
  </Command>
  <Command __id="3354" _type="ConsoleOutput" date="Mon Dec 04 15:02:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9324390" type="ConsoleOutput">
    <outputString><![CDATA[4
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3355" _type="ShellCommand" date="Mon Dec 04 15:02:32 EST 2023" starttimestamp="1701710826491" timestamp="9326425" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3356" _type="ShellCommand" date="Mon Dec 04 15:02:34 EST 2023" starttimestamp="1701710826491" timestamp="9327919" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3357" _type="ConsoleInput" date="Mon Dec 04 15:02:34 EST 2023" starttimestamp="1701710826491" timestamp="9328251" type="Exception">
    <outputString><![CDATA[b
]]></outputString>
  </Command>
  <Command __id="3358" _type="ConsoleOutput" date="Mon Dec 04 15:02:34 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9328255" type="ConsoleOutput">
    <outputString><![CDATA[4
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"4¶")]]]></diff>
  </Command>
  <Command __id="3359" _type="ShellCommand" date="Mon Dec 04 15:02:35 EST 2023" starttimestamp="1701710826491" timestamp="9328923" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3360" _type="ShellCommand" date="Mon Dec 04 15:02:36 EST 2023" starttimestamp="1701710826491" timestamp="9329646" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3361" _type="ConsoleInput" date="Mon Dec 04 15:02:36 EST 2023" starttimestamp="1701710826491" timestamp="9329930" type="Exception">
    <outputString><![CDATA[a
]]></outputString>
  </Command>
  <Command __id="3362" _type="ConsoleOutput" date="Mon Dec 04 15:02:36 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9329934" type="ConsoleOutput">
    <outputString><![CDATA[2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"4"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3363" _type="ShellCommand" date="Mon Dec 04 15:02:36 EST 2023" starttimestamp="1701710826491" timestamp="9330330" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3364" _type="ShellCommand" date="Mon Dec 04 15:02:47 EST 2023" starttimestamp="1701710826491" timestamp="9340568" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3365" _type="ShellCommand" date="Mon Dec 04 15:02:48 EST 2023" starttimestamp="1701710826491" timestamp="9341528" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3366" _type="ShellCommand" date="Mon Dec 04 15:02:49 EST 2023" starttimestamp="1701710826491" timestamp="9342717" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3368" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:02:54 EST 2023" starttimestamp="1701710826491" timestamp="9347969" />
  <Command __id="3369" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:02:54 EST 2023" starttimestamp="1701710826491" timestamp="9347970" />
  <Command __id="3370" _type="ShellCommand" date="Mon Dec 04 15:02:54 EST 2023" starttimestamp="1701710826491" timestamp="9347994" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3371" _type="ShellCommand" date="Mon Dec 04 15:02:54 EST 2023" starttimestamp="1701710826491" timestamp="9348034" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3372" _type="ShellCommand" date="Mon Dec 04 15:02:56 EST 2023" starttimestamp="1701710826491" timestamp="9349955" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3373" _type="ShellCommand" date="Mon Dec 04 15:02:56 EST 2023" starttimestamp="1701710826491" timestamp="9350225" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3374" _type="ShellCommand" date="Mon Dec 04 15:02:57 EST 2023" starttimestamp="1701710826491" timestamp="9350735" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3375" _type="ShellCommand" date="Mon Dec 04 15:02:58 EST 2023" starttimestamp="1701710826491" timestamp="9352331" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3381" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:03:51 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9404729" type="Run" />
  <Command __id="3382" _type="ShellCommand" date="Mon Dec 04 15:03:51 EST 2023" starttimestamp="1701710826491" timestamp="9405167" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3383" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408706" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"2"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3384" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408707" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3385" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408713" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3386" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408713" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):5"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3387" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408714" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3388" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408714" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3389" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408737" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):30
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):30"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3390" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408739" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

Test execution time (ms):31
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):3"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3391" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408740" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispSetqChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:L"), Diff(DELETE,"oadLisp"), Diff(INSERT,"ispSetq"), Diff(EQUAL,"Checker,100.0% complete,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,¶"), Diff(DELETE,"¶Test execution time (ms):31¶")]]]></diff>
  </Command>
  <Command __id="3392" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408741" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LispSetqChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3393" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408742" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispSetqChecker2,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:LispSetqChecker2,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3394" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408743" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LispSetqChecker2,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3395" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408745" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadSetqChecker,100.0% complete,15.0,15.0,

Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadSetqChecker,100.0% complete,15.0,15.0,¶¶"), Diff(EQUAL,"Test execution time (ms):0¶")]]]></diff>
  </Command>
  <Command __id="3396" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408746" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadSetqChecker2,100.0% complete,15.0,15.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:LoadSetqChecker"), Diff(INSERT,"2"), Diff(EQUAL,",100.0% complete,15.0,15.0,¶"), Diff(DELETE,"¶Test execution time (ms):0¶")]]]></diff>
  </Command>
  <Command __id="3397" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408746" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadSetqChecker2,100.0% complete,15.0,15.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3398" _type="ConsoleOutput" date="Mon Dec 04 15:03:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9408747" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadSetqChecker3,100.0% complete,15.0,15.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:LoadSetqChecker3,100.0% complete,15.0,15.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3399" _type="ConsoleOutput" date="Mon Dec 04 15:04:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9417104" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Test Result:BasicAndChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):0¶"), Diff(EQUAL,"Test Result:"), Diff(DELETE,"LoadSetq"), Diff(INSERT,"BasicAnd"), Diff(EQUAL,"Checker"), Diff(DELETE,"3"), Diff(EQUAL,",100.0% complete,1"), Diff(DELETE,"5"), Diff(INSERT,"0"), Diff(EQUAL,".0,1"), Diff(DELETE,"5"), Diff(INSERT,"0"), Diff(EQUAL,".0,¶"), Diff(INSERT,"¶")]]]></diff>
  </Command>
  <Command __id="3400" _type="ConsoleOutput" date="Mon Dec 04 15:04:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9417105" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"0¶Test Result:BasicAndChecker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3401" _type="ConsoleOutput" date="Mon Dec 04 15:04:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9417105" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:BasicOrChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:BasicOrChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3402" _type="ConsoleOutput" date="Mon Dec 04 15:04:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9417106" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:BasicOrChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3403" _type="ConsoleOutput" date="Mon Dec 04 15:04:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9417108" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:NotChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:NotChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3404" _type="ConsoleOutput" date="Mon Dec 04 15:04:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9417110" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:NotChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3405" _type="ConsoleOutput" date="Mon Dec 04 15:04:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9417112" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:VariableArgumentAndChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:VariableArgumentAndChecker,100.0% complete,10.0,10.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3406" _type="ConsoleOutput" date="Mon Dec 04 15:04:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9417112" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:VariableArgumentAndChecker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3407" _type="ConsoleOutput" date="Mon Dec 04 15:04:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9417122" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:VariableArgumentOrChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:VariableArgumentOrChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3408" _type="ConsoleOutput" date="Mon Dec 04 15:04:18 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9431831" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:GreaterChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
Test Result:GreaterOrEqualChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:VariableArgumentOr"), Diff(INSERT,"execution time (ms):1¶Test Result:GreaterChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:GreaterOrEqual"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"¶")]]]></diff>
  </Command>
  <Command __id="3409" _type="ConsoleOutput" date="Mon Dec 04 15:04:18 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9431832" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1¶"), Diff(DELETE,"Test Result:GreaterChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:GreaterOrEqualChecker,100.0% complete,10.0,10.0,¶¶")]]]></diff>
  </Command>
  <Command __id="3410" _type="ConsoleOutput" date="Mon Dec 04 15:04:18 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9431832" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LessChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:LessChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3411" _type="ConsoleOutput" date="Mon Dec 04 15:04:18 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9431835" type="ConsoleOutput">
    <outputString><![CDATA[java.lang.ClassCastException: class main.lisp.parser.terms.IntegerAtom cannot be cast to class main.lisp.parser.terms.IdentifierAtom (main.lisp.parser.terms.IntegerAtom and main.lisp.parser.terms.IdentifierAtom are in unnamed module of loader 'app')
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:LessChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"java.lang.ClassCastException: class main.lisp.parser.terms.IntegerAtom cannot be cast to class main.lisp.parser.terms.IdentifierAtom (main.lisp.parser.terms.IntegerAtom and main.lisp.parser.terms.IdentifierAtom are in unnamed module of loader 'app')"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3412" _type="LocalChecksRawCommand" date="Mon Dec 04 15:04:18 EST 2023" starttimestamp="1701710826491" timestamp="9431836">
    <CSVRow><![CDATA[74,Mon Dec 04 15:03:55 EST 2023,29,6,LispSetqSuite,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2+ ListChecker ListChecker2 LoadLispChecker LoadSetqChecker+ LoadSetqChecker2+ LoadSetqChecker3+ MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,32,0,true,LispSetqChecker LispSetqChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispSetqChecker-(10.0/10.0) LispSetqChecker2-(10.0/10.0) LoadSetqChecker-(15.0/15.0) LoadSetqChecker2-(15.0/15.0) LoadSetqChecker3-(15.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3413" _type="LocalChecksRawCommand" date="Mon Dec 04 15:04:18 EST 2023" starttimestamp="1701710826491" timestamp="9431836">
    <CSVRow><![CDATA[74,Mon Dec 04 15:03:55 EST 2023,29,6,LispSetqSuite,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2+ ListChecker ListChecker2 LoadLispChecker LoadSetqChecker+ LoadSetqChecker2+ LoadSetqChecker3+ MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,32,0,true,LispSetqChecker LispSetqChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispSetqChecker-(10.0/10.0) LispSetqChecker2-(10.0/10.0) LoadSetqChecker-(15.0/15.0) LoadSetqChecker2-(15.0/15.0) LoadSetqChecker3-(15.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3414" _type="LocalChecksRawCommand" date="Mon Dec 04 15:04:18 EST 2023" starttimestamp="1701710826491" timestamp="9431836">
    <CSVRow><![CDATA[75,Mon Dec 04 15:04:03 EST 2023,29,0,LogicalSuite,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,32,1,true,BasicAndChecker BasicOrChecker NotChecker VariableArgumentAndChecker VariableArgumentOrChecker , ,VariableArgumentAndChecker VariableArgumentOrChecker ,BasicAndChecker-(10.0/10.0) BasicOrChecker-(10.0/10.0) NotChecker-(10.0/10.0) VariableArgumentAndChecker-(10.0/10.0) VariableArgumentOrChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3415" _type="LocalChecksRawCommand" date="Mon Dec 04 15:04:18 EST 2023" starttimestamp="1701710826491" timestamp="9431836">
    <CSVRow><![CDATA[75,Mon Dec 04 15:04:03 EST 2023,29,0,LogicalSuite,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,32,1,true,BasicAndChecker BasicOrChecker NotChecker VariableArgumentAndChecker VariableArgumentOrChecker , ,VariableArgumentAndChecker VariableArgumentOrChecker ,BasicAndChecker-(10.0/10.0) BasicOrChecker-(10.0/10.0) NotChecker-(10.0/10.0) VariableArgumentAndChecker-(10.0/10.0) VariableArgumentOrChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3416" _type="LocalChecksRawCommand" date="Mon Dec 04 15:04:18 EST 2023" starttimestamp="1701710826491" timestamp="9431836">
    <CSVRow><![CDATA[76,Mon Dec 04 15:04:17 EST 2023,29,0,LogicalSuite,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,32,2,true,BasicAndChecker BasicOrChecker NotChecker VariableArgumentAndChecker VariableArgumentOrChecker , ,VariableArgumentAndChecker VariableArgumentOrChecker ,BasicAndChecker-(10.0/10.0) BasicOrChecker-(10.0/10.0) NotChecker-(10.0/10.0) VariableArgumentAndChecker-(10.0/10.0) VariableArgumentOrChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3417" _type="LocalChecksRawCommand" date="Mon Dec 04 15:04:18 EST 2023" starttimestamp="1701710826491" timestamp="9431836">
    <CSVRow><![CDATA[76,Mon Dec 04 15:04:17 EST 2023,29,0,LogicalSuite,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,32,2,true,BasicAndChecker BasicOrChecker NotChecker VariableArgumentAndChecker VariableArgumentOrChecker , ,VariableArgumentAndChecker VariableArgumentOrChecker ,BasicAndChecker-(10.0/10.0) BasicOrChecker-(10.0/10.0) NotChecker-(10.0/10.0) VariableArgumentAndChecker-(10.0/10.0) VariableArgumentOrChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3418" _type="ConsoleOutput" date="Mon Dec 04 15:04:18 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9431848" type="ConsoleOutput">
    <outputString><![CDATA[	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)
	at index.EvalEvaluator.eval(EvalEvaluator.java:18)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at index.ArithmeticEvaluatorHelper.getDifference(ArithmeticEvaluatorHelper.java:16)
	at index.LesserEqualEvaluator.eval(LesserEqualEvaluator.java:17)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"java.lang.ClassCastException: class main.lisp.parser.terms.IntegerAtom cannot be cast to class main.lisp.parser.terms.IdentifierAtom (main.lisp.parser.terms.IntegerAtom and main.lisp.parser.terms.IdentifierAtom are in unnamed module of loader 'app'"), Diff(INSERT,"	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:18)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at index.ArithmeticEvaluatorHelper.getDifference(ArithmeticEvaluatorHelper.java:16)¶	at index.LesserEqualEvaluator.eval(LesserEqualEvaluator.java:17)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at jdk.internal.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="3419" _type="ConsoleOutput" date="Mon Dec 04 15:04:18 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9431860" type="ConsoleOutput">
    <outputString><![CDATA[	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):7
Test Result:LessOrEqualChecker,0.0% complete,0.0,10.0,Expected strings:Tactual string 
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:18)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at index.ArithmeticEvaluatorHelper.getDifference(ArithmeticEvaluatorHelper.java:16)¶	at index.LesserEqualEvaluator.eval(LesserEqualEvaluator.java:17)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer"), Diff(INSERT,"java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread"), Diff(EQUAL,".java:10"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at jdk.internal.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMetho"), Diff(INSERT,"java.desktop/java.awt.EventDispatchThread.run(EventDispatchThrea"), Diff(EQUAL,"d.java:"), Diff(DELETE,"5"), Diff(INSERT,"9"), Diff(EQUAL,"0)¶"), Diff(DELETE,"	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.ex"), Diff(INSERT,"¶Test execution time (ms):7¶Test Result:LessOrEqualChecker,0.0% complete,0.0,10.0,Exp"), Diff(EQUAL,"ec"), Diff(DELETE,"u"), Diff(EQUAL,"te"), Diff(DELETE,"(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)"), Diff(INSERT,"d strings:Tactual string "), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3318" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:00:35 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9209199">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3420" _type="ShellCommand" date="Mon Dec 04 15:04:27 EST 2023" starttimestamp="1701710826491" timestamp="9441191" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3421" _type="MoveCaretCommand" caretOffset="216" date="Mon Dec 04 15:04:27 EST 2023" docOffset="216" starttimestamp="1701710826491" timestamp="9441286" />
  <Command __id="3422" _type="MoveCaretCommand" caretOffset="216" date="Mon Dec 04 15:04:27 EST 2023" docOffset="216" starttimestamp="1701710826491" timestamp="9441286" />
  <Command __id="3424" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 15:04:30 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9444169" />
  <Command __id="3425" _type="MoveCaretCommand" caretOffset="269" date="Mon Dec 04 15:04:32 EST 2023" docOffset="535" starttimestamp="1701710826491" timestamp="9446249" />
  <Command __id="3426" _type="ShellCommand" date="Mon Dec 04 15:04:32 EST 2023" starttimestamp="1701710826491" timestamp="9446502" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3427" _type="ShellCommand" date="Mon Dec 04 15:04:33 EST 2023" starttimestamp="1701710826491" timestamp="9447385" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3428" _type="ShellCommand" date="Mon Dec 04 15:04:36 EST 2023" starttimestamp="1701710826491" timestamp="9450378" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3429" _type="ShellCommand" date="Mon Dec 04 15:04:39 EST 2023" starttimestamp="1701710826491" timestamp="9453199" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3430" _type="EclipseCommand" commandID="org.eclipse.ui.ide.showInSystemExplorer" date="Mon Dec 04 15:04:44 EST 2023" starttimestamp="1701710826491" timestamp="9458215" />
  <Command __id="3431" _type="ShellCommand" date="Mon Dec 04 15:04:44 EST 2023" starttimestamp="1701710826491" timestamp="9458258" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3432" _type="ShellCommand" date="Mon Dec 04 15:05:02 EST 2023" starttimestamp="1701710826491" timestamp="9476163" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3433" _type="MoveCaretCommand" caretOffset="14" date="Mon Dec 04 15:05:02 EST 2023" docOffset="14" starttimestamp="1701710826491" timestamp="9476304" />
  <Command __id="3434" _type="MoveCaretCommand" caretOffset="269" date="Mon Dec 04 15:05:03 EST 2023" docOffset="535" starttimestamp="1701710826491" timestamp="9476619" />
  <Command __id="3435" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Mon Dec 04 15:05:03 EST 2023" starttimestamp="1701710826491" timestamp="9476761" />
  <Command __id="3437" _type="PasteCommand" date="Mon Dec 04 15:05:03 EST 2023" starttimestamp="1701710826491" timestamp="9476932" />
  <Command __id="3438" _type="MoveCaretCommand" caretOffset="459" date="Mon Dec 04 15:05:03 EST 2023" docOffset="459" starttimestamp="1701710826491" timestamp="9477466" />
  <Command __id="3439" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 15:05:04 EST 2023" starttimestamp="1701710826491" timestamp="9477763" />
  <Command __id="3440" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:05:04 EST 2023" starttimestamp="1701710826491" timestamp="9478019" />
  <Command __id="3441" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:05:04 EST 2023" starttimestamp="1701710826491" timestamp="9478028" />
  <Command __id="3442" _type="ShellCommand" date="Mon Dec 04 15:05:09 EST 2023" starttimestamp="1701710826491" timestamp="9483294" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3443" _type="ShellCommand" date="Mon Dec 04 15:05:12 EST 2023" starttimestamp="1701710826491" timestamp="9485922" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3444" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:05:12 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9485936" type="Debug" />
  <Command __id="3445" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:05:12 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9485936" type="Run" />
  <Command __id="3446" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:05:12 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9485936" type="Debug" />
  <Command __id="3447" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:05:12 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9485936" type="Run" />
  <Command __id="3448" _type="ShellCommand" date="Mon Dec 04 15:05:13 EST 2023" starttimestamp="1701710826491" timestamp="9486998" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3449" _type="ShellCommand" date="Mon Dec 04 15:05:15 EST 2023" starttimestamp="1701710826491" timestamp="9488522" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3450" _type="ShellCommand" date="Mon Dec 04 15:05:15 EST 2023" starttimestamp="1701710826491" timestamp="9488678" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3451" _type="ShellCommand" date="Mon Dec 04 15:05:40 EST 2023" starttimestamp="1701710826491" timestamp="9513643" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3453" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:05:57 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9530662" type="Run" />
  <Command __id="3454" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:05:57 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9530662" type="Run" />
  <Command __id="3455" _type="ShellCommand" date="Mon Dec 04 15:05:57 EST 2023" starttimestamp="1701710826491" timestamp="9531044" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3456" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535633" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)¶	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)¶¶Test execution time (ms):7¶Test Result:LessOrEqualChecker,0.0% complete,0.0,10.0,Expected strings:Tactual string "), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3457" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535635" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3458" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535641" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3459" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535642" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):5"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3460" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535643" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3461" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535643" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3462" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535669" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):33
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):33"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3463" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535670" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

Test execution time (ms):34
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):3"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3464" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535673" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:GreaterChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:"), Diff(DELETE,"LoadLisp"), Diff(INSERT,"Greater"), Diff(EQUAL,"Checker,100.0% complete,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,¶¶"), Diff(DELETE,"Test execution time (ms):34¶")]]]></diff>
  </Command>
  <Command __id="3465" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535673" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:GreaterChecker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3466" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535674" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:GreaterOrEqualChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:GreaterOrEqualChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3467" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535675" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:GreaterOrEqualChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3468" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535676" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LessChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:LessChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3469" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535677" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LessChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3470" _type="ConsoleOutput" date="Mon Dec 04 15:06:02 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9535678" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LessOrEqualChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:LessOrEqualChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3471" _type="ConsoleOutput" date="Mon Dec 04 15:06:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9540100" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:BasicAndChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LessOrEqual"), Diff(INSERT,"execution time (ms):1¶Test Result:BasicAnd"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"¶Test execution time (ms):1¶")]]]></diff>
  </Command>
  <Command __id="3472" _type="ConsoleOutput" date="Mon Dec 04 15:06:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9540104" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:BasicOrChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
Test Result:NotChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):1¶"), Diff(EQUAL,"Test Result:Basic"), Diff(DELETE,"And"), Diff(INSERT,"Or"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶"), Diff(INSERT,"Test Result:NotChecker,100.0% complete,10.0,10.0,¶¶")]]]></diff>
  </Command>
  <Command __id="3473" _type="ConsoleOutput" date="Mon Dec 04 15:06:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9540104" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:BasicOrChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:NotChecker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3474" _type="LocalChecksRawCommand" date="Mon Dec 04 15:06:06 EST 2023" starttimestamp="1701710826491" timestamp="9540105">
    <CSVRow><![CDATA[78,Mon Dec 04 15:06:02 EST 2023,29,1,RelationalSuite,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker+ LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,33,0,true,GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,GreaterChecker-(10.0/10.0) GreaterOrEqualChecker-(10.0/10.0) LessChecker-(10.0/10.0) LessOrEqualChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3475" _type="LocalChecksRawCommand" date="Mon Dec 04 15:06:06 EST 2023" starttimestamp="1701710826491" timestamp="9540105">
    <CSVRow><![CDATA[78,Mon Dec 04 15:06:02 EST 2023,29,1,RelationalSuite,BasicAndChecker BasicOrChecker ClassRegistryProvided GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker+ LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CondChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,33,0,true,GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,GreaterChecker-(10.0/10.0) GreaterOrEqualChecker-(10.0/10.0) LessChecker-(10.0/10.0) LessOrEqualChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3476" _type="ConsoleOutput" date="Mon Dec 04 15:06:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9540107" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:VariableArgumentAndChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:VariableArgumentAndChecker,100.0% complete,10.0,10.0,¶¶"), Diff(EQUAL,"Test execution time (ms):1¶")]]]></diff>
  </Command>
  <Command __id="3477" _type="ConsoleOutput" date="Mon Dec 04 15:06:06 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9540108" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:VariableArgumentOrChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:VariableArgument"), Diff(DELETE,"And"), Diff(INSERT,"Or"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶"), Diff(DELETE,"¶Test execution time (ms):1¶")]]]></diff>
  </Command>
  <Command __id="3478" _type="ConsoleOutput" date="Mon Dec 04 15:06:19 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9552836" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:CondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:VariableArgumentOr"), Diff(INSERT,"execution time (ms):1¶Test Result:Cond"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶")]]]></diff>
  </Command>
  <Command __id="3479" _type="ConsoleOutput" date="Mon Dec 04 15:06:22 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9556004" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1¶Test Result:"), Diff(INSERT,"A6Extra"), Diff(EQUAL,"CondChecker,100.0% complete,10.0,10.0,¶")]]]></diff>
  </Command>
  <Command __id="3480" _type="ExceptionCommand" date="Mon Dec 04 15:06:26 EST 2023" starttimestamp="1701710826491" timestamp="9559736" type="Exception">
    <exceptionString><![CDATA[
Test execution time (ms):4
Test Result:QuoteChecker,0.0% complete,0.0,10.0,Expected strings:(QUOTE (+ 3 4))actual string ((QUOTE (+ 3 4)))

java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.EvalEvaluator.eval(EvalEvaluator.java:13)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3481" _type="ConsoleOutput" date="Mon Dec 04 15:06:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9559741" type="ConsoleOutput">
    <outputString><![CDATA[	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):1¶Test Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at jdk.internal.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3482" _type="ConsoleOutput" date="Mon Dec 04 15:06:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9559808" type="ConsoleOutput">
    <outputString><![CDATA[	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):6
Test Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string 

Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManag"), Diff(EQUAL,"er.java:1"), Diff(DELETE,"00"), Diff(INSERT,"701"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:1"), Diff(DELETE,"33"), Diff(INSERT,"538"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(INSERT,"140"), Diff(EQUAL,"6"), Diff(DELETE,"5"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionCheck"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"2"), Diff(EQUAL,"1"), Diff(INSERT,"357"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionCheck"), Diff(INSERT,"bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapt"), Diff(EQUAL,"er.java:4"), Diff(DELETE,"7"), Diff(INSERT,"69"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster"), Diff(EQUAL,".java:2"), Diff(DELETE,"31"), Diff(INSERT,"78"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster"), Diff(EQUAL,".java:"), Diff(DELETE,"111"), Diff(INSERT,"277"), Diff(EQUAL,")¶	at j"), Diff(DELETE,"dk.internal.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl"), Diff(INSERT,"ava.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"43"), Diff(INSERT,"6400"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/java.lang.reflect.Method.invoke(Method"), Diff(INSERT,"desktop/java.awt.Container.processEvent(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"566"), Diff(INSERT,"2263"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod"), Diff(INSERT,"java.desktop/java.awt.Component.dispatchEventImpl(Component"), Diff(EQUAL,".java:50"), Diff(INSERT,"11"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable"), Diff(INSERT,"java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"1"), Diff(EQUAL,"2"), Diff(INSERT,"321"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod"), Diff(INSERT,"java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(EQUAL,".java:4"), Diff(DELETE,"7"), Diff(INSERT,"843"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod"), Diff(INSERT,"java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"17"), Diff(INSERT,"4918"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.runLeaf(ParentRun"), Diff(INSERT,"java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Contai"), Diff(EQUAL,"ner.java:"), Diff(DELETE,"325"), Diff(INSERT,"4556"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRun"), Diff(INSERT,"java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Contai"), Diff(EQUAL,"ner.java:"), Diff(DELETE,"7"), Diff(INSERT,"448"), Diff(EQUAL,"8)¶	at "), Diff(DELETE,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRun"), Diff(INSERT,"java.desktop/java.awt.Container.dispatchEventImpl(Contai"), Diff(EQUAL,"ner.java:"), Diff(DELETE,"5"), Diff(INSERT,"230"), Diff(EQUAL,"7)¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$3.run(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"290"), Diff(INSERT,"4843"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$1.schedule(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue"), Diff(EQUAL,".java:7"), Diff(DELETE,"1"), Diff(INSERT,"72"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.runChildren(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"288"), Diff(INSERT,"721"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.access$000(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(EQUAL,".java:"), Diff(INSERT,"71"), Diff(EQUAL,"5"), Diff(DELETE,"8"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner"), Diff(INSERT,"java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(DELETE,"363"), Diff(INSERT,"85"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest"), Diff(INSERT,"java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(DELETE,"317"), Diff(INSERT,"95"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuit"), Diff(INSERT,"java.desktop/java.awt.EventQueue$5.run(EventQueu"), Diff(EQUAL,"e.java:"), Diff(DELETE,"348"), Diff(INSERT,"745"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuit"), Diff(INSERT,"java.desktop/java.awt.EventQueue$5.run(EventQueu"), Diff(EQUAL,"e.java:"), Diff(DELETE,"191"), Diff(INSERT,"743"), Diff(EQUAL,")¶	at java.base/j"), Diff(DELETE,"dk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethod"), Diff(INSERT,"ava.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurity"), Diff(EQUAL,"Access"), Diff(DELETE,"or"), Diff(EQUAL,"Impl."), Diff(DELETE,"invoke(NativeMethodAccessorImpl"), Diff(INSERT,"doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(DELETE,"62"), Diff(INSERT,"85"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread"), Diff(EQUAL,".java:"), Diff(DELETE,"4"), Diff(INSERT,"20"), Diff(EQUAL,"3)¶	at java."), Diff(DELETE,"base/java.lang.reflect.Method.invoke(Metho"), Diff(INSERT,"desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThrea"), Diff(EQUAL,"d.java:"), Diff(DELETE,"566"), Diff(INSERT,"124"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMetho"), Diff(INSERT,"java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThrea"), Diff(EQUAL,"d.java:"), Diff(DELETE,"270"), Diff(INSERT,"113"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMetho"), Diff(INSERT,"java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThrea"), Diff(EQUAL,"d.java:"), Diff(DELETE,"2"), Diff(EQUAL,"1"), Diff(INSERT,"0"), Diff(EQUAL,"9)¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager"), Diff(INSERT,"java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread"), Diff(EQUAL,".java:1"), Diff(DELETE,"444"), Diff(INSERT,"01"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.undo.BasicCommand.execute(BasicComman"), Diff(INSERT,"java.desktop/java.awt.EventDispatchThread.run(EventDispatchThrea"), Diff(EQUAL,"d.java:"), Diff(DELETE,"6"), Diff(EQUAL,"9"), Diff(INSERT,"0"), Diff(EQUAL,")¶"), Diff(DELETE,"	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)"), Diff(INSERT,"¶Test execution time (ms):6¶Test Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string ¶¶Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3483" _type="ConsoleOutput" date="Mon Dec 04 15:06:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9559818" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ListChecker,100.0% complete,10.0,10.0,

Test execution time (ms):0
Test Result:ListChecker2,100.0% complete,10.0,10.0,


Test execution time (ms):1
Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string COND
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)¶	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)¶¶Test execution time (ms):6¶Test Result:Eval"), Diff(INSERT,"Test Result:ListChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):0¶Test Result:ListChecker2,100.0% complete,10.0,10.0,¶¶¶Test execution time (ms):1¶Test Result:Combination"), Diff(EQUAL,"Checker,0.0% complete,0.0,10.0,Expected strings:"), Diff(DELETE,"7"), Diff(INSERT,"4"), Diff(EQUAL,"actual string "), Diff(DELETE,"¶¶Test execution time (ms):1"), Diff(INSERT,"COND"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3484" _type="ConsoleOutput" date="Mon Dec 04 15:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9576724" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:LispSetqChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
Test Result:LispSetqChecker2,100.0% complete,10.0,10.0,

Test execution time (ms):0
Test Result:LoadSetqChecker,100.0% complete,15.0,15.0,

Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):1¶"), Diff(EQUAL,"Test Result:Lis"), Diff(DELETE,"t"), Diff(INSERT,"pSetq"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"¶Test Result:Lis"), Diff(DELETE,"t"), Diff(INSERT,"pSetq"), Diff(EQUAL,"Checker2,100.0% complete,10.0,10.0,¶¶"), Diff(DELETE,"¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶Test Result:"), Diff(DELETE,"Combination"), Diff(INSERT,"LoadSetq"), Diff(EQUAL,"Checker,"), Diff(INSERT,"10"), Diff(EQUAL,"0.0% complete,"), Diff(DELETE,"0"), Diff(INSERT,"15"), Diff(EQUAL,".0,1"), Diff(DELETE,"0"), Diff(INSERT,"5"), Diff(EQUAL,".0,"), Diff(DELETE,"Expected strings:4actual string COND"), Diff(INSERT,"¶¶Test execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3485" _type="ConsoleOutput" date="Mon Dec 04 15:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9576725" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadSetqChecker2,100.0% complete,15.0,15.0,

Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):1¶Test Result:LispSetqChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:LispSetqChecker2,100.0% complete,10.0,10.0,¶¶Test execution time (ms):0¶"), Diff(EQUAL,"Test Result:LoadSetqChecker"), Diff(INSERT,"2"), Diff(EQUAL,",100.0% complete,15.0,15.0,¶¶Test execution time (ms):0¶")]]]></diff>
  </Command>
  <Command __id="3486" _type="ConsoleOutput" date="Mon Dec 04 15:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9576726" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadSetqChecker3,100.0% complete,15.0,15.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:LoadSetqChecker"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,",100.0% complete,15.0,15.0,¶"), Diff(DELETE,"¶Test execution time (ms):0¶")]]]></diff>
  </Command>
  <Command __id="3423" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:04:30 EST 2023" docASTNodeCount="203" docActiveCodeLength="1223" docExpressionCount="152" docLength="1223" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9444096">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);		}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			Optional<SExpression> retVal = environment.lookup((IdentifierAtom) expr);			if(retVal.isPresent()) {				return retVal.get();			}			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="3436" _type="Replace" date="Mon Dec 04 15:05:03 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" endLine="39" insertionLength="1014" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1223" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="9476923">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

import java.util.Optional;

import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
	
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			Optional<SExpression> retVal = environment.lookup((IdentifierAtom) expr);
			if(retVal.isPresent()) {
				return retVal.get();
			}
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></insertedText>
  </DocumentChange>
  <Command __id="3489" _type="LocalChecksRawCommand" date="Mon Dec 04 15:06:50 EST 2023" starttimestamp="1701710826491" timestamp="9584398">
    <CSVRow><![CDATA[80,Mon Dec 04 15:06:19 EST 2023,31,2,CondChecker,BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker+ GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,33,2,false, , , ,CondChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3490" _type="LocalChecksRawCommand" date="Mon Dec 04 15:06:50 EST 2023" starttimestamp="1701710826491" timestamp="9584398">
    <CSVRow><![CDATA[80,Mon Dec 04 15:06:19 EST 2023,31,2,CondChecker,BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker+ GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,A6ExtraCondChecker BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,33,2,false, , , ,CondChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3491" _type="LocalChecksRawCommand" date="Mon Dec 04 15:06:50 EST 2023" starttimestamp="1701710826491" timestamp="9584398">
    <CSVRow><![CDATA[81,Mon Dec 04 15:06:22 EST 2023,32,1,A6ExtraCondChecker,A6ExtraCondChecker+ BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,33,3,false, , ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3492" _type="LocalChecksRawCommand" date="Mon Dec 04 15:06:50 EST 2023" starttimestamp="1701710826491" timestamp="9584398">
    <CSVRow><![CDATA[81,Mon Dec 04 15:06:22 EST 2023,32,1,A6ExtraCondChecker,A6ExtraCondChecker+ BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,33,3,false, , ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3493" _type="LocalChecksRawCommand" date="Mon Dec 04 15:06:50 EST 2023" starttimestamp="1701710826491" timestamp="9584398">
    <CSVRow><![CDATA[82,Mon Dec 04 15:06:26 EST 2023,32,0,A6BasicOperationSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,33,4,true,A6ExtraCondChecker CombinationChecker CondChecker EvalChecker ListChecker ListChecker2 QuoteChecker , ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) CombinationChecker-(0.0/10.0) CondChecker-(10.0/10.0) EvalChecker-(0.0/10.0) ListChecker-(10.0/10.0) ListChecker2-(10.0/10.0) QuoteChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3494" _type="LocalChecksRawCommand" date="Mon Dec 04 15:06:50 EST 2023" starttimestamp="1701710826491" timestamp="9584398">
    <CSVRow><![CDATA[82,Mon Dec 04 15:06:26 EST 2023,32,0,A6BasicOperationSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,33,4,true,A6ExtraCondChecker CombinationChecker CondChecker EvalChecker ListChecker ListChecker2 QuoteChecker , ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) CombinationChecker-(0.0/10.0) CondChecker-(10.0/10.0) EvalChecker-(0.0/10.0) ListChecker-(10.0/10.0) ListChecker2-(10.0/10.0) QuoteChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3495" _type="LocalChecksRawCommand" date="Mon Dec 04 15:06:50 EST 2023" starttimestamp="1701710826491" timestamp="9584398">
    <CSVRow><![CDATA[83,Mon Dec 04 15:06:43 EST 2023,32,0,LispSetqSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,33,5,true,LispSetqChecker LispSetqChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 , , ,LispSetqChecker-(10.0/10.0) LispSetqChecker2-(10.0/10.0) LoadSetqChecker-(15.0/15.0) LoadSetqChecker2-(15.0/15.0) LoadSetqChecker3-(15.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3496" _type="LocalChecksRawCommand" date="Mon Dec 04 15:06:50 EST 2023" starttimestamp="1701710826491" timestamp="9584398">
    <CSVRow><![CDATA[83,Mon Dec 04 15:06:43 EST 2023,32,0,LispSetqSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators QuoteChecker TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,33,5,true,LispSetqChecker LispSetqChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 , , ,LispSetqChecker-(10.0/10.0) LispSetqChecker2-(10.0/10.0) LoadSetqChecker-(15.0/15.0) LoadSetqChecker2-(15.0/15.0) LoadSetqChecker3-(15.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3497" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 15:06:50 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="9584461" />
  <Command __id="3498" _type="MoveCaretCommand" caretOffset="210" date="Mon Dec 04 15:06:53 EST 2023" docOffset="291" starttimestamp="1701710826491" timestamp="9586588" />
  <Command __id="3499" _type="MoveCaretCommand" caretOffset="213" date="Mon Dec 04 15:06:53 EST 2023" docOffset="294" starttimestamp="1701710826491" timestamp="9587289" />
  <Command __id="3500" _type="ShellCommand" date="Mon Dec 04 15:06:54 EST 2023" starttimestamp="1701710826491" timestamp="9587673" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3501" _type="ShellCommand" date="Mon Dec 04 15:07:05 EST 2023" starttimestamp="1701710826491" timestamp="9599269" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3502" _type="MoveCaretCommand" caretOffset="217" date="Mon Dec 04 15:07:05 EST 2023" docOffset="298" starttimestamp="1701710826491" timestamp="9599314" />
  <Command __id="3503" _type="ShellCommand" date="Mon Dec 04 15:07:06 EST 2023" starttimestamp="1701710826491" timestamp="9600082" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3504" _type="ShellCommand" date="Mon Dec 04 15:07:11 EST 2023" starttimestamp="1701710826491" timestamp="9604540" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3505" _type="MoveCaretCommand" caretOffset="213" date="Mon Dec 04 15:07:11 EST 2023" docOffset="294" starttimestamp="1701710826491" timestamp="9605294" />
  <Command __id="3506" _type="MoveCaretCommand" caretOffset="212" date="Mon Dec 04 15:07:12 EST 2023" docOffset="293" starttimestamp="1701710826491" timestamp="9605779" />
  <Command __id="3507" _type="ShellCommand" date="Mon Dec 04 15:07:12 EST 2023" starttimestamp="1701710826491" timestamp="9606059" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3508" _type="ShellCommand" date="Mon Dec 04 15:08:19 EST 2023" starttimestamp="1701710826491" timestamp="9672887" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3509" _type="ShellCommand" date="Mon Dec 04 15:08:22 EST 2023" starttimestamp="1701710826491" timestamp="9676144" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3511" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:08:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9687635" type="Debug" />
  <Command __id="3512" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:08:34 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9687635" type="Run" />
  <Command __id="3513" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:08:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9687635" type="Debug" />
  <Command __id="3514" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:08:34 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9687635" type="Run" />
  <Command __id="3516" _type="MoveCaretCommand" caretOffset="216" date="Mon Dec 04 15:08:35 EST 2023" docOffset="216" starttimestamp="1701710826491" timestamp="9688664" />
  <Command __id="3517" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Mon Dec 04 15:08:37 EST 2023" starttimestamp="1701710826491" timestamp="9690965" />
  <Command __id="3518" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:08:37 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9691142" type="Run" />
  <Command __id="3519" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:08:37 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9691142" type="Run" />
  <Command __id="3520" _type="PasteCommand" date="Mon Dec 04 15:08:38 EST 2023" starttimestamp="1701710826491" timestamp="9691765" />
  <Command __id="3488" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:06:50 EST 2023" docASTNodeCount="54" docActiveCodeLength="301" docExpressionCount="37" docLength="301" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9584396">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.SExpression;

public class QuoteEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		return expr.getTail();
	}

}
]]></snapshot>
  </Command>
  <Command __id="3515" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:08:35 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9688622">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3521" _type="ConsoleInput" date="Mon Dec 04 15:08:44 EST 2023" starttimestamp="1701710826491" timestamp="9697914" type="Exception">
    <outputString><![CDATA[(quote (+ 1 2))
]]></outputString>
  </Command>
  <Command __id="3522" _type="ConsoleOutput" date="Mon Dec 04 15:08:44 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9697921" type="ConsoleOutput">
    <outputString><![CDATA[((+ 1 2))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:LoadSetqChecker3,100.0% complete,15.0,15.0,"), Diff(INSERT,"((+ 1 2))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3523" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:08:48 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9702136">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;"), Diff(INSERT,"import main.lisp.scanner.tokens.Token;"), Diff(EQUAL,"import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }"), Diff(INSERT,"        public IdentifierAtomImpl(Token token) {        super(token);     }"), Diff(EQUAL,"    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[package index;

import java.util.Optional;

import main.lisp.scanner.tokens.Token;
import main.lisp.evaluator.Environment;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{

    public IdentifierAtomImpl(String string) {
        super(string);
    }
    
    public IdentifierAtomImpl(Token token) {
        super(token);
     }

    @Override
    public SExpression eval(Environment var1){
        Optional<SExpression> retVal = var1.lookup(this);
        if(retVal.isPresent()) {
            return retVal.get();
        }
        return this;
    }
}
]]></snapshot>
  </Command>
  <Command __id="3524" _type="MoveCaretCommand" caretOffset="440" date="Mon Dec 04 15:08:48 EST 2023" docOffset="440" starttimestamp="1701710826491" timestamp="9702185" />
  <Command __id="3525" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:08:51 EST 2023" docASTNodeCount="54" docActiveCodeLength="301" docExpressionCount="37" docLength="301" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9704964">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		return expr.getTail();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3526" _type="MoveCaretCommand" caretOffset="212" date="Mon Dec 04 15:08:51 EST 2023" docOffset="293" starttimestamp="1701710826491" timestamp="9705011" />
  <DocumentChange __id="3527" _type="Insert" date="Mon Dec 04 15:08:53 EST 2023" docASTNodeCount="56" docActiveCodeLength="306" docExpressionCount="39" docLength="306" length="5" offset="293" repeat="5" starttimestamp="1701710826491" timestamp="9706702" timestamp2="9707333">
    <text><![CDATA[.getH]]></text>
  </DocumentChange>
  <Command __id="3528" _type="InsertStringCommand" date="Mon Dec 04 15:08:53 EST 2023" starttimestamp="1701710826491" timestamp="9706704" timestamp2="9706704">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3529" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 15:08:53 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="9706711" />
  <Command __id="3534" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 15:08:54 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="9707556" />
  <Command __id="3551" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:09:08 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9721667" type="Run" />
  <Command __id="3552" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:09:08 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9721667" type="Run" />
  <Command __id="3553" _type="ShellCommand" date="Mon Dec 04 15:09:08 EST 2023" starttimestamp="1701710826491" timestamp="9721977" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3554" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727703" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"((+ 1 2))"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3555" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727704" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3556" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727709" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3557" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727711" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,

Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3558" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727711" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:"), Diff(INSERT,"Main"), Diff(EQUAL,"Class"), Diff(DELETE,"Registry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶"), Diff(DELETE,"¶Test execution time (ms):6¶")]]]></diff>
  </Command>
  <Command __id="3559" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727734" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):30
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):30"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3560" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727736" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

Test execution time (ms):32
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):3"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3561" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727737" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:CondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:"), Diff(DELETE,"LoadLisp"), Diff(INSERT,"Cond"), Diff(EQUAL,"Checker,100.0% complete,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,¶"), Diff(DELETE,"¶Test execution time (ms):32¶")]]]></diff>
  </Command>
  <Command __id="3562" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727739" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:CondChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3563" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727740" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3564" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727741" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3565" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727742" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:QuoteChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:QuoteChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3566" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727743" type="ConsoleOutput">
    <outputString><![CDATA[java.lang.UnsupportedOperationException: Instances of Atom do not have a head
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:QuoteChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"java.lang.UnsupportedOperationException: Instances of Atom do not have a head"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3567" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727746" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:23)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:23)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"java.lang.UnsupportedOperationException: Instances of Atom do not have a head"), Diff(INSERT,"	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)¶	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:23)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:23)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3568" _type="ConsoleOutput" date="Mon Dec 04 15:09:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9727810" type="ConsoleOutput">
    <outputString><![CDATA[	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):4
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"main.lisp.parser.terms.Atom.getHead(Atom"), Diff(INSERT,"bus.uigen.undo.BasicCommand.execute(BasicCommand"), Diff(EQUAL,".java:"), Diff(DELETE,"27"), Diff(INSERT,"69"), Diff(EQUAL,")¶	at "), Diff(DELETE,"index.QuoteEvaluator.eval(QuoteEvaluato"), Diff(INSERT,"bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoe"), Diff(EQUAL,"r.java:"), Diff(DELETE,"11"), Diff(INSERT,"99"), Diff(EQUAL,")¶	at "), Diff(DELETE,"index.EvalEvaluator.evalHelper(EvalEvaluato"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManage"), Diff(EQUAL,"r.java:"), Diff(DELETE,"24"), Diff(INSERT,"1906"), Diff(EQUAL,")¶	at "), Diff(DELETE,"index.EvalEvaluator.evalHelper(EvalEvaluato"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManage"), Diff(EQUAL,"r.java:"), Diff(DELETE,"23"), Diff(INSERT,"1701"), Diff(EQUAL,")¶	at "), Diff(DELETE,"index.EvalEvaluator.evalHelper(EvalEvaluato"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManage"), Diff(EQUAL,"r.java:"), Diff(DELETE,"23"), Diff(INSERT,"1585"), Diff(EQUAL,")¶	at "), Diff(DELETE,"index.EvalEvaluator.eval(EvalEvaluato"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManage"), Diff(EQUAL,"r.java:1"), Diff(DELETE,"4"), Diff(INSERT,"538"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluato"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManage"), Diff(EQUAL,"r.java:1"), Diff(DELETE,"6"), Diff(INSERT,"531"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.parser.terms.BasicExpression.eval(BasicExpression"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager"), Diff(EQUAL,".java:"), Diff(DELETE,"2"), Diff(INSERT,"140"), Diff(EQUAL,"6)¶	at "), Diff(DELETE,"main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager"), Diff(EQUAL,".java:"), Diff(DELETE,"92"), Diff(INSERT,"1357"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegis"), Diff(INSERT,"bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdap"), Diff(EQUAL,"ter"), Diff(DELETE,"er"), Diff(EQUAL,".java:"), Diff(DELETE,"100"), Diff(INSERT,"469"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(EQUAL,"er.java:"), Diff(DELETE,"133"), Diff(INSERT,"278"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer"), Diff(INSERT,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component"), Diff(EQUAL,".java:6"), Diff(DELETE,"5"), Diff(INSERT,"638"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker"), Diff(INSERT,"java.desktop/javax.swing.JComponent.processMouseEvent(JComponent"), Diff(EQUAL,".java:"), Diff(INSERT,"334"), Diff(EQUAL,"2"), Diff(DELETE,"1"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker"), Diff(INSERT,"java.desktop/java.awt.Component.processEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"47"), Diff(INSERT,"6400"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.Container.processEvent(Container"), Diff(EQUAL,".java:2"), Diff(INSERT,"26"), Diff(EQUAL,"3"), Diff(DELETE,"1"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.Component.dispatchEventImpl(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"1"), Diff(INSERT,"50"), Diff(EQUAL,"11)¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"62"), Diff(INSERT,"4843"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container"), Diff(EQUAL,".java:4"), Diff(DELETE,"3"), Diff(INSERT,"918"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/java.lang.reflect.Method.invoke(Method"), Diff(INSERT,"desktop/java.awt.LightweightDispatcher.processMouseEvent(Container"), Diff(EQUAL,".java:"), Diff(INSERT,"45"), Diff(EQUAL,"5"), Diff(DELETE,"6"), Diff(EQUAL,"6)¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod"), Diff(INSERT,"java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"50"), Diff(INSERT,"4488"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable"), Diff(INSERT,"java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"1"), Diff(EQUAL,"2"), Diff(INSERT,"307"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod"), Diff(INSERT,"java.desktop/java.awt.Window.dispatchEventImpl(Window"), Diff(EQUAL,".java:"), Diff(DELETE,"47"), Diff(INSERT,"2772"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod"), Diff(INSERT,"java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"17"), Diff(INSERT,"4843"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.runLeaf(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"325"), Diff(INSERT,"772"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"5"), Diff(EQUAL,"7"), Diff(INSERT,"21"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$3"), Diff(INSERT,"java.desktop/java.awt.EventQueue$4"), Diff(EQUAL,".run("), Diff(DELETE,"ParentRunner"), Diff(INSERT,"EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"290"), Diff(INSERT,"715"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner"), Diff(INSERT,"java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(DELETE,"28"), Diff(EQUAL,"8"), Diff(INSERT,"5"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.access$000(ParentRunner"), Diff(INSERT,"java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(INSERT,"9"), Diff(EQUAL,"5"), Diff(DELETE,"8"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$2.evaluate(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue$5.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"268"), Diff(INSERT,"745"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue$5"), Diff(EQUAL,".run("), Diff(DELETE,"ParentRunner"), Diff(INSERT,"EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"36"), Diff(INSERT,"74"), Diff(EQUAL,"3)¶	at "), Diff(DELETE,"grader.basics.jun"), Diff(INSERT,"java.base/java.secur"), Diff(EQUAL,"it"), Diff(INSERT,"y"), Diff(EQUAL,".A"), Diff(DELETE,"GradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite"), Diff(INSERT,"ccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(DELETE,"34"), Diff(EQUAL,"8"), Diff(INSERT,"5"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuit"), Diff(INSERT,"java.desktop/java.awt.EventQueue.dispatchEvent(EventQueu"), Diff(EQUAL,"e.java:"), Diff(DELETE,"191"), Diff(INSERT,"742"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread"), Diff(EQUAL,".java:"), Diff(DELETE,"62"), Diff(INSERT,"124"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread"), Diff(EQUAL,".java:"), Diff(DELETE,"4"), Diff(INSERT,"11"), Diff(EQUAL,"3)¶	at java."), Diff(DELETE,"base/java.lang.reflect.Method.invoke(Metho"), Diff(INSERT,"desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThrea"), Diff(EQUAL,"d.java:"), Diff(DELETE,"566"), Diff(INSERT,"109"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMetho"), Diff(INSERT,"java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThrea"), Diff(EQUAL,"d.java:"), Diff(DELETE,"270"), Diff(INSERT,"101"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)"), Diff(INSERT,"java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)¶¶Test execution time (ms):4"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3569" _type="ExceptionCommand" date="Mon Dec 04 15:09:14 EST 2023" starttimestamp="1701710826491" timestamp="9727817" type="Exception">
    <exceptionString><![CDATA[Test Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string 

Test execution time (ms):1
Test Result:ListChecker,100.0% complete,10.0,10.0,

Test execution time (ms):0
Test Result:ListChecker2,100.0% complete,10.0,10.0,

java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.EvalEvaluator.eval(EvalEvaluator.java:13)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <DocumentChange __id="3535" _type="Replace" date="Mon Dec 04 15:08:54 EST 2023" docASTNodeCount="56" docActiveCodeLength="311" docExpressionCount="39" docLength="311" endLine="10" insertionLength="9" int_docASTNodeCount="56" int_docActiveCodeLength="302" int_docExpressionCount="39" int_docLength="302" length="4" offset="294" startLine="10" starttimestamp="1701710826491" timestamp="9707558">
    <deletedText><![CDATA[getH]]></deletedText>
    <insertedText><![CDATA[getHead()]]></insertedText>
  </DocumentChange>
  <Command __id="3570" _type="ShellCommand" date="Mon Dec 04 15:09:22 EST 2023" starttimestamp="1701710826491" timestamp="9735719" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3571" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:09:22 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9735729" type="Debug" />
  <Command __id="3572" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:09:22 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9735729" type="Run" />
  <Command __id="3573" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:09:22 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9735729" type="Debug" />
  <Command __id="3574" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:09:22 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9735729" type="Run" />
  <Command __id="3576" _type="MoveCaretCommand" caretOffset="283" date="Mon Dec 04 15:09:23 EST 2023" docOffset="283" starttimestamp="1701710826491" timestamp="9736977" />
  <Command __id="3577" _type="LocalChecksRawCommand" date="Mon Dec 04 15:09:23 EST 2023" starttimestamp="1701710826491" timestamp="9736981">
    <CSVRow><![CDATA[84,Mon Dec 04 15:09:14 EST 2023,34,2,A6BasicOperationSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker+ TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,34,0,true,A6ExtraCondChecker CombinationChecker CondChecker EvalChecker ListChecker ListChecker2 QuoteChecker ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) CombinationChecker-(0.0/10.0) CondChecker-(10.0/10.0) EvalChecker-(0.0/10.0) ListChecker-(10.0/10.0) ListChecker2-(10.0/10.0) QuoteChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3578" _type="LocalChecksRawCommand" date="Mon Dec 04 15:09:23 EST 2023" starttimestamp="1701710826491" timestamp="9736981">
    <CSVRow><![CDATA[84,Mon Dec 04 15:09:14 EST 2023,34,2,A6BasicOperationSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker+ TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,34,0,true,A6ExtraCondChecker CombinationChecker CondChecker EvalChecker ListChecker ListChecker2 QuoteChecker ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) CombinationChecker-(0.0/10.0) CondChecker-(10.0/10.0) EvalChecker-(0.0/10.0) ListChecker-(10.0/10.0) ListChecker2-(10.0/10.0) QuoteChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3579" _type="MoveCaretCommand" caretOffset="582" date="Mon Dec 04 15:09:24 EST 2023" docOffset="582" starttimestamp="1701710826491" timestamp="9738098" />
  <Command __id="3580" _type="MoveCaretCommand" caretOffset="586" date="Mon Dec 04 15:09:24 EST 2023" docOffset="586" starttimestamp="1701710826491" timestamp="9738498" />
  <Command __id="3581" _type="MoveCaretCommand" caretOffset="582" date="Mon Dec 04 15:09:25 EST 2023" docOffset="582" starttimestamp="1701710826491" timestamp="9738948" />
  <Command __id="3582" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 15:09:25 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="9739367" />
  <Command __id="3583" _type="MoveCaretCommand" caretOffset="586" date="Mon Dec 04 15:09:26 EST 2023" docOffset="586" starttimestamp="1701710826491" timestamp="9739779" />
  <Command __id="3584" _type="MoveCaretCommand" caretOffset="615" date="Mon Dec 04 15:09:26 EST 2023" docOffset="615" starttimestamp="1701710826491" timestamp="9740182" />
  <Command __id="3585" _type="MoveCaretCommand" caretOffset="582" date="Mon Dec 04 15:09:27 EST 2023" docOffset="582" starttimestamp="1701710826491" timestamp="9740648" />
  <Command __id="3586" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 15:09:27 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="9741097" />
  <Command __id="3587" _type="MoveCaretCommand" caretOffset="582" date="Mon Dec 04 15:09:28 EST 2023" docOffset="582" starttimestamp="1701710826491" timestamp="9741532" />
  <Command __id="3588" _type="MoveCaretCommand" caretOffset="586" date="Mon Dec 04 15:09:28 EST 2023" docOffset="586" starttimestamp="1701710826491" timestamp="9742301" />
  <Command __id="3589" _type="MoveCaretCommand" caretOffset="582" date="Mon Dec 04 15:09:29 EST 2023" docOffset="582" starttimestamp="1701710826491" timestamp="9742747" />
  <Command __id="3590" _type="MoveCaretCommand" caretOffset="582" date="Mon Dec 04 15:09:29 EST 2023" docOffset="582" starttimestamp="1701710826491" timestamp="9743167" />
  <Command __id="3591" _type="MoveCaretCommand" caretOffset="461" date="Mon Dec 04 15:09:30 EST 2023" docOffset="461" starttimestamp="1701710826491" timestamp="9744081" />
  <Command __id="3592" _type="MoveCaretCommand" caretOffset="544" date="Mon Dec 04 15:09:31 EST 2023" docOffset="544" starttimestamp="1701710826491" timestamp="9744524" />
  <Command __id="3593" _type="MoveCaretCommand" caretOffset="544" date="Mon Dec 04 15:09:32 EST 2023" docOffset="544" starttimestamp="1701710826491" timestamp="9746198" />
  <Command __id="3594" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 15:09:33 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="9746682" />
  <Command __id="3595" _type="MoveCaretCommand" caretOffset="544" date="Mon Dec 04 15:09:33 EST 2023" docOffset="544" starttimestamp="1701710826491" timestamp="9747098" />
  <Command __id="3596" _type="MoveCaretCommand" caretOffset="461" date="Mon Dec 04 15:09:34 EST 2023" docOffset="461" starttimestamp="1701710826491" timestamp="9747582" />
  <Command __id="3597" _type="MoveCaretCommand" caretOffset="544" date="Mon Dec 04 15:09:34 EST 2023" docOffset="544" starttimestamp="1701710826491" timestamp="9747913" />
  <Command __id="3598" _type="SelectTextCommand" caretOffset="1008" date="Mon Dec 04 15:09:34 EST 2023" end="1008" start="544" starttimestamp="1701710826491" timestamp="9748153" />
  <Command __id="3599" _type="SelectTextCommand" caretOffset="545" date="Mon Dec 04 15:09:34 EST 2023" end="545" start="462" starttimestamp="1701710826491" timestamp="9748352" />
  <Command __id="3600" _type="MoveCaretCommand" caretOffset="461" date="Mon Dec 04 15:09:35 EST 2023" docOffset="461" starttimestamp="1701710826491" timestamp="9748850" />
  <Command __id="3601" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 15:09:35 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="9749282" />
  <Command __id="3602" _type="MoveCaretCommand" caretOffset="544" date="Mon Dec 04 15:09:36 EST 2023" docOffset="544" starttimestamp="1701710826491" timestamp="9750033" />
  <Command __id="3603" _type="MoveCaretCommand" caretOffset="544" date="Mon Dec 04 15:09:37 EST 2023" docOffset="544" starttimestamp="1701710826491" timestamp="9751006" />
  <Command __id="3604" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 15:09:37 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="9751427" />
  <Command __id="3605" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 15:09:38 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="9751834" />
  <Command __id="3606" _type="MoveCaretCommand" caretOffset="544" date="Mon Dec 04 15:09:39 EST 2023" docOffset="544" starttimestamp="1701710826491" timestamp="9752566" />
  <Command __id="3607" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 15:09:39 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="9753015" />
  <Command __id="3608" _type="MoveCaretCommand" caretOffset="461" date="Mon Dec 04 15:09:39 EST 2023" docOffset="461" starttimestamp="1701710826491" timestamp="9753499" />
  <Command __id="3609" _type="ShellCommand" date="Mon Dec 04 15:09:40 EST 2023" starttimestamp="1701710826491" timestamp="9753915" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3610" _type="ShellCommand" date="Mon Dec 04 15:09:40 EST 2023" starttimestamp="1701710826491" timestamp="9754414" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3611" _type="ShellCommand" date="Mon Dec 04 15:09:41 EST 2023" starttimestamp="1701710826491" timestamp="9754697" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3612" _type="ShellCommand" date="Mon Dec 04 15:09:41 EST 2023" starttimestamp="1701710826491" timestamp="9755084" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3613" _type="MoveCaretCommand" caretOffset="502" date="Mon Dec 04 15:09:42 EST 2023" docOffset="502" starttimestamp="1701710826491" timestamp="9755748" />
  <Command __id="3614" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 15:09:44 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="9757918" />
  <Command __id="3615" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 15:09:45 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="9758738" />
  <Command __id="3616" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 15:09:47 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="9761419" />
  <Command __id="3618" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 15:09:48 EST 2023" starttimestamp="1701710826491" timestamp="9762347" />
  <Command __id="3619" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 15:09:49 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="9762900" />
  <Command __id="3621" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 15:09:49 EST 2023" starttimestamp="1701710826491" timestamp="9763031" />
  <Command __id="3622" _type="MoveCaretCommand" caretOffset="378" date="Mon Dec 04 15:09:50 EST 2023" docOffset="378" starttimestamp="1701710826491" timestamp="9763539" />
  <Command __id="3624" _type="InsertStringCommand" date="Mon Dec 04 15:09:50 EST 2023" starttimestamp="1701710826491" timestamp="9763915" timestamp2="9763915">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3626" _type="InsertStringCommand" date="Mon Dec 04 15:09:50 EST 2023" starttimestamp="1701710826491" timestamp="9764161" timestamp2="9764161">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3628" _type="InsertStringCommand" date="Mon Dec 04 15:09:50 EST 2023" starttimestamp="1701710826491" timestamp="9764265" timestamp2="9764265">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3630" _type="InsertStringCommand" date="Mon Dec 04 15:09:50 EST 2023" starttimestamp="1701710826491" timestamp="9764390" timestamp2="9764390">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3632" _type="InsertStringCommand" date="Mon Dec 04 15:09:50 EST 2023" starttimestamp="1701710826491" timestamp="9764436" timestamp2="9764436">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3634" _type="InsertStringCommand" date="Mon Dec 04 15:09:51 EST 2023" starttimestamp="1701710826491" timestamp="9764577" timestamp2="9764577">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3636" _type="InsertStringCommand" date="Mon Dec 04 15:09:51 EST 2023" starttimestamp="1701710826491" timestamp="9764736" timestamp2="9764736">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3638" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:09:51 EST 2023" starttimestamp="1701710826491" timestamp="9765165" />
  <Command __id="3640" _type="InsertStringCommand" date="Mon Dec 04 15:09:51 EST 2023" starttimestamp="1701710826491" timestamp="9765323" timestamp2="9765323">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3642" _type="InsertStringCommand" date="Mon Dec 04 15:09:51 EST 2023" starttimestamp="1701710826491" timestamp="9765454" timestamp2="9765454">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3644" _type="InsertStringCommand" date="Mon Dec 04 15:09:52 EST 2023" starttimestamp="1701710826491" timestamp="9765541" timestamp2="9765541">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3646" _type="InsertStringCommand" date="Mon Dec 04 15:09:52 EST 2023" starttimestamp="1701710826491" timestamp="9765729" timestamp2="9765729">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="3648" _type="InsertStringCommand" date="Mon Dec 04 15:09:52 EST 2023" starttimestamp="1701710826491" timestamp="9765827" timestamp2="9765827">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="3650" _type="InsertStringCommand" date="Mon Dec 04 15:09:52 EST 2023" starttimestamp="1701710826491" timestamp="9765910" timestamp2="9765910">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3652" _type="InsertStringCommand" date="Mon Dec 04 15:09:52 EST 2023" starttimestamp="1701710826491" timestamp="9765998" timestamp2="9765998">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3653" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 15:09:53 EST 2023" starttimestamp="1701710826491" timestamp="9766751" />
  <Command __id="3654" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:09:53 EST 2023" starttimestamp="1701710826491" timestamp="9766852" />
  <Command __id="3655" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:09:53 EST 2023" starttimestamp="1701710826491" timestamp="9766859" />
  <Command __id="3658" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:09:58 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9771666" type="Run" />
  <Command __id="3659" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:09:58 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9771666" type="Run" />
  <Command __id="3660" _type="ShellCommand" date="Mon Dec 04 15:09:58 EST 2023" starttimestamp="1701710826491" timestamp="9772010" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3661" _type="ConsoleOutput" date="Mon Dec 04 15:10:09 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9782622" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)¶	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)¶¶Test execution time (ms):4"), Diff(INSERT,"Test execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3662" _type="ConsoleOutput" date="Mon Dec 04 15:10:09 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9782624" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3663" _type="ConsoleOutput" date="Mon Dec 04 15:10:09 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9782627" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3664" _type="ConsoleOutput" date="Mon Dec 04 15:10:09 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9782627" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):5"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3665" _type="ConsoleOutput" date="Mon Dec 04 15:10:09 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9782628" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3666" _type="ConsoleOutput" date="Mon Dec 04 15:10:09 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9782629" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):6"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3667" _type="ConsoleOutput" date="Mon Dec 04 15:10:09 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9782653" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):31
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):31"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3668" _type="ConsoleOutput" date="Mon Dec 04 15:10:09 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9782654" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):31"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3669" _type="ConsoleOutput" date="Mon Dec 04 15:10:09 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9782656" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):33
Test Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string (EVAL (EVAL (QUOTE (QUOTE (+ 3 4)))))
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):33¶"), Diff(EQUAL,"Test Result:"), Diff(DELETE,"LoadLisp"), Diff(INSERT,"Eval"), Diff(EQUAL,"Checker,"), Diff(DELETE,"10"), Diff(EQUAL,"0.0% complete,0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(INSERT,"Expected strings:7actual string (EVAL (EVAL (QUOTE (QUOTE (+ 3 4)))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3670" _type="ShellCommand" date="Mon Dec 04 15:10:24 EST 2023" starttimestamp="1701710826491" timestamp="9797585" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3671" _type="LocalChecksRawCommand" date="Mon Dec 04 15:10:24 EST 2023" starttimestamp="1701710826491" timestamp="9797589">
    <CSVRow><![CDATA[85,Mon Dec 04 15:10:09 EST 2023,34,0,EvalChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,35,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,EvalChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3672" _type="LocalChecksRawCommand" date="Mon Dec 04 15:10:24 EST 2023" starttimestamp="1701710826491" timestamp="9797589">
    <CSVRow><![CDATA[85,Mon Dec 04 15:10:09 EST 2023,34,0,EvalChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,35,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,EvalChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="3673" _type="CopyCommand" date="Mon Dec 04 15:10:26 EST 2023" starttimestamp="1701710826491" timestamp="9800022" />
  <Command __id="3674" _type="CopyCommand" date="Mon Dec 04 15:10:30 EST 2023" starttimestamp="1701710826491" timestamp="9803905" />
  <Command __id="3575" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:09:23 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9736934">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms."), Diff(DELETE,"IdentifierAtom;import main.lisp.parser.terms.SExpression;import java.util.Optional;"), Diff(INSERT,"SExpression;"), Diff(EQUAL,"import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);	"), Diff(INSERT,"	"), Diff(EQUAL,""), Diff(DELETE,""), Diff(EQUAL,"	}		public static SExpression evalHelper(SExpression expr, Environment environment) {"), Diff(INSERT,""), Diff(EQUAL,"		if(expr.isAtom()) {			"), Diff(DELETE,"Optional<SExpression> retVal = environment.lookup((IdentifierAtom) expr);			if(retVal.isPresent()) {				return retVal.get();			}			"), Diff(EQUAL,"return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <DocumentChange __id="3617" _type="Insert" date="Mon Dec 04 15:09:48 EST 2023" docASTNodeCount="158" docActiveCodeLength="975" docExpressionCount="119" docLength="1016" length="2" offset="414" starttimestamp="1701710826491" timestamp="9762333">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3620" _type="Insert" date="Mon Dec 04 15:09:49 EST 2023" docASTNodeCount="150" docActiveCodeLength="941" docExpressionCount="112" docLength="1018" length="2" offset="379" starttimestamp="1701710826491" timestamp="9763012">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3623" _type="Insert" date="Mon Dec 04 15:09:50 EST 2023" docASTNodeCount="152" docActiveCodeLength="950" docExpressionCount="113" docLength="1027" length="9" offset="378" repeat="7" starttimestamp="1701710826491" timestamp="9763910" timestamp2="9764734">
    <text><![CDATA[
		retur ]]></text>
  </DocumentChange>
  <DocumentChange __id="3637" _type="Delete" date="Mon Dec 04 15:09:51 EST 2023" docASTNodeCount="152" docActiveCodeLength="949" docExpressionCount="113" docLength="1026" endLine="12" length="1" offset="386" startLine="12" starttimestamp="1701710826491" timestamp="9765162">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3639" _type="Insert" date="Mon Dec 04 15:09:51 EST 2023" docASTNodeCount="152" docActiveCodeLength="956" docExpressionCount="113" docLength="1033" length="7" offset="386" repeat="7" starttimestamp="1701710826491" timestamp="9765321" timestamp2="9765996">
    <text><![CDATA[n expr;]]></text>
  </DocumentChange>
  <Command __id="3677" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:10:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9808022" type="Debug" />
  <Command __id="3678" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:10:34 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9808022" type="Run" />
  <Command __id="3679" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:10:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9808022" type="Debug" />
  <Command __id="3680" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:10:34 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9808022" type="Run" />
  <Command __id="3682" _type="MoveCaretCommand" caretOffset="216" date="Mon Dec 04 15:10:35 EST 2023" docOffset="216" starttimestamp="1701710826491" timestamp="9809479" />
  <Command __id="3683" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Mon Dec 04 15:10:38 EST 2023" starttimestamp="1701710826491" timestamp="9811686" />
  <Command __id="3684" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:10:38 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9811845" type="Run" />
  <Command __id="3685" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:10:38 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9811845" type="Run" />
  <Command __id="3681" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:10:35 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9809433">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="3686" _type="PasteCommand" date="Mon Dec 04 15:10:39 EST 2023" starttimestamp="1701710826491" timestamp="9812900" />
  <Command __id="3687" _type="ConsoleOutput" date="Mon Dec 04 15:10:40 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9813586" type="ConsoleOutput">
    <outputString><![CDATA[(EVAL (EVAL (QUOTE (QUOTE (+ 3 4)))))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):33¶Test Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string "), Diff(EQUAL,"(EVAL (EVAL (QUOTE (QUOTE (+ 3 4)))))¶")]]]></diff>
  </Command>
  <Command __id="3688" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:10:42 EST 2023" docASTNodeCount="152" docActiveCodeLength="956" docExpressionCount="113" docLength="1033" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9816174">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		"), Diff(INSERT,"return expr;//		"), Diff(EQUAL,"expr = expr.getTail().getHead();"), Diff(INSERT,"//"), Diff(EQUAL,"		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		return expr;
//		expr = expr.getTail().getHead();
//		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="3689" _type="MoveCaretCommand" caretOffset="232" date="Mon Dec 04 15:10:42 EST 2023" docOffset="232" starttimestamp="1701710826491" timestamp="9816228" />
  <Command __id="3690" _type="MoveCaretCommand" caretOffset="393" date="Mon Dec 04 15:10:43 EST 2023" docOffset="393" starttimestamp="1701710826491" timestamp="9817205" />
  <Command __id="3691" _type="InsertStringCommand" date="Mon Dec 04 15:10:44 EST 2023" starttimestamp="1701710826491" timestamp="9817720" timestamp2="9817720">
    <data><![CDATA[x]]></data>
  </Command>
  <DocumentChange __id="3692" _type="Delete" date="Mon Dec 04 15:10:45 EST 2023" docASTNodeCount="150" docActiveCodeLength="941" docExpressionCount="112" docLength="1018" endLine="13" length="15" offset="379" startLine="12" starttimestamp="1701710826491" timestamp="9818620">
    <text><![CDATA[		return expr;
]]></text>
  </DocumentChange>
  <Command __id="3693" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Dec 04 15:10:45 EST 2023" starttimestamp="1701710826491" timestamp="9818628" />
  <Command __id="3694" _type="MoveCaretCommand" caretOffset="409" date="Mon Dec 04 15:10:45 EST 2023" docOffset="409" starttimestamp="1701710826491" timestamp="9819372" />
  <Command __id="3696" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 15:10:47 EST 2023" starttimestamp="1701710826491" timestamp="9820679" />
  <Command __id="3715" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:10:53 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9826719" type="Run" />
  <Command __id="3716" _type="PasteCommand" date="Mon Dec 04 15:10:54 EST 2023" starttimestamp="1701710826491" timestamp="9827539" />
  <Command __id="3717" _type="ExceptionCommand" date="Mon Dec 04 15:10:54 EST 2023" starttimestamp="1701710826491" timestamp="9827662" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:23)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3718" _type="ConsoleOutput" date="Mon Dec 04 15:10:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="9827667" type="ConsoleOutput">
    <outputString><![CDATA[	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:22)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:22)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(EVAL (EVAL (QUOTE (QUOTE (+ 3 4))))"), Diff(INSERT,"	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:22)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:22)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="3719" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:10:54 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9827668" type="Debug" />
  <Command __id="3720" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:10:54 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9827668" type="Run" />
  <Command __id="3721" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:10:54 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="9827668" type="Debug" />
  <Command __id="3722" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:10:54 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="9827668" type="Run" />
  <Command __id="3723" _type="ShellCommand" date="Mon Dec 04 15:11:06 EST 2023" starttimestamp="1701710826491" timestamp="9840370" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3724" _type="ShellCommand" date="Mon Dec 04 15:11:34 EST 2023" starttimestamp="1701710826491" timestamp="9867989" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3725" _type="MoveCaretCommand" caretOffset="1006" date="Mon Dec 04 15:11:34 EST 2023" docOffset="1006" starttimestamp="1701710826491" timestamp="9868092" />
  <Command __id="3726" _type="MoveCaretCommand" caretOffset="1003" date="Mon Dec 04 15:11:34 EST 2023" docOffset="1003" starttimestamp="1701710826491" timestamp="9868486" />
  <Command __id="3727" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 15:11:37 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="9871020" />
  <Command __id="3728" _type="MoveCaretCommand" caretOffset="882" date="Mon Dec 04 15:11:38 EST 2023" docOffset="882" starttimestamp="1701710826491" timestamp="9871690" />
  <Command __id="3729" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Mon Dec 04 15:11:38 EST 2023" starttimestamp="1701710826491" timestamp="9871794" />
  <Command __id="3730" _type="CopyCommand" date="Mon Dec 04 15:11:38 EST 2023" starttimestamp="1701710826491" timestamp="9871948" />
  <Command __id="3731" _type="ShellCommand" date="Mon Dec 04 15:11:38 EST 2023" starttimestamp="1701710826491" timestamp="9872367" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3732" _type="ShellCommand" date="Mon Dec 04 15:12:07 EST 2023" starttimestamp="1701710826491" timestamp="9901414" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3733" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 15:12:08 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="9902175" />
  <Command __id="3734" _type="SelectTextCommand" caretOffset="298" date="Mon Dec 04 15:12:11 EST 2023" end="456" start="298" starttimestamp="1701710826491" timestamp="9904742" />
  <Command __id="3735" _type="CopyCommand" date="Mon Dec 04 15:12:11 EST 2023" starttimestamp="1701710826491" timestamp="9904911" />
  <Command __id="3736" _type="ShellCommand" date="Mon Dec 04 15:12:11 EST 2023" starttimestamp="1701710826491" timestamp="9905159" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3737" _type="ShellCommand" date="Mon Dec 04 15:12:17 EST 2023" starttimestamp="1701710826491" timestamp="9910757" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3738" _type="MoveCaretCommand" caretOffset="579" date="Mon Dec 04 15:12:17 EST 2023" docOffset="579" starttimestamp="1701710826491" timestamp="9911277" />
  <Command __id="3739" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Mon Dec 04 15:12:17 EST 2023" starttimestamp="1701710826491" timestamp="9911363" />
  <Command __id="3740" _type="CopyCommand" date="Mon Dec 04 15:12:17 EST 2023" starttimestamp="1701710826491" timestamp="9911493" />
  <Command __id="3741" _type="ShellCommand" date="Mon Dec 04 15:12:18 EST 2023" starttimestamp="1701710826491" timestamp="9911823" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3742" _type="ShellCommand" date="Mon Dec 04 15:12:27 EST 2023" starttimestamp="1701710826491" timestamp="9921142" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3743" _type="MoveCaretCommand" caretOffset="458" date="Mon Dec 04 15:12:28 EST 2023" docOffset="458" starttimestamp="1701710826491" timestamp="9921877" />
  <Command __id="3744" _type="SelectTextCommand" caretOffset="298" date="Mon Dec 04 15:12:29 EST 2023" end="456" start="298" starttimestamp="1701710826491" timestamp="9922976" />
  <Command __id="3745" _type="CopyCommand" date="Mon Dec 04 15:12:29 EST 2023" starttimestamp="1701710826491" timestamp="9923077" />
  <Command __id="3746" _type="ShellCommand" date="Mon Dec 04 15:12:29 EST 2023" starttimestamp="1701710826491" timestamp="9923339" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3747" _type="ShellCommand" date="Mon Dec 04 15:12:30 EST 2023" starttimestamp="1701710826491" timestamp="9923955" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3748" _type="ShellCommand" date="Mon Dec 04 15:12:30 EST 2023" starttimestamp="1701710826491" timestamp="9924432" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3749" _type="ShellCommand" date="Mon Dec 04 15:12:56 EST 2023" starttimestamp="1701710826491" timestamp="9949716" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3750" _type="MoveCaretCommand" caretOffset="491" date="Mon Dec 04 15:12:57 EST 2023" docOffset="491" starttimestamp="1701710826491" timestamp="9951027" />
  <Command __id="3751" _type="SelectTextCommand" caretOffset="496" date="Mon Dec 04 15:12:57 EST 2023" end="496" start="486" starttimestamp="1701710826491" timestamp="9951162" />
  <Command __id="3752" _type="CopyCommand" date="Mon Dec 04 15:12:57 EST 2023" starttimestamp="1701710826491" timestamp="9951230" />
  <Command __id="3753" _type="ShellCommand" date="Mon Dec 04 15:12:57 EST 2023" starttimestamp="1701710826491" timestamp="9951499" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3754" _type="ShellCommand" date="Mon Dec 04 15:13:36 EST 2023" starttimestamp="1701710826491" timestamp="9990061" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3755" _type="ShellCommand" date="Mon Dec 04 15:13:37 EST 2023" starttimestamp="1701710826491" timestamp="9991336" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3756" _type="ShellCommand" date="Mon Dec 04 15:14:40 EST 2023" starttimestamp="1701710826491" timestamp="10053616" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3757" _type="MoveCaretCommand" caretOffset="1006" date="Mon Dec 04 15:14:42 EST 2023" docOffset="1006" starttimestamp="1701710826491" timestamp="10055688" />
  <Command __id="3758" _type="SelectTextCommand" caretOffset="459" date="Mon Dec 04 15:14:44 EST 2023" end="1006" start="459" starttimestamp="1701710826491" timestamp="10057602" />
  <Command __id="3771" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 15:14:44 EST 2023" starttimestamp="1701710826491" timestamp="10058120" />
  <Command __id="3772" _type="MoveCaretCommand" caretOffset="1030" date="Mon Dec 04 15:14:46 EST 2023" docOffset="1030" starttimestamp="1701710826491" timestamp="10059986" />
  <Command __id="3774" _type="InsertStringCommand" date="Mon Dec 04 15:14:46 EST 2023" starttimestamp="1701710826491" timestamp="10060209" timestamp2="10060209">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3776" _type="PasteCommand" date="Mon Dec 04 15:14:46 EST 2023" starttimestamp="1701710826491" timestamp="10060418" />
  <Command __id="3781" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:14:52 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10065731" type="Run" />
  <Command __id="3782" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:14:52 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10065731" type="Run" />
  <Command __id="3783" _type="ShellCommand" date="Mon Dec 04 15:14:54 EST 2023" starttimestamp="1701710826491" timestamp="10068140" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3784" _type="ShellCommand" date="Mon Dec 04 15:14:58 EST 2023" starttimestamp="1701710826491" timestamp="10071583" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3785" _type="ConsoleOutput" date="Mon Dec 04 15:14:58 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10071881" type="ConsoleOutput">
    <outputString><![CDATA[(eval (quote (+ 1 2)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:22)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:22)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15"), Diff(INSERT,"(eval (quote (+ 1 2))"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="3786" _type="PasteCommand" date="Mon Dec 04 15:14:58 EST 2023" starttimestamp="1701710826491" timestamp="10071885" />
  <Command __id="3787" _type="ConsoleOutput" date="Mon Dec 04 15:14:58 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10071890" type="ConsoleOutput">
    <outputString><![CDATA[Exception in thread "main" java.lang.NullPointerException
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(eval (quote (+ 1 2)))"), Diff(INSERT,"Exception in thread "main" java.lang.NullPointerException"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3788" _type="ConsoleOutput" date="Mon Dec 04 15:14:58 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10071892" type="ConsoleOutput">
    <outputString><![CDATA[	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:53)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:41)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Exception in thread "main" java.lang.NullPointerException"), Diff(INSERT,"	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:53)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:41)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3789" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:14:58 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10071909" type="Debug" />
  <Command __id="3790" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:14:58 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10071909" type="Run" />
  <Command __id="3791" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:14:58 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10071909" type="Debug" />
  <Command __id="3792" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:14:58 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10071909" type="Run" />
  <Command __id="3793" _type="MoveCaretCommand" caretOffset="412" date="Mon Dec 04 15:15:10 EST 2023" docOffset="412" starttimestamp="1701710826491" timestamp="10084088" />
  <Command __id="3803" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:15:14 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10088383" type="Run" />
  <Command __id="3804" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:15:14 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10088383" type="Run" />
  <Command __id="3805" _type="ConsoleOutput" date="Mon Dec 04 15:15:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10089185" type="ConsoleOutput">
    <outputString><![CDATA[(eval (quote (+ 1 2)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:53)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:41)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15"), Diff(INSERT,"(eval (quote (+ 1 2))"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="3806" _type="PasteCommand" date="Mon Dec 04 15:15:15 EST 2023" starttimestamp="1701710826491" timestamp="10089187" />
  <Command __id="3807" _type="ConsoleOutput" date="Mon Dec 04 15:15:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10089193" type="ConsoleOutput">
    <outputString><![CDATA[Exception in thread "main" java.lang.NullPointerException
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(eval (quote (+ 1 2)))"), Diff(INSERT,"Exception in thread "main" java.lang.NullPointerException"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3808" _type="ConsoleOutput" date="Mon Dec 04 15:15:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10089196" type="ConsoleOutput">
    <outputString><![CDATA[	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:53)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:41)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:41)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Exception in thread "main" java.lang.NullPointerException"), Diff(INSERT,"	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:53)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:41)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:41)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3809" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:15:15 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10089209" type="Debug" />
  <Command __id="3810" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:15:15 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10089209" type="Run" />
  <Command __id="3811" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:15:15 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10089209" type="Debug" />
  <Command __id="3812" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:15:15 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10089209" type="Run" />
  <Command __id="3813" _type="MoveCaretCommand" caretOffset="1906" date="Mon Dec 04 15:15:21 EST 2023" docOffset="1906" starttimestamp="1701710826491" timestamp="10095392" />
  <Command __id="3814" _type="MoveCaretCommand" caretOffset="1427" date="Mon Dec 04 15:15:30 EST 2023" docOffset="1427" starttimestamp="1701710826491" timestamp="10104140" />
  <Command __id="3815" _type="MoveCaretCommand" caretOffset="1438" date="Mon Dec 04 15:15:31 EST 2023" docOffset="1438" starttimestamp="1701710826491" timestamp="10104627" />
  <Command __id="3816" _type="MoveCaretCommand" caretOffset="1460" date="Mon Dec 04 15:15:31 EST 2023" docOffset="1460" starttimestamp="1701710826491" timestamp="10105154" />
  <Command __id="3817" _type="ShellCommand" date="Mon Dec 04 15:15:40 EST 2023" starttimestamp="1701710826491" timestamp="10113834" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3818" _type="ShellCommand" date="Mon Dec 04 15:15:41 EST 2023" starttimestamp="1701710826491" timestamp="10114621" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3819" _type="ShellCommand" date="Mon Dec 04 15:15:42 EST 2023" starttimestamp="1701710826491" timestamp="10116021" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3820" _type="ShellCommand" date="Mon Dec 04 15:15:51 EST 2023" starttimestamp="1701710826491" timestamp="10124729" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3821" _type="MoveCaretCommand" caretOffset="1168" date="Mon Dec 04 15:15:55 EST 2023" docOffset="1168" starttimestamp="1701710826491" timestamp="10128591" />
  <Command __id="3822" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:15:55 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10129039" />
  <Command __id="3823" _type="MoveCaretCommand" caretOffset="1201" date="Mon Dec 04 15:15:55 EST 2023" docOffset="1201" starttimestamp="1701710826491" timestamp="10129454" />
  <Command __id="3824" _type="MoveCaretCommand" caretOffset="1202" date="Mon Dec 04 15:15:56 EST 2023" docOffset="1202" starttimestamp="1701710826491" timestamp="10129886" />
  <Command __id="3825" _type="MoveCaretCommand" caretOffset="1227" date="Mon Dec 04 15:15:56 EST 2023" docOffset="1227" starttimestamp="1701710826491" timestamp="10130353" />
  <Command __id="3826" _type="MoveCaretCommand" caretOffset="1225" date="Mon Dec 04 15:15:57 EST 2023" docOffset="1225" starttimestamp="1701710826491" timestamp="10130804" />
  <Command __id="3827" _type="MoveCaretCommand" caretOffset="1231" date="Mon Dec 04 15:15:57 EST 2023" docOffset="1231" starttimestamp="1701710826491" timestamp="10131271" />
  <Command __id="3828" _type="MoveCaretCommand" caretOffset="1319" date="Mon Dec 04 15:15:58 EST 2023" docOffset="1319" starttimestamp="1701710826491" timestamp="10131802" />
  <Command __id="3829" _type="MoveCaretCommand" caretOffset="1280" date="Mon Dec 04 15:15:58 EST 2023" docOffset="1280" starttimestamp="1701710826491" timestamp="10132288" />
  <Command __id="3830" _type="MoveCaretCommand" caretOffset="1284" date="Mon Dec 04 15:15:59 EST 2023" docOffset="1284" starttimestamp="1701710826491" timestamp="10132754" />
  <Command __id="3831" _type="MoveCaretCommand" caretOffset="1324" date="Mon Dec 04 15:15:59 EST 2023" docOffset="1324" starttimestamp="1701710826491" timestamp="10133224" />
  <Command __id="3832" _type="MoveCaretCommand" caretOffset="1318" date="Mon Dec 04 15:16:00 EST 2023" docOffset="1318" starttimestamp="1701710826491" timestamp="10133654" />
  <Command __id="3833" _type="MoveCaretCommand" caretOffset="1279" date="Mon Dec 04 15:16:00 EST 2023" docOffset="1279" starttimestamp="1701710826491" timestamp="10134088" />
  <Command __id="3834" _type="MoveCaretCommand" caretOffset="1286" date="Mon Dec 04 15:16:01 EST 2023" docOffset="1286" starttimestamp="1701710826491" timestamp="10134572" />
  <Command __id="3835" _type="MoveCaretCommand" caretOffset="1281" date="Mon Dec 04 15:16:01 EST 2023" docOffset="1281" starttimestamp="1701710826491" timestamp="10135006" />
  <Command __id="3836" _type="MoveCaretCommand" caretOffset="1320" date="Mon Dec 04 15:16:01 EST 2023" docOffset="1320" starttimestamp="1701710826491" timestamp="10135438" />
  <Command __id="3837" _type="MoveCaretCommand" caretOffset="1325" date="Mon Dec 04 15:16:02 EST 2023" docOffset="1325" starttimestamp="1701710826491" timestamp="10136221" />
  <Command __id="3838" _type="MoveCaretCommand" caretOffset="1235" date="Mon Dec 04 15:16:03 EST 2023" docOffset="1235" starttimestamp="1701710826491" timestamp="10136655" />
  <Command __id="3839" _type="MoveCaretCommand" caretOffset="1280" date="Mon Dec 04 15:16:03 EST 2023" docOffset="1280" starttimestamp="1701710826491" timestamp="10137152" />
  <Command __id="3840" _type="MoveCaretCommand" caretOffset="1319" date="Mon Dec 04 15:16:04 EST 2023" docOffset="1319" starttimestamp="1701710826491" timestamp="10137542" />
  <Command __id="3841" _type="MoveCaretCommand" caretOffset="1325" date="Mon Dec 04 15:16:04 EST 2023" docOffset="1325" starttimestamp="1701710826491" timestamp="10138024" />
  <Command __id="3842" _type="MoveCaretCommand" caretOffset="1285" date="Mon Dec 04 15:16:04 EST 2023" docOffset="1285" starttimestamp="1701710826491" timestamp="10138456" />
  <Command __id="3843" _type="MoveCaretCommand" caretOffset="1278" date="Mon Dec 04 15:16:05 EST 2023" docOffset="1278" starttimestamp="1701710826491" timestamp="10138871" />
  <Command __id="3844" _type="MoveCaretCommand" caretOffset="1318" date="Mon Dec 04 15:16:05 EST 2023" docOffset="1318" starttimestamp="1701710826491" timestamp="10139271" />
  <Command __id="3845" _type="MoveCaretCommand" caretOffset="1323" date="Mon Dec 04 15:16:06 EST 2023" docOffset="1323" starttimestamp="1701710826491" timestamp="10139726" />
  <Command __id="3846" _type="MoveCaretCommand" caretOffset="1283" date="Mon Dec 04 15:16:06 EST 2023" docOffset="1283" starttimestamp="1701710826491" timestamp="10140188" />
  <Command __id="3847" _type="MoveCaretCommand" caretOffset="1279" date="Mon Dec 04 15:16:07 EST 2023" docOffset="1279" starttimestamp="1701710826491" timestamp="10140605" />
  <Command __id="3848" _type="MoveCaretCommand" caretOffset="1319" date="Mon Dec 04 15:16:07 EST 2023" docOffset="1319" starttimestamp="1701710826491" timestamp="10141004" />
  <Command __id="3849" _type="MoveCaretCommand" caretOffset="1325" date="Mon Dec 04 15:16:07 EST 2023" docOffset="1325" starttimestamp="1701710826491" timestamp="10141456" />
  <Command __id="3850" _type="MoveCaretCommand" caretOffset="1284" date="Mon Dec 04 15:16:08 EST 2023" docOffset="1284" starttimestamp="1701710826491" timestamp="10141869" />
  <Command __id="3851" _type="MoveCaretCommand" caretOffset="1279" date="Mon Dec 04 15:16:08 EST 2023" docOffset="1279" starttimestamp="1701710826491" timestamp="10142272" />
  <Command __id="3852" _type="MoveCaretCommand" caretOffset="1319" date="Mon Dec 04 15:16:09 EST 2023" docOffset="1319" starttimestamp="1701710826491" timestamp="10142673" />
  <Command __id="3853" _type="MoveCaretCommand" caretOffset="1324" date="Mon Dec 04 15:16:09 EST 2023" docOffset="1324" starttimestamp="1701710826491" timestamp="10143122" />
  <Command __id="3854" _type="MoveCaretCommand" caretOffset="1284" date="Mon Dec 04 15:16:10 EST 2023" docOffset="1284" starttimestamp="1701710826491" timestamp="10143639" />
  <Command __id="3855" _type="MoveCaretCommand" caretOffset="1278" date="Mon Dec 04 15:16:10 EST 2023" docOffset="1278" starttimestamp="1701710826491" timestamp="10144175" />
  <Command __id="3856" _type="MoveCaretCommand" caretOffset="1318" date="Mon Dec 04 15:16:11 EST 2023" docOffset="1318" starttimestamp="1701710826491" timestamp="10144588" />
  <Command __id="3857" _type="MoveCaretCommand" caretOffset="1324" date="Mon Dec 04 15:16:11 EST 2023" docOffset="1324" starttimestamp="1701710826491" timestamp="10145005" />
  <Command __id="3858" _type="ShellCommand" date="Mon Dec 04 15:16:11 EST 2023" starttimestamp="1701710826491" timestamp="10145206" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3859" _type="ShellCommand" date="Mon Dec 04 15:16:27 EST 2023" starttimestamp="1701710826491" timestamp="10161181" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3860" _type="MoveCaretCommand" caretOffset="1201" date="Mon Dec 04 15:17:16 EST 2023" docOffset="1201" starttimestamp="1701710826491" timestamp="10209541" />
  <Command __id="3861" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:16 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10209991" />
  <Command __id="3862" _type="MoveCaretCommand" caretOffset="1138" date="Mon Dec 04 15:17:16 EST 2023" docOffset="1138" starttimestamp="1701710826491" timestamp="10210425" />
  <Command __id="3863" _type="MoveCaretCommand" caretOffset="1172" date="Mon Dec 04 15:17:17 EST 2023" docOffset="1172" starttimestamp="1701710826491" timestamp="10210826" />
  <Command __id="3864" _type="MoveCaretCommand" caretOffset="1201" date="Mon Dec 04 15:17:17 EST 2023" docOffset="1201" starttimestamp="1701710826491" timestamp="10211259" />
  <Command __id="3865" _type="MoveCaretCommand" caretOffset="1202" date="Mon Dec 04 15:17:18 EST 2023" docOffset="1202" starttimestamp="1701710826491" timestamp="10211727" />
  <Command __id="3866" _type="MoveCaretCommand" caretOffset="1201" date="Mon Dec 04 15:17:18 EST 2023" docOffset="1201" starttimestamp="1701710826491" timestamp="10212145" />
  <Command __id="3867" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:19 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10212844" />
  <Command __id="3868" _type="MoveCaretCommand" caretOffset="1172" date="Mon Dec 04 15:17:19 EST 2023" docOffset="1172" starttimestamp="1701710826491" timestamp="10213274" />
  <Command __id="3869" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:20 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10213893" />
  <Command __id="3870" _type="MoveCaretCommand" caretOffset="1201" date="Mon Dec 04 15:17:20 EST 2023" docOffset="1201" starttimestamp="1701710826491" timestamp="10214307" />
  <Command __id="3871" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:21 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10214726" />
  <Command __id="3872" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:21 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10215131" />
  <Command __id="3873" _type="MoveCaretCommand" caretOffset="1172" date="Mon Dec 04 15:17:22 EST 2023" docOffset="1172" starttimestamp="1701710826491" timestamp="10215826" />
  <Command __id="3874" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:23 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10216518" />
  <Command __id="3875" _type="MoveCaretCommand" caretOffset="1201" date="Mon Dec 04 15:17:23 EST 2023" docOffset="1201" starttimestamp="1701710826491" timestamp="10216909" />
  <Command __id="3876" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:23 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10217309" />
  <Command __id="3877" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:24 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10217742" />
  <Command __id="3878" _type="MoveCaretCommand" caretOffset="1172" date="Mon Dec 04 15:17:24 EST 2023" docOffset="1172" starttimestamp="1701710826491" timestamp="10218291" />
  <Command __id="3879" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:25 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10218692" />
  <Command __id="3880" _type="MoveCaretCommand" caretOffset="1201" date="Mon Dec 04 15:17:25 EST 2023" docOffset="1201" starttimestamp="1701710826491" timestamp="10219109" />
  <Command __id="3881" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:26 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10219527" />
  <Command __id="3882" _type="MoveCaretCommand" caretOffset="1172" date="Mon Dec 04 15:17:26 EST 2023" docOffset="1172" starttimestamp="1701710826491" timestamp="10219927" />
  <Command __id="3883" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:26 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10220344" />
  <Command __id="3884" _type="MoveCaretCommand" caretOffset="1201" date="Mon Dec 04 15:17:27 EST 2023" docOffset="1201" starttimestamp="1701710826491" timestamp="10220727" />
  <Command __id="3885" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:27 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10221460" />
  <Command __id="3886" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:28 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10221895" />
  <Command __id="3887" _type="MoveCaretCommand" caretOffset="1172" date="Mon Dec 04 15:17:28 EST 2023" docOffset="1172" starttimestamp="1701710826491" timestamp="10222376" />
  <Command __id="3888" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:29 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10222764" />
  <Command __id="3889" _type="MoveCaretCommand" caretOffset="1201" date="Mon Dec 04 15:17:29 EST 2023" docOffset="1201" starttimestamp="1701710826491" timestamp="10223143" />
  <Command __id="3890" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:30 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10223643" />
  <Command __id="3891" _type="MoveCaretCommand" caretOffset="1172" date="Mon Dec 04 15:17:30 EST 2023" docOffset="1172" starttimestamp="1701710826491" timestamp="10224058" />
  <Command __id="3892" _type="MoveCaretCommand" caretOffset="1194" date="Mon Dec 04 15:17:30 EST 2023" docOffset="1194" starttimestamp="1701710826491" timestamp="10224478" />
  <Command __id="3893" _type="MoveCaretCommand" caretOffset="1201" date="Mon Dec 04 15:17:31 EST 2023" docOffset="1201" starttimestamp="1701710826491" timestamp="10225160" />
  <Command __id="3894" _type="ShellCommand" date="Mon Dec 04 15:17:32 EST 2023" starttimestamp="1701710826491" timestamp="10226006" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3895" _type="ShellCommand" date="Mon Dec 04 15:17:32 EST 2023" starttimestamp="1701710826491" timestamp="10226243" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3896" _type="SelectTextCommand" caretOffset="1021" date="Mon Dec 04 15:17:44 EST 2023" end="1906" start="1021" starttimestamp="1701710826491" timestamp="10237848" />
  <Command __id="3898" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:17:44 EST 2023" starttimestamp="1701710826491" timestamp="10238368" />
  <DocumentChange __id="3695" _type="Delete" date="Mon Dec 04 15:10:47 EST 2023" docASTNodeCount="158" docActiveCodeLength="975" docExpressionCount="119" docLength="1016" endLine="12" length="2" offset="379" startLine="12" starttimestamp="1701710826491" timestamp="9820665">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3698" _type="Delete" date="Mon Dec 04 15:10:48 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" endLine="13" length="2" offset="414" startLine="13" starttimestamp="1701710826491" timestamp="9822281">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3705" _type="Delete" date="Mon Dec 04 15:10:50 EST 2023" docASTNodeCount="163" docActiveCodeLength="1011" docExpressionCount="123" docLength="1011" endLine="14" length="3" offset="453" repeat="3" startLine="13" starttimestamp="1701710826491" timestamp="9823712" timestamp2="9824173">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="3759" _type="Insert" date="Mon Dec 04 15:14:44 EST 2023" docASTNodeCount="138" docActiveCodeLength="929" docExpressionCount="106" docLength="1013" length="2" offset="459" starttimestamp="1701710826491" timestamp="10058102">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3760" _type="Insert" date="Mon Dec 04 15:14:44 EST 2023" docASTNodeCount="100" docActiveCodeLength="908" docExpressionCount="77" docLength="1015" length="2" offset="544" starttimestamp="1701710826491" timestamp="10058103">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3761" _type="Insert" date="Mon Dec 04 15:14:44 EST 2023" docASTNodeCount="100" docActiveCodeLength="893" docExpressionCount="77" docLength="1017" length="2" offset="568" starttimestamp="1701710826491" timestamp="10058103">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3762" _type="Insert" date="Mon Dec 04 15:14:44 EST 2023" docASTNodeCount="134" docActiveCodeLength="890" docExpressionCount="105" docLength="1019" length="2" offset="586" starttimestamp="1701710826491" timestamp="10058104">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3763" _type="Insert" date="Mon Dec 04 15:14:44 EST 2023" docASTNodeCount="100" docActiveCodeLength="848" docExpressionCount="77" docLength="1021" length="2" offset="592" starttimestamp="1701710826491" timestamp="10058105">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3764" _type="Insert" date="Mon Dec 04 15:14:44 EST 2023" docASTNodeCount="81" docActiveCodeLength="723" docExpressionCount="61" docLength="1023" length="2" offset="637" starttimestamp="1701710826491" timestamp="10058105">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3765" _type="Insert" date="Mon Dec 04 15:14:44 EST 2023" docASTNodeCount="81" docActiveCodeLength="604" docExpressionCount="61" docLength="1025" length="2" offset="765" starttimestamp="1701710826491" timestamp="10058106">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3766" _type="Insert" date="Mon Dec 04 15:14:44 EST 2023" docASTNodeCount="81" docActiveCodeLength="595" docExpressionCount="61" docLength="1027" length="2" offset="887" starttimestamp="1701710826491" timestamp="10058107">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3767" _type="Insert" date="Mon Dec 04 15:14:44 EST 2023" docASTNodeCount="81" docActiveCodeLength="482" docExpressionCount="61" docLength="1029" length="2" offset="899" starttimestamp="1701710826491" timestamp="10058107">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3768" _type="Insert" date="Mon Dec 04 15:14:44 EST 2023" docASTNodeCount="81" docActiveCodeLength="479" docExpressionCount="61" docLength="1031" length="2" offset="1015" starttimestamp="1701710826491" timestamp="10058107">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3769" _type="Insert" date="Mon Dec 04 15:14:44 EST 2023" docASTNodeCount="81" docActiveCodeLength="477" docExpressionCount="61" docLength="1033" length="2" offset="1021" starttimestamp="1701710826491" timestamp="10058107">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3770" _type="Insert" date="Mon Dec 04 15:14:44 EST 2023" docASTNodeCount="81" docActiveCodeLength="475" docExpressionCount="61" docLength="1035" length="2" offset="1026" starttimestamp="1701710826491" timestamp="10058108">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3773" _type="Insert" date="Mon Dec 04 15:14:46 EST 2023" docASTNodeCount="81" docActiveCodeLength="477" docExpressionCount="61" docLength="1037" length="2" offset="1030" starttimestamp="1701710826491" timestamp="10060206">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="3775" _type="Replace" date="Mon Dec 04 15:14:46 EST 2023" docASTNodeCount="168" docActiveCodeLength="1103" docExpressionCount="120" docLength="1922" endLine="28" insertionLength="886" int_docASTNodeCount="81" int_docActiveCodeLength="476" int_docExpressionCount="61" int_docLength="1036" length="1" offset="1031" startLine="28" starttimestamp="1701710826491" timestamp="10060403">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	public static SExpression evalHelper(SExpression expr, Environment environment) {
	    // Check if the expression is an atom
	    if (expr.isAtom()) {
	        return expr;
	    }

	    // Extract the head and the tail of the list
	    SExpression head = expr.getHead();
	    SExpression tail = expr.getTail();

	    // Evaluate the head if it's not an atom
	    if (!head.isAtom()) {
	        head = evalHelper(head, environment);
	    }

	    // Evaluate the tail if it's not an atom
	    if (!tail.isAtom()) {
	        tail = evalHelper(tail, environment);
	    }

	    // Reconstruct the expression with evaluated head and tail
	    SExpression evaluatedExpression = ExpressionFactory.newInstance(head, tail);

	    // Evaluate the reconstructed expression
	    return BuiltinOperationManagerSingleton.get().getEvaluator(head.toString()).eval(evaluatedExpression, environment);
	}
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3795" _type="Replace" date="Mon Dec 04 15:15:12 EST 2023" docASTNodeCount="166" docActiveCodeLength="1094" docExpressionCount="118" docLength="1913" endLine="12" insertionLength="1" int_docASTNodeCount="166" int_docActiveCodeLength="1093" int_docExpressionCount="118" int_docLength="1912" length="10" offset="402" startLine="12" starttimestamp="1701710826491" timestamp="10085628">
    <deletedText><![CDATA[.getHead()]]></deletedText>
    <insertedText><![CDATA[\]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3797" _type="Delete" date="Mon Dec 04 15:15:12 EST 2023" docASTNodeCount="166" docActiveCodeLength="1093" docExpressionCount="118" docLength="1912" endLine="12" length="1" offset="402" startLine="12" starttimestamp="1701710826491" timestamp="10085651">
    <text><![CDATA[\]]></text>
  </DocumentChange>
  <DocumentChange __id="3897" _type="Delete" date="Mon Dec 04 15:17:44 EST 2023" docASTNodeCount="79" docActiveCodeLength="467" docExpressionCount="59" docLength="1027" endLine="53" length="885" offset="1021" startLine="28" starttimestamp="1701710826491" timestamp="10238358">
    <text><![CDATA[	public static SExpression evalHelper(SExpression expr, Environment environment) {
	    // Check if the expression is an atom
	    if (expr.isAtom()) {
	        return expr;
	    }

	    // Extract the head and the tail of the list
	    SExpression head = expr.getHead();
	    SExpression tail = expr.getTail();

	    // Evaluate the head if it's not an atom
	    if (!head.isAtom()) {
	        head = evalHelper(head, environment);
	    }

	    // Evaluate the tail if it's not an atom
	    if (!tail.isAtom()) {
	        tail = evalHelper(tail, environment);
	    }

	    // Reconstruct the expression with evaluated head and tail
	    SExpression evaluatedExpression = ExpressionFactory.newInstance(head, tail);

	    // Evaluate the reconstructed expression
	    return BuiltinOperationManagerSingleton.get().getEvaluator(head.toString()).eval(evaluatedExpression, environment);
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="3900" _type="Delete" date="Mon Dec 04 15:17:47 EST 2023" docASTNodeCount="94" docActiveCodeLength="549" docExpressionCount="65" docLength="1025" endLine="16" length="2" offset="449" startLine="16" starttimestamp="1701710826491" timestamp="10241474">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3901" _type="Delete" date="Mon Dec 04 15:17:47 EST 2023" docASTNodeCount="94" docActiveCodeLength="570" docExpressionCount="65" docLength="1023" endLine="17" length="2" offset="532" startLine="17" starttimestamp="1701710826491" timestamp="10241476">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3902" _type="Delete" date="Mon Dec 04 15:17:47 EST 2023" docASTNodeCount="94" docActiveCodeLength="585" docExpressionCount="65" docLength="1021" endLine="18" length="2" offset="554" startLine="18" starttimestamp="1701710826491" timestamp="10241478">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3903" _type="Delete" date="Mon Dec 04 15:17:47 EST 2023" docASTNodeCount="101" docActiveCodeLength="588" docExpressionCount="69" docLength="1019" endLine="19" length="2" offset="570" startLine="19" starttimestamp="1701710826491" timestamp="10241478">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="3899" _type="SelectTextCommand" caretOffset="449" date="Mon Dec 04 15:17:47 EST 2023" end="1020" start="449" starttimestamp="1701710826491" timestamp="10240994" />
  <Command __id="3912" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 15:17:47 EST 2023" starttimestamp="1701710826491" timestamp="10241499" />
  <Command __id="3913" _type="MoveCaretCommand" caretOffset="448" date="Mon Dec 04 15:17:48 EST 2023" docOffset="448" starttimestamp="1701710826491" timestamp="10241979" />
  <Command __id="3930" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:17:56 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10250493" type="Run" />
  <Command __id="3931" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:17:56 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10250493" type="Run" />
  <Command __id="3932" _type="ConsoleInput" date="Mon Dec 04 15:18:00 EST 2023" starttimestamp="1701710826491" timestamp="10253803" type="Exception">
    <outputString><![CDATA[(setq a 2)
]]></outputString>
  </Command>
  <Command __id="3933" _type="ConsoleOutput" date="Mon Dec 04 15:18:00 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10253810" type="ConsoleOutput">
    <outputString><![CDATA[2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:53)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:41)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:46)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:41)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15)"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3934" _type="ConsoleInput" date="Mon Dec 04 15:18:03 EST 2023" starttimestamp="1701710826491" timestamp="10257146" type="Exception">
    <outputString><![CDATA[(eval a)
]]></outputString>
  </Command>
  <Command __id="3935" _type="ExceptionCommand" date="Mon Dec 04 15:18:03 EST 2023" starttimestamp="1701710826491" timestamp="10257152" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:21)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3936" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:18:03 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10257157" type="Debug" />
  <Command __id="3937" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:18:03 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10257157" type="Run" />
  <Command __id="3938" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:18:03 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10257157" type="Debug" />
  <Command __id="3939" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:18:03 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10257157" type="Run" />
  <Command __id="3940" _type="MoveCaretCommand" caretOffset="391" date="Mon Dec 04 15:18:07 EST 2023" docOffset="391" starttimestamp="1701710826491" timestamp="10261172" />
  <Command __id="3941" _type="MoveCaretCommand" caretOffset="396" date="Mon Dec 04 15:18:08 EST 2023" docOffset="396" starttimestamp="1701710826491" timestamp="10261596" />
  <Command __id="3942" _type="MoveCaretCommand" caretOffset="425" date="Mon Dec 04 15:18:08 EST 2023" docOffset="425" starttimestamp="1701710826491" timestamp="10262045" />
  <Command __id="3943" _type="MoveCaretCommand" caretOffset="402" date="Mon Dec 04 15:18:09 EST 2023" docOffset="402" starttimestamp="1701710826491" timestamp="10262529" />
  <Command __id="3944" _type="MoveCaretCommand" caretOffset="401" date="Mon Dec 04 15:18:09 EST 2023" docOffset="401" starttimestamp="1701710826491" timestamp="10262800" />
  <Command __id="3945" _type="MoveCaretCommand" caretOffset="403" date="Mon Dec 04 15:18:09 EST 2023" docOffset="403" starttimestamp="1701710826491" timestamp="10263346" />
  <Command __id="3946" _type="MoveCaretCommand" caretOffset="308" date="Mon Dec 04 15:18:11 EST 2023" docOffset="308" starttimestamp="1701710826491" timestamp="10264712" />
  <Command __id="3947" _type="MoveCaretCommand" caretOffset="353" date="Mon Dec 04 15:18:11 EST 2023" docOffset="353" starttimestamp="1701710826491" timestamp="10265162" />
  <Command __id="3948" _type="MoveCaretCommand" caretOffset="402" date="Mon Dec 04 15:18:12 EST 2023" docOffset="402" starttimestamp="1701710826491" timestamp="10265882" />
  <Command __id="3950" _type="InsertStringCommand" date="Mon Dec 04 15:18:12 EST 2023" starttimestamp="1701710826491" timestamp="10266418" timestamp2="10266418">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3951" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 15:18:12 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="10266434" />
  <Command __id="3960" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 15:18:14 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="10268308" />
  <Command __id="3961" _type="MoveCaretCommand" caretOffset="246" date="Mon Dec 04 15:18:14 EST 2023" docOffset="246" starttimestamp="1701710826491" timestamp="10268317" />
  <Command __id="3962" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 15:18:15 EST 2023" starttimestamp="1701710826491" timestamp="10268622" />
  <Command __id="3963" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:18:15 EST 2023" starttimestamp="1701710826491" timestamp="10268721" />
  <Command __id="3964" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:18:15 EST 2023" starttimestamp="1701710826491" timestamp="10268727" />
  <Command __id="3965" _type="MoveCaretCommand" caretOffset="608" date="Mon Dec 04 15:18:16 EST 2023" docOffset="608" starttimestamp="1701710826491" timestamp="10269528" />
  <Command __id="3966" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:18:16 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="10269995" />
  <Command __id="3967" _type="MoveCaretCommand" caretOffset="579" date="Mon Dec 04 15:18:16 EST 2023" docOffset="579" starttimestamp="1701710826491" timestamp="10270431" />
  <Command __id="3968" _type="MoveCaretCommand" caretOffset="563" date="Mon Dec 04 15:18:17 EST 2023" docOffset="563" starttimestamp="1701710826491" timestamp="10270847" />
  <Command __id="3969" _type="MoveCaretCommand" caretOffset="611" date="Mon Dec 04 15:18:17 EST 2023" docOffset="611" starttimestamp="1701710826491" timestamp="10271279" />
  <Command __id="3972" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:18:33 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10287157" type="Run" />
  <Command __id="3973" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:18:33 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10287158" type="Run" />
  <Command __id="3974" _type="ConsoleInput" date="Mon Dec 04 15:18:37 EST 2023" starttimestamp="1701710826491" timestamp="10290653" type="Exception">
    <outputString><![CDATA[(setq a 2)
]]></outputString>
  </Command>
  <Command __id="3975" _type="ConsoleOutput" date="Mon Dec 04 15:18:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10290663" type="ConsoleOutput">
    <outputString><![CDATA[2
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"2¶")]]]></diff>
  </Command>
  <Command __id="3976" _type="ConsoleInput" date="Mon Dec 04 15:18:39 EST 2023" starttimestamp="1701710826491" timestamp="10292764" type="Exception">
    <outputString><![CDATA[(eval a)
]]></outputString>
  </Command>
  <Command __id="3977" _type="ConsoleOutput" date="Mon Dec 04 15:18:39 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10292768" type="ConsoleOutput">
    <outputString><![CDATA[A
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"2"), Diff(INSERT,"A"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3978" _type="ShellCommand" date="Mon Dec 04 15:18:45 EST 2023" starttimestamp="1701710826491" timestamp="10298758" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3979" _type="ShellCommand" date="Mon Dec 04 15:18:51 EST 2023" starttimestamp="1701710826491" timestamp="10305038" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3980" _type="ShellCommand" date="Mon Dec 04 15:18:54 EST 2023" starttimestamp="1701710826491" timestamp="10308115" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3981" _type="ShellCommand" date="Mon Dec 04 15:18:55 EST 2023" starttimestamp="1701710826491" timestamp="10308695" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3982" _type="ShellCommand" date="Mon Dec 04 15:18:56 EST 2023" starttimestamp="1701710826491" timestamp="10310034" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3983" _type="ShellCommand" date="Mon Dec 04 15:19:02 EST 2023" starttimestamp="1701710826491" timestamp="10315690" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3984" _type="PasteCommand" date="Mon Dec 04 15:19:02 EST 2023" starttimestamp="1701710826491" timestamp="10316379" />
  <Command __id="3985" _type="ExceptionCommand" date="Mon Dec 04 15:19:02 EST 2023" starttimestamp="1701710826491" timestamp="10316383" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:23)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3986" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:19:02 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10316388" type="Debug" />
  <Command __id="3987" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:19:02 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10316388" type="Run" />
  <Command __id="3988" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:19:02 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10316388" type="Debug" />
  <Command __id="3989" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:19:02 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10316388" type="Run" />
  <Command __id="3990" _type="ShellCommand" date="Mon Dec 04 15:19:16 EST 2023" starttimestamp="1701710826491" timestamp="10329657" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3991" _type="ShellCommand" date="Mon Dec 04 15:19:16 EST 2023" starttimestamp="1701710826491" timestamp="10330232" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3992" _type="ShellCommand" date="Mon Dec 04 15:19:18 EST 2023" starttimestamp="1701710826491" timestamp="10332209" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4002" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:19:28 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10342480" type="Run" />
  <Command __id="4003" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:19:28 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10342480" type="Run" />
  <Command __id="4004" _type="ShellCommand" date="Mon Dec 04 15:19:31 EST 2023" starttimestamp="1701710826491" timestamp="10344565" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4005" _type="ShellCommand" date="Mon Dec 04 15:19:32 EST 2023" starttimestamp="1701710826491" timestamp="10346365" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4006" _type="ConsoleOutput" date="Mon Dec 04 15:19:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10346706" type="ConsoleOutput">
    <outputString><![CDATA[(eval (quote (+ 1 2)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(INSERT,"(eval (quote (+ 1 2)))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4007" _type="PasteCommand" date="Mon Dec 04 15:19:33 EST 2023" starttimestamp="1701710826491" timestamp="10346709" />
  <Command __id="4008" _type="ConsoleOutput" date="Mon Dec 04 15:19:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10346715" type="ConsoleOutput">
    <outputString><![CDATA[Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(eval (quote (+ 1 2)))"), Diff(INSERT,"Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4009" _type="ConsoleOutput" date="Mon Dec 04 15:19:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10346719" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head"), Diff(INSERT,"	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)¶	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4010" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:19:33 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10346720" type="Debug" />
  <Command __id="4011" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:19:33 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10346720" type="Run" />
  <Command __id="4012" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:19:33 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10346720" type="Debug" />
  <Command __id="4013" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:19:33 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10346720" type="Run" />
  <Command __id="4014" _type="ShellCommand" date="Mon Dec 04 15:20:08 EST 2023" starttimestamp="1701710826491" timestamp="10381639" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4015" _type="ShellCommand" date="Mon Dec 04 15:20:08 EST 2023" starttimestamp="1701710826491" timestamp="10382454" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4016" _type="ShellCommand" date="Mon Dec 04 15:20:11 EST 2023" starttimestamp="1701710826491" timestamp="10384952" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4019" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:20:42 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10415563" type="Run" />
  <Command __id="4020" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:20:42 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10415563" type="Run" />
  <Command __id="4021" _type="ShellCommand" date="Mon Dec 04 15:20:44 EST 2023" starttimestamp="1701710826491" timestamp="10417815" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4022" _type="ShellCommand" date="Mon Dec 04 15:20:44 EST 2023" starttimestamp="1701710826491" timestamp="10418414" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4023" _type="ShellCommand" date="Mon Dec 04 15:20:45 EST 2023" starttimestamp="1701710826491" timestamp="10419386" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4024" _type="ShellCommand" date="Mon Dec 04 15:20:47 EST 2023" starttimestamp="1701710826491" timestamp="10420593" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4025" _type="ConsoleOutput" date="Mon Dec 04 15:20:47 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10421086" type="ConsoleOutput">
    <outputString><![CDATA[(eval (quote (+ 1 2)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)¶	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15"), Diff(INSERT,"(eval (quote (+ 1 2))"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="4026" _type="PasteCommand" date="Mon Dec 04 15:20:47 EST 2023" starttimestamp="1701710826491" timestamp="10421087" />
  <Command __id="4027" _type="ConsoleOutput" date="Mon Dec 04 15:20:47 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10421093" type="ConsoleOutput">
    <outputString><![CDATA[Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(eval (quote (+ 1 2)))"), Diff(INSERT,"Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4028" _type="ConsoleOutput" date="Mon Dec 04 15:20:47 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10421096" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head"), Diff(INSERT,"	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)¶	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4029" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:20:47 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10421097" type="Debug" />
  <Command __id="4030" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:20:47 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10421097" type="Run" />
  <Command __id="4031" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:20:47 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10421097" type="Debug" />
  <Command __id="4032" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:20:47 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10421097" type="Run" />
  <Command __id="4034" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:20:53 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10427417" type="Run" />
  <Command __id="4035" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:20:53 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10427417" type="Run" />
  <Command __id="4036" _type="PasteCommand" date="Mon Dec 04 15:20:54 EST 2023" starttimestamp="1701710826491" timestamp="10427650" />
  <Command __id="4037" _type="ExceptionCommand" date="Mon Dec 04 15:20:54 EST 2023" starttimestamp="1701710826491" timestamp="10428088" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="4038" _type="ConsoleOutput" date="Mon Dec 04 15:20:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10428092" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)¶	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶"), Diff(EQUAL,"	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15)¶")]]]></diff>
  </Command>
  <Command __id="4039" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:20:54 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10428107" type="Debug" />
  <Command __id="4040" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:20:54 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10428107" type="Run" />
  <Command __id="4041" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:20:54 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10428107" type="Debug" />
  <Command __id="4042" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:20:54 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10428107" type="Run" />
  <Command __id="4043" _type="ShellCommand" date="Mon Dec 04 15:20:55 EST 2023" starttimestamp="1701710826491" timestamp="10429463" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="3904" _type="Delete" date="Mon Dec 04 15:17:47 EST 2023" docASTNodeCount="94" docActiveCodeLength="630" docExpressionCount="65" docLength="1017" endLine="20" length="2" offset="574" startLine="20" starttimestamp="1701710826491" timestamp="10241479">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3905" _type="Delete" date="Mon Dec 04 15:17:47 EST 2023" docASTNodeCount="94" docActiveCodeLength="755" docExpressionCount="65" docLength="1015" endLine="21" length="2" offset="617" startLine="21" starttimestamp="1701710826491" timestamp="10241481">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3906" _type="Delete" date="Mon Dec 04 15:17:47 EST 2023" docASTNodeCount="94" docActiveCodeLength="874" docExpressionCount="65" docLength="1013" endLine="22" length="2" offset="743" startLine="22" starttimestamp="1701710826491" timestamp="10241482">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3907" _type="Delete" date="Mon Dec 04 15:17:47 EST 2023" docASTNodeCount="94" docActiveCodeLength="883" docExpressionCount="65" docLength="1011" endLine="23" length="2" offset="863" startLine="23" starttimestamp="1701710826491" timestamp="10241482">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3908" _type="Delete" date="Mon Dec 04 15:17:47 EST 2023" docASTNodeCount="94" docActiveCodeLength="996" docExpressionCount="65" docLength="1009" endLine="24" length="2" offset="873" startLine="24" starttimestamp="1701710826491" timestamp="10241483">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3909" _type="Delete" date="Mon Dec 04 15:17:47 EST 2023" docASTNodeCount="161" docActiveCodeLength="999" docExpressionCount="121" docLength="1007" endLine="25" length="2" offset="987" startLine="25" starttimestamp="1701710826491" timestamp="10241483">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3910" _type="Delete" date="Mon Dec 04 15:17:47 EST 2023" docASTNodeCount="161" docActiveCodeLength="1001" docExpressionCount="121" docLength="1005" endLine="26" length="2" offset="991" startLine="26" starttimestamp="1701710826491" timestamp="10241484">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3911" _type="Delete" date="Mon Dec 04 15:17:47 EST 2023" docASTNodeCount="161" docActiveCodeLength="1003" docExpressionCount="121" docLength="1003" endLine="27" length="2" offset="994" startLine="27" starttimestamp="1701710826491" timestamp="10241484">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3915" _type="Delete" date="Mon Dec 04 15:17:50 EST 2023" docASTNodeCount="161" docActiveCodeLength="1001" docExpressionCount="121" docLength="1001" endLine="29" length="2" offset="996" repeat="2" startLine="27" starttimestamp="1701710826491" timestamp="10244126" timestamp2="10244519">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="3920" _type="Delete" date="Mon Dec 04 15:17:51 EST 2023" docASTNodeCount="161" docActiveCodeLength="999" docExpressionCount="121" docLength="999" endLine="28" length="2" offset="996" repeat="2" startLine="27" starttimestamp="1701710826491" timestamp="10245207" timestamp2="10246912">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="3949" _type="Insert" date="Mon Dec 04 15:18:12 EST 2023" docASTNodeCount="163" docActiveCodeLength="1009" docExpressionCount="123" docLength="1009" length="10" offset="402" repeat="9" starttimestamp="1701710826491" timestamp="10266415" timestamp2="10267597">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <DocumentChange __id="3996" _type="Replace" date="Mon Dec 04 15:19:24 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" endLine="29" insertionLength="1014" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1009" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="10338292">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></insertedText>
  </DocumentChange>
  <Command __id="4044" _type="ShellCommand" date="Mon Dec 04 15:20:57 EST 2023" starttimestamp="1701710826491" timestamp="10430762" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4046" _type="MoveCaretCommand" caretOffset="440" date="Mon Dec 04 15:21:01 EST 2023" docOffset="440" starttimestamp="1701710826491" timestamp="10434632" />
  <Command __id="4045" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:21:01 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10434585">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.scanner.tokens.Token;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }        public IdentifierAtomImpl(Token token) {        super(token);     }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4047" _type="MoveCaretCommand" caretOffset="388" date="Mon Dec 04 15:21:02 EST 2023" docOffset="388" starttimestamp="1701710826491" timestamp="10435755" />
  <Command __id="4048" _type="MoveCaretCommand" caretOffset="388" date="Mon Dec 04 15:21:02 EST 2023" docOffset="388" starttimestamp="1701710826491" timestamp="10435755" />
  <Command __id="4049" _type="MoveCaretCommand" caretOffset="462" date="Mon Dec 04 15:21:02 EST 2023" docOffset="462" starttimestamp="1701710826491" timestamp="10436222" />
  <Command __id="4050" _type="MoveCaretCommand" caretOffset="462" date="Mon Dec 04 15:21:02 EST 2023" docOffset="462" starttimestamp="1701710826491" timestamp="10436222" />
  <Command __id="4051" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:21:03 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10437401">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4052" _type="MoveCaretCommand" caretOffset="216" date="Mon Dec 04 15:21:03 EST 2023" docOffset="216" starttimestamp="1701710826491" timestamp="10437456" />
  <Command __id="4053" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:21:04 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10437902">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.scanner.tokens.Token;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }        public IdentifierAtomImpl(Token token) {        super(token);     }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4054" _type="MoveCaretCommand" caretOffset="462" date="Mon Dec 04 15:21:04 EST 2023" docOffset="462" starttimestamp="1701710826491" timestamp="10437947" />
  <Command __id="4056" _type="MoveCaretCommand" caretOffset="216" date="Mon Dec 04 15:21:05 EST 2023" docOffset="216" starttimestamp="1701710826491" timestamp="10438922" />
  <Command __id="4066" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:21:09 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10443010" type="Run" />
  <Command __id="4067" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:21:09 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10443010" type="Run" />
  <Command __id="4069" _type="PasteCommand" date="Mon Dec 04 15:21:10 EST 2023" starttimestamp="1701710826491" timestamp="10443570" />
  <Command __id="4071" _type="UndoCommand" date="Mon Dec 04 15:21:10 EST 2023" starttimestamp="1701710826491" timestamp="10444366" />
  <Command __id="4072" _type="PasteCommand" date="Mon Dec 04 15:21:11 EST 2023" starttimestamp="1701710826491" timestamp="10444765" />
  <Command __id="4073" _type="ConsoleOutput" date="Mon Dec 04 15:21:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10444935" type="ConsoleOutput">
    <outputString><![CDATA[Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15)"), Diff(INSERT,"Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4074" _type="ConsoleOutput" date="Mon Dec 04 15:21:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10444938" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head"), Diff(INSERT,"	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)¶	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4075" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:21:11 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10444939" type="Debug" />
  <Command __id="4076" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:21:11 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10444939" type="Run" />
  <Command __id="4077" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:21:11 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10444939" type="Debug" />
  <Command __id="4078" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:21:11 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10444939" type="Run" />
  <Command __id="4055" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:21:05 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10438870">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="4059" _type="Insert" date="Mon Dec 04 15:21:07 EST 2023" docASTNodeCount="74" docActiveCodeLength="438" docExpressionCount="52" docLength="499" length="2" offset="260" starttimestamp="1701710826491" timestamp="10441231">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="4068" _type="Insert" date="Mon Dec 04 15:21:10 EST 2023" docASTNodeCount="84" docActiveCodeLength="460" docExpressionCount="61" docLength="521" length="22" offset="492" starttimestamp="1701710826491" timestamp="10443566">
    <text><![CDATA[(eval (quote (+ 1 2)))]]></text>
  </DocumentChange>
  <DocumentChange __id="4070" _type="Delete" date="Mon Dec 04 15:21:10 EST 2023" docASTNodeCount="74" docActiveCodeLength="438" docExpressionCount="52" docLength="499" endLine="14" length="22" offset="492" startLine="14" starttimestamp="1701710826491" timestamp="10444356">
    <text><![CDATA[(eval (quote (+ 1 2)))]]></text>
  </DocumentChange>
  <DocumentChange __id="4081" _type="Delete" date="Mon Dec 04 15:21:21 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" endLine="10" length="2" offset="260" startLine="10" starttimestamp="1701710826491" timestamp="10454887">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="4088" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:21:22 EST 2023" docASTNodeCount="465" docActiveCodeLength="3521" docExpressionCount="230" docLength="4303" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10456490">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaEvaluator'");	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4079" _type="MoveCaretCommand" caretOffset="282" date="Mon Dec 04 15:21:20 EST 2023" docOffset="282" starttimestamp="1701710826491" timestamp="10454412" />
  <Command __id="4080" _type="MoveCaretCommand" caretOffset="282" date="Mon Dec 04 15:21:20 EST 2023" docOffset="282" starttimestamp="1701710826491" timestamp="10454412" />
  <Command __id="4082" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 15:21:21 EST 2023" starttimestamp="1701710826491" timestamp="10454896" />
  <Command __id="4083" _type="MoveCaretCommand" caretOffset="351" date="Mon Dec 04 15:21:21 EST 2023" docOffset="351" starttimestamp="1701710826491" timestamp="10455390" />
  <Command __id="4084" _type="MoveCaretCommand" caretOffset="351" date="Mon Dec 04 15:21:21 EST 2023" docOffset="351" starttimestamp="1701710826491" timestamp="10455390" />
  <Command __id="4085" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 15:21:21 EST 2023" starttimestamp="1701710826491" timestamp="10455498" />
  <Command __id="4086" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:21:22 EST 2023" starttimestamp="1701710826491" timestamp="10455600" />
  <Command __id="4087" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:21:22 EST 2023" starttimestamp="1701710826491" timestamp="10455608" />
  <Command __id="4089" _type="MoveCaretCommand" caretOffset="3158" date="Mon Dec 04 15:21:23 EST 2023" docOffset="3394" starttimestamp="1701710826491" timestamp="10456548" />
  <Command __id="4091" _type="SelectTextCommand" caretOffset="453" date="Mon Dec 04 15:21:24 EST 2023" end="453" start="414" starttimestamp="1701710826491" timestamp="10458080" />
  <Command __id="4092" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 15:21:26 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="10459988" />
  <Command __id="4093" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 15:21:26 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="10460421" />
  <Command __id="4094" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 15:21:27 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="10461355" />
  <Command __id="4095" _type="MoveCaretCommand" caretOffset="582" date="Mon Dec 04 15:21:28 EST 2023" docOffset="582" starttimestamp="1701710826491" timestamp="10462324" />
  <Command __id="4096" _type="MoveCaretCommand" caretOffset="629" date="Mon Dec 04 15:21:29 EST 2023" docOffset="629" starttimestamp="1701710826491" timestamp="10462846" />
  <Command __id="4097" _type="MoveCaretCommand" caretOffset="629" date="Mon Dec 04 15:21:29 EST 2023" docOffset="629" starttimestamp="1701710826491" timestamp="10463341" />
  <Command __id="4098" _type="SelectTextCommand" caretOffset="878" date="Mon Dec 04 15:21:30 EST 2023" end="878" start="629" starttimestamp="1701710826491" timestamp="10463525" />
  <Command __id="4099" _type="MoveCaretCommand" caretOffset="586" date="Mon Dec 04 15:21:30 EST 2023" docOffset="586" starttimestamp="1701710826491" timestamp="10463992" />
  <Command __id="4100" _type="MoveCaretCommand" caretOffset="582" date="Mon Dec 04 15:21:30 EST 2023" docOffset="582" starttimestamp="1701710826491" timestamp="10464457" />
  <Command __id="4101" _type="MoveCaretCommand" caretOffset="586" date="Mon Dec 04 15:21:31 EST 2023" docOffset="586" starttimestamp="1701710826491" timestamp="10465239" />
  <Command __id="4090" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:21:24 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10458028">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		"), Diff(DELETE,"return expr;//		"), Diff(EQUAL,"expr = expr.getTail().getHead();"), Diff(DELETE,"//"), Diff(EQUAL,"		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="4102" _type="MoveCaretCommand" caretOffset="1009" date="Mon Dec 04 15:21:33 EST 2023" docOffset="1009" starttimestamp="1701710826491" timestamp="10467296" />
  <Command __id="4104" _type="MoveCaretCommand" caretOffset="230" date="Mon Dec 04 15:21:36 EST 2023" docOffset="311" starttimestamp="1701710826491" timestamp="10470364" />
  <Command __id="4103" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:21:36 EST 2023" docASTNodeCount="56" docActiveCodeLength="311" docExpressionCount="39" docLength="311" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10470312">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		return expr.getTail()"), Diff(INSERT,".getHead()"), Diff(EQUAL,";	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.SExpression;

public class QuoteEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		return expr.getTail().getHead();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="4106" _type="Insert" date="Mon Dec 04 15:21:40 EST 2023" docASTNodeCount="56" docActiveCodeLength="312" docExpressionCount="39" docLength="312" length="1" offset="308" starttimestamp="1701710826491" timestamp="10474324">
    <text><![CDATA[\]]></text>
  </DocumentChange>
  <DocumentChange __id="4108" _type="Delete" date="Mon Dec 04 15:21:42 EST 2023" docASTNodeCount="56" docActiveCodeLength="310" docExpressionCount="39" docLength="310" endLine="12" length="2" offset="307" repeat="2" startLine="11" starttimestamp="1701710826491" timestamp="10475659" timestamp2="10475800">
    <text><![CDATA[
\]]></text>
  </DocumentChange>
  <Command __id="4105" _type="MoveCaretCommand" caretOffset="227" date="Mon Dec 04 15:21:40 EST 2023" docOffset="308" starttimestamp="1701710826491" timestamp="10473760" />
  <Command __id="4107" _type="InsertStringCommand" date="Mon Dec 04 15:21:40 EST 2023" starttimestamp="1701710826491" timestamp="10474325" timestamp2="10474325">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="4109" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:21:42 EST 2023" starttimestamp="1701710826491" timestamp="10475662" />
  <Command __id="4111" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:21:42 EST 2023" starttimestamp="1701710826491" timestamp="10475803" />
  <Command __id="4112" _type="MoveCaretCommand" caretOffset="223" date="Mon Dec 04 15:21:42 EST 2023" docOffset="304" starttimestamp="1701710826491" timestamp="10476291" />
  <Command __id="4113" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 15:21:42 EST 2023" starttimestamp="1701710826491" timestamp="10476482" />
  <Command __id="4114" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:21:43 EST 2023" starttimestamp="1701710826491" timestamp="10476583" />
  <Command __id="4115" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:21:43 EST 2023" starttimestamp="1701710826491" timestamp="10476589" />
  <Command __id="4117" _type="MoveCaretCommand" caretOffset="1009" date="Mon Dec 04 15:21:46 EST 2023" docOffset="1009" starttimestamp="1701710826491" timestamp="10480342" />
  <Command __id="4116" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:21:46 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10480288">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="4119" _type="Delete" date="Mon Dec 04 15:21:49 EST 2023" docASTNodeCount="161" docActiveCodeLength="1004" docExpressionCount="121" docLength="1004" endLine="12" length="10" offset="402" startLine="12" starttimestamp="1701710826491" timestamp="10482987">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <Command __id="4125" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:21:56 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10490289" type="Run" />
  <Command __id="4126" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:21:56 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10490289" type="Run" />
  <Command __id="4127" _type="PasteCommand" date="Mon Dec 04 15:21:57 EST 2023" starttimestamp="1701710826491" timestamp="10491128" />
  <Command __id="4128" _type="ExceptionCommand" date="Mon Dec 04 15:21:57 EST 2023" starttimestamp="1701710826491" timestamp="10491435" type="Exception">
    <exceptionString><![CDATA[java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:22)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="4129" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:21:57 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10491440" type="Debug" />
  <Command __id="4130" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:21:57 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10491440" type="Run" />
  <Command __id="4131" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:21:57 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10491440" type="Debug" />
  <Command __id="4132" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:21:57 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10491440" type="Run" />
  <Command __id="4133" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:22:07 EST 2023" docASTNodeCount="56" docActiveCodeLength="310" docExpressionCount="39" docLength="310" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10501431">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		return expr.getTail().getHead();	}"), Diff(DELETE,""), Diff(EQUAL,"}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.SExpression;

public class QuoteEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		return expr.getTail().getHead();
	}
}
]]></snapshot>
  </Command>
  <Command __id="4134" _type="MoveCaretCommand" caretOffset="223" date="Mon Dec 04 15:22:07 EST 2023" docOffset="304" starttimestamp="1701710826491" timestamp="10501483" />
  <Command __id="4136" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 15:22:08 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="10501942" />
  <Command __id="4135" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:22:08 EST 2023" docASTNodeCount="161" docActiveCodeLength="1004" docExpressionCount="121" docLength="1004" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10501896">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail()"), Diff(DELETE,".getHead()"), Diff(EQUAL,";		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="4137" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 15:22:41 EST 2023" starttimestamp="1701710826491" timestamp="10535098" />
  <Command __id="4138" _type="BreakPointCommand" date="Mon Dec 04 15:22:41 EST 2023" lineNumber="13" starttimestamp="1701710826491" timestamp="10535099" type="BreakPointAdded" />
  <Command __id="4140" _type="MoveCaretCommand" caretOffset="351" date="Mon Dec 04 15:22:43 EST 2023" docOffset="351" starttimestamp="1701710826491" timestamp="10536546" />
  <Command __id="4149" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:22:50 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10543685" type="Run" />
  <Command __id="4150" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:22:51 EST 2023" starttimestamp="1701710826491" timestamp="10545311" />
  <Command __id="4151" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:22:51 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10545315" type="Run" />
  <Command __id="4139" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:22:42 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10536489">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4154" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:22:55 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10548768" type="Run" />
  <Command __id="4158" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:01 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10554666" type="Run" />
  <Command __id="4159" _type="MoveCaretCommand" caretOffset="556" date="Mon Dec 04 15:23:02 EST 2023" docOffset="556" starttimestamp="1701710826491" timestamp="10556012" />
  <Command __id="4162" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:07 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10561425" type="Run" />
  <Command __id="4155" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:22:57 EST 2023" docASTNodeCount="161" docActiveCodeLength="1004" docExpressionCount="121" docLength="1004" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10550918">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4166" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:23:17 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="10571281">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4170" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:23:23 EST 2023" starttimestamp="1701710826491" timestamp="10576815" />
  <Command __id="4171" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:23 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10576818" type="Run" />
  <Command __id="4172" _type="ExceptionCommand" date="Mon Dec 04 15:23:23 EST 2023" starttimestamp="1701710826491" timestamp="10576822" type="Exception">
    <exceptionString><![CDATA[java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:22)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="4173" _type="ConsoleOutput" date="Mon Dec 04 15:23:23 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10576823" type="ConsoleOutput">
    <outputString><![CDATA[
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)¶	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:24)"), Diff(EQUAL,"¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15)¶")]]]></diff>
  </Command>
  <Command __id="4174" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:23 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10576828" type="Debug" />
  <Command __id="4175" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:23:23 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10576828" type="Run" />
  <Command __id="4176" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:23 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10576828" type="Debug" />
  <Command __id="4177" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:23:23 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10576828" type="Run" />
  <Command __id="4179" _type="MoveCaretCommand" caretOffset="577" date="Mon Dec 04 15:23:25 EST 2023" docOffset="577" starttimestamp="1701710826491" timestamp="10579083" />
  <Command __id="4180" _type="MoveCaretCommand" caretOffset="402" date="Mon Dec 04 15:23:30 EST 2023" docOffset="402" starttimestamp="1701710826491" timestamp="10583766" />
  <Command __id="4178" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:23:25 EST 2023" docASTNodeCount="161" docActiveCodeLength="1004" docExpressionCount="121" docLength="1004" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10579025">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4181" _type="InsertStringCommand" date="Mon Dec 04 15:23:31 EST 2023" starttimestamp="1701710826491" timestamp="10585048" timestamp2="10585048">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4182" _type="InsertStringCommand" date="Mon Dec 04 15:23:31 EST 2023" starttimestamp="1701710826491" timestamp="10585244" timestamp2="10585244">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="4183" _type="InsertStringCommand" date="Mon Dec 04 15:23:31 EST 2023" starttimestamp="1701710826491" timestamp="10585291" timestamp2="10585291">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4184" _type="InsertStringCommand" date="Mon Dec 04 15:23:31 EST 2023" starttimestamp="1701710826491" timestamp="10585445" timestamp2="10585445">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4185" _type="InsertStringCommand" date="Mon Dec 04 15:23:32 EST 2023" starttimestamp="1701710826491" timestamp="10585725" timestamp2="10585725">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="4186" _type="InsertStringCommand" date="Mon Dec 04 15:23:32 EST 2023" starttimestamp="1701710826491" timestamp="10585948" timestamp2="10585948">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4187" _type="InsertStringCommand" date="Mon Dec 04 15:23:32 EST 2023" starttimestamp="1701710826491" timestamp="10586027" timestamp2="10586027">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4188" _type="InsertStringCommand" date="Mon Dec 04 15:23:32 EST 2023" starttimestamp="1701710826491" timestamp="10586114" timestamp2="10586114">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4189" _type="InsertStringCommand" date="Mon Dec 04 15:23:32 EST 2023" starttimestamp="1701710826491" timestamp="10586430" timestamp2="10586430">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="4190" _type="InsertStringCommand" date="Mon Dec 04 15:23:32 EST 2023" starttimestamp="1701710826491" timestamp="10586498" timestamp2="10586498">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="4191" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 15:23:33 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="10587230" />
  <Command __id="4192" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:23:34 EST 2023" starttimestamp="1701710826491" timestamp="10587870" />
  <Command __id="4193" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:23:34 EST 2023" starttimestamp="1701710826491" timestamp="10587876" />
  <Command __id="4196" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:23:39 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10592952" type="Run" />
  <Command __id="4197" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:23:39 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10592952" type="Run" />
  <Command __id="4198" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:39 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10593069" type="Run" />
  <Command __id="4199" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:39 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10593083" type="Run" />
  <Command __id="4200" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:39 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10593250" type="Run" />
  <Command __id="4201" _type="PasteCommand" date="Mon Dec 04 15:23:41 EST 2023" starttimestamp="1701710826491" timestamp="10595230" />
  <Command __id="4202" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:42 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10595856" type="Run" />
  <Command __id="4203" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:23:45 EST 2023" starttimestamp="1701710826491" timestamp="10598931" />
  <Command __id="4204" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:45 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10598934" type="Run" />
  <Command __id="4208" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:52 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10605989" type="Run" />
  <Command __id="4214" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:23:57 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10610713" type="Run" />
  <Command __id="4215" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:23:57 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10610713" type="Run" />
  <Command __id="4216" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:57 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10610823" type="Run" />
  <Command __id="4217" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:57 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10610834" type="Run" />
  <Command __id="4218" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:23:57 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10610974" type="Run" />
  <Command __id="4219" _type="ConsoleInput" date="Mon Dec 04 15:24:01 EST 2023" starttimestamp="1701710826491" timestamp="10614894" type="Exception">
    <outputString><![CDATA[(setq a 2)
]]></outputString>
  </Command>
  <Command __id="4220" _type="ConsoleOutput" date="Mon Dec 04 15:24:01 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="10614908" type="ConsoleOutput">
    <outputString><![CDATA[2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15)"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4221" _type="ConsoleInput" date="Mon Dec 04 15:24:06 EST 2023" starttimestamp="1701710826491" timestamp="10620456" type="Exception">
    <outputString><![CDATA[(eval a)
]]></outputString>
  </Command>
  <Command __id="4222" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:24:07 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10620593" type="Run" />
  <Command __id="4194" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:23:37 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10590529">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4227" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:24:11 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10624773" type="Run" />
  <Command __id="4229" _type="MoveCaretCommand" caretOffset="461" date="Mon Dec 04 15:24:12 EST 2023" docOffset="461" starttimestamp="1701710826491" timestamp="10625998" />
  <Command __id="4230" _type="MoveCaretCommand" caretOffset="461" date="Mon Dec 04 15:24:12 EST 2023" docOffset="461" starttimestamp="1701710826491" timestamp="10626001" />
  <Command __id="4231" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Mon Dec 04 15:24:13 EST 2023" starttimestamp="1701710826491" timestamp="10627334" />
  <Command __id="4232" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:24:13 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10627342" type="Debug" />
  <Command __id="4233" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:24:13 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10627342" type="Run" />
  <Command __id="4234" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:24:13 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10627342" type="Debug" />
  <Command __id="4235" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:24:13 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10627342" type="Run" />
  <Command __id="4236" _type="MoveCaretCommand" caretOffset="395" date="Mon Dec 04 15:24:17 EST 2023" docOffset="395" starttimestamp="1701710826491" timestamp="10630958" />
  <Command __id="4237" _type="MoveCaretCommand" caretOffset="395" date="Mon Dec 04 15:24:17 EST 2023" docOffset="395" starttimestamp="1701710826491" timestamp="10630958" />
  <Command __id="4238" _type="MoveCaretCommand" caretOffset="428" date="Mon Dec 04 15:24:17 EST 2023" docOffset="428" starttimestamp="1701710826491" timestamp="10631399" />
  <Command __id="4239" _type="MoveCaretCommand" caretOffset="428" date="Mon Dec 04 15:24:17 EST 2023" docOffset="428" starttimestamp="1701710826491" timestamp="10631399" />
  <Command __id="4240" _type="MoveCaretCommand" caretOffset="391" date="Mon Dec 04 15:24:18 EST 2023" docOffset="391" starttimestamp="1701710826491" timestamp="10631830" />
  <Command __id="4241" _type="MoveCaretCommand" caretOffset="391" date="Mon Dec 04 15:24:18 EST 2023" docOffset="391" starttimestamp="1701710826491" timestamp="10631830" />
  <Command __id="4242" _type="MoveCaretCommand" caretOffset="426" date="Mon Dec 04 15:24:18 EST 2023" docOffset="426" starttimestamp="1701710826491" timestamp="10632250" />
  <Command __id="4243" _type="MoveCaretCommand" caretOffset="426" date="Mon Dec 04 15:24:18 EST 2023" docOffset="426" starttimestamp="1701710826491" timestamp="10632250" />
  <Command __id="4244" _type="MoveCaretCommand" caretOffset="418" date="Mon Dec 04 15:24:19 EST 2023" docOffset="418" starttimestamp="1701710826491" timestamp="10632651" />
  <Command __id="4245" _type="MoveCaretCommand" caretOffset="418" date="Mon Dec 04 15:24:19 EST 2023" docOffset="418" starttimestamp="1701710826491" timestamp="10632651" />
  <Command __id="4246" _type="MoveCaretCommand" caretOffset="317" date="Mon Dec 04 15:24:19 EST 2023" docOffset="317" starttimestamp="1701710826491" timestamp="10633066" />
  <Command __id="4247" _type="MoveCaretCommand" caretOffset="317" date="Mon Dec 04 15:24:19 EST 2023" docOffset="317" starttimestamp="1701710826491" timestamp="10633066" />
  <Command __id="4248" _type="MoveCaretCommand" caretOffset="417" date="Mon Dec 04 15:24:21 EST 2023" docOffset="417" starttimestamp="1701710826491" timestamp="10634550" />
  <Command __id="4249" _type="MoveCaretCommand" caretOffset="417" date="Mon Dec 04 15:24:21 EST 2023" docOffset="417" starttimestamp="1701710826491" timestamp="10634550" />
  <Command __id="4250" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 15:24:21 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="10634983" />
  <Command __id="4251" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 15:24:21 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="10634983" />
  <Command __id="4252" _type="MoveCaretCommand" caretOffset="427" date="Mon Dec 04 15:24:21 EST 2023" docOffset="427" starttimestamp="1701710826491" timestamp="10635450" />
  <Command __id="4253" _type="MoveCaretCommand" caretOffset="427" date="Mon Dec 04 15:24:21 EST 2023" docOffset="427" starttimestamp="1701710826491" timestamp="10635450" />
  <Command __id="4254" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 15:24:22 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="10635850" />
  <Command __id="4255" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 15:24:22 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="10635850" />
  <Command __id="4256" _type="MoveCaretCommand" caretOffset="424" date="Mon Dec 04 15:24:22 EST 2023" docOffset="424" starttimestamp="1701710826491" timestamp="10636285" />
  <Command __id="4257" _type="MoveCaretCommand" caretOffset="424" date="Mon Dec 04 15:24:22 EST 2023" docOffset="424" starttimestamp="1701710826491" timestamp="10636285" />
  <Command __id="4258" _type="MoveCaretCommand" caretOffset="421" date="Mon Dec 04 15:24:23 EST 2023" docOffset="421" starttimestamp="1701710826491" timestamp="10636666" />
  <Command __id="4259" _type="MoveCaretCommand" caretOffset="421" date="Mon Dec 04 15:24:23 EST 2023" docOffset="421" starttimestamp="1701710826491" timestamp="10636667" />
  <Command __id="4260" _type="MoveCaretCommand" caretOffset="428" date="Mon Dec 04 15:24:23 EST 2023" docOffset="428" starttimestamp="1701710826491" timestamp="10637104" />
  <Command __id="4261" _type="MoveCaretCommand" caretOffset="428" date="Mon Dec 04 15:24:23 EST 2023" docOffset="428" starttimestamp="1701710826491" timestamp="10637104" />
  <Command __id="4262" _type="MoveCaretCommand" caretOffset="417" date="Mon Dec 04 15:24:24 EST 2023" docOffset="417" starttimestamp="1701710826491" timestamp="10637535" />
  <Command __id="4263" _type="MoveCaretCommand" caretOffset="417" date="Mon Dec 04 15:24:24 EST 2023" docOffset="417" starttimestamp="1701710826491" timestamp="10637535" />
  <Command __id="4264" _type="MoveCaretCommand" caretOffset="427" date="Mon Dec 04 15:24:24 EST 2023" docOffset="427" starttimestamp="1701710826491" timestamp="10638021" />
  <Command __id="4265" _type="MoveCaretCommand" caretOffset="427" date="Mon Dec 04 15:24:24 EST 2023" docOffset="427" starttimestamp="1701710826491" timestamp="10638021" />
  <Command __id="4266" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 15:24:24 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="10638467" />
  <Command __id="4267" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 15:24:24 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="10638467" />
  <Command __id="4268" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 15:24:25 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="10638902" />
  <Command __id="4269" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 15:24:25 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="10638902" />
  <Command __id="4270" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 15:24:25 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="10639333" />
  <Command __id="4271" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 15:24:25 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="10639333" />
  <Command __id="4276" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:24:31 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10644979" type="Run" />
  <Command __id="4277" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:24:31 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10644979" type="Run" />
  <Command __id="4278" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:24:31 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10645088" type="Run" />
  <Command __id="4279" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:24:31 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10645099" type="Run" />
  <Command __id="4280" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:24:31 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10645231" type="Run" />
  <Command __id="4281" _type="PasteCommand" date="Mon Dec 04 15:24:32 EST 2023" starttimestamp="1701710826491" timestamp="10645880" />
  <Command __id="4282" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:24:32 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10646364" type="Run" />
  <Command __id="4287" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:24:37 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10650730" type="Run" />
  <Command __id="4290" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:24:50 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10663675" type="Run" />
  <Command __id="4305" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:25:03 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10677408" type="Run" />
  <Command __id="4306" _type="MoveCaretCommand" caretOffset="573" date="Mon Dec 04 15:25:07 EST 2023" docOffset="573" starttimestamp="1701710826491" timestamp="10680972" />
  <Command __id="4307" _type="MoveCaretCommand" caretOffset="573" date="Mon Dec 04 15:25:07 EST 2023" docOffset="573" starttimestamp="1701710826491" timestamp="10680972" />
  <Command __id="4311" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:25:47 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10721286" type="Run" />
  <Command __id="4314" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:26:00 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10733617" type="Run" />
  <Command __id="4318" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:26:09 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10743270" type="Run" />
  <Command __id="4321" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:26:14 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10747576" type="Run" />
  <Command __id="4340" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:26:25 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10758632" type="Run" />
  <Command __id="4341" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 15:26:58 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="10791998" />
  <Command __id="4342" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 15:26:58 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="10791998" />
  <Command __id="4343" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:26:58 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10792000" type="Run" />
  <Command __id="4344" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Mon Dec 04 15:27:01 EST 2023" starttimestamp="1701710826491" timestamp="10794575" />
  <Command __id="4345" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:27:01 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10794582" type="Debug" />
  <Command __id="4346" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:27:01 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10794582" type="Run" />
  <Command __id="4347" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:27:01 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="10794582" type="Debug" />
  <Command __id="4348" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:27:01 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10794582" type="Run" />
  <Command __id="4349" _type="BalloonCommand" date="Mon Dec 04 15:27:06 EST 2023" message="*******************************************
Worked 27 minutes(fixed)/60 minutes(context based) from
Mon Dec 04 14:27:06 EST 2023 to Mon Dec 04 15:27:01 EST 2023
Edited 1 Projects: 
	Assignment5
Edited 3 Files: 
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java
Number of insert: 212
Number of delete: 1005
" starttimestamp="1701710826491" timestamp="10800049">
    <fineGrainedWorkTime><![CDATA[60]]></fineGrainedWorkTime>
    <insert><![CDATA[212]]></insert>
    <startTime><![CDATA[1701718026536]]></startTime>
    <endTime><![CDATA[1701721621073]]></endTime>
    <workTime><![CDATA[27]]></workTime>
    <delete><![CDATA[1005]]></delete>
  </Command>
  <Command __id="4350" _type="ShellCommand" date="Mon Dec 04 15:27:48 EST 2023" starttimestamp="1701710826491" timestamp="10841886" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4351" _type="ShellCommand" date="Mon Dec 04 15:27:48 EST 2023" starttimestamp="1701710826491" timestamp="10842030" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4352" _type="ShellCommand" date="Mon Dec 04 15:27:51 EST 2023" starttimestamp="1701710826491" timestamp="10844622" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4353" _type="ShellCommand" date="Mon Dec 04 15:31:36 EST 2023" starttimestamp="1701710826491" timestamp="11070381" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4354" _type="ShellCommand" date="Mon Dec 04 15:32:20 EST 2023" starttimestamp="1701710826491" timestamp="11114349" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4355" _type="ShellCommand" date="Mon Dec 04 15:32:38 EST 2023" starttimestamp="1701710826491" timestamp="11132363" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4356" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 15:32:40 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="11133645" />
  <Command __id="4357" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 15:32:40 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="11133645" />
  <Command __id="4358" _type="ShellCommand" date="Mon Dec 04 15:33:29 EST 2023" starttimestamp="1701710826491" timestamp="11183408" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4359" _type="ShellCommand" date="Mon Dec 04 15:33:30 EST 2023" starttimestamp="1701710826491" timestamp="11184225" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4360" _type="ShellCommand" date="Mon Dec 04 15:33:31 EST 2023" starttimestamp="1701710826491" timestamp="11185428" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4361" _type="ShellCommand" date="Mon Dec 04 15:33:32 EST 2023" starttimestamp="1701710826491" timestamp="11185794" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4362" _type="ShellCommand" date="Mon Dec 04 15:34:52 EST 2023" starttimestamp="1701710826491" timestamp="11266169" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4363" _type="ShellCommand" date="Mon Dec 04 15:34:55 EST 2023" starttimestamp="1701710826491" timestamp="11269506" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4364" _type="MoveCaretCommand" caretOffset="819" date="Mon Dec 04 15:38:24 EST 2023" docOffset="819" starttimestamp="1701710826491" timestamp="11478498" />
  <Command __id="4365" _type="MoveCaretCommand" caretOffset="819" date="Mon Dec 04 15:38:24 EST 2023" docOffset="819" starttimestamp="1701710826491" timestamp="11478499" />
  <Command __id="4366" _type="MoveCaretCommand" caretOffset="818" date="Mon Dec 04 15:38:25 EST 2023" docOffset="818" starttimestamp="1701710826491" timestamp="11479074" />
  <Command __id="4367" _type="MoveCaretCommand" caretOffset="818" date="Mon Dec 04 15:38:25 EST 2023" docOffset="818" starttimestamp="1701710826491" timestamp="11479074" />
  <Command __id="4228" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:24:12 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" projectName="Assignment5" starttimestamp="1701710826491" timestamp="10625956">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail()"), Diff(INSERT,".getHead()"), Diff(EQUAL,";		return evalHelper(expr, environment);			}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="4368" _type="MoveCaretCommand" caretOffset="353" date="Mon Dec 04 15:38:28 EST 2023" docOffset="353" starttimestamp="1701710826491" timestamp="11481612" />
  <Command __id="4369" _type="MoveCaretCommand" caretOffset="353" date="Mon Dec 04 15:38:28 EST 2023" docOffset="353" starttimestamp="1701710826491" timestamp="11481612" />
  <Command __id="4370" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 15:38:28 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="11482104" />
  <Command __id="4371" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 15:38:28 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="11482104" />
  <DocumentChange __id="4372" _type="Insert" date="Mon Dec 04 15:38:29 EST 2023" docASTNodeCount="163" docActiveCodeLength="1017" docExpressionCount="123" docLength="1017" length="3" offset="413" starttimestamp="1701710826491" timestamp="11483465">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="4373" _type="InsertStringCommand" date="Mon Dec 04 15:38:29 EST 2023" starttimestamp="1701710826491" timestamp="11483470" timestamp2="11483470">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4374" _type="InsertStringCommand" date="Mon Dec 04 15:38:29 EST 2023" starttimestamp="1701710826491" timestamp="11483470" timestamp2="11483470">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="4375" _type="Delete" date="Mon Dec 04 15:38:32 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" endLine="13" length="3" offset="413" repeat="3" startLine="12" starttimestamp="1701710826491" timestamp="11485722" timestamp2="11485972">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="4376" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:38:32 EST 2023" starttimestamp="1701710826491" timestamp="11485725" />
  <Command __id="4377" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:38:32 EST 2023" starttimestamp="1701710826491" timestamp="11485725" />
  <Command __id="4379" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:38:32 EST 2023" starttimestamp="1701710826491" timestamp="11485859" />
  <Command __id="4380" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:38:32 EST 2023" starttimestamp="1701710826491" timestamp="11485859" />
  <Command __id="4382" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:38:32 EST 2023" starttimestamp="1701710826491" timestamp="11485978" />
  <Command __id="4383" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:38:32 EST 2023" starttimestamp="1701710826491" timestamp="11485978" />
  <Command __id="4384" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Dec 04 15:38:33 EST 2023" starttimestamp="1701710826491" timestamp="11486970" />
  <Command __id="4385" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Dec 04 15:38:33 EST 2023" starttimestamp="1701710826491" timestamp="11486971" />
  <DocumentChange __id="4386" _type="Insert" date="Mon Dec 04 15:38:33 EST 2023" docASTNodeCount="139" docActiveCodeLength="945" docExpressionCount="107" docLength="1016" length="2" offset="309" starttimestamp="1701710826491" timestamp="11487225">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="4387" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 15:38:33 EST 2023" starttimestamp="1701710826491" timestamp="11487246" />
  <DocumentChange __id="4388" _type="Delete" date="Mon Dec 04 15:38:34 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" endLine="11" length="2" offset="309" startLine="11" starttimestamp="1701710826491" timestamp="11488158">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="4389" _type="UndoCommand" date="Mon Dec 04 15:38:34 EST 2023" starttimestamp="1701710826491" timestamp="11488164" />
  <Command __id="4390" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Dec 04 15:38:34 EST 2023" starttimestamp="1701710826491" timestamp="11488486" />
  <Command __id="4391" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Dec 04 15:38:34 EST 2023" starttimestamp="1701710826491" timestamp="11488486" />
  <Command __id="4392" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Dec 04 15:38:35 EST 2023" starttimestamp="1701710826491" timestamp="11488819" />
  <Command __id="4393" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Dec 04 15:38:35 EST 2023" starttimestamp="1701710826491" timestamp="11488819" />
  <Command __id="4395" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 15:38:35 EST 2023" starttimestamp="1701710826491" timestamp="11489467" />
  <Command __id="4396" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 15:38:38 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="11491561" />
  <Command __id="4397" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 15:38:38 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="11491561" />
  <Command __id="4399" _type="InsertStringCommand" date="Mon Dec 04 15:38:38 EST 2023" starttimestamp="1701710826491" timestamp="11491934" timestamp2="11491934">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4400" _type="InsertStringCommand" date="Mon Dec 04 15:38:38 EST 2023" starttimestamp="1701710826491" timestamp="11491934" timestamp2="11491934">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4402" _type="InsertStringCommand" date="Mon Dec 04 15:38:38 EST 2023" starttimestamp="1701710826491" timestamp="11492270" timestamp2="11492270">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4403" _type="InsertStringCommand" date="Mon Dec 04 15:38:38 EST 2023" starttimestamp="1701710826491" timestamp="11492270" timestamp2="11492270">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4405" _type="InsertStringCommand" date="Mon Dec 04 15:38:38 EST 2023" starttimestamp="1701710826491" timestamp="11492336" timestamp2="11492336">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4406" _type="InsertStringCommand" date="Mon Dec 04 15:38:38 EST 2023" starttimestamp="1701710826491" timestamp="11492336" timestamp2="11492336">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4408" _type="InsertStringCommand" date="Mon Dec 04 15:38:38 EST 2023" starttimestamp="1701710826491" timestamp="11492451" timestamp2="11492451">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4409" _type="InsertStringCommand" date="Mon Dec 04 15:38:38 EST 2023" starttimestamp="1701710826491" timestamp="11492451" timestamp2="11492451">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4411" _type="InsertStringCommand" date="Mon Dec 04 15:38:39 EST 2023" starttimestamp="1701710826491" timestamp="11492512" timestamp2="11492512">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4412" _type="InsertStringCommand" date="Mon Dec 04 15:38:39 EST 2023" starttimestamp="1701710826491" timestamp="11492512" timestamp2="11492512">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4414" _type="InsertStringCommand" date="Mon Dec 04 15:38:39 EST 2023" starttimestamp="1701710826491" timestamp="11492624" timestamp2="11492624">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4415" _type="InsertStringCommand" date="Mon Dec 04 15:38:39 EST 2023" starttimestamp="1701710826491" timestamp="11492624" timestamp2="11492624">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4417" _type="InsertStringCommand" date="Mon Dec 04 15:38:39 EST 2023" starttimestamp="1701710826491" timestamp="11492674" timestamp2="11492674">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4418" _type="InsertStringCommand" date="Mon Dec 04 15:38:39 EST 2023" starttimestamp="1701710826491" timestamp="11492674" timestamp2="11492674">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4420" _type="InsertStringCommand" date="Mon Dec 04 15:38:39 EST 2023" starttimestamp="1701710826491" timestamp="11492771" timestamp2="11492771">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4421" _type="InsertStringCommand" date="Mon Dec 04 15:38:39 EST 2023" starttimestamp="1701710826491" timestamp="11492771" timestamp2="11492771">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4423" _type="InsertStringCommand" date="Mon Dec 04 15:38:40 EST 2023" starttimestamp="1701710826491" timestamp="11493751" timestamp2="11493751">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="4424" _type="InsertStringCommand" date="Mon Dec 04 15:38:40 EST 2023" starttimestamp="1701710826491" timestamp="11493751" timestamp2="11493751">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="4426" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:38:41 EST 2023" starttimestamp="1701710826491" timestamp="11494513" />
  <Command __id="4427" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:38:41 EST 2023" starttimestamp="1701710826491" timestamp="11494514" />
  <Command __id="4429" _type="UndoCommand" date="Mon Dec 04 15:38:41 EST 2023" starttimestamp="1701710826491" timestamp="11495299" />
  <Command __id="4431" _type="UndoCommand" date="Mon Dec 04 15:38:42 EST 2023" starttimestamp="1701710826491" timestamp="11495542" />
  <Command __id="4433" _type="UndoCommand" date="Mon Dec 04 15:38:42 EST 2023" starttimestamp="1701710826491" timestamp="11495730" />
  <Command __id="4434" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 15:38:43 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="11496880" />
  <Command __id="4435" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 15:38:43 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="11496880" />
  <Command __id="4436" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 15:38:43 EST 2023" starttimestamp="1701710826491" timestamp="11497005" />
  <Command __id="4437" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:38:43 EST 2023" starttimestamp="1701710826491" timestamp="11497102" />
  <Command __id="4438" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:38:43 EST 2023" starttimestamp="1701710826491" timestamp="11497114" />
  <Command __id="4439" _type="ShellCommand" date="Mon Dec 04 15:38:44 EST 2023" starttimestamp="1701710826491" timestamp="11498385" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="4394" _type="Insert" date="Mon Dec 04 15:38:35 EST 2023" docASTNodeCount="158" docActiveCodeLength="975" docExpressionCount="119" docLength="1016" length="2" offset="414" starttimestamp="1701710826491" timestamp="11489445">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="4398" _type="Insert" date="Mon Dec 04 15:38:38 EST 2023" docASTNodeCount="160" docActiveCodeLength="986" docExpressionCount="120" docLength="1027" length="11" offset="413" repeat="9" starttimestamp="1701710826491" timestamp="11491929" timestamp2="11493749">
    <text><![CDATA[
		return B]]></text>
  </DocumentChange>
  <DocumentChange __id="4425" _type="Delete" date="Mon Dec 04 15:38:41 EST 2023" docASTNodeCount="159" docActiveCodeLength="985" docExpressionCount="119" docLength="1026" endLine="13" length="1" offset="423" startLine="13" starttimestamp="1701710826491" timestamp="11494511">
    <text><![CDATA[B]]></text>
  </DocumentChange>
  <DocumentChange __id="4428" _type="Insert" date="Mon Dec 04 15:38:41 EST 2023" docASTNodeCount="160" docActiveCodeLength="986" docExpressionCount="120" docLength="1027" length="1" offset="423" starttimestamp="1701710826491" timestamp="11495298">
    <text><![CDATA[B]]></text>
  </DocumentChange>
  <DocumentChange __id="4430" _type="Delete" date="Mon Dec 04 15:38:42 EST 2023" docASTNodeCount="158" docActiveCodeLength="975" docExpressionCount="119" docLength="1016" endLine="13" length="11" offset="413" startLine="12" starttimestamp="1701710826491" timestamp="11495535">
    <text><![CDATA[
		return B]]></text>
  </DocumentChange>
  <DocumentChange __id="4432" _type="Delete" date="Mon Dec 04 15:38:42 EST 2023" docASTNodeCount="163" docActiveCodeLength="1014" docExpressionCount="123" docLength="1014" endLine="13" length="2" offset="414" startLine="13" starttimestamp="1701710826491" timestamp="11495724">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="4444" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:39:59 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="11573219" type="Run" />
  <Command __id="4445" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:39:59 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="11573219" type="Run" />
  <Command __id="4446" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:39:59 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11573325" type="Run" />
  <Command __id="4447" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:39:59 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11573334" type="Run" />
  <Command __id="4448" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:39:59 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11573493" type="Run" />
  <Command __id="4449" _type="ConsoleInput" date="Mon Dec 04 15:40:06 EST 2023" starttimestamp="1701710826491" timestamp="11580387" type="Exception">
    <outputString><![CDATA[(eval a)
]]></outputString>
  </Command>
  <Command __id="4450" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:40:07 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11581158" type="Run" />
  <Command __id="4451" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:40:10 EST 2023" starttimestamp="1701710826491" timestamp="11583595" />
  <Command __id="4452" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:40:10 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11583598" type="Run" />
  <Command __id="4453" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:40:12 EST 2023" starttimestamp="1701710826491" timestamp="11585591" />
  <Command __id="4454" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:40:12 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11585594" type="Run" />
  <Command __id="4455" _type="MoveCaretCommand" caretOffset="405" date="Mon Dec 04 15:40:15 EST 2023" docOffset="405" starttimestamp="1701710826491" timestamp="11588830" />
  <Command __id="4456" _type="MoveCaretCommand" caretOffset="405" date="Mon Dec 04 15:40:15 EST 2023" docOffset="405" starttimestamp="1701710826491" timestamp="11588830" />
  <DocumentChange __id="4441" _type="Replace" date="Mon Dec 04 15:39:58 EST 2023" docASTNodeCount="174" docActiveCodeLength="1091" docExpressionCount="131" docLength="1091" endLine="31" insertionLength="1091" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1014" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="11572014">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
		
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		Evaluator temp = BuiltinOperationManagerSingleton.get().getEvaluator("temp");
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></insertedText>
  </DocumentChange>
  <Command __id="4461" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:40:19 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11592727" type="Debug" />
  <Command __id="4462" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:40:19 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="11592727" type="Run" />
  <Command __id="4463" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:40:19 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11592727" type="Debug" />
  <Command __id="4464" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:40:19 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="11592727" type="Run" />
  <Command __id="4465" _type="MoveCaretCommand" caretOffset="536" date="Mon Dec 04 15:40:19 EST 2023" docOffset="536" starttimestamp="1701710826491" timestamp="11593359" />
  <Command __id="4466" _type="MoveCaretCommand" caretOffset="536" date="Mon Dec 04 15:40:19 EST 2023" docOffset="536" starttimestamp="1701710826491" timestamp="11593359" />
  <Command __id="4467" _type="MoveCaretCommand" caretOffset="533" date="Mon Dec 04 15:40:20 EST 2023" docOffset="533" starttimestamp="1701710826491" timestamp="11593752" />
  <Command __id="4468" _type="MoveCaretCommand" caretOffset="533" date="Mon Dec 04 15:40:20 EST 2023" docOffset="533" starttimestamp="1701710826491" timestamp="11593752" />
  <Command __id="4469" _type="MoveCaretCommand" caretOffset="483" date="Mon Dec 04 15:40:20 EST 2023" docOffset="483" starttimestamp="1701710826491" timestamp="11594201" />
  <Command __id="4470" _type="MoveCaretCommand" caretOffset="483" date="Mon Dec 04 15:40:20 EST 2023" docOffset="483" starttimestamp="1701710826491" timestamp="11594201" />
  <Command __id="4471" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:40:27 EST 2023" docASTNodeCount="465" docActiveCodeLength="3521" docExpressionCount="230" docLength="4303" projectName="Assignment5" starttimestamp="1701710826491" timestamp="11601265">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaEvaluator'");	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4472" _type="MoveCaretCommand" caretOffset="3158" date="Mon Dec 04 15:40:27 EST 2023" docOffset="3394" starttimestamp="1701710826491" timestamp="11601330" />
  <Command __id="4473" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:40:28 EST 2023" docASTNodeCount="56" docActiveCodeLength="310" docExpressionCount="39" docLength="310" projectName="Assignment5" starttimestamp="1701710826491" timestamp="11602249">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4474" _type="MoveCaretCommand" caretOffset="223" date="Mon Dec 04 15:40:28 EST 2023" docOffset="304" starttimestamp="1701710826491" timestamp="11602311" />
  <Command __id="4475" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:40:29 EST 2023" docASTNodeCount="174" docActiveCodeLength="1091" docExpressionCount="131" docLength="1091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="11602808">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		"), Diff(INSERT,"Evaluator temp = BuiltinOperationManagerSingleton.get().getEvaluator("temp");		"), Diff(EQUAL,"return evalHelper(expr, environment);	"), Diff(DELETE,"		"), Diff(EQUAL,"}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		Evaluator temp = BuiltinOperationManagerSingleton.get().getEvaluator("temp");
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="4476" _type="MoveCaretCommand" caretOffset="483" date="Mon Dec 04 15:40:29 EST 2023" docOffset="483" starttimestamp="1701710826491" timestamp="11602861" />
  <Command __id="4477" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:40:30 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="11603727">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.scanner.tokens.Token;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }        public IdentifierAtomImpl(Token token) {        super(token);     }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4478" _type="MoveCaretCommand" caretOffset="462" date="Mon Dec 04 15:40:30 EST 2023" docOffset="462" starttimestamp="1701710826491" timestamp="11603795" />
  <Command __id="4480" _type="MoveCaretCommand" caretOffset="483" date="Mon Dec 04 15:40:31 EST 2023" docOffset="483" starttimestamp="1701710826491" timestamp="11604542" />
  <Command __id="4481" _type="ShellCommand" date="Mon Dec 04 15:40:31 EST 2023" starttimestamp="1701710826491" timestamp="11604664" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4482" _type="ShellCommand" date="Mon Dec 04 15:40:31 EST 2023" starttimestamp="1701710826491" timestamp="11605098" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4483" _type="ShellCommand" date="Mon Dec 04 15:40:32 EST 2023" starttimestamp="1701710826491" timestamp="11606061" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4484" _type="ShellCommand" date="Mon Dec 04 15:43:11 EST 2023" starttimestamp="1701710826491" timestamp="11764544" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4486" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:43:11 EST 2023" starttimestamp="1701710826491" timestamp="11764929" />
  <Command __id="4487" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:43:11 EST 2023" starttimestamp="1701710826491" timestamp="11764938" />
  <Command __id="4488" _type="ShellCommand" date="Mon Dec 04 15:43:13 EST 2023" starttimestamp="1701710826491" timestamp="11766696" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4489" _type="ShellCommand" date="Mon Dec 04 15:46:05 EST 2023" starttimestamp="1701710826491" timestamp="11939328" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4490" _type="ShellCommand" date="Mon Dec 04 15:46:06 EST 2023" starttimestamp="1701710826491" timestamp="11939742" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4491" _type="ShellCommand" date="Mon Dec 04 15:46:06 EST 2023" starttimestamp="1701710826491" timestamp="11940251" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4492" _type="ShellCommand" date="Mon Dec 04 15:46:07 EST 2023" starttimestamp="1701710826491" timestamp="11940668" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4493" _type="ShellCommand" date="Mon Dec 04 15:46:08 EST 2023" starttimestamp="1701710826491" timestamp="11942150" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4495" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:46:09 EST 2023" starttimestamp="1701710826491" timestamp="11942516" />
  <Command __id="4496" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:46:09 EST 2023" starttimestamp="1701710826491" timestamp="11942524" />
  <Command __id="4497" _type="MoveCaretCommand" caretOffset="308" date="Mon Dec 04 15:46:09 EST 2023" docOffset="308" starttimestamp="1701710826491" timestamp="11942697" />
  <Command __id="4498" _type="MoveCaretCommand" caretOffset="308" date="Mon Dec 04 15:46:09 EST 2023" docOffset="308" starttimestamp="1701710826491" timestamp="11942697" />
  <Command __id="4499" _type="ShellCommand" date="Mon Dec 04 15:46:16 EST 2023" starttimestamp="1701710826491" timestamp="11949725" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4501" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:46:19 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="11953386" type="Run" />
  <Command __id="4502" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:46:19 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="11953386" type="Run" />
  <Command __id="4503" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:46:19 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11953496" type="Run" />
  <Command __id="4504" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:46:19 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11953506" type="Run" />
  <Command __id="4505" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:46:20 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11953653" type="Run" />
  <Command __id="4506" _type="ConsoleOutput" date="Mon Dec 04 15:46:20 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="11954263" type="ConsoleOutput">
    <outputString><![CDATA[(eval (quote (+ 1 2)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"2"), Diff(INSERT,"(eval (quote (+ 1 2)))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4507" _type="PasteCommand" date="Mon Dec 04 15:46:20 EST 2023" starttimestamp="1701710826491" timestamp="11954264" />
  <Command __id="4508" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:46:21 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11955026" type="Run" />
  <Command __id="4509" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:46:24 EST 2023" starttimestamp="1701710826491" timestamp="11957665" />
  <Command __id="4510" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:46:24 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11957669" type="Run" />
  <Command __id="4511" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Mon Dec 04 15:46:25 EST 2023" starttimestamp="1701710826491" timestamp="11958772" />
  <Command __id="4512" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:46:25 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11958775" type="Run" />
  <Command __id="4515" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:46:32 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11965712" type="Run" />
  <Command __id="4520" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:04 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="11997761" type="Run" />
  <Command __id="4523" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:10 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12003689" type="Run" />
  <Command __id="4524" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:10 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12003693" type="Run" />
  <Command __id="4525" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.commands.ForceReturn" date="Mon Dec 04 15:47:10 EST 2023" starttimestamp="1701710826491" timestamp="12003695" />
  <Command __id="4526" _type="ShellCommand" date="Mon Dec 04 15:47:10 EST 2023" starttimestamp="1701710826491" timestamp="12003754" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4527" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:10 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12003815" type="Run" />
  <Command __id="4528" _type="ShellCommand" date="Mon Dec 04 15:47:11 EST 2023" starttimestamp="1701710826491" timestamp="12005466" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4529" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:47:12 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="12005527" />
  <Command __id="4530" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:47:12 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="12005527" />
  <Command __id="4531" _type="SelectTextCommand" caretOffset="683" date="Mon Dec 04 15:47:15 EST 2023" end="683" start="659" starttimestamp="1701710826491" timestamp="12009401" />
  <Command __id="4532" _type="SelectTextCommand" caretOffset="683" date="Mon Dec 04 15:47:15 EST 2023" end="683" start="659" starttimestamp="1701710826491" timestamp="12009401" />
  <Command __id="4533" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Mon Dec 04 15:47:21 EST 2023" starttimestamp="1701710826491" timestamp="12014940" />
  <Command __id="4534" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:21 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12014945" type="Debug" />
  <Command __id="4535" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:47:21 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12014945" type="Run" />
  <Command __id="4536" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:21 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12014945" type="Debug" />
  <Command __id="4537" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:47:21 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12014945" type="Run" />
  <Command __id="4540" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:47:23 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12017345" type="Run" />
  <Command __id="4541" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:47:23 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12017345" type="Run" />
  <Command __id="4542" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:23 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12017454" type="Run" />
  <Command __id="4543" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:23 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12017467" type="Run" />
  <Command __id="4544" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:24 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12017611" type="Run" />
  <Command __id="4545" _type="ConsoleOutput" date="Mon Dec 04 15:47:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12018215" type="ConsoleOutput">
    <outputString><![CDATA[(eval (quote (+ 1 2)))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(eval (quote (+ 1 2)))¶")]]]></diff>
  </Command>
  <Command __id="4546" _type="PasteCommand" date="Mon Dec 04 15:47:24 EST 2023" starttimestamp="1701710826491" timestamp="12018216" />
  <Command __id="4547" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:24 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12018331" type="Run" />
  <Command __id="4548" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:47:26 EST 2023" starttimestamp="1701710826491" timestamp="12020352" />
  <Command __id="4549" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:26 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12020356" type="Run" />
  <Command __id="4550" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Mon Dec 04 15:47:27 EST 2023" starttimestamp="1701710826491" timestamp="12021097" />
  <Command __id="4551" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:27 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12021099" type="Run" />
  <Command __id="4552" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:47:28 EST 2023" starttimestamp="1701710826491" timestamp="12022126" />
  <Command __id="4553" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:28 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12022130" type="Run" />
  <Command __id="4578" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:40 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12034455" type="Run" />
  <Command __id="4579" _type="MoveCaretCommand" caretOffset="458" date="Mon Dec 04 15:47:58 EST 2023" docOffset="458" starttimestamp="1701710826491" timestamp="12052277" />
  <Command __id="4580" _type="MoveCaretCommand" caretOffset="458" date="Mon Dec 04 15:47:58 EST 2023" docOffset="458" starttimestamp="1701710826491" timestamp="12052277" />
  <Command __id="4581" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:47:58 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12052280" type="Run" />
  <Command __id="4582" _type="SelectTextCommand" caretOffset="931" date="Mon Dec 04 15:47:59 EST 2023" end="931" start="918" starttimestamp="1701710826491" timestamp="12052872" />
  <Command __id="4583" _type="SelectTextCommand" caretOffset="931" date="Mon Dec 04 15:47:59 EST 2023" end="931" start="918" starttimestamp="1701710826491" timestamp="12052872" />
  <Command __id="4584" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:48:00 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="12053810" />
  <Command __id="4585" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:48:00 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="12053810" />
  <Command __id="4479" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:40:30 EST 2023" docASTNodeCount="174" docActiveCodeLength="1091" docExpressionCount="131" docLength="1091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="11604473">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		Evaluator temp = BuiltinOperationManagerSingleton.get().getEvaluator("temp");		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		if(!expr.getTail().getHead().isAtom()) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="4485" _type="Replace" date="Mon Dec 04 15:43:11 EST 2023" docASTNodeCount="163" docActiveCodeLength="1011" docExpressionCount="123" docLength="1011" endLine="31" insertionLength="1011" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1091" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="11764847">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		Evaluator temp = BuiltinOperationManagerSingleton.get().getEvaluator("temp");
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4494" _type="Replace" date="Mon Dec 04 15:46:08 EST 2023" docASTNodeCount="174" docActiveCodeLength="1108" docExpressionCount="131" docLength="1108" endLine="30" insertionLength="1108" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1011" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="11942415">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		if(!expr.getTail().getHead().isAtom()) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		boolean isOperator = BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().toString()) != null;
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></insertedText>
  </DocumentChange>
  <Command __id="4586" _type="MoveCaretCommand" caretOffset="684" date="Mon Dec 04 15:48:01 EST 2023" docOffset="684" starttimestamp="1701710826491" timestamp="12054987" />
  <Command __id="4587" _type="MoveCaretCommand" caretOffset="684" date="Mon Dec 04 15:48:01 EST 2023" docOffset="684" starttimestamp="1701710826491" timestamp="12054987" />
  <DocumentChange __id="4588" _type="Insert" date="Mon Dec 04 15:48:03 EST 2023" docASTNodeCount="174" docActiveCodeLength="1112" docExpressionCount="131" docLength="1112" length="4" offset="684" repeat="4" starttimestamp="1701710826491" timestamp="12056950" timestamp2="12057433">
    <text><![CDATA[getH]]></text>
  </DocumentChange>
  <Command __id="4589" _type="InsertStringCommand" date="Mon Dec 04 15:48:03 EST 2023" starttimestamp="1701710826491" timestamp="12056957" timestamp2="12056957">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="4590" _type="InsertStringCommand" date="Mon Dec 04 15:48:03 EST 2023" starttimestamp="1701710826491" timestamp="12056957" timestamp2="12056957">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="4592" _type="InsertStringCommand" date="Mon Dec 04 15:48:03 EST 2023" starttimestamp="1701710826491" timestamp="12057029" timestamp2="12057029">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4593" _type="InsertStringCommand" date="Mon Dec 04 15:48:03 EST 2023" starttimestamp="1701710826491" timestamp="12057029" timestamp2="12057029">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4595" _type="InsertStringCommand" date="Mon Dec 04 15:48:03 EST 2023" starttimestamp="1701710826491" timestamp="12057126" timestamp2="12057126">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4596" _type="InsertStringCommand" date="Mon Dec 04 15:48:03 EST 2023" starttimestamp="1701710826491" timestamp="12057126" timestamp2="12057126">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4598" _type="InsertStringCommand" date="Mon Dec 04 15:48:03 EST 2023" starttimestamp="1701710826491" timestamp="12057437" timestamp2="12057437">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="4599" _type="InsertStringCommand" date="Mon Dec 04 15:48:03 EST 2023" starttimestamp="1701710826491" timestamp="12057437" timestamp2="12057437">
    <data><![CDATA[H]]></data>
  </Command>
  <DocumentChange __id="4600" _type="Delete" date="Mon Dec 04 15:48:04 EST 2023" docASTNodeCount="174" docActiveCodeLength="1111" docExpressionCount="131" docLength="1111" endLine="20" length="1" offset="687" startLine="20" starttimestamp="1701710826491" timestamp="12057768">
    <text><![CDATA[H]]></text>
  </DocumentChange>
  <Command __id="4601" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:48:04 EST 2023" starttimestamp="1701710826491" timestamp="12057771" />
  <Command __id="4602" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:48:04 EST 2023" starttimestamp="1701710826491" timestamp="12057771" />
  <Command __id="4604" _type="InsertStringCommand" date="Mon Dec 04 15:48:04 EST 2023" starttimestamp="1701710826491" timestamp="12057996" timestamp2="12057996">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="4605" _type="InsertStringCommand" date="Mon Dec 04 15:48:04 EST 2023" starttimestamp="1701710826491" timestamp="12057996" timestamp2="12057996">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="4607" _type="InsertStringCommand" date="Mon Dec 04 15:48:04 EST 2023" starttimestamp="1701710826491" timestamp="12058234" timestamp2="12058234">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4608" _type="InsertStringCommand" date="Mon Dec 04 15:48:04 EST 2023" starttimestamp="1701710826491" timestamp="12058234" timestamp2="12058234">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4610" _type="InsertStringCommand" date="Mon Dec 04 15:48:04 EST 2023" starttimestamp="1701710826491" timestamp="12058343" timestamp2="12058343">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4611" _type="InsertStringCommand" date="Mon Dec 04 15:48:04 EST 2023" starttimestamp="1701710826491" timestamp="12058343" timestamp2="12058343">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4613" _type="InsertStringCommand" date="Mon Dec 04 15:48:04 EST 2023" starttimestamp="1701710826491" timestamp="12058430" timestamp2="12058430">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4614" _type="InsertStringCommand" date="Mon Dec 04 15:48:04 EST 2023" starttimestamp="1701710826491" timestamp="12058430" timestamp2="12058430">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4616" _type="InsertStringCommand" date="Mon Dec 04 15:48:05 EST 2023" starttimestamp="1701710826491" timestamp="12058713" timestamp2="12058713">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="4617" _type="InsertStringCommand" date="Mon Dec 04 15:48:05 EST 2023" starttimestamp="1701710826491" timestamp="12058713" timestamp2="12058713">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="4619" _type="InsertStringCommand" date="Mon Dec 04 15:48:05 EST 2023" starttimestamp="1701710826491" timestamp="12058750" timestamp2="12058750">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="4620" _type="InsertStringCommand" date="Mon Dec 04 15:48:05 EST 2023" starttimestamp="1701710826491" timestamp="12058750" timestamp2="12058750">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="4622" _type="InsertStringCommand" date="Mon Dec 04 15:48:05 EST 2023" starttimestamp="1701710826491" timestamp="12058995" timestamp2="12058995">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4623" _type="InsertStringCommand" date="Mon Dec 04 15:48:05 EST 2023" starttimestamp="1701710826491" timestamp="12058995" timestamp2="12058995">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4624" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 15:48:05 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12059003" />
  <Command __id="4625" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 15:48:06 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12059700" />
  <Command __id="4626" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:48:06 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="12059720" />
  <Command __id="4627" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:48:06 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="12059720" />
  <Command __id="4628" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 15:48:07 EST 2023" starttimestamp="1701710826491" timestamp="12060941" />
  <Command __id="4629" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:48:07 EST 2023" starttimestamp="1701710826491" timestamp="12061038" />
  <Command __id="4630" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:48:07 EST 2023" starttimestamp="1701710826491" timestamp="12061046" />
  <Command __id="4631" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:48:07 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12061075" type="Run" />
  <Command __id="4632" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:48:07 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12061075" type="Run" />
  <Command __id="4638" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:48:09 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12063266" type="Run" />
  <Command __id="4639" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:48:09 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12063266" type="Run" />
  <Command __id="4640" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:48:09 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12063376" type="Run" />
  <Command __id="4641" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:48:09 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12063389" type="Run" />
  <Command __id="4642" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:48:10 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12063531" type="Run" />
  <Command __id="4643" _type="ConsoleOutput" date="Mon Dec 04 15:48:10 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12064350" type="ConsoleOutput">
    <outputString><![CDATA[(eval (quote (+ 1 2)))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(eval (quote (+ 1 2)))¶")]]]></diff>
  </Command>
  <Command __id="4644" _type="PasteCommand" date="Mon Dec 04 15:48:10 EST 2023" starttimestamp="1701710826491" timestamp="12064352" />
  <Command __id="4645" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:48:10 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12064478" type="Run" />
  <Command __id="4655" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:48:40 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12093578" type="Run" />
  <DocumentChange __id="4603" _type="Insert" date="Mon Dec 04 15:48:04 EST 2023" docASTNodeCount="176" docActiveCodeLength="1118" docExpressionCount="133" docLength="1118" length="7" offset="687" repeat="7" starttimestamp="1701710826491" timestamp="12057992" timestamp2="12058991">
    <text><![CDATA[Head().]]></text>
  </DocumentChange>
  <Command __id="4665" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:50:01 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="12174644">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="4660" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:49:59 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12173485" type="Run" />
  <Command __id="4661" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 15:49:59 EST 2023" starttimestamp="1701710826491" timestamp="12173487" />
  <Command __id="4662" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:50:00 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12174338" type="Run" />
  <Command __id="4663" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 15:50:00 EST 2023" starttimestamp="1701710826491" timestamp="12174339" />
  <Command __id="4664" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:50:00 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12174456" type="Run" />
  <Command __id="4666" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 15:50:01 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="12174696" />
  <Command __id="4667" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:50:01 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12175444" type="Run" />
  <Command __id="4668" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 15:50:01 EST 2023" starttimestamp="1701710826491" timestamp="12175444" />
  <Command __id="4669" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:50:01 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12175453" type="Debug" />
  <Command __id="4670" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:50:01 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12175453" type="Run" />
  <Command __id="4671" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:50:01 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12175453" type="Debug" />
  <Command __id="4672" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:50:01 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12175453" type="Run" />
  <Command __id="4673" _type="ExceptionCommand" date="Mon Dec 04 15:50:01 EST 2023" starttimestamp="1701710826491" timestamp="12175460" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:21)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:23)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="4675" _type="MoveCaretCommand" caretOffset="542" date="Mon Dec 04 15:50:08 EST 2023" docOffset="542" starttimestamp="1701710826491" timestamp="12181904" />
  <Command __id="4676" _type="MoveCaretCommand" caretOffset="620" date="Mon Dec 04 15:50:11 EST 2023" docOffset="620" starttimestamp="1701710826491" timestamp="12184658" />
  <Command __id="4677" _type="MoveCaretCommand" caretOffset="620" date="Mon Dec 04 15:50:11 EST 2023" docOffset="620" starttimestamp="1701710826491" timestamp="12184658" />
  <Command __id="4678" _type="MoveCaretCommand" caretOffset="683" date="Mon Dec 04 15:51:13 EST 2023" docOffset="683" starttimestamp="1701710826491" timestamp="12246882" />
  <Command __id="4679" _type="MoveCaretCommand" caretOffset="683" date="Mon Dec 04 15:51:13 EST 2023" docOffset="683" starttimestamp="1701710826491" timestamp="12246882" />
  <Command __id="4680" _type="MoveCaretCommand" caretOffset="677" date="Mon Dec 04 15:51:14 EST 2023" docOffset="677" starttimestamp="1701710826491" timestamp="12248117" />
  <Command __id="4681" _type="MoveCaretCommand" caretOffset="677" date="Mon Dec 04 15:51:14 EST 2023" docOffset="677" starttimestamp="1701710826491" timestamp="12248117" />
  <Command __id="4682" _type="MoveCaretCommand" caretOffset="541" date="Mon Dec 04 15:51:15 EST 2023" docOffset="541" starttimestamp="1701710826491" timestamp="12248676" />
  <Command __id="4683" _type="MoveCaretCommand" caretOffset="541" date="Mon Dec 04 15:51:15 EST 2023" docOffset="541" starttimestamp="1701710826491" timestamp="12248676" />
  <Command __id="4684" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:51:15 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="12249174" />
  <Command __id="4685" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:51:15 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="12249174" />
  <Command __id="4686" _type="MoveCaretCommand" caretOffset="549" date="Mon Dec 04 15:51:21 EST 2023" docOffset="549" starttimestamp="1701710826491" timestamp="12254832" />
  <Command __id="4687" _type="MoveCaretCommand" caretOffset="549" date="Mon Dec 04 15:51:21 EST 2023" docOffset="549" starttimestamp="1701710826491" timestamp="12254832" />
  <Command __id="4698" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:51:33 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12267203" type="Run" />
  <Command __id="4699" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:51:33 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12267203" type="Run" />
  <Command __id="4700" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:51:33 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12267314" type="Run" />
  <Command __id="4701" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:51:33 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12267326" type="Run" />
  <Command __id="4702" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:51:33 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12267473" type="Run" />
  <Command __id="4703" _type="ConsoleOutput" date="Mon Dec 04 15:51:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12268703" type="ConsoleOutput">
    <outputString><![CDATA[(eval (quote (+ 1 2)))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(eval (quote (+ 1 2)))¶")]]]></diff>
  </Command>
  <Command __id="4704" _type="PasteCommand" date="Mon Dec 04 15:51:35 EST 2023" starttimestamp="1701710826491" timestamp="12268706" />
  <Command __id="4705" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:51:35 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12268826" type="Run" />
  <Command __id="4706" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:51:37 EST 2023" starttimestamp="1701710826491" timestamp="12270797" />
  <Command __id="4707" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:51:37 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12270798" type="Run" />
  <Command __id="4708" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Mon Dec 04 15:51:39 EST 2023" starttimestamp="1701710826491" timestamp="12273465" />
  <Command __id="4709" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:51:39 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12273470" type="Run" />
  <Command __id="4710" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:51:42 EST 2023" starttimestamp="1701710826491" timestamp="12275885" />
  <Command __id="4711" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:51:42 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12275889" type="Run" />
  <Command __id="4718" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:51:48 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12281532" type="Run" />
  <Command __id="4719" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:51:50 EST 2023" starttimestamp="1701710826491" timestamp="12283618" />
  <Command __id="4720" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:51:50 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12283622" type="Run" />
  <Command __id="4721" _type="MoveCaretCommand" caretOffset="659" date="Mon Dec 04 15:51:56 EST 2023" docOffset="659" starttimestamp="1701710826491" timestamp="12290254" />
  <Command __id="4722" _type="MoveCaretCommand" caretOffset="659" date="Mon Dec 04 15:51:56 EST 2023" docOffset="659" starttimestamp="1701710826491" timestamp="12290254" />
  <Command __id="4723" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:51:57 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12291219" type="Run" />
  <Command __id="4743" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:52:12 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12305589" type="Run" />
  <Command __id="4744" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:52:12 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12306397" type="Run" />
  <Command __id="4745" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:52:13 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12307078" type="Run" />
  <Command __id="4746" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:52:14 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12307645" type="Run" />
  <Command __id="4747" _type="MoveCaretCommand" caretOffset="458" date="Mon Dec 04 15:52:15 EST 2023" docOffset="458" starttimestamp="1701710826491" timestamp="12308797" />
  <Command __id="4748" _type="MoveCaretCommand" caretOffset="458" date="Mon Dec 04 15:52:15 EST 2023" docOffset="458" starttimestamp="1701710826491" timestamp="12308797" />
  <Command __id="4749" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:52:15 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12308799" type="Run" />
  <Command __id="4750" _type="MoveCaretCommand" caretOffset="607" date="Mon Dec 04 15:52:36 EST 2023" docOffset="607" starttimestamp="1701710826491" timestamp="12330003" />
  <Command __id="4751" _type="MoveCaretCommand" caretOffset="607" date="Mon Dec 04 15:52:36 EST 2023" docOffset="607" starttimestamp="1701710826491" timestamp="12330003" />
  <Command __id="4674" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:50:08 EST 2023" docASTNodeCount="176" docActiveCodeLength="1118" docExpressionCount="133" docLength="1118" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12181866">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		"), Diff(DELETE,"Evaluator temp = BuiltinOperationManagerSingleton.get().getEvaluator("temp");		"), Diff(EQUAL,"return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		"), Diff(DELETE,"if(!expr.getTail().getHead().isAtom()"), Diff(INSERT,"boolean isOperator = BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null;		if(isOperator"), Diff(EQUAL,") {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		boolean isOperator = BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null;
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="4752" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Mon Dec 04 15:52:42 EST 2023" starttimestamp="1701710826491" timestamp="12336343" />
  <Command __id="4753" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:52:42 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12336349" type="Debug" />
  <Command __id="4754" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:52:42 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12336349" type="Run" />
  <Command __id="4755" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:52:42 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12336349" type="Debug" />
  <Command __id="4756" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:52:42 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12336349" type="Run" />
  <DocumentChange __id="4757" _type="Insert" date="Mon Dec 04 15:52:44 EST 2023" docASTNodeCount="178" docActiveCodeLength="1132" docExpressionCount="135" docLength="1132" length="14" offset="607" repeat="14" starttimestamp="1701710826491" timestamp="12338025" timestamp2="12340698">
    <text><![CDATA[expr.getTail()]]></text>
  </DocumentChange>
  <Command __id="4758" _type="InsertStringCommand" date="Mon Dec 04 15:52:44 EST 2023" starttimestamp="1701710826491" timestamp="12338028" timestamp2="12338028">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4759" _type="InsertStringCommand" date="Mon Dec 04 15:52:44 EST 2023" starttimestamp="1701710826491" timestamp="12338029" timestamp2="12338029">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4761" _type="InsertStringCommand" date="Mon Dec 04 15:52:44 EST 2023" starttimestamp="1701710826491" timestamp="12338201" timestamp2="12338201">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="4762" _type="InsertStringCommand" date="Mon Dec 04 15:52:44 EST 2023" starttimestamp="1701710826491" timestamp="12338201" timestamp2="12338201">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="4764" _type="InsertStringCommand" date="Mon Dec 04 15:52:44 EST 2023" starttimestamp="1701710826491" timestamp="12338338" timestamp2="12338338">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="4765" _type="InsertStringCommand" date="Mon Dec 04 15:52:44 EST 2023" starttimestamp="1701710826491" timestamp="12338338" timestamp2="12338338">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="4767" _type="InsertStringCommand" date="Mon Dec 04 15:52:44 EST 2023" starttimestamp="1701710826491" timestamp="12338417" timestamp2="12338417">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4768" _type="InsertStringCommand" date="Mon Dec 04 15:52:44 EST 2023" starttimestamp="1701710826491" timestamp="12338417" timestamp2="12338417">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4770" _type="InsertStringCommand" date="Mon Dec 04 15:52:45 EST 2023" starttimestamp="1701710826491" timestamp="12338538" timestamp2="12338538">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4771" _type="InsertStringCommand" date="Mon Dec 04 15:52:45 EST 2023" starttimestamp="1701710826491" timestamp="12338538" timestamp2="12338538">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4772" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 15:52:45 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12338544" />
  <Command __id="4782" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 15:52:47 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12341039" />
  <DocumentChange __id="4783" _type="Replace" date="Mon Dec 04 15:52:47 EST 2023" docASTNodeCount="178" docActiveCodeLength="1101" docExpressionCount="135" docLength="1101" endLine="20" insertionLength="10" int_docASTNodeCount="176" int_docActiveCodeLength="1091" int_docExpressionCount="133" int_docLength="1091" length="41" offset="612" startLine="20" starttimestamp="1701710826491" timestamp="12341042">
    <deletedText><![CDATA[getTail()BuiltinOperationManagerSingleton]]></deletedText>
    <insertedText><![CDATA[getTail().]]></insertedText>
  </DocumentChange>
  <Command __id="4784" _type="InsertStringCommand" date="Mon Dec 04 15:52:47 EST 2023" starttimestamp="1701710826491" timestamp="12341047" timestamp2="12341047">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4785" _type="InsertStringCommand" date="Mon Dec 04 15:52:47 EST 2023" starttimestamp="1701710826491" timestamp="12341047" timestamp2="12341047">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4786" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 15:52:47 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12341063" />
  <DocumentChange __id="4787" _type="Insert" date="Mon Dec 04 15:52:47 EST 2023" docASTNodeCount="180" docActiveCodeLength="1110" docExpressionCount="137" docLength="1110" length="9" offset="622" repeat="8" starttimestamp="1701710826491" timestamp="12341398" timestamp2="12342732">
    <text><![CDATA[getHead()]]></text>
  </DocumentChange>
  <Command __id="4795" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 15:52:49 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12343207" />
  <DocumentChange __id="4796" _type="Replace" date="Mon Dec 04 15:52:49 EST 2023" docASTNodeCount="180" docActiveCodeLength="1111" docExpressionCount="137" docLength="1111" endLine="20" insertionLength="10" int_docASTNodeCount="178" int_docActiveCodeLength="1101" int_docExpressionCount="135" int_docLength="1101" length="9" offset="622" startLine="20" starttimestamp="1701710826491" timestamp="12343211">
    <deletedText><![CDATA[getHead()]]></deletedText>
    <insertedText><![CDATA[getHead().]]></insertedText>
  </DocumentChange>
  <Command __id="4797" _type="InsertStringCommand" date="Mon Dec 04 15:52:49 EST 2023" starttimestamp="1701710826491" timestamp="12343219" timestamp2="12343219">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4798" _type="InsertStringCommand" date="Mon Dec 04 15:52:49 EST 2023" starttimestamp="1701710826491" timestamp="12343219" timestamp2="12343219">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4799" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 15:52:49 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12343233" />
  <DocumentChange __id="4800" _type="Replace" date="Mon Dec 04 15:52:51 EST 2023" docASTNodeCount="180" docActiveCodeLength="1110" docExpressionCount="137" docLength="1110" endLine="20" insertionLength="9" int_docASTNodeCount="178" int_docActiveCodeLength="1101" int_docExpressionCount="135" int_docLength="1101" length="10" offset="622" startLine="20" starttimestamp="1701710826491" timestamp="12344740">
    <deletedText><![CDATA[getHead().]]></deletedText>
    <insertedText><![CDATA[getHead()]]></insertedText>
  </DocumentChange>
  <Command __id="4801" _type="UndoCommand" date="Mon Dec 04 15:52:51 EST 2023" starttimestamp="1701710826491" timestamp="12344744" />
  <DocumentChange __id="4802" _type="Delete" date="Mon Dec 04 15:52:51 EST 2023" docASTNodeCount="178" docActiveCodeLength="1101" docExpressionCount="135" docLength="1101" endLine="20" length="9" offset="622" repeat="2" startLine="20" starttimestamp="1701710826491" timestamp="12345381" timestamp2="12345992">
    <text><![CDATA[getHead()]]></text>
  </DocumentChange>
  <Command __id="4803" _type="UndoCommand" date="Mon Dec 04 15:52:51 EST 2023" starttimestamp="1701710826491" timestamp="12345384" />
  <Command __id="4805" _type="UndoCommand" date="Mon Dec 04 15:52:52 EST 2023" starttimestamp="1701710826491" timestamp="12345998" />
  <DocumentChange __id="4806" _type="Replace" date="Mon Dec 04 15:52:52 EST 2023" docASTNodeCount="178" docActiveCodeLength="1132" docExpressionCount="135" docLength="1132" endLine="20" insertionLength="41" int_docASTNodeCount="176" int_docActiveCodeLength="1091" int_docExpressionCount="133" int_docLength="1091" length="10" offset="612" startLine="20" starttimestamp="1701710826491" timestamp="12346428">
    <deletedText><![CDATA[getTail().]]></deletedText>
    <insertedText><![CDATA[getTail()BuiltinOperationManagerSingleton]]></insertedText>
  </DocumentChange>
  <Command __id="4807" _type="UndoCommand" date="Mon Dec 04 15:52:52 EST 2023" starttimestamp="1701710826491" timestamp="12346434" />
  <Command __id="4809" _type="UndoCommand" date="Mon Dec 04 15:52:53 EST 2023" starttimestamp="1701710826491" timestamp="12346742" />
  <DocumentChange __id="4808" _type="Delete" date="Mon Dec 04 15:52:53 EST 2023" docASTNodeCount="176" docActiveCodeLength="1118" docExpressionCount="133" docLength="1118" endLine="20" length="14" offset="607" startLine="20" starttimestamp="1701710826491" timestamp="12346735">
    <text><![CDATA[expr.getTail()]]></text>
  </DocumentChange>
  <Command __id="4810" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 15:52:54 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12348455" />
  <Command __id="4811" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:52:55 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="12348513" />
  <Command __id="4812" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:52:55 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="12348513" />
  <DocumentChange __id="4813" _type="Insert" date="Mon Dec 04 15:52:55 EST 2023" docASTNodeCount="180" docActiveCodeLength="1130" docExpressionCount="136" docLength="1130" length="12" offset="583" repeat="10" starttimestamp="1701710826491" timestamp="12349504" timestamp2="12352316">
    <text><![CDATA[
		expr.getT]]></text>
  </DocumentChange>
  <Command __id="4814" _type="InsertStringCommand" date="Mon Dec 04 15:52:56 EST 2023" starttimestamp="1701710826491" timestamp="12349509" timestamp2="12349509">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4815" _type="InsertStringCommand" date="Mon Dec 04 15:52:56 EST 2023" starttimestamp="1701710826491" timestamp="12349509" timestamp2="12349509">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4817" _type="InsertStringCommand" date="Mon Dec 04 15:52:57 EST 2023" starttimestamp="1701710826491" timestamp="12351304" timestamp2="12351304">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4818" _type="InsertStringCommand" date="Mon Dec 04 15:52:57 EST 2023" starttimestamp="1701710826491" timestamp="12351304" timestamp2="12351304">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4820" _type="InsertStringCommand" date="Mon Dec 04 15:52:57 EST 2023" starttimestamp="1701710826491" timestamp="12351492" timestamp2="12351492">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="4821" _type="InsertStringCommand" date="Mon Dec 04 15:52:57 EST 2023" starttimestamp="1701710826491" timestamp="12351492" timestamp2="12351492">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="4823" _type="InsertStringCommand" date="Mon Dec 04 15:52:58 EST 2023" starttimestamp="1701710826491" timestamp="12351597" timestamp2="12351597">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="4824" _type="InsertStringCommand" date="Mon Dec 04 15:52:58 EST 2023" starttimestamp="1701710826491" timestamp="12351597" timestamp2="12351597">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="4826" _type="InsertStringCommand" date="Mon Dec 04 15:52:58 EST 2023" starttimestamp="1701710826491" timestamp="12351684" timestamp2="12351684">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4827" _type="InsertStringCommand" date="Mon Dec 04 15:52:58 EST 2023" starttimestamp="1701710826491" timestamp="12351684" timestamp2="12351684">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4829" _type="InsertStringCommand" date="Mon Dec 04 15:52:58 EST 2023" starttimestamp="1701710826491" timestamp="12351802" timestamp2="12351802">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4830" _type="InsertStringCommand" date="Mon Dec 04 15:52:58 EST 2023" starttimestamp="1701710826491" timestamp="12351802" timestamp2="12351802">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4831" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 15:52:58 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12351809" />
  <Command __id="4836" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 15:52:59 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12352568" />
  <DocumentChange __id="4837" _type="Replace" date="Mon Dec 04 15:52:59 EST 2023" docASTNodeCount="180" docActiveCodeLength="1135" docExpressionCount="136" docLength="1135" endLine="20" insertionLength="9" int_docASTNodeCount="177" int_docActiveCodeLength="1126" int_docExpressionCount="136" int_docLength="1126" length="4" offset="591" startLine="20" starttimestamp="1701710826491" timestamp="12352570">
    <deletedText><![CDATA[getT]]></deletedText>
    <insertedText><![CDATA[getTail()]]></insertedText>
  </DocumentChange>
  <Command __id="4838" _type="InsertStringCommand" date="Mon Dec 04 15:52:59 EST 2023" starttimestamp="1701710826491" timestamp="12352574" timestamp2="12352574">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4839" _type="InsertStringCommand" date="Mon Dec 04 15:52:59 EST 2023" starttimestamp="1701710826491" timestamp="12352574" timestamp2="12352574">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="4840" _type="Insert" date="Mon Dec 04 15:52:59 EST 2023" docASTNodeCount="184" docActiveCodeLength="1140" docExpressionCount="140" docLength="1140" length="5" offset="600" repeat="5" starttimestamp="1701710826491" timestamp="12352820" timestamp2="12353589">
    <text><![CDATA[.getH]]></text>
  </DocumentChange>
  <Command __id="4841" _type="InsertStringCommand" date="Mon Dec 04 15:52:59 EST 2023" starttimestamp="1701710826491" timestamp="12352823" timestamp2="12352823">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4842" _type="InsertStringCommand" date="Mon Dec 04 15:52:59 EST 2023" starttimestamp="1701710826491" timestamp="12352823" timestamp2="12352823">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4843" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 15:52:59 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12352831" />
  <Command __id="4848" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 15:53:00 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12353768" />
  <DocumentChange __id="4849" _type="Replace" date="Mon Dec 04 15:53:00 EST 2023" docASTNodeCount="182" docActiveCodeLength="1145" docExpressionCount="138" docLength="1145" endLine="20" insertionLength="9" int_docASTNodeCount="179" int_docActiveCodeLength="1136" int_docExpressionCount="138" int_docLength="1136" length="4" offset="601" startLine="20" starttimestamp="1701710826491" timestamp="12353771">
    <deletedText><![CDATA[getH]]></deletedText>
    <insertedText><![CDATA[getHead()]]></insertedText>
  </DocumentChange>
  <Command __id="4850" _type="InsertStringCommand" date="Mon Dec 04 15:53:00 EST 2023" starttimestamp="1701710826491" timestamp="12353775" timestamp2="12353775">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4851" _type="InsertStringCommand" date="Mon Dec 04 15:53:00 EST 2023" starttimestamp="1701710826491" timestamp="12353776" timestamp2="12353776">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="4852" _type="Insert" date="Mon Dec 04 15:53:00 EST 2023" docASTNodeCount="186" docActiveCodeLength="1147" docExpressionCount="142" docLength="1147" length="2" offset="610" repeat="2" starttimestamp="1701710826491" timestamp="12354092" timestamp2="12354830">
    <text><![CDATA[.i]]></text>
  </DocumentChange>
  <Command __id="4853" _type="InsertStringCommand" date="Mon Dec 04 15:53:00 EST 2023" starttimestamp="1701710826491" timestamp="12354095" timestamp2="12354095">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4854" _type="InsertStringCommand" date="Mon Dec 04 15:53:00 EST 2023" starttimestamp="1701710826491" timestamp="12354095" timestamp2="12354095">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4855" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 15:53:00 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12354102" />
  <Command __id="4857" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 15:53:02 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12355631" />
  <Command __id="4859" _type="InsertStringCommand" date="Mon Dec 04 15:53:02 EST 2023" starttimestamp="1701710826491" timestamp="12355639" timestamp2="12355639">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4860" _type="InsertStringCommand" date="Mon Dec 04 15:53:02 EST 2023" starttimestamp="1701710826491" timestamp="12355639" timestamp2="12355639">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="4858" _type="Replace" date="Mon Dec 04 15:53:02 EST 2023" docASTNodeCount="184" docActiveCodeLength="1154" docExpressionCount="140" docLength="1154" endLine="20" insertionLength="8" int_docASTNodeCount="181" int_docActiveCodeLength="1146" int_docExpressionCount="140" int_docLength="1146" length="1" offset="611" startLine="20" starttimestamp="1701710826491" timestamp="12355634">
    <deletedText><![CDATA[i]]></deletedText>
    <insertedText><![CDATA[isAtom()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4863" _type="Insert" date="Mon Dec 04 15:53:04 EST 2023" docASTNodeCount="184" docActiveCodeLength="1155" docExpressionCount="140" docLength="1155" length="1" offset="586" starttimestamp="1701710826491" timestamp="12357594">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <Command __id="4861" _type="MoveCaretCommand" caretOffset="586" date="Mon Dec 04 15:53:03 EST 2023" docOffset="586" starttimestamp="1701710826491" timestamp="12357237" />
  <Command __id="4862" _type="MoveCaretCommand" caretOffset="586" date="Mon Dec 04 15:53:03 EST 2023" docOffset="586" starttimestamp="1701710826491" timestamp="12357237" />
  <Command __id="4864" _type="InsertStringCommand" date="Mon Dec 04 15:53:04 EST 2023" starttimestamp="1701710826491" timestamp="12357597" timestamp2="12357597">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="4865" _type="InsertStringCommand" date="Mon Dec 04 15:53:04 EST 2023" starttimestamp="1701710826491" timestamp="12357597" timestamp2="12357597">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="4866" _type="MoveCaretCommand" caretOffset="620" date="Mon Dec 04 15:53:04 EST 2023" docOffset="620" starttimestamp="1701710826491" timestamp="12358378" />
  <Command __id="4867" _type="MoveCaretCommand" caretOffset="620" date="Mon Dec 04 15:53:04 EST 2023" docOffset="620" starttimestamp="1701710826491" timestamp="12358378" />
  <Command __id="4869" _type="InsertStringCommand" date="Mon Dec 04 15:53:06 EST 2023" starttimestamp="1701710826491" timestamp="12359596" timestamp2="12359596">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4870" _type="InsertStringCommand" date="Mon Dec 04 15:53:06 EST 2023" starttimestamp="1701710826491" timestamp="12359597" timestamp2="12359597">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4872" _type="InsertStringCommand" date="Mon Dec 04 15:53:06 EST 2023" starttimestamp="1701710826491" timestamp="12359992" timestamp2="12359992">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="4873" _type="InsertStringCommand" date="Mon Dec 04 15:53:06 EST 2023" starttimestamp="1701710826491" timestamp="12359992" timestamp2="12359992">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="4875" _type="InsertStringCommand" date="Mon Dec 04 15:53:06 EST 2023" starttimestamp="1701710826491" timestamp="12360103" timestamp2="12360103">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="4876" _type="InsertStringCommand" date="Mon Dec 04 15:53:06 EST 2023" starttimestamp="1701710826491" timestamp="12360104" timestamp2="12360104">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="4878" _type="InsertStringCommand" date="Mon Dec 04 15:53:06 EST 2023" starttimestamp="1701710826491" timestamp="12360190" timestamp2="12360190">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4879" _type="InsertStringCommand" date="Mon Dec 04 15:53:06 EST 2023" starttimestamp="1701710826491" timestamp="12360190" timestamp2="12360190">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4880" _type="SelectTextCommand" caretOffset="586" date="Mon Dec 04 15:53:08 EST 2023" end="624" start="586" starttimestamp="1701710826491" timestamp="12361863" />
  <Command __id="4881" _type="SelectTextCommand" caretOffset="586" date="Mon Dec 04 15:53:08 EST 2023" end="624" start="586" starttimestamp="1701710826491" timestamp="12361864" />
  <Command __id="4882" _type="MoveCaretCommand" caretOffset="586" date="Mon Dec 04 15:53:09 EST 2023" docOffset="586" starttimestamp="1701710826491" timestamp="12363004" />
  <Command __id="4883" _type="MoveCaretCommand" caretOffset="586" date="Mon Dec 04 15:53:09 EST 2023" docOffset="586" starttimestamp="1701710826491" timestamp="12363004" />
  <Command __id="4884" _type="SelectTextCommand" caretOffset="624" date="Mon Dec 04 15:53:10 EST 2023" end="624" start="586" starttimestamp="1701710826491" timestamp="12364271" />
  <Command __id="4885" _type="SelectTextCommand" caretOffset="624" date="Mon Dec 04 15:53:10 EST 2023" end="624" start="586" starttimestamp="1701710826491" timestamp="12364271" />
  <Command __id="4887" _type="CutCommand" date="Mon Dec 04 15:53:10 EST 2023" starttimestamp="1701710826491" timestamp="12364475" />
  <Command __id="4888" _type="MoveCaretCommand" caretOffset="610" date="Mon Dec 04 15:53:11 EST 2023" docOffset="610" starttimestamp="1701710826491" timestamp="12365298" />
  <Command __id="4889" _type="MoveCaretCommand" caretOffset="610" date="Mon Dec 04 15:53:11 EST 2023" docOffset="610" starttimestamp="1701710826491" timestamp="12365298" />
  <Command __id="4891" _type="PasteCommand" date="Mon Dec 04 15:53:12 EST 2023" starttimestamp="1701710826491" timestamp="12365717" />
  <Command __id="4892" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:53:17 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="12371325" />
  <Command __id="4893" _type="MoveCaretCommand" caretOffset="583" date="Mon Dec 04 15:53:17 EST 2023" docOffset="583" starttimestamp="1701710826491" timestamp="12371325" />
  <Command __id="4903" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:53:28 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12381642" type="Run" />
  <Command __id="4904" _type="ShellCommand" date="Mon Dec 04 15:53:28 EST 2023" starttimestamp="1701710826491" timestamp="12382011" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4905" _type="ShellCommand" date="Mon Dec 04 15:53:31 EST 2023" starttimestamp="1701710826491" timestamp="12384509" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4906" _type="ConsoleOutput" date="Mon Dec 04 15:53:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12385017" type="ConsoleOutput">
    <outputString><![CDATA[(eval (quote (+ 1 2)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"!EXPR.GETTAIL¶NIL¶.GETHEAD¶NIL¶.ISATOM¶NIL¶&&"), Diff(INSERT,"(eval (quote (+ 1 2)))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4907" _type="PasteCommand" date="Mon Dec 04 15:53:31 EST 2023" starttimestamp="1701710826491" timestamp="12385020" />
  <Command __id="4908" _type="ExceptionCommand" date="Mon Dec 04 15:53:31 EST 2023" starttimestamp="1701710826491" timestamp="12385026" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:25)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="4909" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:53:31 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12385030" type="Debug" />
  <Command __id="4910" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:53:31 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12385030" type="Run" />
  <Command __id="4911" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:53:31 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12385030" type="Debug" />
  <Command __id="4912" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:53:31 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12385030" type="Run" />
  <Command __id="4913" _type="MoveCaretCommand" caretOffset="610" date="Mon Dec 04 15:54:13 EST 2023" docOffset="610" starttimestamp="1701710826491" timestamp="12427077" />
  <Command __id="4914" _type="MoveCaretCommand" caretOffset="610" date="Mon Dec 04 15:54:13 EST 2023" docOffset="610" starttimestamp="1701710826491" timestamp="12427077" />
  <Command __id="4916" _type="InsertStringCommand" date="Mon Dec 04 15:54:14 EST 2023" starttimestamp="1701710826491" timestamp="12427839" timestamp2="12427839">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="4917" _type="InsertStringCommand" date="Mon Dec 04 15:54:14 EST 2023" starttimestamp="1701710826491" timestamp="12427839" timestamp2="12427839">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="4918" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 15:54:17 EST 2023" starttimestamp="1701710826491" timestamp="12431258" />
  <Command __id="4919" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 15:54:17 EST 2023" starttimestamp="1701710826491" timestamp="12431258" />
  <Command __id="4921" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:54:17 EST 2023" starttimestamp="1701710826491" timestamp="12431486" />
  <Command __id="4922" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:54:17 EST 2023" starttimestamp="1701710826491" timestamp="12431486" />
  <Command __id="4923" _type="MoveCaretCommand" caretOffset="644" date="Mon Dec 04 15:54:18 EST 2023" docOffset="644" starttimestamp="1701710826491" timestamp="12432491" />
  <Command __id="4924" _type="MoveCaretCommand" caretOffset="644" date="Mon Dec 04 15:54:18 EST 2023" docOffset="644" starttimestamp="1701710826491" timestamp="12432492" />
  <Command __id="4926" _type="InsertStringCommand" date="Mon Dec 04 15:54:19 EST 2023" starttimestamp="1701710826491" timestamp="12432992" timestamp2="12432992">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="4927" _type="InsertStringCommand" date="Mon Dec 04 15:54:19 EST 2023" starttimestamp="1701710826491" timestamp="12432992" timestamp2="12432992">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="4928" _type="MoveCaretCommand" caretOffset="650" date="Mon Dec 04 15:54:23 EST 2023" docOffset="650" starttimestamp="1701710826491" timestamp="12436897" />
  <Command __id="4929" _type="MoveCaretCommand" caretOffset="650" date="Mon Dec 04 15:54:23 EST 2023" docOffset="650" starttimestamp="1701710826491" timestamp="12436897" />
  <Command __id="4931" _type="InsertStringCommand" date="Mon Dec 04 15:54:24 EST 2023" starttimestamp="1701710826491" timestamp="12437545" timestamp2="12437545">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="4932" _type="InsertStringCommand" date="Mon Dec 04 15:54:24 EST 2023" starttimestamp="1701710826491" timestamp="12437545" timestamp2="12437545">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="4933" _type="MoveCaretCommand" caretOffset="651" date="Mon Dec 04 15:54:25 EST 2023" docOffset="651" starttimestamp="1701710826491" timestamp="12439227" />
  <Command __id="4934" _type="MoveCaretCommand" caretOffset="651" date="Mon Dec 04 15:54:25 EST 2023" docOffset="651" starttimestamp="1701710826491" timestamp="12439228" />
  <Command __id="4935" _type="MoveCaretCommand" caretOffset="757" date="Mon Dec 04 15:54:26 EST 2023" docOffset="757" starttimestamp="1701710826491" timestamp="12440006" />
  <Command __id="4936" _type="MoveCaretCommand" caretOffset="757" date="Mon Dec 04 15:54:26 EST 2023" docOffset="757" starttimestamp="1701710826491" timestamp="12440006" />
  <Command __id="4938" _type="InsertStringCommand" date="Mon Dec 04 15:54:27 EST 2023" starttimestamp="1701710826491" timestamp="12440599" timestamp2="12440599">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="4939" _type="InsertStringCommand" date="Mon Dec 04 15:54:27 EST 2023" starttimestamp="1701710826491" timestamp="12440599" timestamp2="12440599">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="4955" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:54:34 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12447969" type="Run" />
  <Command __id="4956" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:54:34 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12447970" type="Run" />
  <Command __id="4957" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:54:34 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12448076" type="Run" />
  <Command __id="4958" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:54:34 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12448086" type="Run" />
  <Command __id="4959" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:54:34 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12448221" type="Run" />
  <Command __id="4960" _type="ConsoleOutput" date="Mon Dec 04 15:54:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12448862" type="ConsoleOutput">
    <outputString><![CDATA[(eval (quote (+ 1 2)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)¶	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:25)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15"), Diff(INSERT,"(eval (quote (+ 1 2))"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="4961" _type="PasteCommand" date="Mon Dec 04 15:54:35 EST 2023" starttimestamp="1701710826491" timestamp="12448865" />
  <Command __id="4962" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:54:35 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12448986" type="Run" />
  <Command __id="4963" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:54:37 EST 2023" starttimestamp="1701710826491" timestamp="12450511" />
  <Command __id="4964" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:54:37 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12450514" type="Run" />
  <Command __id="4965" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Mon Dec 04 15:54:37 EST 2023" starttimestamp="1701710826491" timestamp="12451097" />
  <Command __id="4966" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:54:37 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12451099" type="Run" />
  <Command __id="4967" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:54:38 EST 2023" starttimestamp="1701710826491" timestamp="12451809" />
  <Command __id="4968" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:54:38 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12451814" type="Run" />
  <Command __id="4969" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:54:40 EST 2023" starttimestamp="1701710826491" timestamp="12453984" />
  <Command __id="4970" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:54:40 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12453988" type="Run" />
  <Command __id="4975" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:54:48 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12461790" type="Run" />
  <Command __id="4997" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:55:00 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12474260" type="Run" />
  <Command __id="4998" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:55:01 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12474596" type="Run" />
  <Command __id="4999" _type="MoveCaretCommand" caretOffset="629" date="Mon Dec 04 15:55:02 EST 2023" docOffset="629" starttimestamp="1701710826491" timestamp="12475821" />
  <Command __id="5000" _type="MoveCaretCommand" caretOffset="629" date="Mon Dec 04 15:55:02 EST 2023" docOffset="629" starttimestamp="1701710826491" timestamp="12475821" />
  <Command __id="5001" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:55:02 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12475824" type="Run" />
  <Command __id="5002" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:55:05 EST 2023" starttimestamp="1701710826491" timestamp="12478891" />
  <Command __id="5003" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:55:05 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12478895" type="Run" />
  <Command __id="5006" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:55:25 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12498633" type="Run" />
  <Command __id="5009" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:55:42 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12515858" type="Run" />
  <Command __id="5014" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:56:02 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12535807" type="Run" />
  <Command __id="5046" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:56:28 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12562336" type="Run" />
  <DocumentChange __id="4868" _type="Insert" date="Mon Dec 04 15:53:06 EST 2023" docASTNodeCount="176" docActiveCodeLength="1159" docExpressionCount="134" docLength="1159" length="4" offset="620" repeat="4" starttimestamp="1701710826491" timestamp="12359593" timestamp2="12360188">
    <text><![CDATA[ && ]]></text>
  </DocumentChange>
  <DocumentChange __id="4886" _type="Delete" date="Mon Dec 04 15:53:10 EST 2023" docASTNodeCount="176" docActiveCodeLength="1121" docExpressionCount="133" docLength="1121" endLine="20" length="38" offset="586" startLine="20" starttimestamp="1701710826491" timestamp="12364469">
    <text><![CDATA[!expr.getTail().getHead().isAtom() && ]]></text>
  </DocumentChange>
  <DocumentChange __id="4890" _type="Insert" date="Mon Dec 04 15:53:12 EST 2023" docASTNodeCount="185" docActiveCodeLength="1159" docExpressionCount="142" docLength="1159" length="38" offset="610" starttimestamp="1701710826491" timestamp="12365715">
    <text><![CDATA[!expr.getTail().getHead().isAtom() && ]]></text>
  </DocumentChange>
  <DocumentChange __id="4915" _type="Insert" date="Mon Dec 04 15:54:14 EST 2023" docASTNodeCount="186" docActiveCodeLength="1161" docExpressionCount="143" docLength="1161" length="2" offset="610" starttimestamp="1701710826491" timestamp="12427835">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="4920" _type="Delete" date="Mon Dec 04 15:54:17 EST 2023" docASTNodeCount="186" docActiveCodeLength="1160" docExpressionCount="143" docLength="1160" endLine="21" length="1" offset="611" startLine="21" starttimestamp="1701710826491" timestamp="12431480">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="4925" _type="Insert" date="Mon Dec 04 15:54:19 EST 2023" docASTNodeCount="186" docActiveCodeLength="1161" docExpressionCount="143" docLength="1161" length="1" offset="644" starttimestamp="1701710826491" timestamp="12432985">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="4930" _type="Insert" date="Mon Dec 04 15:54:24 EST 2023" docASTNodeCount="187" docActiveCodeLength="1162" docExpressionCount="144" docLength="1162" length="1" offset="650" starttimestamp="1701710826491" timestamp="12437540">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="4937" _type="Insert" date="Mon Dec 04 15:54:27 EST 2023" docASTNodeCount="187" docActiveCodeLength="1163" docExpressionCount="144" docLength="1163" length="1" offset="757" starttimestamp="1701710826491" timestamp="12440594">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <Command __id="5049" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:56:41 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="12574578">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5053" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 15:56:48 EST 2023" starttimestamp="1701710826491" timestamp="12581583" />
  <Command __id="5054" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:56:48 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12581588" type="Run" />
  <Command __id="5055" _type="ConsoleOutput" date="Mon Dec 04 15:56:48 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12581592" type="ConsoleOutput">
    <outputString><![CDATA[java.lang.UnsupportedOperationException: Instances of Atom do not have a head
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(eval (quote (+ 1 2)))"), Diff(INSERT,"java.lang.UnsupportedOperationException: Instances of Atom do not have a head"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5056" _type="ConsoleOutput" date="Mon Dec 04 15:56:48 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12581593" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:25)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"java.lang.UnsupportedOperationException: Instances of Atom do not have a head"), Diff(INSERT,"	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)¶	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:25)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5057" _type="ConsoleOutput" date="Mon Dec 04 15:56:48 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12581597" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at main.lisp."), Diff(DELETE,"parser.terms.Atom.getHead(Atom.java:27)¶	at index.QuoteEvaluator.eval(QuoteEvaluator.java:11)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:25)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluato"), Diff(INSERT,"interpreter.BasicLispInterpreterController.run(BasicLispInterpreterControlle"), Diff(EQUAL,"r.java:"), Diff(DELETE,"16"), Diff(INSERT,"29"), Diff(EQUAL,")¶	at main."), Diff(DELETE,"lisp.parser.terms.BasicExpression.eval(BasicExpressio"), Diff(INSERT,"Main.main(Mai"), Diff(EQUAL,"n.java:"), Diff(DELETE,"26"), Diff(INSERT,"31"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation"), Diff(INSERT,"index.index.main(index"), Diff(EQUAL,".java:"), Diff(DELETE,"92"), Diff(INSERT,"15"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="5058" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:56:48 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12581599" type="Debug" />
  <Command __id="5059" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:56:48 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12581599" type="Run" />
  <Command __id="5060" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:56:48 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12581599" type="Debug" />
  <Command __id="5061" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:56:48 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12581599" type="Run" />
  <Command __id="5062" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:56:54 EST 2023" docASTNodeCount="56" docActiveCodeLength="310" docExpressionCount="39" docLength="310" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12588387">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5063" _type="SelectTextCommand" caretOffset="223" date="Mon Dec 04 15:56:54 EST 2023" end="223" start="189" starttimestamp="1701710826491" timestamp="12588435" />
  <Command __id="5064" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:57:02 EST 2023" docASTNodeCount="187" docActiveCodeLength="1163" docExpressionCount="144" docLength="1163" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12596045">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}		"), Diff(INSERT,"		"), Diff(EQUAL,"boolean isOperator = "), Diff(INSERT,"(!expr.getTail().getHead().isAtom()) && ("), Diff(EQUAL,"BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null"), Diff(INSERT,")"), Diff(EQUAL,";		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		
		boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="5065" _type="MoveCaretCommand" caretOffset="830" date="Mon Dec 04 15:57:02 EST 2023" docOffset="830" starttimestamp="1701710826491" timestamp="12596106" />
  <Command __id="5066" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:57:07 EST 2023" docASTNodeCount="56" docActiveCodeLength="310" docExpressionCount="39" docLength="310" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12601180">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5067" _type="SelectTextCommand" caretOffset="223" date="Mon Dec 04 15:57:07 EST 2023" end="223" start="189" starttimestamp="1701710826491" timestamp="12601240" />
  <Command __id="5068" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:57:13 EST 2023" docASTNodeCount="187" docActiveCodeLength="1163" docExpressionCount="144" docLength="1163" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12607311">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5069" _type="MoveCaretCommand" caretOffset="830" date="Mon Dec 04 15:57:13 EST 2023" docOffset="830" starttimestamp="1701710826491" timestamp="12607373" />
  <Command __id="5071" _type="SelectTextCommand" caretOffset="223" date="Mon Dec 04 15:57:49 EST 2023" end="223" start="189" starttimestamp="1701710826491" timestamp="12643052" />
  <Command __id="5088" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:58:09 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12663245" type="Run" />
  <Command __id="5123" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:58:41 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12695421" type="Run" />
  <Command __id="5126" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:59:01 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12715311" type="Run" />
  <Command __id="5070" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:57:49 EST 2023" docASTNodeCount="56" docActiveCodeLength="310" docExpressionCount="39" docLength="310" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12642955">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5127" _type="MoveCaretCommand" caretOffset="188" date="Mon Dec 04 15:59:06 EST 2023" docOffset="269" starttimestamp="1701710826491" timestamp="12719590" />
  <DocumentChange __id="5128" _type="Insert" date="Mon Dec 04 15:59:08 EST 2023" docASTNodeCount="60" docActiveCodeLength="326" docExpressionCount="42" docLength="326" length="16" offset="269" repeat="13" starttimestamp="1701710826491" timestamp="12722340" timestamp2="12725568">
    <text><![CDATA[
		if(expr.getT)]]></text>
  </DocumentChange>
  <Command __id="5129" _type="InsertStringCommand" date="Mon Dec 04 15:59:08 EST 2023" starttimestamp="1701710826491" timestamp="12722344" timestamp2="12722344">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5131" _type="InsertStringCommand" date="Mon Dec 04 15:59:09 EST 2023" starttimestamp="1701710826491" timestamp="12722637" timestamp2="12722637">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5133" _type="InsertStringCommand" date="Mon Dec 04 15:59:09 EST 2023" starttimestamp="1701710826491" timestamp="12722753" timestamp2="12722753">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5135" _type="InsertStringCommand" date="Mon Dec 04 15:59:09 EST 2023" starttimestamp="1701710826491" timestamp="12722871" timestamp2="12722871">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5137" _type="InsertStringCommand" date="Mon Dec 04 15:59:10 EST 2023" starttimestamp="1701710826491" timestamp="12724054" timestamp2="12724054">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5139" _type="InsertStringCommand" date="Mon Dec 04 15:59:10 EST 2023" starttimestamp="1701710826491" timestamp="12724217" timestamp2="12724217">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5141" _type="InsertStringCommand" date="Mon Dec 04 15:59:10 EST 2023" starttimestamp="1701710826491" timestamp="12724377" timestamp2="12724377">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5143" _type="InsertStringCommand" date="Mon Dec 04 15:59:10 EST 2023" starttimestamp="1701710826491" timestamp="12724468" timestamp2="12724468">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5145" _type="InsertStringCommand" date="Mon Dec 04 15:59:11 EST 2023" starttimestamp="1701710826491" timestamp="12724595" timestamp2="12724595">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5146" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 15:59:11 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12724602" />
  <Command __id="5151" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 15:59:12 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12725962" />
  <DocumentChange __id="5152" _type="Replace" date="Mon Dec 04 15:59:12 EST 2023" docASTNodeCount="60" docActiveCodeLength="331" docExpressionCount="42" docLength="331" endLine="10" insertionLength="9" int_docASTNodeCount="60" int_docActiveCodeLength="322" int_docExpressionCount="41" int_docLength="322" length="4" offset="280" startLine="10" starttimestamp="1701710826491" timestamp="12725964">
    <deletedText><![CDATA[getT]]></deletedText>
    <insertedText><![CDATA[getTail()]]></insertedText>
  </DocumentChange>
  <Command __id="5153" _type="InsertStringCommand" date="Mon Dec 04 15:59:12 EST 2023" starttimestamp="1701710826491" timestamp="12725966" timestamp2="12725966">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5154" _type="Insert" date="Mon Dec 04 15:59:13 EST 2023" docASTNodeCount="50" docActiveCodeLength="332" docExpressionCount="34" docLength="332" length="1" offset="289" starttimestamp="1701710826491" timestamp="12726788">
    <text><![CDATA[>]]></text>
  </DocumentChange>
  <Command __id="5155" _type="InsertStringCommand" date="Mon Dec 04 15:59:13 EST 2023" starttimestamp="1701710826491" timestamp="12726789" timestamp2="12726789">
    <data><![CDATA[>]]></data>
  </Command>
  <DocumentChange __id="5156" _type="Delete" date="Mon Dec 04 15:59:13 EST 2023" docASTNodeCount="60" docActiveCodeLength="331" docExpressionCount="42" docLength="331" endLine="10" length="1" offset="289" startLine="10" starttimestamp="1701710826491" timestamp="12727265">
    <text><![CDATA[>]]></text>
  </DocumentChange>
  <Command __id="5157" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 15:59:13 EST 2023" starttimestamp="1701710826491" timestamp="12727268" />
  <DocumentChange __id="5158" _type="Insert" date="Mon Dec 04 15:59:13 EST 2023" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="44" docLength="334" length="3" offset="289" repeat="3" starttimestamp="1701710826491" timestamp="12727457" timestamp2="12727862">
    <text><![CDATA[.is]]></text>
  </DocumentChange>
  <Command __id="5159" _type="InsertStringCommand" date="Mon Dec 04 15:59:13 EST 2023" starttimestamp="1701710826491" timestamp="12727457" timestamp2="12727457">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5160" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 15:59:13 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12727463" />
  <Command __id="5163" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 15:59:14 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12728298" />
  <DocumentChange __id="5164" _type="Replace" date="Mon Dec 04 15:59:14 EST 2023" docASTNodeCount="62" docActiveCodeLength="340" docExpressionCount="44" docLength="340" endLine="10" insertionLength="8" int_docASTNodeCount="62" int_docActiveCodeLength="332" int_docExpressionCount="44" int_docLength="332" length="2" offset="290" startLine="10" starttimestamp="1701710826491" timestamp="12728300">
    <deletedText><![CDATA[is]]></deletedText>
    <insertedText><![CDATA[isAtom()]]></insertedText>
  </DocumentChange>
  <Command __id="5165" _type="InsertStringCommand" date="Mon Dec 04 15:59:14 EST 2023" starttimestamp="1701710826491" timestamp="12728305" timestamp2="12728305">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5166" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 15:59:15 EST 2023" starttimestamp="1701710826491" timestamp="12728618" />
  <DocumentChange __id="5167" _type="Insert" date="Mon Dec 04 15:59:15 EST 2023" docASTNodeCount="67" docActiveCodeLength="366" docExpressionCount="47" docLength="366" length="26" offset="299" repeat="18" starttimestamp="1701710826491" timestamp="12729166" timestamp2="12731688">
    <text><![CDATA[ {
			return expr.getT
		}]]></text>
  </DocumentChange>
  <Command __id="5168" _type="InsertStringCommand" date="Mon Dec 04 15:59:15 EST 2023" starttimestamp="1701710826491" timestamp="12729168" timestamp2="12729168">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="5170" _type="InsertStringCommand" date="Mon Dec 04 15:59:15 EST 2023" starttimestamp="1701710826491" timestamp="12729358" timestamp2="12729358">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5172" _type="InsertStringCommand" date="Mon Dec 04 15:59:16 EST 2023" starttimestamp="1701710826491" timestamp="12729578" timestamp2="12729578">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5174" _type="InsertStringCommand" date="Mon Dec 04 15:59:16 EST 2023" starttimestamp="1701710826491" timestamp="12729633" timestamp2="12729633">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5176" _type="InsertStringCommand" date="Mon Dec 04 15:59:16 EST 2023" starttimestamp="1701710826491" timestamp="12729738" timestamp2="12729738">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5178" _type="InsertStringCommand" date="Mon Dec 04 15:59:16 EST 2023" starttimestamp="1701710826491" timestamp="12729822" timestamp2="12729822">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5180" _type="InsertStringCommand" date="Mon Dec 04 15:59:16 EST 2023" starttimestamp="1701710826491" timestamp="12729959" timestamp2="12729959">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5182" _type="InsertStringCommand" date="Mon Dec 04 15:59:16 EST 2023" starttimestamp="1701710826491" timestamp="12729998" timestamp2="12729998">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5184" _type="InsertStringCommand" date="Mon Dec 04 15:59:16 EST 2023" starttimestamp="1701710826491" timestamp="12730160" timestamp2="12730160">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5186" _type="InsertStringCommand" date="Mon Dec 04 15:59:16 EST 2023" starttimestamp="1701710826491" timestamp="12730423" timestamp2="12730423">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5188" _type="InsertStringCommand" date="Mon Dec 04 15:59:17 EST 2023" starttimestamp="1701710826491" timestamp="12730595" timestamp2="12730595">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5190" _type="InsertStringCommand" date="Mon Dec 04 15:59:17 EST 2023" starttimestamp="1701710826491" timestamp="12730697" timestamp2="12730697">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5192" _type="InsertStringCommand" date="Mon Dec 04 15:59:17 EST 2023" starttimestamp="1701710826491" timestamp="12730777" timestamp2="12730777">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5194" _type="InsertStringCommand" date="Mon Dec 04 15:59:17 EST 2023" starttimestamp="1701710826491" timestamp="12730950" timestamp2="12730950">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5195" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 15:59:17 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12730953" />
  <Command __id="5200" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 15:59:18 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12731922" />
  <DocumentChange __id="5201" _type="Replace" date="Mon Dec 04 15:59:18 EST 2023" docASTNodeCount="67" docActiveCodeLength="371" docExpressionCount="47" docLength="371" endLine="11" insertionLength="9" int_docASTNodeCount="65" int_docActiveCodeLength="362" int_docExpressionCount="45" int_docLength="362" length="4" offset="317" startLine="11" starttimestamp="1701710826491" timestamp="12731924">
    <deletedText><![CDATA[getT]]></deletedText>
    <insertedText><![CDATA[getTail()]]></insertedText>
  </DocumentChange>
  <Command __id="5202" _type="InsertStringCommand" date="Mon Dec 04 15:59:18 EST 2023" starttimestamp="1701710826491" timestamp="12731929" timestamp2="12731929">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5204" _type="InsertStringCommand" date="Mon Dec 04 15:59:19 EST 2023" starttimestamp="1701710826491" timestamp="12732561" timestamp2="12732561">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5205" _type="MoveCaretCommand" caretOffset="250" date="Mon Dec 04 15:59:20 EST 2023" docOffset="331" starttimestamp="1701710826491" timestamp="12734013" />
  <Command __id="5206" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 15:59:20 EST 2023" starttimestamp="1701710826491" timestamp="12734156" />
  <Command __id="5207" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:59:20 EST 2023" starttimestamp="1701710826491" timestamp="12734253" />
  <Command __id="5208" _type="EclipseCommand" commandID="" date="Mon Dec 04 15:59:20 EST 2023" starttimestamp="1701710826491" timestamp="12734263" />
  <Command __id="5209" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:59:20 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12734288" type="Run" />
  <Command __id="5210" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:59:20 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12734288" type="Run" />
  <Command __id="5211" _type="MoveCaretCommand" caretOffset="220" date="Mon Dec 04 15:59:21 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="12735291" />
  <Command __id="5217" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:59:25 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12738920" type="Run" />
  <Command __id="5218" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:59:25 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12738920" type="Run" />
  <Command __id="5219" _type="ConsoleOutput" date="Mon Dec 04 15:59:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12740337" type="ConsoleOutput">
    <outputString><![CDATA[(eval (quote (+ 1 2)))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(eval (quote (+ 1 2)))¶")]]]></diff>
  </Command>
  <Command __id="5220" _type="PasteCommand" date="Mon Dec 04 15:59:26 EST 2023" starttimestamp="1701710826491" timestamp="12740340" />
  <Command __id="5221" _type="ConsoleOutput" date="Mon Dec 04 15:59:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12740347" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(eval (quote (+ 1 2)))"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5222" _type="ShellCommand" date="Mon Dec 04 15:59:28 EST 2023" starttimestamp="1701710826491" timestamp="12741724" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="5203" _type="Insert" date="Mon Dec 04 15:59:19 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" length="1" offset="326" starttimestamp="1701710826491" timestamp="12732558">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="5229" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:59:37 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12750834" type="Debug" />
  <Command __id="5230" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:59:37 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12750834" type="Run" />
  <Command __id="5231" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 15:59:37 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12750834" type="Debug" />
  <Command __id="5232" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 15:59:37 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12750834" type="Run" />
  <Command __id="5235" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:59:43 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12757112" type="Run" />
  <Command __id="5236" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 15:59:43 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12757112" type="Run" />
  <Command __id="5237" _type="ShellCommand" date="Mon Dec 04 15:59:43 EST 2023" starttimestamp="1701710826491" timestamp="12757435" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5238" _type="ConsoleOutput" date="Mon Dec 04 15:59:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12764783" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"7"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5239" _type="ConsoleOutput" date="Mon Dec 04 15:59:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12764784" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5240" _type="ConsoleOutput" date="Mon Dec 04 15:59:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12764789" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5241" _type="ConsoleOutput" date="Mon Dec 04 15:59:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12764790" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):5"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5242" _type="ConsoleOutput" date="Mon Dec 04 15:59:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12764791" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5243" _type="ConsoleOutput" date="Mon Dec 04 15:59:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12764791" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5244" _type="ConsoleOutput" date="Mon Dec 04 15:59:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12764816" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):31
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):31"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5245" _type="ConsoleOutput" date="Mon Dec 04 15:59:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12764817" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):31"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5246" _type="ConsoleOutput" date="Mon Dec 04 15:59:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12764817" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):33
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):33"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5247" _type="ConsoleOutput" date="Mon Dec 04 15:59:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12764819" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):33"), Diff(INSERT,"Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5248" _type="ConsoleOutput" date="Mon Dec 04 15:59:53 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12766850" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2
Test Result:CondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):2¶"), Diff(EQUAL,"Test Result:"), Diff(DELETE,"A6Extra"), Diff(EQUAL,"CondChecker,100.0% complete,10.0,10.0,¶")]]]></diff>
  </Command>
  <Command __id="5249" _type="LocalChecksRawCommand" date="Mon Dec 04 15:59:53 EST 2023" starttimestamp="1701710826491" timestamp="12766853">
    <CSVRow><![CDATA[86,Mon Dec 04 15:59:51 EST 2023,34,0,A6ExtraCondChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,36,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5250" _type="LocalChecksRawCommand" date="Mon Dec 04 15:59:53 EST 2023" starttimestamp="1701710826491" timestamp="12766853">
    <CSVRow><![CDATA[86,Mon Dec 04 15:59:51 EST 2023,34,0,A6ExtraCondChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,36,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5251" _type="LocalChecksRawCommand" date="Mon Dec 04 15:59:53 EST 2023" starttimestamp="1701710826491" timestamp="12766853">
    <CSVRow><![CDATA[87,Mon Dec 04 15:59:53 EST 2023,34,0,CondChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,36,1,false, , , ,CondChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5252" _type="LocalChecksRawCommand" date="Mon Dec 04 15:59:53 EST 2023" starttimestamp="1701710826491" timestamp="12766853">
    <CSVRow><![CDATA[87,Mon Dec 04 15:59:53 EST 2023,34,0,CondChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,36,1,false, , , ,CondChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5253" _type="ConsoleOutput" date="Mon Dec 04 15:59:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12770779" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:QuoteChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"¶Test Result:"), Diff(DELETE,"Cond"), Diff(INSERT,"Quote"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶")]]]></diff>
  </Command>
  <Command __id="5254" _type="ExceptionCommand" date="Mon Dec 04 15:59:58 EST 2023" starttimestamp="1701710826491" timestamp="12772175" type="Exception">
    <exceptionString><![CDATA[java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.EvalEvaluator.eval(EvalEvaluator.java:13)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:25)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="5255" _type="ConsoleOutput" date="Mon Dec 04 15:59:58 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12772177" type="ConsoleOutput">
    <outputString><![CDATA[	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):8
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):1¶Test Result:QuoteChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)¶	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)¶¶Test execution time (ms):8"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5256" _type="ConsoleOutput" date="Mon Dec 04 15:59:58 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12772178" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string 
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)¶	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)¶¶Test execution time (ms):8"), Diff(INSERT,"Test Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string "), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5257" _type="ShellCommand" date="Mon Dec 04 16:00:07 EST 2023" starttimestamp="1701710826491" timestamp="12781381" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5259" _type="MoveCaretCommand" caretOffset="542" date="Mon Dec 04 16:00:08 EST 2023" docOffset="542" starttimestamp="1701710826491" timestamp="12782371" />
  <Command __id="5260" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 16:00:10 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="12783918" />
  <Command __id="5261" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 16:00:10 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="12783918" />
  <Command __id="5262" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 16:00:10 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="12784385" />
  <Command __id="5263" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 16:00:10 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="12784385" />
  <Command __id="5264" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 16:00:11 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="12784894" />
  <Command __id="5265" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 16:00:11 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="12784894" />
  <Command __id="5233" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 15:59:40 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12753769">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.scanner.tokens.Token;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }        public IdentifierAtomImpl(Token token) {        super(token);     }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5258" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:00:08 EST 2023" docASTNodeCount="187" docActiveCodeLength="1163" docExpressionCount="144" docLength="1163" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12782288">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5266" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 16:00:12 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="12785920" />
  <Command __id="5267" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 16:00:12 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="12785920" />
  <DocumentChange __id="5268" _type="Insert" date="Mon Dec 04 16:00:14 EST 2023" docASTNodeCount="182" docActiveCodeLength="1124" docExpressionCount="140" docLength="1165" length="2" offset="414" starttimestamp="1701710826491" timestamp="12788109">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="5269" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:00:14 EST 2023" starttimestamp="1701710826491" timestamp="12788121" />
  <Command __id="5270" _type="LocalChecksRawCommand" date="Mon Dec 04 16:00:14 EST 2023" starttimestamp="1701710826491" timestamp="12788123">
    <CSVRow><![CDATA[88,Mon Dec 04 15:59:57 EST 2023,34,0,QuoteChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,36,2,false, , , ,QuoteChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5271" _type="LocalChecksRawCommand" date="Mon Dec 04 16:00:14 EST 2023" starttimestamp="1701710826491" timestamp="12788123">
    <CSVRow><![CDATA[88,Mon Dec 04 15:59:57 EST 2023,34,0,QuoteChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,36,2,false, , , ,QuoteChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5272" _type="LocalChecksRawCommand" date="Mon Dec 04 16:00:14 EST 2023" starttimestamp="1701710826491" timestamp="12788123">
    <CSVRow><![CDATA[89,Mon Dec 04 15:59:58 EST 2023,34,0,EvalChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,36,3,false, , , ,EvalChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5273" _type="LocalChecksRawCommand" date="Mon Dec 04 16:00:14 EST 2023" starttimestamp="1701710826491" timestamp="12788123">
    <CSVRow><![CDATA[89,Mon Dec 04 15:59:58 EST 2023,34,0,EvalChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,36,3,false, , , ,EvalChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5275" _type="InsertStringCommand" date="Mon Dec 04 16:00:15 EST 2023" starttimestamp="1701710826491" timestamp="12788547" timestamp2="12788547">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5276" _type="InsertStringCommand" date="Mon Dec 04 16:00:15 EST 2023" starttimestamp="1701710826491" timestamp="12788547" timestamp2="12788547">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5278" _type="InsertStringCommand" date="Mon Dec 04 16:00:15 EST 2023" starttimestamp="1701710826491" timestamp="12789290" timestamp2="12789290">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5279" _type="InsertStringCommand" date="Mon Dec 04 16:00:15 EST 2023" starttimestamp="1701710826491" timestamp="12789290" timestamp2="12789290">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5281" _type="InsertStringCommand" date="Mon Dec 04 16:00:15 EST 2023" starttimestamp="1701710826491" timestamp="12789349" timestamp2="12789349">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5282" _type="InsertStringCommand" date="Mon Dec 04 16:00:15 EST 2023" starttimestamp="1701710826491" timestamp="12789349" timestamp2="12789349">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5284" _type="InsertStringCommand" date="Mon Dec 04 16:00:15 EST 2023" starttimestamp="1701710826491" timestamp="12789477" timestamp2="12789477">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5285" _type="InsertStringCommand" date="Mon Dec 04 16:00:15 EST 2023" starttimestamp="1701710826491" timestamp="12789477" timestamp2="12789477">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5287" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12789530" timestamp2="12789530">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5288" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12789530" timestamp2="12789530">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5290" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12789674" timestamp2="12789674">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5291" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12789674" timestamp2="12789674">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5293" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12789717" timestamp2="12789717">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5294" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12789717" timestamp2="12789717">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5296" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12789833" timestamp2="12789833">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5297" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12789833" timestamp2="12789833">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5299" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12789918" timestamp2="12789918">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5300" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12789918" timestamp2="12789918">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5302" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12790078" timestamp2="12790078">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5303" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12790078" timestamp2="12790078">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5305" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12790206" timestamp2="12790206">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5306" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12790206" timestamp2="12790206">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5308" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12790279" timestamp2="12790279">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5309" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12790280" timestamp2="12790280">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5311" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12790405" timestamp2="12790405">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5312" _type="InsertStringCommand" date="Mon Dec 04 16:00:16 EST 2023" starttimestamp="1701710826491" timestamp="12790407" timestamp2="12790407">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5313" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 16:00:17 EST 2023" starttimestamp="1701710826491" timestamp="12791463" />
  <Command __id="5314" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:00:18 EST 2023" starttimestamp="1701710826491" timestamp="12791559" />
  <Command __id="5315" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:00:18 EST 2023" starttimestamp="1701710826491" timestamp="12791569" />
  <Command __id="5322" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:00:20 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12794101" type="Run" />
  <Command __id="5323" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:00:20 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12794102" type="Run" />
  <Command __id="5324" _type="ShellCommand" date="Mon Dec 04 16:00:20 EST 2023" starttimestamp="1701710826491" timestamp="12794415" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5325" _type="ConsoleOutput" date="Mon Dec 04 16:00:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12800378" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:EvalChecker,"), Diff(INSERT,"execution time (ms):1¶Test Result:TestLispFileProvided,10"), Diff(EQUAL,"0.0% complete,0.0,"), Diff(DELETE,"1"), Diff(EQUAL,"0.0,"), Diff(DELETE,"Expected strings:7actual string "), Diff(INSERT,"¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5326" _type="ConsoleOutput" date="Mon Dec 04 16:00:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12800385" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,

Test execution time (ms):7
Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"5"), Diff(EQUAL,"¶Test Result:"), Diff(DELETE,"TestLispFile"), Diff(INSERT,"ClassRegistryProvided,100.0% complete,0.0,0.0,¶¶Test execution time (ms):7¶Test Result:MainClass"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶"), Diff(DELETE,"¶")]]]></diff>
  </Command>
  <Command __id="5327" _type="ConsoleOutput" date="Mon Dec 04 16:00:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12800409" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):31
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"5¶Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,¶¶Test execution time (ms):7¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"31"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5328" _type="ConsoleOutput" date="Mon Dec 04 16:00:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12800410" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):31"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5329" _type="ConsoleOutput" date="Mon Dec 04 16:00:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12800411" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):34
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):34"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5330" _type="ConsoleOutput" date="Mon Dec 04 16:00:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12800412" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string (EVAL (QUOTE (QUOTE (+ 3 4))))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):34"), Diff(INSERT,"Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string (EVAL (QUOTE (QUOTE (+ 3 4))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5331" _type="ShellCommand" date="Mon Dec 04 16:00:29 EST 2023" starttimestamp="1701710826491" timestamp="12802515" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5332" _type="CopyCommand" date="Mon Dec 04 16:00:30 EST 2023" starttimestamp="1701710826491" timestamp="12803903" />
  <Command __id="5333" _type="ShellCommand" date="Mon Dec 04 16:00:31 EST 2023" starttimestamp="1701710826491" timestamp="12805194" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5334" _type="ShellCommand" date="Mon Dec 04 16:00:33 EST 2023" starttimestamp="1701710826491" timestamp="12806757" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5335" _type="MoveCaretCommand" caretOffset="308" date="Mon Dec 04 16:00:33 EST 2023" docOffset="308" starttimestamp="1701710826491" timestamp="12806843" />
  <Command __id="5336" _type="MoveCaretCommand" caretOffset="308" date="Mon Dec 04 16:00:33 EST 2023" docOffset="308" starttimestamp="1701710826491" timestamp="12806843" />
  <DocumentChange __id="5274" _type="Insert" date="Mon Dec 04 16:00:15 EST 2023" docASTNodeCount="184" docActiveCodeLength="1139" docExpressionCount="141" docLength="1180" length="15" offset="455" repeat="13" starttimestamp="1701710826491" timestamp="12788541" timestamp2="12790403">
    <text><![CDATA[
		return expr;]]></text>
  </DocumentChange>
  <Command __id="5337" _type="ShellCommand" date="Mon Dec 04 16:00:34 EST 2023" starttimestamp="1701710826491" timestamp="12807871" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5338" _type="LocalChecksRawCommand" date="Mon Dec 04 16:00:34 EST 2023" starttimestamp="1701710826491" timestamp="12807872">
    <CSVRow><![CDATA[90,Mon Dec 04 16:00:26 EST 2023,34,0,EvalChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,37,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,EvalChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5339" _type="LocalChecksRawCommand" date="Mon Dec 04 16:00:34 EST 2023" starttimestamp="1701710826491" timestamp="12807872">
    <CSVRow><![CDATA[90,Mon Dec 04 16:00:26 EST 2023,34,0,EvalChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,37,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,EvalChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5340" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:00:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12808183" type="Debug" />
  <Command __id="5341" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:00:34 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12808183" type="Run" />
  <Command __id="5342" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:00:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12808183" type="Debug" />
  <Command __id="5343" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:00:34 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12808183" type="Run" />
  <Command __id="5344" _type="ShellCommand" date="Mon Dec 04 16:00:34 EST 2023" starttimestamp="1701710826491" timestamp="12808189" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5345" _type="MoveCaretCommand" caretOffset="473" date="Mon Dec 04 16:00:34 EST 2023" docOffset="473" starttimestamp="1701710826491" timestamp="12808495" />
  <Command __id="5346" _type="MoveCaretCommand" caretOffset="473" date="Mon Dec 04 16:00:34 EST 2023" docOffset="473" starttimestamp="1701710826491" timestamp="12808495" />
  <Command __id="5348" _type="MoveCaretCommand" caretOffset="351" date="Mon Dec 04 16:00:36 EST 2023" docOffset="351" starttimestamp="1701710826491" timestamp="12809898" />
  <Command __id="5347" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:00:36 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12809836">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5349" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Mon Dec 04 16:00:39 EST 2023" starttimestamp="1701710826491" timestamp="12812695" />
  <Command __id="5350" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:00:39 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12812888" type="Run" />
  <Command __id="5351" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:00:39 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12812888" type="Run" />
  <Command __id="5352" _type="PasteCommand" date="Mon Dec 04 16:00:40 EST 2023" starttimestamp="1701710826491" timestamp="12813878" />
  <Command __id="5353" _type="ConsoleOutput" date="Mon Dec 04 16:00:41 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12814662" type="ConsoleOutput">
    <outputString><![CDATA[(QUOTE (QUOTE (+ 3 4)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string (EVAL "), Diff(EQUAL,"(QUOTE (QUOTE (+ 3 4)))"), Diff(DELETE,")"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5355" _type="MoveCaretCommand" caretOffset="473" date="Mon Dec 04 16:00:51 EST 2023" docOffset="473" starttimestamp="1701710826491" timestamp="12824556" />
  <Command __id="5354" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:00:50 EST 2023" docASTNodeCount="184" docActiveCodeLength="1139" docExpressionCount="141" docLength="1180" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12824483">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();"), Diff(INSERT,"//"), Diff(EQUAL,"		return evalHelper(expr, environment);	"), Diff(INSERT,"	return expr;	"), Diff(EQUAL,"}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
//		return evalHelper(expr, environment);
		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		
		boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="5356" _type="MoveCaretCommand" caretOffset="444" date="Mon Dec 04 16:00:52 EST 2023" docOffset="444" starttimestamp="1701710826491" timestamp="12826000" />
  <Command __id="5357" _type="MoveCaretCommand" caretOffset="444" date="Mon Dec 04 16:00:52 EST 2023" docOffset="444" starttimestamp="1701710826491" timestamp="12826000" />
  <DocumentChange __id="5358" _type="Delete" date="Mon Dec 04 16:00:53 EST 2023" docASTNodeCount="189" docActiveCodeLength="1178" docExpressionCount="145" docLength="1178" endLine="13" length="2" offset="414" startLine="13" starttimestamp="1701710826491" timestamp="12827142">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="5359" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:00:53 EST 2023" starttimestamp="1701710826491" timestamp="12827159" />
  <Command __id="5360" _type="MoveCaretCommand" caretOffset="468" date="Mon Dec 04 16:00:54 EST 2023" docOffset="468" starttimestamp="1701710826491" timestamp="12827900" />
  <Command __id="5361" _type="MoveCaretCommand" caretOffset="468" date="Mon Dec 04 16:00:54 EST 2023" docOffset="468" starttimestamp="1701710826491" timestamp="12827900" />
  <Command __id="5363" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:00:54 EST 2023" starttimestamp="1701710826491" timestamp="12828046" />
  <Command __id="5364" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 16:00:55 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="12829014" />
  <Command __id="5365" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 16:00:55 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="12829014" />
  <DocumentChange __id="5362" _type="Insert" date="Mon Dec 04 16:00:54 EST 2023" docASTNodeCount="187" docActiveCodeLength="1164" docExpressionCount="144" docLength="1180" length="2" offset="454" starttimestamp="1701710826491" timestamp="12828035">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="5366" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 16:00:58 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="12831988" />
  <Command __id="5367" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 16:00:58 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="12831988" />
  <DocumentChange __id="5368" _type="Insert" date="Mon Dec 04 16:01:11 EST 2023" docASTNodeCount="179" docActiveCodeLength="1130" docExpressionCount="137" docLength="1182" length="2" offset="379" starttimestamp="1701710826491" timestamp="12844672">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="5369" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:01:11 EST 2023" starttimestamp="1701710826491" timestamp="12844688" />
  <Command __id="5370" _type="MoveCaretCommand" caretOffset="455" date="Mon Dec 04 16:01:11 EST 2023" docOffset="455" starttimestamp="1701710826491" timestamp="12845190" />
  <Command __id="5371" _type="MoveCaretCommand" caretOffset="455" date="Mon Dec 04 16:01:11 EST 2023" docOffset="455" starttimestamp="1701710826491" timestamp="12845190" />
  <DocumentChange __id="5372" _type="Insert" date="Mon Dec 04 16:01:11 EST 2023" docASTNodeCount="174" docActiveCodeLength="1091" docExpressionCount="133" docLength="1184" length="2" offset="416" starttimestamp="1701710826491" timestamp="12845317">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="5373" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:01:11 EST 2023" starttimestamp="1701710826491" timestamp="12845327" />
  <Command __id="5374" _type="MoveCaretCommand" caretOffset="474" date="Mon Dec 04 16:01:12 EST 2023" docOffset="474" starttimestamp="1701710826491" timestamp="12846147" />
  <Command __id="5375" _type="MoveCaretCommand" caretOffset="474" date="Mon Dec 04 16:01:12 EST 2023" docOffset="474" starttimestamp="1701710826491" timestamp="12846147" />
  <Command __id="5383" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:01:16 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12850363" type="Run" />
  <Command __id="5384" _type="ShellCommand" date="Mon Dec 04 16:01:17 EST 2023" starttimestamp="1701710826491" timestamp="12850679" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5385" _type="ConsoleOutput" date="Mon Dec 04 16:01:22 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12856031" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(QUOTE (QUOTE (+ 3 4)))"), Diff(INSERT,"Test execution time (ms):0¶Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5386" _type="ConsoleOutput" date="Mon Dec 04 16:01:22 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12856036" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"0¶Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5387" _type="ConsoleOutput" date="Mon Dec 04 16:01:22 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12856039" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,

Test execution time (ms):7
Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):6"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,¶¶Test execution time (ms):7¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5388" _type="ConsoleOutput" date="Mon Dec 04 16:01:22 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12856063" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):33
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,¶¶Test execution time (ms):7¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):33"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5389" _type="ConsoleOutput" date="Mon Dec 04 16:01:22 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12856065" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):33"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5390" _type="ConsoleOutput" date="Mon Dec 04 16:01:22 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12856066" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):36
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):36"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5391" _type="ConsoleOutput" date="Mon Dec 04 16:01:22 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12856067" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string (EVAL (EVAL (QUOTE (QUOTE (+ 3 4)))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):36"), Diff(INSERT,"Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string (EVAL (EVAL (QUOTE (QUOTE (+ 3 4)))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5392" _type="ShellCommand" date="Mon Dec 04 16:01:24 EST 2023" starttimestamp="1701710826491" timestamp="12857784" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5393" _type="LocalChecksRawCommand" date="Mon Dec 04 16:01:24 EST 2023" starttimestamp="1701710826491" timestamp="12857791">
    <CSVRow><![CDATA[91,Mon Dec 04 16:01:22 EST 2023,34,0,EvalChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,38,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,EvalChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5394" _type="LocalChecksRawCommand" date="Mon Dec 04 16:01:24 EST 2023" starttimestamp="1701710826491" timestamp="12857792">
    <CSVRow><![CDATA[91,Mon Dec 04 16:01:22 EST 2023,34,0,EvalChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,38,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,EvalChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5395" _type="CopyCommand" date="Mon Dec 04 16:01:27 EST 2023" starttimestamp="1701710826491" timestamp="12861003" />
  <Command __id="5396" _type="ShellCommand" date="Mon Dec 04 16:01:28 EST 2023" starttimestamp="1701710826491" timestamp="12862075" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5400" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:01:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12868035" type="Debug" />
  <Command __id="5401" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:01:34 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12868035" type="Run" />
  <Command __id="5402" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:01:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12868035" type="Debug" />
  <Command __id="5403" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:01:34 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12868036" type="Run" />
  <Command __id="5423" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:01:41 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12874689" type="Run" />
  <Command __id="5424" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:01:41 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12874689" type="Run" />
  <DocumentChange __id="5376" _type="Delete" date="Mon Dec 04 16:01:12 EST 2023" docASTNodeCount="176" docActiveCodeLength="1105" docExpressionCount="134" docLength="1182" endLine="14" length="2" offset="458" startLine="14" starttimestamp="1701710826491" timestamp="12846248">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5406" _type="Insert" date="Mon Dec 04 16:01:36 EST 2023" docASTNodeCount="174" docActiveCodeLength="1091" docExpressionCount="133" docLength="1184" length="2" offset="458" starttimestamp="1701710826491" timestamp="12869743">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5410" _type="Delete" date="Mon Dec 04 16:01:36 EST 2023" docASTNodeCount="182" docActiveCodeLength="1125" docExpressionCount="140" docLength="1182" endLine="12" length="2" offset="379" startLine="12" starttimestamp="1701710826491" timestamp="12870484">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5414" _type="Delete" date="Mon Dec 04 16:01:37 EST 2023" docASTNodeCount="187" docActiveCodeLength="1164" docExpressionCount="144" docLength="1180" endLine="13" length="2" offset="414" startLine="13" starttimestamp="1701710826491" timestamp="12871091">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="5421" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:01:39 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12872671">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5425" _type="PasteCommand" date="Mon Dec 04 16:01:42 EST 2023" starttimestamp="1701710826491" timestamp="12876076" />
  <Command __id="5426" _type="ConsoleOutput" date="Mon Dec 04 16:01:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12876704" type="ConsoleOutput">
    <outputString><![CDATA[Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:EvalChecker,0.0% complete,0.0,10.0,Expected strings:7actual string (EVAL (EVAL (QUOTE (QUOTE (+ 3 4)))))"), Diff(INSERT,"Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5427" _type="ConsoleOutput" date="Mon Dec 04 16:01:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12876708" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.EvalEvaluator.eval(EvalEvaluator.java:13)
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:26)
	at index.EvalEvaluator.eval(EvalEvaluator.java:14)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head"), Diff(INSERT,"	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:13)¶	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:26)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:14)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:15)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5428" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:01:43 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12876722" type="Debug" />
  <Command __id="5429" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:01:43 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12876722" type="Run" />
  <Command __id="5430" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:01:43 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="12876722" type="Debug" />
  <Command __id="5431" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:01:43 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12876722" type="Run" />
  <Command __id="5433" _type="SelectTextCommand" caretOffset="413" date="Mon Dec 04 16:01:46 EST 2023" end="413" start="379" starttimestamp="1701710826491" timestamp="12880009" />
  <Command __id="5434" _type="MoveCaretCommand" caretOffset="378" date="Mon Dec 04 16:01:54 EST 2023" docOffset="378" starttimestamp="1701710826491" timestamp="12887863" />
  <Command __id="5435" _type="MoveCaretCommand" caretOffset="378" date="Mon Dec 04 16:01:54 EST 2023" docOffset="378" starttimestamp="1701710826491" timestamp="12887863" />
  <Command __id="5437" _type="InsertStringCommand" date="Mon Dec 04 16:01:54 EST 2023" starttimestamp="1701710826491" timestamp="12888415" timestamp2="12888415">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5438" _type="InsertStringCommand" date="Mon Dec 04 16:01:54 EST 2023" starttimestamp="1701710826491" timestamp="12888415" timestamp2="12888415">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5440" _type="InsertStringCommand" date="Mon Dec 04 16:01:55 EST 2023" starttimestamp="1701710826491" timestamp="12888722" timestamp2="12888722">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5441" _type="InsertStringCommand" date="Mon Dec 04 16:01:55 EST 2023" starttimestamp="1701710826491" timestamp="12888722" timestamp2="12888722">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5443" _type="InsertStringCommand" date="Mon Dec 04 16:01:55 EST 2023" starttimestamp="1701710826491" timestamp="12888822" timestamp2="12888822">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5444" _type="InsertStringCommand" date="Mon Dec 04 16:01:55 EST 2023" starttimestamp="1701710826491" timestamp="12888822" timestamp2="12888822">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5446" _type="InsertStringCommand" date="Mon Dec 04 16:01:55 EST 2023" starttimestamp="1701710826491" timestamp="12888965" timestamp2="12888965">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5447" _type="InsertStringCommand" date="Mon Dec 04 16:01:55 EST 2023" starttimestamp="1701710826491" timestamp="12888965" timestamp2="12888965">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5449" _type="InsertStringCommand" date="Mon Dec 04 16:01:55 EST 2023" starttimestamp="1701710826491" timestamp="12889495" timestamp2="12889495">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5450" _type="InsertStringCommand" date="Mon Dec 04 16:01:55 EST 2023" starttimestamp="1701710826491" timestamp="12889495" timestamp2="12889495">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5452" _type="InsertStringCommand" date="Mon Dec 04 16:01:56 EST 2023" starttimestamp="1701710826491" timestamp="12889756" timestamp2="12889756">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5453" _type="InsertStringCommand" date="Mon Dec 04 16:01:56 EST 2023" starttimestamp="1701710826491" timestamp="12889756" timestamp2="12889756">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5455" _type="InsertStringCommand" date="Mon Dec 04 16:01:56 EST 2023" starttimestamp="1701710826491" timestamp="12889859" timestamp2="12889859">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5456" _type="InsertStringCommand" date="Mon Dec 04 16:01:56 EST 2023" starttimestamp="1701710826491" timestamp="12889859" timestamp2="12889859">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5458" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:01:56 EST 2023" starttimestamp="1701710826491" timestamp="12890101" />
  <Command __id="5459" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:01:56 EST 2023" starttimestamp="1701710826491" timestamp="12890101" />
  <Command __id="5461" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:01:56 EST 2023" starttimestamp="1701710826491" timestamp="12890200" />
  <Command __id="5462" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:01:56 EST 2023" starttimestamp="1701710826491" timestamp="12890201" />
  <Command __id="5464" _type="InsertStringCommand" date="Mon Dec 04 16:01:56 EST 2023" starttimestamp="1701710826491" timestamp="12890290" timestamp2="12890290">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5465" _type="InsertStringCommand" date="Mon Dec 04 16:01:56 EST 2023" starttimestamp="1701710826491" timestamp="12890290" timestamp2="12890290">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5467" _type="InsertStringCommand" date="Mon Dec 04 16:01:57 EST 2023" starttimestamp="1701710826491" timestamp="12890541" timestamp2="12890541">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5468" _type="InsertStringCommand" date="Mon Dec 04 16:01:57 EST 2023" starttimestamp="1701710826491" timestamp="12890542" timestamp2="12890542">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5470" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:01:57 EST 2023" starttimestamp="1701710826491" timestamp="12890876" />
  <Command __id="5471" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:01:57 EST 2023" starttimestamp="1701710826491" timestamp="12890877" />
  <Command __id="5473" _type="InsertStringCommand" date="Mon Dec 04 16:01:57 EST 2023" starttimestamp="1701710826491" timestamp="12891061" timestamp2="12891061">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5474" _type="InsertStringCommand" date="Mon Dec 04 16:01:57 EST 2023" starttimestamp="1701710826491" timestamp="12891061" timestamp2="12891061">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5476" _type="InsertStringCommand" date="Mon Dec 04 16:01:57 EST 2023" starttimestamp="1701710826491" timestamp="12891161" timestamp2="12891161">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5477" _type="InsertStringCommand" date="Mon Dec 04 16:01:57 EST 2023" starttimestamp="1701710826491" timestamp="12891161" timestamp2="12891161">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5479" _type="InsertStringCommand" date="Mon Dec 04 16:01:57 EST 2023" starttimestamp="1701710826491" timestamp="12891282" timestamp2="12891282">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5480" _type="InsertStringCommand" date="Mon Dec 04 16:01:57 EST 2023" starttimestamp="1701710826491" timestamp="12891282" timestamp2="12891282">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5481" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:01:57 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12891288" />
  <Command __id="5489" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:01:59 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12892528" />
  <Command __id="5491" _type="InsertStringCommand" date="Mon Dec 04 16:01:59 EST 2023" starttimestamp="1701710826491" timestamp="12892536" timestamp2="12892536">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5492" _type="InsertStringCommand" date="Mon Dec 04 16:01:59 EST 2023" starttimestamp="1701710826491" timestamp="12892536" timestamp2="12892536">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5493" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:01:59 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12892547" />
  <Command __id="5495" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:01:59 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12893429" />
  <Command __id="5497" _type="InsertStringCommand" date="Mon Dec 04 16:01:59 EST 2023" starttimestamp="1701710826491" timestamp="12893436" timestamp2="12893436">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5498" _type="InsertStringCommand" date="Mon Dec 04 16:01:59 EST 2023" starttimestamp="1701710826491" timestamp="12893436" timestamp2="12893436">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5499" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:01:59 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12893445" />
  <Command __id="5512" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:02:02 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12895693" />
  <Command __id="5514" _type="InsertStringCommand" date="Mon Dec 04 16:02:02 EST 2023" starttimestamp="1701710826491" timestamp="12895700" timestamp2="12895700">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5515" _type="InsertStringCommand" date="Mon Dec 04 16:02:02 EST 2023" starttimestamp="1701710826491" timestamp="12895700" timestamp2="12895700">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5516" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:02:02 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12895710" />
  <Command __id="5532" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:02:05 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12898749" />
  <Command __id="5534" _type="InsertStringCommand" date="Mon Dec 04 16:02:05 EST 2023" starttimestamp="1701710826491" timestamp="12898752" timestamp2="12898752">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5535" _type="InsertStringCommand" date="Mon Dec 04 16:02:05 EST 2023" starttimestamp="1701710826491" timestamp="12898752" timestamp2="12898752">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5432" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:01:46 EST 2023" docASTNodeCount="187" docActiveCodeLength="1164" docExpressionCount="144" docLength="1180" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12879946">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail().getHead();"), Diff(DELETE,"//"), Diff(EQUAL,"		return evalHelper(expr, environment);"), Diff(INSERT,"//"), Diff(EQUAL,"		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail().getHead();
		return evalHelper(expr, environment);
//		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		
		boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <DocumentChange __id="5436" _type="Insert" date="Mon Dec 04 16:01:54 EST 2023" docASTNodeCount="189" docActiveCodeLength="1174" docExpressionCount="145" docLength="1190" length="10" offset="378" repeat="7" starttimestamp="1701710826491" timestamp="12888410" timestamp2="12889859">
    <text><![CDATA[
		if(epr)]]></text>
  </DocumentChange>
  <DocumentChange __id="5457" _type="Delete" date="Mon Dec 04 16:01:56 EST 2023" docASTNodeCount="189" docActiveCodeLength="1172" docExpressionCount="145" docLength="1188" endLine="12" length="2" offset="385" repeat="2" startLine="12" starttimestamp="1701710826491" timestamp="12890098" timestamp2="12890198">
    <text><![CDATA[pr]]></text>
  </DocumentChange>
  <DocumentChange __id="5463" _type="Insert" date="Mon Dec 04 16:01:56 EST 2023" docASTNodeCount="189" docActiveCodeLength="1174" docExpressionCount="145" docLength="1190" length="2" offset="385" repeat="2" starttimestamp="1701710826491" timestamp="12890290" timestamp2="12890541">
    <text><![CDATA[xr]]></text>
  </DocumentChange>
  <DocumentChange __id="5469" _type="Delete" date="Mon Dec 04 16:01:57 EST 2023" docASTNodeCount="189" docActiveCodeLength="1173" docExpressionCount="145" docLength="1189" endLine="12" length="1" offset="386" startLine="12" starttimestamp="1701710826491" timestamp="12890874">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5472" _type="Insert" date="Mon Dec 04 16:01:57 EST 2023" docASTNodeCount="191" docActiveCodeLength="1183" docExpressionCount="147" docLength="1199" length="10" offset="386" repeat="10" starttimestamp="1701710826491" timestamp="12891061" timestamp2="12892350">
    <text><![CDATA[pr.getTail]]></text>
  </DocumentChange>
  <DocumentChange __id="5490" _type="Replace" date="Mon Dec 04 16:01:59 EST 2023" docASTNodeCount="193" docActiveCodeLength="1186" docExpressionCount="149" docLength="1202" endLine="12" insertionLength="10" int_docASTNodeCount="191" int_docActiveCodeLength="1176" int_docExpressionCount="146" int_docLength="1192" length="7" offset="389" startLine="12" starttimestamp="1701710826491" timestamp="12892531">
    <deletedText><![CDATA[getTail]]></deletedText>
    <insertedText><![CDATA[getTail().]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5494" _type="Delete" date="Mon Dec 04 16:01:59 EST 2023" docASTNodeCount="191" docActiveCodeLength="1185" docExpressionCount="147" docLength="1201" endLine="12" length="1" offset="398" startLine="12" starttimestamp="1701710826491" timestamp="12892807">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="5496" _type="Insert" date="Mon Dec 04 16:01:59 EST 2023" docASTNodeCount="194" docActiveCodeLength="1197" docExpressionCount="149" docLength="1213" length="12" offset="398" starttimestamp="1701710826491" timestamp="12893434">
    <text><![CDATA[environment.]]></text>
  </DocumentChange>
  <DocumentChange __id="5500" _type="Delete" date="Mon Dec 04 16:02:00 EST 2023" docASTNodeCount="191" docActiveCodeLength="1185" docExpressionCount="147" docLength="1201" endLine="12" length="12" offset="398" repeat="12" startLine="12" starttimestamp="1701710826491" timestamp="12894073" timestamp2="12895414">
    <text><![CDATA[environment.]]></text>
  </DocumentChange>
  <DocumentChange __id="5513" _type="Insert" date="Mon Dec 04 16:02:02 EST 2023" docASTNodeCount="194" docActiveCodeLength="1197" docExpressionCount="149" docLength="1213" length="12" offset="398" starttimestamp="1701710826491" timestamp="12895698">
    <text><![CDATA[environment.]]></text>
  </DocumentChange>
  <DocumentChange __id="5517" _type="Delete" date="Mon Dec 04 16:02:02 EST 2023" docASTNodeCount="191" docActiveCodeLength="1183" docExpressionCount="147" docLength="1199" endLine="12" length="14" offset="396" repeat="14" startLine="12" starttimestamp="1701710826491" timestamp="12896360" timestamp2="12898103">
    <text><![CDATA[()environment.]]></text>
  </DocumentChange>
  <DocumentChange __id="5531" _type="Insert" date="Mon Dec 04 16:02:04 EST 2023" docASTNodeCount="191" docActiveCodeLength="1185" docExpressionCount="147" docLength="1201" length="2" offset="396" starttimestamp="1701710826491" timestamp="12898467">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="5533" _type="Replace" date="Mon Dec 04 16:02:05 EST 2023" docASTNodeCount="193" docActiveCodeLength="1186" docExpressionCount="149" docLength="1202" endLine="12" insertionLength="10" int_docASTNodeCount="191" int_docActiveCodeLength="1176" int_docExpressionCount="146" int_docLength="1192" length="9" offset="389" startLine="12" starttimestamp="1701710826491" timestamp="12898750">
    <deletedText><![CDATA[getTail()]]></deletedText>
    <insertedText><![CDATA[getTail().]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5537" _type="Insert" date="Mon Dec 04 16:02:05 EST 2023" docASTNodeCount="193" docActiveCodeLength="1188" docExpressionCount="149" docLength="1204" length="2" offset="399" repeat="2" starttimestamp="1701710826491" timestamp="12899110" timestamp2="12899196">
    <text><![CDATA[is]]></text>
  </DocumentChange>
  <DocumentChange __id="5540" _type="Replace" date="Mon Dec 04 16:02:06 EST 2023" docASTNodeCount="193" docActiveCodeLength="1194" docExpressionCount="149" docLength="1210" endLine="12" insertionLength="8" int_docASTNodeCount="193" int_docActiveCodeLength="1186" int_docExpressionCount="149" int_docLength="1202" length="2" offset="399" startLine="12" starttimestamp="1701710826491" timestamp="12899781">
    <deletedText><![CDATA[is]]></deletedText>
    <insertedText><![CDATA[isAtom()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5545" _type="Insert" date="Mon Dec 04 16:02:07 EST 2023" docASTNodeCount="197" docActiveCodeLength="1198" docExpressionCount="152" docLength="1214" length="4" offset="408" repeat="2" starttimestamp="1701710826491" timestamp="12900705" timestamp2="12900982">
    <text><![CDATA[P
		]]></text>
  </DocumentChange>
  <DocumentChange __id="5551" _type="Delete" date="Mon Dec 04 16:02:08 EST 2023" docASTNodeCount="193" docActiveCodeLength="1194" docExpressionCount="149" docLength="1210" endLine="13" length="4" offset="408" repeat="4" startLine="12" starttimestamp="1701710826491" timestamp="12901755" timestamp2="12902143">
    <text><![CDATA[P
		]]></text>
  </DocumentChange>
  <Command __id="5536" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:02:05 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12898761" />
  <Command __id="5539" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:02:06 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12899778" />
  <Command __id="5541" _type="InsertStringCommand" date="Mon Dec 04 16:02:06 EST 2023" starttimestamp="1701710826491" timestamp="12899784" timestamp2="12899784">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5542" _type="InsertStringCommand" date="Mon Dec 04 16:02:06 EST 2023" starttimestamp="1701710826491" timestamp="12899784" timestamp2="12899784">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5543" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 16:02:06 EST 2023" starttimestamp="1701710826491" timestamp="12900366" />
  <Command __id="5544" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Dec 04 16:02:06 EST 2023" starttimestamp="1701710826491" timestamp="12900366" />
  <Command __id="5546" _type="InsertStringCommand" date="Mon Dec 04 16:02:07 EST 2023" starttimestamp="1701710826491" timestamp="12900708" timestamp2="12900708">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5547" _type="InsertStringCommand" date="Mon Dec 04 16:02:07 EST 2023" starttimestamp="1701710826491" timestamp="12900708" timestamp2="12900708">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5549" _type="InsertStringCommand" date="Mon Dec 04 16:02:07 EST 2023" starttimestamp="1701710826491" timestamp="12900986" timestamp2="12900986">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5550" _type="InsertStringCommand" date="Mon Dec 04 16:02:07 EST 2023" starttimestamp="1701710826491" timestamp="12900986" timestamp2="12900986">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5552" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:08 EST 2023" starttimestamp="1701710826491" timestamp="12901758" />
  <Command __id="5553" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:08 EST 2023" starttimestamp="1701710826491" timestamp="12901758" />
  <Command __id="5555" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:08 EST 2023" starttimestamp="1701710826491" timestamp="12901874" />
  <Command __id="5556" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:08 EST 2023" starttimestamp="1701710826491" timestamp="12901875" />
  <Command __id="5558" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:08 EST 2023" starttimestamp="1701710826491" timestamp="12902008" />
  <Command __id="5559" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:08 EST 2023" starttimestamp="1701710826491" timestamp="12902008" />
  <Command __id="5561" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:08 EST 2023" starttimestamp="1701710826491" timestamp="12902146" />
  <Command __id="5562" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:08 EST 2023" starttimestamp="1701710826491" timestamp="12902147" />
  <Command __id="5563" _type="InsertStringCommand" date="Mon Dec 04 16:02:09 EST 2023" starttimestamp="1701710826491" timestamp="12903014" timestamp2="12903014">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5564" _type="InsertStringCommand" date="Mon Dec 04 16:02:09 EST 2023" starttimestamp="1701710826491" timestamp="12903014" timestamp2="12903014">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5566" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Dec 04 16:02:10 EST 2023" starttimestamp="1701710826491" timestamp="12904143" />
  <Command __id="5567" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 16:02:11 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="12904655" />
  <Command __id="5568" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 16:02:11 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="12904655" />
  <Command __id="5569" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 16:02:11 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="12904838" />
  <Command __id="5570" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 16:02:11 EST 2023" docOffset="453" starttimestamp="1701710826491" timestamp="12904838" />
  <Command __id="5571" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 16:02:11 EST 2023" starttimestamp="1701710826491" timestamp="12904989" />
  <Command __id="5572" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:02:11 EST 2023" starttimestamp="1701710826491" timestamp="12905086" />
  <Command __id="5573" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:02:11 EST 2023" starttimestamp="1701710826491" timestamp="12905092" />
  <Command __id="5574" _type="MoveCaretCommand" caretOffset="378" date="Mon Dec 04 16:02:37 EST 2023" docOffset="378" starttimestamp="1701710826491" timestamp="12931318" />
  <Command __id="5575" _type="MoveCaretCommand" caretOffset="378" date="Mon Dec 04 16:02:37 EST 2023" docOffset="378" starttimestamp="1701710826491" timestamp="12931319" />
  <Command __id="5577" _type="InsertStringCommand" date="Mon Dec 04 16:02:38 EST 2023" starttimestamp="1701710826491" timestamp="12931559" timestamp2="12931559">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5578" _type="InsertStringCommand" date="Mon Dec 04 16:02:38 EST 2023" starttimestamp="1701710826491" timestamp="12931559" timestamp2="12931559">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5580" _type="InsertStringCommand" date="Mon Dec 04 16:02:38 EST 2023" starttimestamp="1701710826491" timestamp="12931820" timestamp2="12931820">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5581" _type="InsertStringCommand" date="Mon Dec 04 16:02:38 EST 2023" starttimestamp="1701710826491" timestamp="12931820" timestamp2="12931820">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5583" _type="InsertStringCommand" date="Mon Dec 04 16:02:38 EST 2023" starttimestamp="1701710826491" timestamp="12931930" timestamp2="12931930">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5584" _type="InsertStringCommand" date="Mon Dec 04 16:02:38 EST 2023" starttimestamp="1701710826491" timestamp="12931930" timestamp2="12931930">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5586" _type="InsertStringCommand" date="Mon Dec 04 16:02:38 EST 2023" starttimestamp="1701710826491" timestamp="12932032" timestamp2="12932032">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5587" _type="InsertStringCommand" date="Mon Dec 04 16:02:38 EST 2023" starttimestamp="1701710826491" timestamp="12932032" timestamp2="12932032">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5589" _type="InsertStringCommand" date="Mon Dec 04 16:02:39 EST 2023" starttimestamp="1701710826491" timestamp="12932733" timestamp2="12932733">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5590" _type="InsertStringCommand" date="Mon Dec 04 16:02:39 EST 2023" starttimestamp="1701710826491" timestamp="12932733" timestamp2="12932733">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5592" _type="InsertStringCommand" date="Mon Dec 04 16:02:39 EST 2023" starttimestamp="1701710826491" timestamp="12932908" timestamp2="12932908">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5593" _type="InsertStringCommand" date="Mon Dec 04 16:02:39 EST 2023" starttimestamp="1701710826491" timestamp="12932908" timestamp2="12932908">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5595" _type="InsertStringCommand" date="Mon Dec 04 16:02:39 EST 2023" starttimestamp="1701710826491" timestamp="12933021" timestamp2="12933021">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5596" _type="InsertStringCommand" date="Mon Dec 04 16:02:39 EST 2023" starttimestamp="1701710826491" timestamp="12933021" timestamp2="12933021">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5598" _type="InsertStringCommand" date="Mon Dec 04 16:02:39 EST 2023" starttimestamp="1701710826491" timestamp="12933095" timestamp2="12933095">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5599" _type="InsertStringCommand" date="Mon Dec 04 16:02:39 EST 2023" starttimestamp="1701710826491" timestamp="12933096" timestamp2="12933096">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5601" _type="InsertStringCommand" date="Mon Dec 04 16:02:39 EST 2023" starttimestamp="1701710826491" timestamp="12933395" timestamp2="12933395">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5602" _type="InsertStringCommand" date="Mon Dec 04 16:02:39 EST 2023" starttimestamp="1701710826491" timestamp="12933395" timestamp2="12933395">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5603" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:02:39 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12933401" />
  <DocumentChange __id="5565" _type="Delete" date="Mon Dec 04 16:02:10 EST 2023" docASTNodeCount="187" docActiveCodeLength="1164" docExpressionCount="144" docLength="1180" endLine="13" length="30" offset="379" startLine="12" starttimestamp="1701710826491" timestamp="12904139">
    <text><![CDATA[		if(expr.getTail().isAtom())
]]></text>
  </DocumentChange>
  <DocumentChange __id="5576" _type="Insert" date="Mon Dec 04 16:02:38 EST 2023" docASTNodeCount="191" docActiveCodeLength="1176" docExpressionCount="146" docLength="1192" length="12" offset="378" repeat="9" starttimestamp="1701710826491" timestamp="12931554" timestamp2="12933395">
    <text><![CDATA[
		if(expr.)]]></text>
  </DocumentChange>
  <DocumentChange __id="5604" _type="Delete" date="Mon Dec 04 16:02:40 EST 2023" docASTNodeCount="189" docActiveCodeLength="1175" docExpressionCount="145" docLength="1191" endLine="12" length="1" offset="388" startLine="12" starttimestamp="1701710826491" timestamp="12934010">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="5606" _type="Replace" date="Mon Dec 04 16:02:42 EST 2023" docASTNodeCount="191" docActiveCodeLength="1176" docExpressionCount="146" docLength="1192" endLine="12" insertionLength="5" int_docASTNodeCount="189" int_docActiveCodeLength="1171" int_docExpressionCount="145" int_docLength="1187" length="4" offset="384" startLine="12" starttimestamp="1701710826491" timestamp="12935807">
    <deletedText><![CDATA[expr]]></deletedText>
    <insertedText><![CDATA[expr.]]></insertedText>
  </DocumentChange>
  <Command __id="5605" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:02:42 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12935803" />
  <Command __id="5607" _type="InsertStringCommand" date="Mon Dec 04 16:02:42 EST 2023" starttimestamp="1701710826491" timestamp="12935812" timestamp2="12935812">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5608" _type="InsertStringCommand" date="Mon Dec 04 16:02:42 EST 2023" starttimestamp="1701710826491" timestamp="12935812" timestamp2="12935812">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5609" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:02:42 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12935826" />
  <Command __id="5615" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:02:46 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12939838" />
  <Command __id="5616" _type="MoveCaretCommand" caretOffset="385" date="Mon Dec 04 16:02:46 EST 2023" docOffset="385" starttimestamp="1701710826491" timestamp="12939918" />
  <Command __id="5617" _type="MoveCaretCommand" caretOffset="385" date="Mon Dec 04 16:02:46 EST 2023" docOffset="385" starttimestamp="1701710826491" timestamp="12939919" />
  <Command __id="5618" _type="MoveCaretCommand" caretOffset="384" date="Mon Dec 04 16:02:48 EST 2023" docOffset="384" starttimestamp="1701710826491" timestamp="12941565" />
  <Command __id="5619" _type="MoveCaretCommand" caretOffset="384" date="Mon Dec 04 16:02:48 EST 2023" docOffset="384" starttimestamp="1701710826491" timestamp="12941565" />
  <Command __id="5621" _type="InsertStringCommand" date="Mon Dec 04 16:02:48 EST 2023" starttimestamp="1701710826491" timestamp="12941904" timestamp2="12941904">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5622" _type="InsertStringCommand" date="Mon Dec 04 16:02:48 EST 2023" starttimestamp="1701710826491" timestamp="12941904" timestamp2="12941904">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5624" _type="InsertStringCommand" date="Mon Dec 04 16:02:48 EST 2023" starttimestamp="1701710826491" timestamp="12942078" timestamp2="12942078">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5625" _type="InsertStringCommand" date="Mon Dec 04 16:02:48 EST 2023" starttimestamp="1701710826491" timestamp="12942078" timestamp2="12942078">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5627" _type="InsertStringCommand" date="Mon Dec 04 16:02:48 EST 2023" starttimestamp="1701710826491" timestamp="12942198" timestamp2="12942198">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5628" _type="InsertStringCommand" date="Mon Dec 04 16:02:48 EST 2023" starttimestamp="1701710826491" timestamp="12942198" timestamp2="12942198">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5630" _type="InsertStringCommand" date="Mon Dec 04 16:02:48 EST 2023" starttimestamp="1701710826491" timestamp="12942303" timestamp2="12942303">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5631" _type="InsertStringCommand" date="Mon Dec 04 16:02:48 EST 2023" starttimestamp="1701710826491" timestamp="12942303" timestamp2="12942303">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5633" _type="InsertStringCommand" date="Mon Dec 04 16:02:48 EST 2023" starttimestamp="1701710826491" timestamp="12942425" timestamp2="12942425">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5634" _type="InsertStringCommand" date="Mon Dec 04 16:02:48 EST 2023" starttimestamp="1701710826491" timestamp="12942425" timestamp2="12942425">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5635" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:02:48 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12942443" />
  <Command __id="5640" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:02:49 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12943388" />
  <Command __id="5642" _type="InsertStringCommand" date="Mon Dec 04 16:02:49 EST 2023" starttimestamp="1701710826491" timestamp="12943396" timestamp2="12943396">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5643" _type="InsertStringCommand" date="Mon Dec 04 16:02:49 EST 2023" starttimestamp="1701710826491" timestamp="12943396" timestamp2="12943396">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5645" _type="InsertStringCommand" date="Mon Dec 04 16:02:50 EST 2023" starttimestamp="1701710826491" timestamp="12943865" timestamp2="12943865">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5646" _type="InsertStringCommand" date="Mon Dec 04 16:02:50 EST 2023" starttimestamp="1701710826491" timestamp="12943865" timestamp2="12943865">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5647" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:02:50 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12943874" />
  <Command __id="5650" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:02:51 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12944820" />
  <Command __id="5652" _type="InsertStringCommand" date="Mon Dec 04 16:02:51 EST 2023" starttimestamp="1701710826491" timestamp="12944824" timestamp2="12944824">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5653" _type="InsertStringCommand" date="Mon Dec 04 16:02:51 EST 2023" starttimestamp="1701710826491" timestamp="12944824" timestamp2="12944824">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5654" _type="MoveCaretCommand" caretOffset="346" date="Mon Dec 04 16:02:52 EST 2023" docOffset="346" starttimestamp="1701710826491" timestamp="12945837" />
  <Command __id="5655" _type="MoveCaretCommand" caretOffset="346" date="Mon Dec 04 16:02:52 EST 2023" docOffset="346" starttimestamp="1701710826491" timestamp="12945838" />
  <Command __id="5656" _type="MoveCaretCommand" caretOffset="408" date="Mon Dec 04 16:02:52 EST 2023" docOffset="408" starttimestamp="1701710826491" timestamp="12946269" />
  <Command __id="5657" _type="MoveCaretCommand" caretOffset="408" date="Mon Dec 04 16:02:52 EST 2023" docOffset="408" starttimestamp="1701710826491" timestamp="12946270" />
  <Command __id="5659" _type="InsertStringCommand" date="Mon Dec 04 16:02:53 EST 2023" starttimestamp="1701710826491" timestamp="12946687" timestamp2="12946687">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="5660" _type="InsertStringCommand" date="Mon Dec 04 16:02:53 EST 2023" starttimestamp="1701710826491" timestamp="12946687" timestamp2="12946687">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="5662" _type="InsertStringCommand" date="Mon Dec 04 16:02:53 EST 2023" starttimestamp="1701710826491" timestamp="12946836" timestamp2="12946836">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5663" _type="InsertStringCommand" date="Mon Dec 04 16:02:53 EST 2023" starttimestamp="1701710826491" timestamp="12946836" timestamp2="12946836">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5665" _type="InsertStringCommand" date="Mon Dec 04 16:02:53 EST 2023" starttimestamp="1701710826491" timestamp="12947145" timestamp2="12947145">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5666" _type="InsertStringCommand" date="Mon Dec 04 16:02:53 EST 2023" starttimestamp="1701710826491" timestamp="12947145" timestamp2="12947145">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5668" _type="InsertStringCommand" date="Mon Dec 04 16:02:53 EST 2023" starttimestamp="1701710826491" timestamp="12947178" timestamp2="12947178">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5669" _type="InsertStringCommand" date="Mon Dec 04 16:02:53 EST 2023" starttimestamp="1701710826491" timestamp="12947178" timestamp2="12947178">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5671" _type="InsertStringCommand" date="Mon Dec 04 16:02:53 EST 2023" starttimestamp="1701710826491" timestamp="12947294" timestamp2="12947294">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5672" _type="InsertStringCommand" date="Mon Dec 04 16:02:53 EST 2023" starttimestamp="1701710826491" timestamp="12947294" timestamp2="12947294">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5674" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12947552" />
  <Command __id="5675" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12947553" />
  <Command __id="5677" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12947661" />
  <Command __id="5678" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12947661" />
  <Command __id="5680" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12947785" />
  <Command __id="5681" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12947785" />
  <Command __id="5683" _type="InsertStringCommand" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12948019" timestamp2="12948019">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5684" _type="InsertStringCommand" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12948019" timestamp2="12948019">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5686" _type="InsertStringCommand" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12948195" timestamp2="12948195">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5687" _type="InsertStringCommand" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12948195" timestamp2="12948195">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5689" _type="InsertStringCommand" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12948273" timestamp2="12948273">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5690" _type="InsertStringCommand" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12948273" timestamp2="12948273">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5692" _type="InsertStringCommand" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12948354" timestamp2="12948354">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5693" _type="InsertStringCommand" date="Mon Dec 04 16:02:54 EST 2023" starttimestamp="1701710826491" timestamp="12948354" timestamp2="12948354">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5695" _type="InsertStringCommand" date="Mon Dec 04 16:02:55 EST 2023" starttimestamp="1701710826491" timestamp="12948565" timestamp2="12948565">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5696" _type="InsertStringCommand" date="Mon Dec 04 16:02:55 EST 2023" starttimestamp="1701710826491" timestamp="12948565" timestamp2="12948565">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5698" _type="InsertStringCommand" date="Mon Dec 04 16:02:55 EST 2023" starttimestamp="1701710826491" timestamp="12948634" timestamp2="12948634">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5699" _type="InsertStringCommand" date="Mon Dec 04 16:02:55 EST 2023" starttimestamp="1701710826491" timestamp="12948634" timestamp2="12948634">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5701" _type="InsertStringCommand" date="Mon Dec 04 16:02:55 EST 2023" starttimestamp="1701710826491" timestamp="12948733" timestamp2="12948733">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5702" _type="InsertStringCommand" date="Mon Dec 04 16:02:55 EST 2023" starttimestamp="1701710826491" timestamp="12948733" timestamp2="12948733">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5704" _type="InsertStringCommand" date="Mon Dec 04 16:02:56 EST 2023" starttimestamp="1701710826491" timestamp="12949563" timestamp2="12949563">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5705" _type="InsertStringCommand" date="Mon Dec 04 16:02:56 EST 2023" starttimestamp="1701710826491" timestamp="12949563" timestamp2="12949563">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5707" _type="InsertStringCommand" date="Mon Dec 04 16:02:56 EST 2023" starttimestamp="1701710826491" timestamp="12949740" timestamp2="12949740">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5708" _type="InsertStringCommand" date="Mon Dec 04 16:02:56 EST 2023" starttimestamp="1701710826491" timestamp="12949740" timestamp2="12949740">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5710" _type="InsertStringCommand" date="Mon Dec 04 16:02:56 EST 2023" starttimestamp="1701710826491" timestamp="12949870" timestamp2="12949870">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5711" _type="InsertStringCommand" date="Mon Dec 04 16:02:56 EST 2023" starttimestamp="1701710826491" timestamp="12949870" timestamp2="12949870">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5713" _type="InsertStringCommand" date="Mon Dec 04 16:02:56 EST 2023" starttimestamp="1701710826491" timestamp="12949949" timestamp2="12949949">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5714" _type="InsertStringCommand" date="Mon Dec 04 16:02:56 EST 2023" starttimestamp="1701710826491" timestamp="12949949" timestamp2="12949949">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5716" _type="InsertStringCommand" date="Mon Dec 04 16:02:56 EST 2023" starttimestamp="1701710826491" timestamp="12950074" timestamp2="12950074">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5717" _type="InsertStringCommand" date="Mon Dec 04 16:02:56 EST 2023" starttimestamp="1701710826491" timestamp="12950074" timestamp2="12950074">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5718" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:02:56 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12950079" />
  <Command __id="5723" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:02:58 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12951563" />
  <Command __id="5725" _type="InsertStringCommand" date="Mon Dec 04 16:02:58 EST 2023" starttimestamp="1701710826491" timestamp="12951572" timestamp2="12951572">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5726" _type="InsertStringCommand" date="Mon Dec 04 16:02:58 EST 2023" starttimestamp="1701710826491" timestamp="12951572" timestamp2="12951572">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5610" _type="Delete" date="Mon Dec 04 16:02:44 EST 2023" docASTNodeCount="189" docActiveCodeLength="1171" docExpressionCount="145" docLength="1187" endLine="12" length="5" offset="384" repeat="5" startLine="12" starttimestamp="1701710826491" timestamp="12938207" timestamp2="12938975">
    <text><![CDATA[expr.]]></text>
  </DocumentChange>
  <DocumentChange __id="5620" _type="Insert" date="Mon Dec 04 16:02:48 EST 2023" docASTNodeCount="191" docActiveCodeLength="1180" docExpressionCount="147" docLength="1196" length="9" offset="384" repeat="9" starttimestamp="1701710826491" timestamp="12941901" timestamp2="12943132">
    <text><![CDATA[expr.getT]]></text>
  </DocumentChange>
  <DocumentChange __id="5641" _type="Replace" date="Mon Dec 04 16:02:49 EST 2023" docASTNodeCount="191" docActiveCodeLength="1185" docExpressionCount="147" docLength="1201" endLine="12" insertionLength="9" int_docASTNodeCount="191" int_docActiveCodeLength="1176" int_docExpressionCount="146" int_docLength="1192" length="4" offset="389" startLine="12" starttimestamp="1701710826491" timestamp="12943391">
    <deletedText><![CDATA[getT]]></deletedText>
    <insertedText><![CDATA[getTail()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5644" _type="Insert" date="Mon Dec 04 16:02:50 EST 2023" docASTNodeCount="193" docActiveCodeLength="1188" docExpressionCount="149" docLength="1204" length="3" offset="398" repeat="3" starttimestamp="1701710826491" timestamp="12943862" timestamp2="12944269">
    <text><![CDATA[.is]]></text>
  </DocumentChange>
  <DocumentChange __id="5651" _type="Replace" date="Mon Dec 04 16:02:51 EST 2023" docASTNodeCount="193" docActiveCodeLength="1194" docExpressionCount="149" docLength="1210" endLine="12" insertionLength="8" int_docASTNodeCount="193" int_docActiveCodeLength="1186" int_docExpressionCount="149" int_docLength="1202" length="2" offset="399" startLine="12" starttimestamp="1701710826491" timestamp="12944822">
    <deletedText><![CDATA[is]]></deletedText>
    <insertedText><![CDATA[isAtom()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5658" _type="Insert" date="Mon Dec 04 16:02:53 EST 2023" docASTNodeCount="196" docActiveCodeLength="1207" docExpressionCount="150" docLength="1223" length="13" offset="408" repeat="5" starttimestamp="1701710826491" timestamp="12946685" timestamp2="12947293">
    <text><![CDATA[ {
			ret
		}]]></text>
  </DocumentChange>
  <DocumentChange __id="5673" _type="Delete" date="Mon Dec 04 16:02:54 EST 2023" docASTNodeCount="194" docActiveCodeLength="1204" docExpressionCount="149" docLength="1220" endLine="13" length="3" offset="414" repeat="3" startLine="13" starttimestamp="1701710826491" timestamp="12947550" timestamp2="12947783">
    <text><![CDATA[ret]]></text>
  </DocumentChange>
  <DocumentChange __id="5682" _type="Insert" date="Mon Dec 04 16:02:54 EST 2023" docASTNodeCount="200" docActiveCodeLength="1220" docExpressionCount="154" docLength="1236" length="16" offset="414" repeat="16" starttimestamp="1701710826491" timestamp="12948017" timestamp2="12950819">
    <text><![CDATA[expr = expr.getT]]></text>
  </DocumentChange>
  <DocumentChange __id="5724" _type="Replace" date="Mon Dec 04 16:02:58 EST 2023" docASTNodeCount="200" docActiveCodeLength="1225" docExpressionCount="154" docLength="1241" endLine="13" insertionLength="9" int_docASTNodeCount="198" int_docActiveCodeLength="1216" int_docExpressionCount="152" int_docLength="1232" length="4" offset="426" startLine="13" starttimestamp="1701710826491" timestamp="12951566">
    <deletedText><![CDATA[getT]]></deletedText>
    <insertedText><![CDATA[getTail()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5727" _type="Insert" date="Mon Dec 04 16:02:58 EST 2023" docASTNodeCount="200" docActiveCodeLength="1226" docExpressionCount="154" docLength="1242" length="1" offset="435" starttimestamp="1701710826491" timestamp="12951847">
    <text><![CDATA[；]]></text>
  </DocumentChange>
  <Command __id="5728" _type="InsertStringCommand" date="Mon Dec 04 16:02:58 EST 2023" starttimestamp="1701710826491" timestamp="12951866" timestamp2="12951866">
    <data><![CDATA[；]]></data>
  </Command>
  <Command __id="5729" _type="InsertStringCommand" date="Mon Dec 04 16:02:58 EST 2023" starttimestamp="1701710826491" timestamp="12951868" timestamp2="12951868">
    <data><![CDATA[；]]></data>
  </Command>
  <DocumentChange __id="5730" _type="Delete" date="Mon Dec 04 16:02:59 EST 2023" docASTNodeCount="200" docActiveCodeLength="1225" docExpressionCount="154" docLength="1241" endLine="13" length="1" offset="435" startLine="13" starttimestamp="1701710826491" timestamp="12953190">
    <text><![CDATA[；]]></text>
  </DocumentChange>
  <Command __id="5731" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:59 EST 2023" starttimestamp="1701710826491" timestamp="12953194" />
  <Command __id="5732" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 16:02:59 EST 2023" starttimestamp="1701710826491" timestamp="12953194" />
  <DocumentChange __id="5733" _type="Insert" date="Mon Dec 04 16:02:59 EST 2023" docASTNodeCount="200" docActiveCodeLength="1226" docExpressionCount="154" docLength="1242" length="1" offset="435" starttimestamp="1701710826491" timestamp="12953417">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="5734" _type="InsertStringCommand" date="Mon Dec 04 16:02:59 EST 2023" starttimestamp="1701710826491" timestamp="12953420" timestamp2="12953420">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5735" _type="InsertStringCommand" date="Mon Dec 04 16:02:59 EST 2023" starttimestamp="1701710826491" timestamp="12953420" timestamp2="12953420">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5736" _type="MoveCaretCommand" caretOffset="440" date="Mon Dec 04 16:03:00 EST 2023" docOffset="440" starttimestamp="1701710826491" timestamp="12954398" />
  <Command __id="5737" _type="MoveCaretCommand" caretOffset="440" date="Mon Dec 04 16:03:00 EST 2023" docOffset="440" starttimestamp="1701710826491" timestamp="12954398" />
  <Command __id="5739" _type="InsertStringCommand" date="Mon Dec 04 16:03:01 EST 2023" starttimestamp="1701710826491" timestamp="12954626" timestamp2="12954626">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5740" _type="InsertStringCommand" date="Mon Dec 04 16:03:01 EST 2023" starttimestamp="1701710826491" timestamp="12954626" timestamp2="12954626">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5742" _type="InsertStringCommand" date="Mon Dec 04 16:03:01 EST 2023" starttimestamp="1701710826491" timestamp="12954708" timestamp2="12954708">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5743" _type="InsertStringCommand" date="Mon Dec 04 16:03:01 EST 2023" starttimestamp="1701710826491" timestamp="12954708" timestamp2="12954708">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5745" _type="InsertStringCommand" date="Mon Dec 04 16:03:01 EST 2023" starttimestamp="1701710826491" timestamp="12954793" timestamp2="12954793">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5746" _type="InsertStringCommand" date="Mon Dec 04 16:03:01 EST 2023" starttimestamp="1701710826491" timestamp="12954794" timestamp2="12954794">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5748" _type="InsertStringCommand" date="Mon Dec 04 16:03:01 EST 2023" starttimestamp="1701710826491" timestamp="12954891" timestamp2="12954891">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5749" _type="InsertStringCommand" date="Mon Dec 04 16:03:01 EST 2023" starttimestamp="1701710826491" timestamp="12954892" timestamp2="12954892">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5751" _type="InsertStringCommand" date="Mon Dec 04 16:03:01 EST 2023" starttimestamp="1701710826491" timestamp="12955433" timestamp2="12955433">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="5752" _type="InsertStringCommand" date="Mon Dec 04 16:03:01 EST 2023" starttimestamp="1701710826491" timestamp="12955433" timestamp2="12955433">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="5754" _type="InsertStringCommand" date="Mon Dec 04 16:03:02 EST 2023" starttimestamp="1701710826491" timestamp="12955594" timestamp2="12955594">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5755" _type="InsertStringCommand" date="Mon Dec 04 16:03:02 EST 2023" starttimestamp="1701710826491" timestamp="12955594" timestamp2="12955594">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5757" _type="InsertStringCommand" date="Mon Dec 04 16:03:02 EST 2023" starttimestamp="1701710826491" timestamp="12955719" timestamp2="12955719">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5758" _type="InsertStringCommand" date="Mon Dec 04 16:03:02 EST 2023" starttimestamp="1701710826491" timestamp="12955719" timestamp2="12955719">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5760" _type="InsertStringCommand" date="Mon Dec 04 16:03:02 EST 2023" starttimestamp="1701710826491" timestamp="12955912" timestamp2="12955912">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5761" _type="InsertStringCommand" date="Mon Dec 04 16:03:02 EST 2023" starttimestamp="1701710826491" timestamp="12955912" timestamp2="12955912">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5763" _type="InsertStringCommand" date="Mon Dec 04 16:03:02 EST 2023" starttimestamp="1701710826491" timestamp="12955950" timestamp2="12955950">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5764" _type="InsertStringCommand" date="Mon Dec 04 16:03:02 EST 2023" starttimestamp="1701710826491" timestamp="12955950" timestamp2="12955950">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5766" _type="InsertStringCommand" date="Mon Dec 04 16:03:02 EST 2023" starttimestamp="1701710826491" timestamp="12956051" timestamp2="12956051">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5767" _type="InsertStringCommand" date="Mon Dec 04 16:03:02 EST 2023" starttimestamp="1701710826491" timestamp="12956051" timestamp2="12956051">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5769" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12956521" timestamp2="12956521">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5770" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12956521" timestamp2="12956521">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5772" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12956605" timestamp2="12956605">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5773" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12956606" timestamp2="12956606">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5775" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12956711" timestamp2="12956711">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5776" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12956712" timestamp2="12956712">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5778" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12956850" timestamp2="12956850">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5779" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12956850" timestamp2="12956850">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5781" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12957019" timestamp2="12957019">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5782" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12957019" timestamp2="12957019">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5784" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12957128" timestamp2="12957128">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5785" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12957128" timestamp2="12957128">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5787" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12957211" timestamp2="12957211">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5788" _type="InsertStringCommand" date="Mon Dec 04 16:03:03 EST 2023" starttimestamp="1701710826491" timestamp="12957211" timestamp2="12957211">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5790" _type="InsertStringCommand" date="Mon Dec 04 16:03:05 EST 2023" starttimestamp="1701710826491" timestamp="12958678" timestamp2="12958678">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5791" _type="InsertStringCommand" date="Mon Dec 04 16:03:05 EST 2023" starttimestamp="1701710826491" timestamp="12958678" timestamp2="12958678">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5792" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:03:05 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12958686" />
  <Command __id="5797" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:03:06 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12959610" />
  <Command __id="5799" _type="InsertStringCommand" date="Mon Dec 04 16:03:06 EST 2023" starttimestamp="1701710826491" timestamp="12959619" timestamp2="12959619">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5800" _type="InsertStringCommand" date="Mon Dec 04 16:03:06 EST 2023" starttimestamp="1701710826491" timestamp="12959619" timestamp2="12959619">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5802" _type="InsertStringCommand" date="Mon Dec 04 16:03:06 EST 2023" starttimestamp="1701710826491" timestamp="12959834" timestamp2="12959834">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5803" _type="InsertStringCommand" date="Mon Dec 04 16:03:06 EST 2023" starttimestamp="1701710826491" timestamp="12959834" timestamp2="12959834">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5804" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:03:06 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="12959841" />
  <Command __id="5809" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:03:07 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="12960849" />
  <Command __id="5811" _type="InsertStringCommand" date="Mon Dec 04 16:03:07 EST 2023" starttimestamp="1701710826491" timestamp="12960855" timestamp2="12960855">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5812" _type="InsertStringCommand" date="Mon Dec 04 16:03:07 EST 2023" starttimestamp="1701710826491" timestamp="12960855" timestamp2="12960855">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5814" _type="InsertStringCommand" date="Mon Dec 04 16:03:07 EST 2023" starttimestamp="1701710826491" timestamp="12961077" timestamp2="12961077">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5815" _type="InsertStringCommand" date="Mon Dec 04 16:03:07 EST 2023" starttimestamp="1701710826491" timestamp="12961077" timestamp2="12961077">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5816" _type="MoveCaretCommand" caretOffset="521" date="Mon Dec 04 16:03:08 EST 2023" docOffset="521" starttimestamp="1701710826491" timestamp="12962057" />
  <Command __id="5817" _type="MoveCaretCommand" caretOffset="521" date="Mon Dec 04 16:03:08 EST 2023" docOffset="521" starttimestamp="1701710826491" timestamp="12962058" />
  <Command __id="5819" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Dec 04 16:03:08 EST 2023" starttimestamp="1701710826491" timestamp="12962491" />
  <Command __id="5820" _type="MoveCaretCommand" caretOffset="510" date="Mon Dec 04 16:03:09 EST 2023" docOffset="510" starttimestamp="1701710826491" timestamp="12962923" />
  <Command __id="5821" _type="MoveCaretCommand" caretOffset="510" date="Mon Dec 04 16:03:09 EST 2023" docOffset="510" starttimestamp="1701710826491" timestamp="12962923" />
  <Command __id="5822" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 16:03:09 EST 2023" starttimestamp="1701710826491" timestamp="12963085" />
  <Command __id="5823" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:03:09 EST 2023" starttimestamp="1701710826491" timestamp="12963186" />
  <Command __id="5824" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:03:09 EST 2023" starttimestamp="1701710826491" timestamp="12963192" />
  <Command __id="5825" _type="MoveCaretCommand" caretOffset="543" date="Mon Dec 04 16:03:10 EST 2023" docOffset="543" starttimestamp="1701710826491" timestamp="12964277" />
  <Command __id="5826" _type="MoveCaretCommand" caretOffset="543" date="Mon Dec 04 16:03:10 EST 2023" docOffset="543" starttimestamp="1701710826491" timestamp="12964278" />
  <Command __id="5831" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:03:14 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12967789" type="Run" />
  <Command __id="5832" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:03:14 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12967789" type="Run" />
  <Command __id="5833" _type="ShellCommand" date="Mon Dec 04 16:03:15 EST 2023" starttimestamp="1701710826491" timestamp="12969387" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5843" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:03:26 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12980075" type="Run" />
  <Command __id="5844" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:03:26 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="12980075" type="Run" />
  <Command __id="5845" _type="ShellCommand" date="Mon Dec 04 16:03:26 EST 2023" starttimestamp="1701710826491" timestamp="12980381" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5846" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985307" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"7"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5847" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985308" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5848" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985314" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5849" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985315" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):6"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5850" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985316" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):8
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):8"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5851" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985316" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):8"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5852" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985340" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):32
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):32"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5853" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985342" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):32"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5854" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985342" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):34
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):34"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5855" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985344" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:CondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):34"), Diff(INSERT,"Result:CondChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5856" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985345" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:CondChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5857" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985346" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5858" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985347" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5859" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985348" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:QuoteChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:QuoteChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5860" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985349" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:QuoteChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5861" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985350" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:EvalChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:EvalChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5862" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985351" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:EvalChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5863" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985352" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ListChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:ListChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5864" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985354" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ListChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5865" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985354" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ListChecker2,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:ListChecker2,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5866" _type="ConsoleOutput" date="Mon Dec 04 16:03:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="12985359" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2
Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string COND
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):2¶"), Diff(EQUAL,"Test Result:"), Diff(DELETE,"List"), Diff(INSERT,"Combination"), Diff(EQUAL,"Checker"), Diff(DELETE,"2,10"), Diff(INSERT,","), Diff(EQUAL,"0.0% complete,"), Diff(DELETE,"1"), Diff(EQUAL,"0.0,10.0,"), Diff(INSERT,"Expected strings:4actual string COND"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <DocumentChange __id="5738" _type="Insert" date="Mon Dec 04 16:03:01 EST 2023" docASTNodeCount="207" docActiveCodeLength="1256" docExpressionCount="159" docLength="1272" length="30" offset="440" repeat="22" starttimestamp="1701710826491" timestamp="12954623" timestamp2="12959374">
    <text><![CDATA[else {
			expr = expr.getT
		}]]></text>
  </DocumentChange>
  <DocumentChange __id="5798" _type="Replace" date="Mon Dec 04 16:03:06 EST 2023" docASTNodeCount="207" docActiveCodeLength="1261" docExpressionCount="159" docLength="1277" endLine="15" insertionLength="9" int_docASTNodeCount="205" int_docActiveCodeLength="1252" int_docExpressionCount="157" int_docLength="1268" length="4" offset="462" startLine="15" starttimestamp="1701710826491" timestamp="12959614">
    <deletedText><![CDATA[getT]]></deletedText>
    <insertedText><![CDATA[getTail()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5801" _type="Insert" date="Mon Dec 04 16:03:06 EST 2023" docASTNodeCount="209" docActiveCodeLength="1266" docExpressionCount="161" docLength="1282" length="5" offset="471" repeat="5" starttimestamp="1701710826491" timestamp="12959831" timestamp2="12960665">
    <text><![CDATA[.getH]]></text>
  </DocumentChange>
  <DocumentChange __id="5810" _type="Replace" date="Mon Dec 04 16:03:07 EST 2023" docASTNodeCount="209" docActiveCodeLength="1271" docExpressionCount="161" docLength="1287" endLine="15" insertionLength="9" int_docASTNodeCount="207" int_docActiveCodeLength="1262" int_docExpressionCount="159" int_docLength="1278" length="4" offset="472" startLine="15" starttimestamp="1701710826491" timestamp="12960851">
    <deletedText><![CDATA[getH]]></deletedText>
    <insertedText><![CDATA[getHead()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5813" _type="Insert" date="Mon Dec 04 16:03:07 EST 2023" docASTNodeCount="209" docActiveCodeLength="1272" docExpressionCount="161" docLength="1288" length="1" offset="481" starttimestamp="1701710826491" timestamp="12961075">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="5818" _type="Delete" date="Mon Dec 04 16:03:08 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" endLine="18" length="35" offset="487" startLine="17" starttimestamp="1701710826491" timestamp="12962489">
    <text><![CDATA[		expr = expr.getTail().getHead();
]]></text>
  </DocumentChange>
  <Command __id="5867" _type="ShellCommand" date="Mon Dec 04 16:03:49 EST 2023" starttimestamp="1701710826491" timestamp="13002561" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5868" _type="LocalChecksRawCommand" date="Mon Dec 04 16:03:49 EST 2023" starttimestamp="1701710826491" timestamp="13002568">
    <CSVRow><![CDATA[92,Mon Dec 04 16:03:31 EST 2023,35,1,A6BasicOperationSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker+ GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,39,0,true,A6ExtraCondChecker CombinationChecker CondChecker EvalChecker ListChecker ListChecker2 QuoteChecker ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) CombinationChecker-(0.0/10.0) CondChecker-(10.0/10.0) EvalChecker-(10.0/10.0) ListChecker-(10.0/10.0) ListChecker2-(10.0/10.0) QuoteChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5869" _type="LocalChecksRawCommand" date="Mon Dec 04 16:03:49 EST 2023" starttimestamp="1701710826491" timestamp="13002568">
    <CSVRow><![CDATA[92,Mon Dec 04 16:03:31 EST 2023,35,1,A6BasicOperationSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker+ GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,39,0,true,A6ExtraCondChecker CombinationChecker CondChecker EvalChecker ListChecker ListChecker2 QuoteChecker ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) CombinationChecker-(0.0/10.0) CondChecker-(10.0/10.0) EvalChecker-(10.0/10.0) ListChecker-(10.0/10.0) ListChecker2-(10.0/10.0) QuoteChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="5871" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 16:03:50 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="13003849" />
  <Command __id="5872" _type="MoveCaretCommand" caretOffset="212" date="Mon Dec 04 16:03:53 EST 2023" docOffset="332" starttimestamp="1701710826491" timestamp="13006946" />
  <Command __id="5874" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:03:54 EST 2023" starttimestamp="1701710826491" timestamp="13007951" />
  <Command __id="5875" _type="MoveCaretCommand" caretOffset="254" date="Mon Dec 04 16:03:55 EST 2023" docOffset="374" starttimestamp="1701710826491" timestamp="13008916" />
  <Command __id="5877" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:03:55 EST 2023" starttimestamp="1701710826491" timestamp="13009017" />
  <Command __id="5878" _type="MoveCaretCommand" caretOffset="256" date="Mon Dec 04 16:03:56 EST 2023" docOffset="376" starttimestamp="1701710826491" timestamp="13009953" />
  <Command __id="5880" _type="InsertStringCommand" date="Mon Dec 04 16:03:56 EST 2023" starttimestamp="1701710826491" timestamp="13010216" timestamp2="13010216">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5882" _type="InsertStringCommand" date="Mon Dec 04 16:03:56 EST 2023" starttimestamp="1701710826491" timestamp="13010403" timestamp2="13010403">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5884" _type="InsertStringCommand" date="Mon Dec 04 16:03:56 EST 2023" starttimestamp="1701710826491" timestamp="13010462" timestamp2="13010462">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5886" _type="InsertStringCommand" date="Mon Dec 04 16:03:57 EST 2023" starttimestamp="1701710826491" timestamp="13010570" timestamp2="13010570">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5888" _type="InsertStringCommand" date="Mon Dec 04 16:03:57 EST 2023" starttimestamp="1701710826491" timestamp="13010647" timestamp2="13010647">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5890" _type="InsertStringCommand" date="Mon Dec 04 16:03:57 EST 2023" starttimestamp="1701710826491" timestamp="13010767" timestamp2="13010767">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5892" _type="InsertStringCommand" date="Mon Dec 04 16:03:57 EST 2023" starttimestamp="1701710826491" timestamp="13010803" timestamp2="13010803">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5894" _type="InsertStringCommand" date="Mon Dec 04 16:03:57 EST 2023" starttimestamp="1701710826491" timestamp="13010939" timestamp2="13010939">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5896" _type="InsertStringCommand" date="Mon Dec 04 16:03:57 EST 2023" starttimestamp="1701710826491" timestamp="13010953" timestamp2="13010953">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5898" _type="InsertStringCommand" date="Mon Dec 04 16:03:57 EST 2023" starttimestamp="1701710826491" timestamp="13011469" timestamp2="13011469">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5900" _type="InsertStringCommand" date="Mon Dec 04 16:03:58 EST 2023" starttimestamp="1701710826491" timestamp="13011685" timestamp2="13011685">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5902" _type="InsertStringCommand" date="Mon Dec 04 16:03:58 EST 2023" starttimestamp="1701710826491" timestamp="13011742" timestamp2="13011742">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5904" _type="InsertStringCommand" date="Mon Dec 04 16:03:58 EST 2023" starttimestamp="1701710826491" timestamp="13011851" timestamp2="13011851">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5905" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 16:03:58 EST 2023" starttimestamp="1701710826491" timestamp="13012291" />
  <Command __id="5906" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:03:58 EST 2023" starttimestamp="1701710826491" timestamp="13012391" />
  <Command __id="5907" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:03:58 EST 2023" starttimestamp="1701710826491" timestamp="13012398" />
  <Command __id="5908" _type="MoveCaretCommand" caretOffset="322" date="Mon Dec 04 16:03:59 EST 2023" docOffset="442" starttimestamp="1701710826491" timestamp="13012802" />
  <Command __id="5916" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:04:03 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13017499" type="Run" />
  <Command __id="5917" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:04:03 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13017499" type="Run" />
  <Command __id="5918" _type="ShellCommand" date="Mon Dec 04 16:04:04 EST 2023" starttimestamp="1701710826491" timestamp="13017810" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5919" _type="ConsoleOutput" date="Mon Dec 04 16:04:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13024998" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"2¶Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string COND"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5920" _type="ConsoleOutput" date="Mon Dec 04 16:04:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13024999" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5921" _type="ConsoleOutput" date="Mon Dec 04 16:04:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13025005" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFile"), Diff(INSERT,"execution time (ms):5¶Test Result:ClassRegistry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶"), Diff(DELETE,"¶")]]]></diff>
  </Command>
  <Command __id="5922" _type="ConsoleOutput" date="Mon Dec 04 16:04:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13025005" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"5¶Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5923" _type="ConsoleOutput" date="Mon Dec 04 16:04:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13025006" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5924" _type="ConsoleOutput" date="Mon Dec 04 16:04:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13025029" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):31
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):31"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5925" _type="ConsoleOutput" date="Mon Dec 04 16:04:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13025031" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):31"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5926" _type="ConsoleOutput" date="Mon Dec 04 16:04:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13025031" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):33
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):33"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5927" _type="ConsoleOutput" date="Mon Dec 04 16:04:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13025033" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:CondChecker,0.0% complete,0.0,10.0,Expected strings:3actual string (COND (T (+ 2 1)) (T (+1)) (T (= 1 +)))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):33"), Diff(INSERT,"Result:CondChecker,0.0% complete,0.0,10.0,Expected strings:3actual string (COND (T (+ 2 1)) (T (+1)) (T (= 1 +)))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5928" _type="ShellCommand" date="Mon Dec 04 16:04:26 EST 2023" starttimestamp="1701710826491" timestamp="13039985" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5929" _type="CopyCommand" date="Mon Dec 04 16:04:28 EST 2023" starttimestamp="1701710826491" timestamp="13042210" />
  <Command __id="5930" _type="ShellCommand" date="Mon Dec 04 16:04:31 EST 2023" starttimestamp="1701710826491" timestamp="13045177" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5931" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:04:31 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13045499" type="Debug" />
  <Command __id="5932" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:04:31 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13045499" type="Run" />
  <Command __id="5933" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:04:31 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13045499" type="Debug" />
  <Command __id="5934" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:04:31 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13045500" type="Run" />
  <Command __id="5935" _type="ShellCommand" date="Mon Dec 04 16:04:31 EST 2023" starttimestamp="1701710826491" timestamp="13045502" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5936" _type="MoveCaretCommand" caretOffset="211" date="Mon Dec 04 16:04:32 EST 2023" docOffset="331" starttimestamp="1701710826491" timestamp="13046494" />
  <Command __id="5937" _type="ShellCommand" date="Mon Dec 04 16:04:34 EST 2023" starttimestamp="1701710826491" timestamp="13047541" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5938" _type="ShellCommand" date="Mon Dec 04 16:04:36 EST 2023" starttimestamp="1701710826491" timestamp="13049591" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5939" _type="SelectTextCommand" caretOffset="213" date="Mon Dec 04 16:04:36 EST 2023" end="213" start="212" starttimestamp="1701710826491" timestamp="13049660" />
  <Command __id="5941" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:04:36 EST 2023" starttimestamp="1701710826491" timestamp="13050261" />
  <Command __id="5870" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:03:50 EST 2023" docASTNodeCount="162" docActiveCodeLength="915" docExpressionCount="117" docLength="915" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13003755">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/CondEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.NilAtom;
import main.lisp.parser.terms.SExpression;

public class CondEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isNIL()) {
			return new NilAtom();
		}
		if(!expr.getHead().getHead().eval(environment).isNIL()) {
			if(expr.getHead().getTail() instanceof NilAtom) {
				return expr.getHead().getHead().eval(environment);
			}
			if(expr.getHead().getTail().isAtom()) {
				return expr.getHead().getTail();
			}else {
				return expr.getHead().getTail().getHead().eval(environment);
			}
		}else {
			return evalHelper(expr.getTail(), environment);
		}
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="5873" _type="Insert" date="Mon Dec 04 16:03:54 EST 2023" docASTNodeCount="156" docActiveCodeLength="891" docExpressionCount="112" docLength="917" length="2" offset="308" starttimestamp="1701710826491" timestamp="13007934">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5876" _type="Insert" date="Mon Dec 04 16:03:55 EST 2023" docASTNodeCount="151" docActiveCodeLength="852" docExpressionCount="108" docLength="919" length="2" offset="335" starttimestamp="1701710826491" timestamp="13009005">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5879" _type="Insert" date="Mon Dec 04 16:03:56 EST 2023" docASTNodeCount="153" docActiveCodeLength="867" docExpressionCount="109" docLength="934" length="15" offset="376" repeat="13" starttimestamp="1701710826491" timestamp="13010212" timestamp2="13011848">
    <text><![CDATA[
		return expr;]]></text>
  </DocumentChange>
  <DocumentChange __id="5940" _type="Delete" date="Mon Dec 04 16:04:36 EST 2023" docASTNodeCount="159" docActiveCodeLength="891" docExpressionCount="114" docLength="932" endLine="11" length="2" offset="308" startLine="11" starttimestamp="1701710826491" timestamp="13050239">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5943" _type="Delete" date="Mon Dec 04 16:04:37 EST 2023" docASTNodeCount="164" docActiveCodeLength="930" docExpressionCount="118" docLength="930" endLine="12" length="2" offset="333" startLine="12" starttimestamp="1701710826491" timestamp="13051493">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5946" _type="Insert" date="Mon Dec 04 16:04:38 EST 2023" docASTNodeCount="162" docActiveCodeLength="916" docExpressionCount="117" docLength="932" length="2" offset="373" starttimestamp="1701710826491" timestamp="13052135">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="5942" _type="MoveCaretCommand" caretOffset="252" date="Mon Dec 04 16:04:37 EST 2023" docOffset="372" starttimestamp="1701710826491" timestamp="13051334" />
  <Command __id="5944" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:04:38 EST 2023" starttimestamp="1701710826491" timestamp="13051516" />
  <Command __id="5945" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 16:04:38 EST 2023" docOffset="387" starttimestamp="1701710826491" timestamp="13052035" />
  <Command __id="5947" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:04:38 EST 2023" starttimestamp="1701710826491" timestamp="13052152" />
  <Command __id="5948" _type="MoveCaretCommand" caretOffset="269" date="Mon Dec 04 16:04:39 EST 2023" docOffset="389" starttimestamp="1701710826491" timestamp="13052992" />
  <Command __id="5949" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 16:04:39 EST 2023" starttimestamp="1701710826491" timestamp="13053094" />
  <Command __id="5950" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:04:39 EST 2023" starttimestamp="1701710826491" timestamp="13053189" />
  <Command __id="5951" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:04:39 EST 2023" starttimestamp="1701710826491" timestamp="13053197" />
  <Command __id="5953" _type="MoveCaretCommand" caretOffset="351" date="Mon Dec 04 16:04:41 EST 2023" docOffset="351" starttimestamp="1701710826491" timestamp="13055310" />
  <Command __id="5954" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Mon Dec 04 16:04:43 EST 2023" starttimestamp="1701710826491" timestamp="13057381" />
  <Command __id="5955" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:04:44 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13057613" type="Run" />
  <Command __id="5956" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:04:44 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13057613" type="Run" />
  <Command __id="5957" _type="ShellCommand" date="Mon Dec 04 16:04:47 EST 2023" starttimestamp="1701710826491" timestamp="13060907" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5952" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:04:41 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13055246">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5958" _type="ShellCommand" date="Mon Dec 04 16:04:49 EST 2023" starttimestamp="1701710826491" timestamp="13062600" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5959" _type="PasteCommand" date="Mon Dec 04 16:04:49 EST 2023" starttimestamp="1701710826491" timestamp="13062897" />
  <Command __id="5960" _type="ConsoleOutput" date="Mon Dec 04 16:04:50 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13063561" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:CondChecker,0.0% complete,0.0,10.0,Expected strings:3actual string (COND (T (+ 2 1)) (T (+1)) (T (= 1 +)))"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5962" _type="MoveCaretCommand" caretOffset="220" date="Mon Dec 04 16:05:07 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="13080873" />
  <Command __id="5963" _type="ShellCommand" date="Mon Dec 04 16:05:15 EST 2023" starttimestamp="1701710826491" timestamp="13089470" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5964" _type="ShellCommand" date="Mon Dec 04 16:05:16 EST 2023" starttimestamp="1701710826491" timestamp="13090070" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5967" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:05:27 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13101280" type="Debug" />
  <Command __id="5968" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:05:27 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13101280" type="Run" />
  <Command __id="5969" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:05:27 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13101280" type="Debug" />
  <Command __id="5970" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:05:27 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13101280" type="Run" />
  <Command __id="5971" _type="ShellCommand" date="Mon Dec 04 16:05:29 EST 2023" starttimestamp="1701710826491" timestamp="13102899" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5961" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:05:07 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13080802">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		"), Diff(INSERT,"if(expr.getTail().isAtom()) {			return expr.getTail();		}		"), Diff(EQUAL,"return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.SExpression;

public class QuoteEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		if(expr.getTail().isAtom()) {
			return expr.getTail();
		}
		return expr.getTail().getHead();
	}
}
]]></snapshot>
  </Command>
  <Command __id="5972" _type="ShellCommand" date="Mon Dec 04 16:05:34 EST 2023" starttimestamp="1701710826491" timestamp="13107724" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5973" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:05:36 EST 2023" docASTNodeCount="465" docActiveCodeLength="3521" docExpressionCount="230" docLength="4303" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13110227">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaEvaluator'");	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5974" _type="MoveCaretCommand" caretOffset="3158" date="Mon Dec 04 16:05:36 EST 2023" docOffset="3394" starttimestamp="1701710826491" timestamp="13110288" />
  <Command __id="5976" _type="MoveCaretCommand" caretOffset="462" date="Mon Dec 04 16:05:37 EST 2023" docOffset="462" starttimestamp="1701710826491" timestamp="13110921" />
  <Command __id="5975" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:05:37 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13110859">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.scanner.tokens.Token;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }        public IdentifierAtomImpl(Token token) {        super(token);     }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5979" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:05:39 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13112994">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		"), Diff(INSERT,"if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			"), Diff(EQUAL,"expr = expr.getTail().getHead();		"), Diff(INSERT,"}		"), Diff(EQUAL,"return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		if(expr.getTail().isAtom()) {
			expr = expr.getTail();
		}else {
			expr = expr.getTail().getHead();
		}
		return evalHelper(expr, environment);
//		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		
		boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="5981" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:05:40 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13113538">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			return expr.getTail();		}		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5983" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:05:40 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="13114054">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5977" _type="MoveCaretCommand" caretOffset="373" date="Mon Dec 04 16:05:38 EST 2023" docOffset="373" starttimestamp="1701710826491" timestamp="13112279" />
  <Command __id="5978" _type="MoveCaretCommand" caretOffset="373" date="Mon Dec 04 16:05:38 EST 2023" docOffset="373" starttimestamp="1701710826491" timestamp="13112279" />
  <Command __id="5980" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 16:05:39 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="13113075" />
  <Command __id="5982" _type="MoveCaretCommand" caretOffset="220" date="Mon Dec 04 16:05:40 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="13113613" />
  <Command __id="5984" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 16:05:40 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="13114094" />
  <Command __id="5986" _type="MoveCaretCommand" caretOffset="220" date="Mon Dec 04 16:05:41 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="13115485" />
  <Command __id="5988" _type="MoveCaretCommand" caretOffset="269" date="Mon Dec 04 16:05:42 EST 2023" docOffset="389" starttimestamp="1701710826491" timestamp="13116208" />
  <Command __id="5989" _type="MoveCaretCommand" caretOffset="212" date="Mon Dec 04 16:05:46 EST 2023" docOffset="332" starttimestamp="1701710826491" timestamp="13119792" />
  <Command __id="5990" _type="MoveCaretCommand" caretOffset="252" date="Mon Dec 04 16:05:47 EST 2023" docOffset="372" starttimestamp="1701710826491" timestamp="13121190" />
  <Command __id="5991" _type="MoveCaretCommand" caretOffset="162" date="Mon Dec 04 16:05:48 EST 2023" docOffset="282" starttimestamp="1701710826491" timestamp="13122034" />
  <Command __id="5992" _type="MoveCaretCommand" caretOffset="252" date="Mon Dec 04 16:05:49 EST 2023" docOffset="372" starttimestamp="1701710826491" timestamp="13122516" />
  <Command __id="5993" _type="MoveCaretCommand" caretOffset="252" date="Mon Dec 04 16:05:50 EST 2023" docOffset="372" starttimestamp="1701710826491" timestamp="13123705" />
  <Command __id="5994" _type="MoveCaretCommand" caretOffset="212" date="Mon Dec 04 16:05:50 EST 2023" docOffset="332" starttimestamp="1701710826491" timestamp="13124247" />
  <Command __id="5995" _type="MoveCaretCommand" caretOffset="252" date="Mon Dec 04 16:05:51 EST 2023" docOffset="372" starttimestamp="1701710826491" timestamp="13124713" />
  <Command __id="5985" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:05:41 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13115419">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			return expr.getTail();		}		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5987" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:05:42 EST 2023" docASTNodeCount="162" docActiveCodeLength="916" docExpressionCount="117" docLength="932" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13116139">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/CondEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.NilAtom;import main.lisp.parser.terms.SExpression;public class CondEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);"), Diff(INSERT,"//		return expr;"), Diff(EQUAL,"	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isNIL()) {			return new NilAtom();		}		if(!expr.getHead().getHead().eval(environment).isNIL()) {			if(expr.getHead().getTail() instanceof NilAtom) {				return expr.getHead().getHead().eval(environment);			}			if(expr.getHead().getTail().isAtom()) {				return expr.getHead().getTail();			}else {				return expr.getHead().getTail().getHead().eval(environment);			}		}else {			return evalHelper(expr.getTail(), environment);		}	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.NilAtom;
import main.lisp.parser.terms.SExpression;

public class CondEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		return evalHelper(expr, environment);
//		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isNIL()) {
			return new NilAtom();
		}
		if(!expr.getHead().getHead().eval(environment).isNIL()) {
			if(expr.getHead().getTail() instanceof NilAtom) {
				return expr.getHead().getHead().eval(environment);
			}
			if(expr.getHead().getTail().isAtom()) {
				return expr.getHead().getTail();
			}else {
				return expr.getHead().getTail().getHead().eval(environment);
			}
		}else {
			return evalHelper(expr.getTail(), environment);
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="5999" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:05:54 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13127914">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="6001" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:05:54 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13128461">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			return expr.getTail();		}		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="5996" _type="MoveCaretCommand" caretOffset="252" date="Mon Dec 04 16:05:52 EST 2023" docOffset="372" starttimestamp="1701710826491" timestamp="13125772" />
  <Command __id="5997" _type="MoveCaretCommand" caretOffset="252" date="Mon Dec 04 16:05:52 EST 2023" docOffset="372" starttimestamp="1701710826491" timestamp="13126387" />
  <Command __id="5998" _type="MoveCaretCommand" caretOffset="14" date="Mon Dec 04 16:05:53 EST 2023" docOffset="14" starttimestamp="1701710826491" timestamp="13127311" />
  <Command __id="6000" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 16:05:54 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="13127981" />
  <Command __id="6002" _type="MoveCaretCommand" caretOffset="220" date="Mon Dec 04 16:05:55 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="13128548" />
  <Command __id="6004" _type="MoveCaretCommand" caretOffset="413" date="Mon Dec 04 16:05:56 EST 2023" docOffset="413" starttimestamp="1701710826491" timestamp="13130099" />
  <Command __id="6005" _type="MoveCaretCommand" caretOffset="308" date="Mon Dec 04 16:05:57 EST 2023" docOffset="308" starttimestamp="1701710826491" timestamp="13130539" />
  <Command __id="6006" _type="MoveCaretCommand" caretOffset="308" date="Mon Dec 04 16:05:57 EST 2023" docOffset="308" starttimestamp="1701710826491" timestamp="13130539" />
  <Command __id="6007" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:05:58 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13132164" />
  <Command __id="6008" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:05:58 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13132165" />
  <Command __id="6009" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:05:59 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13132661" />
  <Command __id="6010" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:05:59 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13132661" />
  <Command __id="6011" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:05:59 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13133079" />
  <Command __id="6012" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:05:59 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13133079" />
  <Command __id="6013" _type="MoveCaretCommand" caretOffset="486" date="Mon Dec 04 16:06:00 EST 2023" docOffset="486" starttimestamp="1701710826491" timestamp="13133569" />
  <Command __id="6014" _type="MoveCaretCommand" caretOffset="486" date="Mon Dec 04 16:06:00 EST 2023" docOffset="486" starttimestamp="1701710826491" timestamp="13133569" />
  <Command __id="6015" _type="MoveCaretCommand" caretOffset="526" date="Mon Dec 04 16:06:00 EST 2023" docOffset="526" starttimestamp="1701710826491" timestamp="13134034" />
  <Command __id="6016" _type="MoveCaretCommand" caretOffset="526" date="Mon Dec 04 16:06:00 EST 2023" docOffset="526" starttimestamp="1701710826491" timestamp="13134035" />
  <Command __id="6017" _type="MoveCaretCommand" caretOffset="543" date="Mon Dec 04 16:06:01 EST 2023" docOffset="543" starttimestamp="1701710826491" timestamp="13134580" />
  <Command __id="6018" _type="MoveCaretCommand" caretOffset="543" date="Mon Dec 04 16:06:01 EST 2023" docOffset="543" starttimestamp="1701710826491" timestamp="13134580" />
  <Command __id="6019" _type="MoveCaretCommand" caretOffset="482" date="Mon Dec 04 16:06:04 EST 2023" docOffset="482" starttimestamp="1701710826491" timestamp="13137646" />
  <Command __id="6020" _type="MoveCaretCommand" caretOffset="482" date="Mon Dec 04 16:06:04 EST 2023" docOffset="482" starttimestamp="1701710826491" timestamp="13137646" />
  <Command __id="6021" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:06:04 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13138098" />
  <Command __id="6022" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:06:04 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13138098" />
  <Command __id="6023" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:06:05 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13138586" />
  <Command __id="6024" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:06:05 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13138586" />
  <Command __id="6025" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:06:05 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13139099" />
  <Command __id="6026" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:06:05 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13139099" />
  <Command __id="6027" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:06:06 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13139543" />
  <Command __id="6028" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:06:06 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13139543" />
  <Command __id="6029" _type="MoveCaretCommand" caretOffset="486" date="Mon Dec 04 16:06:06 EST 2023" docOffset="486" starttimestamp="1701710826491" timestamp="13140006" />
  <Command __id="6030" _type="MoveCaretCommand" caretOffset="486" date="Mon Dec 04 16:06:06 EST 2023" docOffset="486" starttimestamp="1701710826491" timestamp="13140006" />
  <Command __id="6031" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:06:07 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13140765" />
  <Command __id="6032" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:06:07 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13140765" />
  <Command __id="6033" _type="MoveCaretCommand" caretOffset="378" date="Mon Dec 04 16:06:07 EST 2023" docOffset="378" starttimestamp="1701710826491" timestamp="13141263" />
  <Command __id="6034" _type="MoveCaretCommand" caretOffset="378" date="Mon Dec 04 16:06:07 EST 2023" docOffset="378" starttimestamp="1701710826491" timestamp="13141264" />
  <Command __id="6035" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:06:08 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13141782" />
  <Command __id="6036" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:06:08 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13141782" />
  <Command __id="6037" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:06:08 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13142196" />
  <Command __id="6038" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:06:08 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13142196" />
  <Command __id="6039" _type="MoveCaretCommand" caretOffset="515" date="Mon Dec 04 16:06:09 EST 2023" docOffset="515" starttimestamp="1701710826491" timestamp="13142688" />
  <Command __id="6040" _type="MoveCaretCommand" caretOffset="515" date="Mon Dec 04 16:06:09 EST 2023" docOffset="515" starttimestamp="1701710826491" timestamp="13142688" />
  <Command __id="6041" _type="MoveCaretCommand" caretOffset="486" date="Mon Dec 04 16:06:09 EST 2023" docOffset="486" starttimestamp="1701710826491" timestamp="13143272" />
  <Command __id="6042" _type="MoveCaretCommand" caretOffset="486" date="Mon Dec 04 16:06:09 EST 2023" docOffset="486" starttimestamp="1701710826491" timestamp="13143272" />
  <Command __id="6051" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:06:34 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13167757" type="Run" />
  <Command __id="6052" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:06:34 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13167758" type="Run" />
  <Command __id="6053" _type="ShellCommand" date="Mon Dec 04 16:06:34 EST 2023" starttimestamp="1701710826491" timestamp="13168055" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6054" _type="ConsoleOutput" date="Mon Dec 04 16:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13176882" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"3"), Diff(INSERT,"Test execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6055" _type="ConsoleOutput" date="Mon Dec 04 16:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13176883" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6056" _type="ConsoleOutput" date="Mon Dec 04 16:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13176889" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6057" _type="ConsoleOutput" date="Mon Dec 04 16:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13176890" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6058" _type="ConsoleOutput" date="Mon Dec 04 16:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13176891" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):9
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):9"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6059" _type="ConsoleOutput" date="Mon Dec 04 16:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13176891" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):9"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6060" _type="ConsoleOutput" date="Mon Dec 04 16:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13176920" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):37
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):37"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6061" _type="ConsoleOutput" date="Mon Dec 04 16:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13176921" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):37"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6062" _type="ConsoleOutput" date="Mon Dec 04 16:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13176921" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):39
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):39"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6063" _type="ConsoleOutput" date="Mon Dec 04 16:06:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13176923" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:CondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):39"), Diff(INSERT,"Result:CondChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6066" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:06:58 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13191932" type="Debug" />
  <Command __id="6067" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:06:58 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13191932" type="Run" />
  <Command __id="6068" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:06:58 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13191932" type="Debug" />
  <Command __id="6069" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:06:58 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13191932" type="Run" />
  <Command __id="6070" _type="ShellCommand" date="Mon Dec 04 16:06:58 EST 2023" starttimestamp="1701710826491" timestamp="13191933" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6071" _type="LocalChecksRawCommand" date="Mon Dec 04 16:06:58 EST 2023" starttimestamp="1701710826491" timestamp="13191935">
    <CSVRow><![CDATA[94,Mon Dec 04 16:06:43 EST 2023,35,1,CondChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker+ EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,41,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,CondChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6072" _type="LocalChecksRawCommand" date="Mon Dec 04 16:06:58 EST 2023" starttimestamp="1701710826491" timestamp="13191935">
    <CSVRow><![CDATA[94,Mon Dec 04 16:06:43 EST 2023,35,1,CondChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker+ EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,41,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,CondChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6073" _type="LocalChecksRawCommand" date="Mon Dec 04 16:06:58 EST 2023" starttimestamp="1701710826491" timestamp="13191935">
    <CSVRow><![CDATA[95,Mon Dec 04 16:06:46 EST 2023,35,0,CombinationChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,41,1,false, , , ,CombinationChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6074" _type="LocalChecksRawCommand" date="Mon Dec 04 16:06:58 EST 2023" starttimestamp="1701710826491" timestamp="13191935">
    <CSVRow><![CDATA[95,Mon Dec 04 16:06:46 EST 2023,35,0,CombinationChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,41,1,false, , , ,CombinationChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6075" _type="MoveCaretCommand" caretOffset="153" date="Mon Dec 04 16:06:59 EST 2023" docOffset="153" starttimestamp="1701710826491" timestamp="13192753" />
  <Command __id="6076" _type="MoveCaretCommand" caretOffset="153" date="Mon Dec 04 16:06:59 EST 2023" docOffset="153" starttimestamp="1701710826491" timestamp="13192753" />
  <Command __id="6077" _type="SelectTextCommand" caretOffset="379" date="Mon Dec 04 16:07:04 EST 2023" end="526" start="379" starttimestamp="1701710826491" timestamp="13198324" />
  <Command __id="6078" _type="SelectTextCommand" caretOffset="379" date="Mon Dec 04 16:07:04 EST 2023" end="526" start="379" starttimestamp="1701710826491" timestamp="13198325" />
  <Command __id="6085" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:07:05 EST 2023" starttimestamp="1701710826491" timestamp="13198790" />
  <Command __id="6095" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:07:10 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13203514" type="Run" />
  <Command __id="6096" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:07:10 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13203514" type="Run" />
  <Command __id="6097" _type="ShellCommand" date="Mon Dec 04 16:07:10 EST 2023" starttimestamp="1701710826491" timestamp="13203804" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6098" _type="ConsoleOutput" date="Mon Dec 04 16:07:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13209091" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:CombinationChecker,"), Diff(INSERT,"execution time (ms):1¶Test Result:TestLispFileProvided,10"), Diff(EQUAL,"0.0% complete,0.0,"), Diff(DELETE,"1"), Diff(EQUAL,"0.0,"), Diff(DELETE,"Expected strings:4actual string COND"), Diff(INSERT,"¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6099" _type="ConsoleOutput" date="Mon Dec 04 16:07:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13209096" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"1¶Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6100" _type="ConsoleOutput" date="Mon Dec 04 16:07:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13209097" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):6"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6101" _type="ConsoleOutput" date="Mon Dec 04 16:07:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13209099" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):8
Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):8¶"), Diff(EQUAL,"Test Result:"), Diff(INSERT,"Main"), Diff(EQUAL,"Class"), Diff(DELETE,"Registry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶")]]]></diff>
  </Command>
  <Command __id="6102" _type="ConsoleOutput" date="Mon Dec 04 16:07:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13209122" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):32
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"8¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"32"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6103" _type="ConsoleOutput" date="Mon Dec 04 16:07:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13209124" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):32"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6104" _type="ConsoleOutput" date="Mon Dec 04 16:07:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13209126" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):36
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):36"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6105" _type="ConsoleOutput" date="Mon Dec 04 16:07:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13209127" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string (EVAL (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):36"), Diff(INSERT,"Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string (EVAL (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6003" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:05:56 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13130031">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="6079" _type="Insert" date="Mon Dec 04 16:07:05 EST 2023" docASTNodeCount="193" docActiveCodeLength="1206" docExpressionCount="146" docLength="1255" length="2" offset="379" starttimestamp="1701710826491" timestamp="13198770">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6080" _type="Insert" date="Mon Dec 04 16:07:05 EST 2023" docASTNodeCount="187" docActiveCodeLength="1181" docExpressionCount="141" docLength="1257" length="2" offset="413" starttimestamp="1701710826491" timestamp="13198771">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6081" _type="Insert" date="Mon Dec 04 16:07:05 EST 2023" docASTNodeCount="185" docActiveCodeLength="1172" docExpressionCount="141" docLength="1259" length="2" offset="441" starttimestamp="1701710826491" timestamp="13198772">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6082" _type="Insert" date="Mon Dec 04 16:07:05 EST 2023" docASTNodeCount="177" docActiveCodeLength="1137" docExpressionCount="134" docLength="1261" length="2" offset="453" starttimestamp="1701710826491" timestamp="13198772">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6083" _type="Insert" date="Mon Dec 04 16:07:05 EST 2023" docASTNodeCount="179" docActiveCodeLength="1134" docExpressionCount="137" docLength="1263" length="2" offset="491" starttimestamp="1701710826491" timestamp="13198773">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6084" _type="Insert" date="Mon Dec 04 16:07:05 EST 2023" docASTNodeCount="174" docActiveCodeLength="1095" docExpressionCount="133" docLength="1265" length="2" offset="497" starttimestamp="1701710826491" timestamp="13198773">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6088" _type="Delete" date="Mon Dec 04 16:07:06 EST 2023" docASTNodeCount="176" docActiveCodeLength="1109" docExpressionCount="134" docLength="1263" endLine="18" length="2" offset="539" startLine="18" starttimestamp="1701710826491" timestamp="13199934">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="6106" _type="ShellCommand" date="Mon Dec 04 16:07:43 EST 2023" starttimestamp="1701710826491" timestamp="13237112" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6107" _type="LocalChecksRawCommand" date="Mon Dec 04 16:07:43 EST 2023" starttimestamp="1701710826491" timestamp="13237114">
    <CSVRow><![CDATA[96,Mon Dec 04 16:07:15 EST 2023,35,0,CombinationChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,42,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,CombinationChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6108" _type="LocalChecksRawCommand" date="Mon Dec 04 16:07:43 EST 2023" starttimestamp="1701710826491" timestamp="13237115">
    <CSVRow><![CDATA[96,Mon Dec 04 16:07:15 EST 2023,35,0,CombinationChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,42,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,CombinationChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6110" _type="MoveCaretCommand" caretOffset="14" date="Mon Dec 04 16:07:45 EST 2023" docOffset="14" starttimestamp="1701710826491" timestamp="13239192" />
  <Command __id="6128" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:07:56 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13250406" type="Run" />
  <Command __id="6129" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:07:56 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13250406" type="Run" />
  <Command __id="6130" _type="ShellCommand" date="Mon Dec 04 16:07:57 EST 2023" starttimestamp="1701710826491" timestamp="13250702" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6131" _type="ConsoleOutput" date="Mon Dec 04 16:08:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13257234" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string (EVAL (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6132" _type="ConsoleOutput" date="Mon Dec 04 16:08:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13257235" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6133" _type="ConsoleOutput" date="Mon Dec 04 16:08:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13257241" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFile"), Diff(INSERT,"execution time (ms):5¶Test Result:ClassRegistry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶"), Diff(DELETE,"¶")]]]></diff>
  </Command>
  <Command __id="6134" _type="ConsoleOutput" date="Mon Dec 04 16:08:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13257241" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"5¶Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6135" _type="ConsoleOutput" date="Mon Dec 04 16:08:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13257242" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6136" _type="ConsoleOutput" date="Mon Dec 04 16:08:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13257267" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):32
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):32"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6137" _type="ConsoleOutput" date="Mon Dec 04 16:08:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13257268" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):32"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6138" _type="ConsoleOutput" date="Mon Dec 04 16:08:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13257270" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):36
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):36"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6139" _type="ConsoleOutput" date="Mon Dec 04 16:08:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13257271" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string (EVAL (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):36"), Diff(INSERT,"Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string (EVAL (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6140" _type="ShellCommand" date="Mon Dec 04 16:08:22 EST 2023" starttimestamp="1701710826491" timestamp="13276165" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6141" _type="CopyCommand" date="Mon Dec 04 16:08:27 EST 2023" starttimestamp="1701710826491" timestamp="13280704" />
  <Command __id="6142" _type="SelectTextCommand" caretOffset="188" date="Mon Dec 04 16:08:32 EST 2023" end="256" start="188" starttimestamp="1701710826491" timestamp="13285566" />
  <Command __id="6145" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:08:32 EST 2023" starttimestamp="1701710826491" timestamp="13285959" />
  <Command __id="6146" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 16:08:33 EST 2023" docOffset="387" starttimestamp="1701710826491" timestamp="13287413" />
  <Command __id="6148" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:08:34 EST 2023" starttimestamp="1701710826491" timestamp="13287546" />
  <Command __id="6150" _type="MoveCaretCommand" caretOffset="553" date="Mon Dec 04 16:08:35 EST 2023" docOffset="553" starttimestamp="1701710826491" timestamp="13288567" />
  <Command __id="6151" _type="SelectTextCommand" caretOffset="379" date="Mon Dec 04 16:08:37 EST 2023" end="538" start="379" starttimestamp="1701710826491" timestamp="13291386" />
  <Command __id="6152" _type="SelectTextCommand" caretOffset="379" date="Mon Dec 04 16:08:37 EST 2023" end="538" start="379" starttimestamp="1701710826491" timestamp="13291386" />
  <Command __id="6159" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:08:38 EST 2023" starttimestamp="1701710826491" timestamp="13291544" />
  <Command __id="6160" _type="MoveCaretCommand" caretOffset="541" date="Mon Dec 04 16:08:39 EST 2023" docOffset="541" starttimestamp="1701710826491" timestamp="13292655" />
  <Command __id="6161" _type="MoveCaretCommand" caretOffset="541" date="Mon Dec 04 16:08:39 EST 2023" docOffset="541" starttimestamp="1701710826491" timestamp="13292655" />
  <Command __id="6162" _type="LocalChecksRawCommand" date="Mon Dec 04 16:08:39 EST 2023" starttimestamp="1701710826491" timestamp="13292657">
    <CSVRow><![CDATA[97,Mon Dec 04 16:08:03 EST 2023,35,0,CombinationChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,43,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,CombinationChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6163" _type="LocalChecksRawCommand" date="Mon Dec 04 16:08:39 EST 2023" starttimestamp="1701710826491" timestamp="13292657">
    <CSVRow><![CDATA[97,Mon Dec 04 16:08:03 EST 2023,35,0,CombinationChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,43,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,CombinationChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6165" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:08:39 EST 2023" starttimestamp="1701710826491" timestamp="13292797" />
  <Command __id="6166" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 16:08:39 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="13293246" />
  <Command __id="6167" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 16:08:39 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="13293246" />
  <Command __id="6168" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 16:08:39 EST 2023" starttimestamp="1701710826491" timestamp="13293340" />
  <Command __id="6169" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:08:39 EST 2023" starttimestamp="1701710826491" timestamp="13293437" />
  <Command __id="6170" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:08:39 EST 2023" starttimestamp="1701710826491" timestamp="13293444" />
  <Command __id="6171" _type="ShellCommand" date="Mon Dec 04 16:08:41 EST 2023" starttimestamp="1701710826491" timestamp="13295343" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6109" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:07:45 EST 2023" docASTNodeCount="162" docActiveCodeLength="916" docExpressionCount="117" docLength="932" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13239117">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/CondEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.NilAtom;import main.lisp.parser.terms.SExpression;public class CondEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isNIL()) {			return new NilAtom();		}		if(!expr.getHead().getHead().eval(environment).isNIL()) {			if(expr.getHead().getTail() instanceof NilAtom) {				return expr.getHead().getHead().eval(environment);			}			if(expr.getHead().getTail().isAtom()) {				return expr.getHead().getTail();			}else {				return expr.getHead().getTail().getHead().eval(environment);			}		}else {			return evalHelper(expr.getTail(), environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="6112" _type="Insert" date="Mon Dec 04 16:07:51 EST 2023" docASTNodeCount="156" docActiveCodeLength="892" docExpressionCount="112" docLength="934" length="2" offset="308" starttimestamp="1701710826491" timestamp="13244816">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6113" _type="Insert" date="Mon Dec 04 16:07:51 EST 2023" docASTNodeCount="151" docActiveCodeLength="853" docExpressionCount="108" docLength="936" length="2" offset="335" starttimestamp="1701710826491" timestamp="13244817">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6116" _type="Delete" date="Mon Dec 04 16:07:52 EST 2023" docASTNodeCount="153" docActiveCodeLength="867" docExpressionCount="109" docLength="934" endLine="13" length="2" offset="377" startLine="13" starttimestamp="1701710826491" timestamp="13245862">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6143" _type="Delete" date="Mon Dec 04 16:08:32 EST 2023" docASTNodeCount="159" docActiveCodeLength="891" docExpressionCount="114" docLength="932" endLine="11" length="2" offset="308" startLine="11" starttimestamp="1701710826491" timestamp="13285937">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6144" _type="Delete" date="Mon Dec 04 16:08:32 EST 2023" docASTNodeCount="164" docActiveCodeLength="930" docExpressionCount="118" docLength="930" endLine="12" length="2" offset="333" startLine="12" starttimestamp="1701710826491" timestamp="13285941">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6147" _type="Insert" date="Mon Dec 04 16:08:34 EST 2023" docASTNodeCount="162" docActiveCodeLength="916" docExpressionCount="117" docLength="932" length="2" offset="373" starttimestamp="1701710826491" timestamp="13287524">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="6149" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:08:34 EST 2023" docASTNodeCount="176" docActiveCodeLength="1109" docExpressionCount="134" docLength="1263" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13288493">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {"), Diff(INSERT,"//"), Diff(EQUAL,"		if(expr.getTail().isAtom()) {"), Diff(INSERT,"//"), Diff(EQUAL,"			expr = expr.getTail();"), Diff(INSERT,"//"), Diff(EQUAL,"		}else {"), Diff(INSERT,"//"), Diff(EQUAL,"			expr = expr.getTail().getHead();"), Diff(INSERT,"//"), Diff(EQUAL,"		}"), Diff(INSERT,"//"), Diff(EQUAL,"		return evalHelper(expr, environment);"), Diff(DELETE,"//"), Diff(EQUAL,"		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
//		if(expr.getTail().isAtom()) {
//			expr = expr.getTail();
//		}else {
//			expr = expr.getTail().getHead();
//		}
//		return evalHelper(expr, environment);
		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		
		boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <DocumentChange __id="6153" _type="Delete" date="Mon Dec 04 16:08:38 EST 2023" docASTNodeCount="183" docActiveCodeLength="1140" docExpressionCount="139" docLength="1261" endLine="12" length="2" offset="379" startLine="12" starttimestamp="1701710826491" timestamp="13291519">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6154" _type="Delete" date="Mon Dec 04 16:08:38 EST 2023" docASTNodeCount="189" docActiveCodeLength="1165" docExpressionCount="144" docLength="1259" endLine="13" length="2" offset="411" startLine="13" starttimestamp="1701710826491" timestamp="13291523">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6155" _type="Delete" date="Mon Dec 04 16:08:38 EST 2023" docASTNodeCount="190" docActiveCodeLength="1174" docExpressionCount="144" docLength="1257" endLine="14" length="2" offset="437" startLine="14" starttimestamp="1701710826491" timestamp="13291524">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6156" _type="Delete" date="Mon Dec 04 16:08:38 EST 2023" docASTNodeCount="198" docActiveCodeLength="1209" docExpressionCount="151" docLength="1255" endLine="15" length="2" offset="447" startLine="15" starttimestamp="1701710826491" timestamp="13291525">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6157" _type="Delete" date="Mon Dec 04 16:08:38 EST 2023" docASTNodeCount="198" docActiveCodeLength="1212" docExpressionCount="151" docLength="1253" endLine="16" length="2" offset="483" startLine="16" starttimestamp="1701710826491" timestamp="13291525">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6158" _type="Delete" date="Mon Dec 04 16:08:38 EST 2023" docASTNodeCount="203" docActiveCodeLength="1251" docExpressionCount="155" docLength="1251" endLine="17" length="2" offset="487" startLine="17" starttimestamp="1701710826491" timestamp="13291525">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6164" _type="Insert" date="Mon Dec 04 16:08:39 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" length="2" offset="527" starttimestamp="1701710826491" timestamp="13292778">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="6190" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:09:12 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13325611">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			return expr.getTail();		}		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="6191" _type="CheckStyleCommand" date="Mon Dec 04 16:09:12 EST 2023" starttimestamp="1701710826491" timestamp="13325615">
    <CSVRow><![CDATA[75,Mon Dec 04 16:08:43 EST 2023,true,index/CondEvaluator.java,expectedTypes,[@NestedLexicalEnvironment, @BasicFuncallEvaluator, @LetEvaluator, @IdentifierAtomWithLookup, @FunctionEvaluator, @SetqEvaluator, @FunctionCallingSExpression, @LambdaEvaluator, @LambdaCallingSExpression]]]></CSVRow>
  </Command>
  <Command __id="6192" _type="CheckStyleCommand" date="Mon Dec 04 16:09:12 EST 2023" starttimestamp="1701710826491" timestamp="13325615">
    <CSVRow><![CDATA[75,Mon Dec 04 16:08:43 EST 2023,true,index/CondEvaluator.java,nameInDictionary,index.CondEvaluator,index]]></CSVRow>
  </Command>
  <Command __id="6193" _type="CheckStyleCommand" date="Mon Dec 04 16:09:12 EST 2023" starttimestamp="1701710826491" timestamp="13325615">
    <CSVRow><![CDATA[75,Mon Dec 04 16:08:43 EST 2023,true,index/CondEvaluator.java,nameInDictionary,environment,environment]]></CSVRow>
  </Command>
  <Command __id="6194" _type="CheckStyleCommand" date="Mon Dec 04 16:09:12 EST 2023" starttimestamp="1701710826491" timestamp="13325615">
    <CSVRow><![CDATA[75,Mon Dec 04 16:08:43 EST 2023,true,index/CondEvaluator.java,nameNotInDictionary,expr,expr]]></CSVRow>
  </Command>
  <Command __id="6195" _type="CheckStyleCommand" date="Mon Dec 04 16:09:12 EST 2023" starttimestamp="1701710826491" timestamp="13325615">
    <CSVRow><![CDATA[75,Mon Dec 04 16:08:43 EST 2023,true,index/CondEvaluator.java,thenBranching,evalHelper]]></CSVRow>
  </Command>
  <Command __id="6196" _type="CheckStyleCommand" date="Mon Dec 04 16:09:12 EST 2023" starttimestamp="1701710826491" timestamp="13325615">
    <CSVRow><![CDATA[75,Mon Dec 04 16:08:43 EST 2023,true,index/CondEvaluator.java,bulkierThen,113.0,20.0,5.65]]></CSVRow>
  </Command>
  <Command __id="6197" _type="CheckStyleCommand" date="Mon Dec 04 16:09:12 EST 2023" starttimestamp="1701710826491" timestamp="13325615">
    <CSVRow><![CDATA[75,Mon Dec 04 16:08:43 EST 2023,true,index/CondEvaluator.java,nestedIfDepth,2,1]]></CSVRow>
  </Command>
  <Command __id="6198" _type="CheckStyleCommand" date="Mon Dec 04 16:09:12 EST 2023" starttimestamp="1701710826491" timestamp="13325615">
    <CSVRow><![CDATA[75,Mon Dec 04 16:08:43 EST 2023,true,index/CondEvaluator.java,publicMethodsOverride,[]]]></CSVRow>
  </Command>
  <Command __id="6199" _type="MoveCaretCommand" caretOffset="220" date="Mon Dec 04 16:09:12 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="13325660" />
  <Command __id="6200" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:09:24 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13337917">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {"), Diff(DELETE,"//"), Diff(EQUAL,"		if(expr.getTail().isAtom()) {"), Diff(DELETE,"//"), Diff(EQUAL,"			expr = expr.getTail();"), Diff(DELETE,"//"), Diff(EQUAL,"		}else {"), Diff(DELETE,"//"), Diff(EQUAL,"			expr = expr.getTail().getHead();"), Diff(DELETE,"//"), Diff(EQUAL,"		}"), Diff(DELETE,"//"), Diff(EQUAL,"		return evalHelper(expr, environment);"), Diff(INSERT,"//"), Diff(EQUAL,"		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		if(expr.getTail().isAtom()) {
			expr = expr.getTail();
		}else {
			expr = expr.getTail().getHead();
		}
		return evalHelper(expr, environment);
//		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		
		boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="6201" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 16:09:24 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="13337977" />
  <Command __id="6202" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:09:27 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13340787">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			return expr.getTail();		}		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="6203" _type="MoveCaretCommand" caretOffset="220" date="Mon Dec 04 16:09:27 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="13340864" />
  <Command __id="6204" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:09:28 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13342315">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="6205" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 16:09:28 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="13342407" />
  <Command __id="6207" _type="MoveCaretCommand" caretOffset="220" date="Mon Dec 04 16:09:31 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="13345436" />
  <Command __id="6219" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:09:35 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13349488" type="Run" />
  <Command __id="6220" _type="PasteCommand" date="Mon Dec 04 16:09:37 EST 2023" starttimestamp="1701710826491" timestamp="13350590" />
  <Command __id="6221" _type="ConsoleOutput" date="Mon Dec 04 16:09:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13351062" type="ConsoleOutput">
    <outputString><![CDATA[COND
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"COND¶")]]]></diff>
  </Command>
  <Command __id="6222" _type="SelectTextCommand" caretOffset="189" date="Mon Dec 04 16:09:44 EST 2023" end="256" start="189" starttimestamp="1701710826491" timestamp="13358366" />
  <Command __id="6223" _type="SelectTextCommand" caretOffset="189" date="Mon Dec 04 16:09:44 EST 2023" end="256" start="189" starttimestamp="1701710826491" timestamp="13358366" />
  <Command __id="6227" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:09:45 EST 2023" starttimestamp="1701710826491" timestamp="13358749" />
  <Command __id="6228" _type="MoveCaretCommand" caretOffset="250" date="Mon Dec 04 16:09:45 EST 2023" docOffset="331" starttimestamp="1701710826491" timestamp="13359257" />
  <Command __id="6229" _type="MoveCaretCommand" caretOffset="250" date="Mon Dec 04 16:09:45 EST 2023" docOffset="331" starttimestamp="1701710826491" timestamp="13359257" />
  <Command __id="6230" _type="MoveCaretCommand" caretOffset="250" date="Mon Dec 04 16:09:45 EST 2023" docOffset="331" starttimestamp="1701710826491" timestamp="13359441" />
  <Command __id="6231" _type="MoveCaretCommand" caretOffset="250" date="Mon Dec 04 16:09:45 EST 2023" docOffset="331" starttimestamp="1701710826491" timestamp="13359441" />
  <Command __id="6232" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 16:09:45 EST 2023" starttimestamp="1701710826491" timestamp="13359461" />
  <Command __id="6233" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:09:46 EST 2023" starttimestamp="1701710826491" timestamp="13359558" />
  <Command __id="6234" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:09:46 EST 2023" starttimestamp="1701710826491" timestamp="13359563" />
  <Command __id="6243" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:09:51 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13365004" type="Run" />
  <Command __id="6244" _type="PasteCommand" date="Mon Dec 04 16:09:52 EST 2023" starttimestamp="1701710826491" timestamp="13366066" />
  <Command __id="6245" _type="ConsoleOutput" date="Mon Dec 04 16:09:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13366336" type="ConsoleOutput">
    <outputString><![CDATA[COND
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"COND¶")]]]></diff>
  </Command>
  <Command __id="6246" _type="MoveCaretCommand" caretOffset="275" date="Mon Dec 04 16:09:54 EST 2023" docOffset="356" starttimestamp="1701710826491" timestamp="13367810" />
  <Command __id="6247" _type="MoveCaretCommand" caretOffset="275" date="Mon Dec 04 16:09:54 EST 2023" docOffset="356" starttimestamp="1701710826491" timestamp="13367810" />
  <Command __id="6249" _type="UndoCommand" date="Mon Dec 04 16:09:54 EST 2023" starttimestamp="1701710826491" timestamp="13367895" />
  <Command __id="6250" _type="MoveCaretCommand" caretOffset="246" date="Mon Dec 04 16:09:55 EST 2023" docOffset="327" starttimestamp="1701710826491" timestamp="13368684" />
  <Command __id="6251" _type="MoveCaretCommand" caretOffset="246" date="Mon Dec 04 16:09:55 EST 2023" docOffset="327" starttimestamp="1701710826491" timestamp="13368684" />
  <Command __id="6252" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 16:09:55 EST 2023" starttimestamp="1701710826491" timestamp="13368741" />
  <Command __id="6253" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:09:55 EST 2023" starttimestamp="1701710826491" timestamp="13368839" />
  <Command __id="6254" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:09:55 EST 2023" starttimestamp="1701710826491" timestamp="13368844" />
  <Command __id="6255" _type="ShellCommand" date="Mon Dec 04 16:10:11 EST 2023" starttimestamp="1701710826491" timestamp="13384962" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6206" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:09:31 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13345375">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			return expr.getTail();		}		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="6210" _type="Insert" date="Mon Dec 04 16:09:33 EST 2023" docASTNodeCount="54" docActiveCodeLength="341" docExpressionCount="37" docLength="374" length="2" offset="270" starttimestamp="1701710826491" timestamp="13347401">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6211" _type="Insert" date="Mon Dec 04 16:09:33 EST 2023" docASTNodeCount="50" docActiveCodeLength="316" docExpressionCount="34" docLength="376" length="2" offset="304" starttimestamp="1701710826491" timestamp="13347402">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6212" _type="Insert" date="Mon Dec 04 16:09:33 EST 2023" docASTNodeCount="56" docActiveCodeLength="313" docExpressionCount="39" docLength="378" length="2" offset="332" starttimestamp="1701710826491" timestamp="13347402">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6224" _type="Delete" date="Mon Dec 04 16:09:45 EST 2023" docASTNodeCount="63" docActiveCodeLength="344" docExpressionCount="44" docLength="376" endLine="10" length="2" offset="270" startLine="10" starttimestamp="1701710826491" timestamp="13358733">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6225" _type="Delete" date="Mon Dec 04 16:09:45 EST 2023" docASTNodeCount="67" docActiveCodeLength="369" docExpressionCount="47" docLength="374" endLine="11" length="2" offset="302" startLine="11" starttimestamp="1701710826491" timestamp="13358737">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6226" _type="Delete" date="Mon Dec 04 16:09:45 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" endLine="12" length="2" offset="328" startLine="12" starttimestamp="1701710826491" timestamp="13358737">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6237" _type="Delete" date="Mon Dec 04 16:09:49 EST 2023" docASTNodeCount="65" docActiveCodeLength="362" docExpressionCount="45" docLength="362" endLine="13" length="10" offset="355" startLine="13" starttimestamp="1701710826491" timestamp="13363161">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <DocumentChange __id="6248" _type="Insert" date="Mon Dec 04 16:09:54 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" length="10" offset="355" starttimestamp="1701710826491" timestamp="13367894">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <Command __id="6257" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:10:37 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13410728" type="Debug" />
  <Command __id="6258" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:10:37 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13410728" type="Run" />
  <Command __id="6259" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:10:37 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13410728" type="Debug" />
  <Command __id="6260" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:10:37 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13410728" type="Run" />
  <Command __id="6261" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:10:38 EST 2023" docASTNodeCount="465" docActiveCodeLength="3521" docExpressionCount="230" docLength="4303" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13412019">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaEvaluator'");	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="6262" _type="MoveCaretCommand" caretOffset="3158" date="Mon Dec 04 16:10:38 EST 2023" docOffset="3394" starttimestamp="1701710826491" timestamp="13412077" />
  <Command __id="6263" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:10:39 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13412698">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.scanner.tokens.Token;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }        public IdentifierAtomImpl(Token token) {        super(token);     }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="6264" _type="MoveCaretCommand" caretOffset="373" date="Mon Dec 04 16:10:39 EST 2023" docOffset="373" starttimestamp="1701710826491" timestamp="13412773" />
  <Command __id="6265" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:10:54 EST 2023" docASTNodeCount="465" docActiveCodeLength="3521" docExpressionCount="230" docLength="4303" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13428269">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaEvaluator'");	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="6266" _type="MoveCaretCommand" caretOffset="3158" date="Mon Dec 04 16:10:54 EST 2023" docOffset="3394" starttimestamp="1701710826491" timestamp="13428326" />
  <Command __id="6267" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:10:57 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13430520">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="6268" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 16:10:57 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="13430597" />
  <Command __id="6270" _type="MoveCaretCommand" caretOffset="246" date="Mon Dec 04 16:11:06 EST 2023" docOffset="327" starttimestamp="1701710826491" timestamp="13439662" />
  <Command __id="6271" _type="MoveCaretCommand" caretOffset="156" date="Mon Dec 04 16:11:07 EST 2023" docOffset="237" starttimestamp="1701710826491" timestamp="13440969" />
  <Command __id="6272" _type="MoveCaretCommand" caretOffset="156" date="Mon Dec 04 16:11:07 EST 2023" docOffset="237" starttimestamp="1701710826491" timestamp="13440969" />
  <Command __id="6273" _type="MoveCaretCommand" caretOffset="220" date="Mon Dec 04 16:11:08 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="13442229" />
  <Command __id="6274" _type="MoveCaretCommand" caretOffset="220" date="Mon Dec 04 16:11:08 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="13442230" />
  <Command __id="6269" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:11:06 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13439590">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			return expr.getTail();		}		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="6275" _type="ShellCommand" date="Mon Dec 04 16:11:10 EST 2023" starttimestamp="1701710826491" timestamp="13444252" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6276" _type="ShellCommand" date="Mon Dec 04 16:11:11 EST 2023" starttimestamp="1701710826491" timestamp="13445133" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6278" _type="MoveCaretCommand" caretOffset="477" date="Mon Dec 04 16:11:37 EST 2023" docOffset="477" starttimestamp="1701710826491" timestamp="13470850" />
  <Command __id="6297" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:11:46 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13480284" type="Run" />
  <Command __id="6298" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:11:46 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13480284" type="Run" />
  <Command __id="6299" _type="ShellCommand" date="Mon Dec 04 16:11:47 EST 2023" starttimestamp="1701710826491" timestamp="13480601" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6300" _type="ConsoleOutput" date="Mon Dec 04 16:11:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13488971" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"COND"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6301" _type="ConsoleOutput" date="Mon Dec 04 16:11:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13488973" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6302" _type="ConsoleOutput" date="Mon Dec 04 16:11:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13488977" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6303" _type="ConsoleOutput" date="Mon Dec 04 16:11:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13488977" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):5"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6304" _type="ConsoleOutput" date="Mon Dec 04 16:11:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13488978" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6305" _type="ConsoleOutput" date="Mon Dec 04 16:11:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13488978" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6306" _type="ConsoleOutput" date="Mon Dec 04 16:11:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13489001" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):30
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):30"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6307" _type="ConsoleOutput" date="Mon Dec 04 16:11:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13489003" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):30"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6308" _type="ConsoleOutput" date="Mon Dec 04 16:11:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13489004" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):33
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):33"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6309" _type="ConsoleOutput" date="Mon Dec 04 16:11:55 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13489005" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string (EVAL (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):33"), Diff(INSERT,"Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string (EVAL (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6310" _type="ShellCommand" date="Mon Dec 04 16:11:59 EST 2023" starttimestamp="1701710826491" timestamp="13493029" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6311" _type="CopyCommand" date="Mon Dec 04 16:12:02 EST 2023" starttimestamp="1701710826491" timestamp="13496417" />
  <Command __id="6312" _type="ShellCommand" date="Mon Dec 04 16:12:06 EST 2023" starttimestamp="1701710826491" timestamp="13500219" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6313" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:12:07 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13501030" type="Debug" />
  <Command __id="6314" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:12:07 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13501030" type="Run" />
  <Command __id="6315" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:12:07 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13501030" type="Debug" />
  <Command __id="6316" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:12:07 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13501030" type="Run" />
  <Command __id="6317" _type="ShellCommand" date="Mon Dec 04 16:12:07 EST 2023" starttimestamp="1701710826491" timestamp="13501054" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6318" _type="ShellCommand" date="Mon Dec 04 16:12:08 EST 2023" starttimestamp="1701710826491" timestamp="13501567" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6319" _type="ShellCommand" date="Mon Dec 04 16:12:10 EST 2023" starttimestamp="1701710826491" timestamp="13504179" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6320" _type="LocalChecksRawCommand" date="Mon Dec 04 16:12:10 EST 2023" starttimestamp="1701710826491" timestamp="13504180">
    <CSVRow><![CDATA[98,Mon Dec 04 16:11:55 EST 2023,35,0,CombinationChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,44,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,CombinationChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6321" _type="LocalChecksRawCommand" date="Mon Dec 04 16:12:10 EST 2023" starttimestamp="1701710826491" timestamp="13504180">
    <CSVRow><![CDATA[98,Mon Dec 04 16:11:55 EST 2023,35,0,CombinationChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,44,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,CombinationChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6323" _type="MoveCaretCommand" caretOffset="351" date="Mon Dec 04 16:12:10 EST 2023" docOffset="351" starttimestamp="1701710826491" timestamp="13504316" />
  <Command __id="6277" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:11:37 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13470786">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="6281" _type="Insert" date="Mon Dec 04 16:11:41 EST 2023" docASTNodeCount="193" docActiveCodeLength="1206" docExpressionCount="146" docLength="1255" length="2" offset="379" starttimestamp="1701710826491" timestamp="13475080">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6282" _type="Insert" date="Mon Dec 04 16:11:41 EST 2023" docASTNodeCount="187" docActiveCodeLength="1181" docExpressionCount="141" docLength="1257" length="2" offset="413" starttimestamp="1701710826491" timestamp="13475081">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6283" _type="Insert" date="Mon Dec 04 16:11:41 EST 2023" docASTNodeCount="185" docActiveCodeLength="1172" docExpressionCount="141" docLength="1259" length="2" offset="441" starttimestamp="1701710826491" timestamp="13475082">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6284" _type="Insert" date="Mon Dec 04 16:11:41 EST 2023" docASTNodeCount="177" docActiveCodeLength="1137" docExpressionCount="134" docLength="1261" length="2" offset="453" starttimestamp="1701710826491" timestamp="13475083">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6285" _type="Insert" date="Mon Dec 04 16:11:41 EST 2023" docASTNodeCount="179" docActiveCodeLength="1134" docExpressionCount="137" docLength="1263" length="2" offset="491" starttimestamp="1701710826491" timestamp="13475083">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6286" _type="Insert" date="Mon Dec 04 16:11:41 EST 2023" docASTNodeCount="174" docActiveCodeLength="1095" docExpressionCount="133" docLength="1265" length="2" offset="497" starttimestamp="1701710826491" timestamp="13475083">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6290" _type="Delete" date="Mon Dec 04 16:11:42 EST 2023" docASTNodeCount="176" docActiveCodeLength="1109" docExpressionCount="134" docLength="1263" endLine="18" length="2" offset="539" startLine="18" starttimestamp="1701710826491" timestamp="13476128">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="6322" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:12:10 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13504269">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="6324" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Mon Dec 04 16:12:13 EST 2023" starttimestamp="1701710826491" timestamp="13506636" />
  <Command __id="6325" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:12:13 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13506799" type="Run" />
  <Command __id="6326" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:12:13 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13506799" type="Run" />
  <Command __id="6327" _type="PasteCommand" date="Mon Dec 04 16:12:14 EST 2023" starttimestamp="1701710826491" timestamp="13507677" />
  <Command __id="6328" _type="ConsoleOutput" date="Mon Dec 04 16:12:14 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13508072" type="ConsoleOutput">
    <outputString><![CDATA[(EVAL (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string "), Diff(EQUAL,"(EVAL (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))¶")]]]></diff>
  </Command>
  <Command __id="6330" _type="MoveCaretCommand" caretOffset="483" date="Mon Dec 04 16:12:20 EST 2023" docOffset="483" starttimestamp="1701710826491" timestamp="13514477" />
  <Command __id="6349" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:12:26 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13520356" type="Run" />
  <Command __id="6350" _type="PasteCommand" date="Mon Dec 04 16:12:27 EST 2023" starttimestamp="1701710826491" timestamp="13521181" />
  <Command __id="6351" _type="ConsoleOutput" date="Mon Dec 04 16:12:27 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13521375" type="ConsoleOutput">
    <outputString><![CDATA[COND
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(EVAL (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))"), Diff(INSERT,"COND"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6329" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:12:20 EST 2023" docASTNodeCount="176" docActiveCodeLength="1109" docExpressionCount="134" docLength="1263" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13514416">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {"), Diff(INSERT,"//"), Diff(EQUAL,"		if(expr.getTail().isAtom()) {"), Diff(INSERT,"//"), Diff(EQUAL,"			expr = expr.getTail();"), Diff(INSERT,"//"), Diff(EQUAL,"		}else {"), Diff(INSERT,"//"), Diff(EQUAL,"			expr = expr.getTail().getHead();"), Diff(INSERT,"//"), Diff(EQUAL,"		}"), Diff(INSERT,"//"), Diff(EQUAL,"		return evalHelper(expr, environment);"), Diff(DELETE,"//"), Diff(EQUAL,"		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
//		if(expr.getTail().isAtom()) {
//			expr = expr.getTail();
//		}else {
//			expr = expr.getTail().getHead();
//		}
//		return evalHelper(expr, environment);
		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		
		boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <DocumentChange __id="6333" _type="Delete" date="Mon Dec 04 16:12:23 EST 2023" docASTNodeCount="183" docActiveCodeLength="1140" docExpressionCount="139" docLength="1261" endLine="12" length="2" offset="379" startLine="12" starttimestamp="1701710826491" timestamp="13517138">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6334" _type="Delete" date="Mon Dec 04 16:12:23 EST 2023" docASTNodeCount="189" docActiveCodeLength="1165" docExpressionCount="144" docLength="1259" endLine="13" length="2" offset="411" startLine="13" starttimestamp="1701710826491" timestamp="13517142">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6335" _type="Delete" date="Mon Dec 04 16:12:23 EST 2023" docASTNodeCount="190" docActiveCodeLength="1174" docExpressionCount="144" docLength="1257" endLine="14" length="2" offset="437" startLine="14" starttimestamp="1701710826491" timestamp="13517143">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6336" _type="Delete" date="Mon Dec 04 16:12:23 EST 2023" docASTNodeCount="198" docActiveCodeLength="1209" docExpressionCount="151" docLength="1255" endLine="15" length="2" offset="447" startLine="15" starttimestamp="1701710826491" timestamp="13517144">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6337" _type="Delete" date="Mon Dec 04 16:12:23 EST 2023" docASTNodeCount="198" docActiveCodeLength="1212" docExpressionCount="151" docLength="1253" endLine="16" length="2" offset="483" startLine="16" starttimestamp="1701710826491" timestamp="13517144">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6338" _type="Delete" date="Mon Dec 04 16:12:23 EST 2023" docASTNodeCount="203" docActiveCodeLength="1251" docExpressionCount="155" docLength="1251" endLine="17" length="2" offset="487" startLine="17" starttimestamp="1701710826491" timestamp="13517144">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6342" _type="Insert" date="Mon Dec 04 16:12:24 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" length="2" offset="527" starttimestamp="1701710826491" timestamp="13518288">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6354" _type="Insert" date="Mon Dec 04 16:12:39 EST 2023" docASTNodeCount="193" docActiveCodeLength="1206" docExpressionCount="146" docLength="1255" length="2" offset="379" starttimestamp="1701710826491" timestamp="13532525">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6355" _type="Insert" date="Mon Dec 04 16:12:39 EST 2023" docASTNodeCount="187" docActiveCodeLength="1181" docExpressionCount="141" docLength="1257" length="2" offset="413" starttimestamp="1701710826491" timestamp="13532526">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6356" _type="Insert" date="Mon Dec 04 16:12:39 EST 2023" docASTNodeCount="185" docActiveCodeLength="1172" docExpressionCount="141" docLength="1259" length="2" offset="441" starttimestamp="1701710826491" timestamp="13532526">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6357" _type="Insert" date="Mon Dec 04 16:12:39 EST 2023" docASTNodeCount="177" docActiveCodeLength="1137" docExpressionCount="134" docLength="1261" length="2" offset="453" starttimestamp="1701710826491" timestamp="13532527">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6358" _type="Insert" date="Mon Dec 04 16:12:39 EST 2023" docASTNodeCount="179" docActiveCodeLength="1134" docExpressionCount="137" docLength="1263" length="2" offset="491" starttimestamp="1701710826491" timestamp="13532527">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6359" _type="Insert" date="Mon Dec 04 16:12:39 EST 2023" docASTNodeCount="174" docActiveCodeLength="1095" docExpressionCount="133" docLength="1265" length="2" offset="497" starttimestamp="1701710826491" timestamp="13532527">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6361" _type="Delete" date="Mon Dec 04 16:12:41 EST 2023" docASTNodeCount="181" docActiveCodeLength="1126" docExpressionCount="138" docLength="1263" endLine="12" length="2" offset="379" startLine="12" starttimestamp="1701710826491" timestamp="13535392">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6362" _type="Delete" date="Mon Dec 04 16:12:41 EST 2023" docASTNodeCount="187" docActiveCodeLength="1151" docExpressionCount="143" docLength="1261" endLine="13" length="2" offset="411" startLine="13" starttimestamp="1701710826491" timestamp="13535394">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6363" _type="Delete" date="Mon Dec 04 16:12:41 EST 2023" docASTNodeCount="188" docActiveCodeLength="1160" docExpressionCount="143" docLength="1259" endLine="14" length="2" offset="437" startLine="14" starttimestamp="1701710826491" timestamp="13535395">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6364" _type="Delete" date="Mon Dec 04 16:12:41 EST 2023" docASTNodeCount="196" docActiveCodeLength="1195" docExpressionCount="150" docLength="1257" endLine="15" length="2" offset="447" startLine="15" starttimestamp="1701710826491" timestamp="13535395">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6365" _type="Delete" date="Mon Dec 04 16:12:41 EST 2023" docASTNodeCount="196" docActiveCodeLength="1198" docExpressionCount="150" docLength="1255" endLine="16" length="2" offset="483" startLine="16" starttimestamp="1701710826491" timestamp="13535396">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6366" _type="Delete" date="Mon Dec 04 16:12:41 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" endLine="17" length="2" offset="487" startLine="17" starttimestamp="1701710826491" timestamp="13535396">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="6352" _type="SelectTextCommand" caretOffset="379" date="Mon Dec 04 16:12:38 EST 2023" end="526" start="379" starttimestamp="1701710826491" timestamp="13532077" />
  <Command __id="6353" _type="SelectTextCommand" caretOffset="379" date="Mon Dec 04 16:12:38 EST 2023" end="526" start="379" starttimestamp="1701710826491" timestamp="13532078" />
  <Command __id="6360" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:12:39 EST 2023" starttimestamp="1701710826491" timestamp="13532543" />
  <Command __id="6367" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:12:41 EST 2023" starttimestamp="1701710826491" timestamp="13535412" />
  <Command __id="6368" _type="MoveCaretCommand" caretOffset="486" date="Mon Dec 04 16:12:42 EST 2023" docOffset="486" starttimestamp="1701710826491" timestamp="13535990" />
  <Command __id="6369" _type="MoveCaretCommand" caretOffset="486" date="Mon Dec 04 16:12:42 EST 2023" docOffset="486" starttimestamp="1701710826491" timestamp="13535990" />
  <Command __id="6370" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 16:12:42 EST 2023" starttimestamp="1701710826491" timestamp="13536297" />
  <Command __id="6371" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:12:42 EST 2023" starttimestamp="1701710826491" timestamp="13536398" />
  <Command __id="6372" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:12:42 EST 2023" starttimestamp="1701710826491" timestamp="13536405" />
  <Command __id="6374" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 16:12:49 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="13543309" />
  <Command __id="6375" _type="SelectTextCommand" caretOffset="188" date="Mon Dec 04 16:12:53 EST 2023" end="252" start="188" starttimestamp="1701710826491" timestamp="13547370" />
  <Command __id="6378" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:12:54 EST 2023" starttimestamp="1701710826491" timestamp="13548206" />
  <Command __id="6379" _type="MoveCaretCommand" caretOffset="259" date="Mon Dec 04 16:12:55 EST 2023" docOffset="389" starttimestamp="1701710826491" timestamp="13549499" />
  <Command __id="6410" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:13:05 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13558623" type="Run" />
  <Command __id="6411" _type="ShellCommand" date="Mon Dec 04 16:13:05 EST 2023" starttimestamp="1701710826491" timestamp="13558930" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6420" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:13:36 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13590443" type="Debug" />
  <Command __id="6421" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:13:36 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13590443" type="Run" />
  <Command __id="6422" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:13:36 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13590443" type="Debug" />
  <Command __id="6423" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:13:36 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13590443" type="Run" />
  <Command __id="6424" _type="ShellCommand" date="Mon Dec 04 16:13:36 EST 2023" starttimestamp="1701710826491" timestamp="13590450" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6425" _type="SelectTextCommand" caretOffset="188" date="Mon Dec 04 16:13:39 EST 2023" end="256" start="188" starttimestamp="1701710826491" timestamp="13592842" />
  <Command __id="6426" _type="LocalChecksRawCommand" date="Mon Dec 04 16:13:39 EST 2023" starttimestamp="1701710826491" timestamp="13592845">
    <CSVRow><![CDATA[99,Mon Dec 04 16:13:10 EST 2023,35,0,CombinationChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,45,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,CombinationChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6427" _type="LocalChecksRawCommand" date="Mon Dec 04 16:13:39 EST 2023" starttimestamp="1701710826491" timestamp="13592845">
    <CSVRow><![CDATA[99,Mon Dec 04 16:13:10 EST 2023,35,0,CombinationChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,45,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,CombinationChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6430" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:13:39 EST 2023" starttimestamp="1701710826491" timestamp="13593267" />
  <Command __id="6431" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 16:13:40 EST 2023" docOffset="397" starttimestamp="1701710826491" timestamp="13594500" />
  <Command __id="6433" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Dec 04 16:13:41 EST 2023" starttimestamp="1701710826491" timestamp="13594632" />
  <Command __id="6434" _type="MoveCaretCommand" caretOffset="212" date="Mon Dec 04 16:13:41 EST 2023" docOffset="342" starttimestamp="1701710826491" timestamp="13595167" />
  <Command __id="6435" _type="ShellCommand" date="Mon Dec 04 16:13:58 EST 2023" starttimestamp="1701710826491" timestamp="13611952" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6436" _type="ShellCommand" date="Mon Dec 04 16:14:08 EST 2023" starttimestamp="1701710826491" timestamp="13621883" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6437" _type="MoveCaretCommand" caretOffset="222" date="Mon Dec 04 16:14:08 EST 2023" docOffset="352" starttimestamp="1701710826491" timestamp="13621946" />
  <Command __id="6438" _type="ShellCommand" date="Mon Dec 04 16:14:09 EST 2023" starttimestamp="1701710826491" timestamp="13623185" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6458" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:14:18 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13631757" type="Run" />
  <Command __id="6459" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:14:18 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13631757" type="Run" />
  <Command __id="6460" _type="CheckStyleCommand" date="Mon Dec 04 16:14:18 EST 2023" starttimestamp="1701710826491" timestamp="13631760">
    <CSVRow><![CDATA[77,Mon Dec 04 16:14:11 EST 2023,true,index/ListEvaluator.java,expectedTypes,[@NestedLexicalEnvironment, @BasicFuncallEvaluator, @LetEvaluator, @IdentifierAtomWithLookup, @FunctionEvaluator, @SetqEvaluator, @FunctionCallingSExpression, @LambdaEvaluator, @LambdaCallingSExpression]]]></CSVRow>
  </Command>
  <Command __id="6461" _type="CheckStyleCommand" date="Mon Dec 04 16:14:18 EST 2023" starttimestamp="1701710826491" timestamp="13631760">
    <CSVRow><![CDATA[77,Mon Dec 04 16:14:11 EST 2023,true,index/ListEvaluator.java,nameInDictionary,index.ListEvaluator,index]]></CSVRow>
  </Command>
  <Command __id="6462" _type="CheckStyleCommand" date="Mon Dec 04 16:14:18 EST 2023" starttimestamp="1701710826491" timestamp="13631760">
    <CSVRow><![CDATA[77,Mon Dec 04 16:14:11 EST 2023,true,index/ListEvaluator.java,nameInDictionary,index.ListEvaluator,list]]></CSVRow>
  </Command>
  <Command __id="6463" _type="CheckStyleCommand" date="Mon Dec 04 16:14:18 EST 2023" starttimestamp="1701710826491" timestamp="13631760">
    <CSVRow><![CDATA[77,Mon Dec 04 16:14:11 EST 2023,true,index/ListEvaluator.java,nameInDictionary,environment,environment]]></CSVRow>
  </Command>
  <Command __id="6464" _type="CheckStyleCommand" date="Mon Dec 04 16:14:18 EST 2023" starttimestamp="1701710826491" timestamp="13631760">
    <CSVRow><![CDATA[77,Mon Dec 04 16:14:11 EST 2023,true,index/ListEvaluator.java,nameNotInDictionary,expr,expr]]></CSVRow>
  </Command>
  <Command __id="6465" _type="CheckStyleCommand" date="Mon Dec 04 16:14:18 EST 2023" starttimestamp="1701710826491" timestamp="13631760">
    <CSVRow><![CDATA[77,Mon Dec 04 16:14:11 EST 2023,true,index/ListEvaluator.java,publicMethodsOverride,[]]]></CSVRow>
  </Command>
  <Command __id="6466" _type="PasteCommand" date="Mon Dec 04 16:14:18 EST 2023" starttimestamp="1701710826491" timestamp="13632432" />
  <Command __id="6467" _type="ConsoleOutput" date="Mon Dec 04 16:14:19 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13632712" type="ConsoleOutput">
    <outputString><![CDATA[COND
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string LIST"), Diff(INSERT,"COND"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6373" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:12:49 EST 2023" docASTNodeCount="112" docActiveCodeLength="655" docExpressionCount="80" docLength="655" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13543242">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ListEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.ExpressionFactory;

public class ListEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr.eval(environment);
		}
		return ExpressionFactory.newInstance(expr.getHead().eval(environment), evalHelper(expr.getTail(), environment));
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="6376" _type="Insert" date="Mon Dec 04 16:12:54 EST 2023" docASTNodeCount="106" docActiveCodeLength="631" docExpressionCount="75" docLength="657" length="2" offset="318" starttimestamp="1701710826491" timestamp="13548190">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6377" _type="Insert" date="Mon Dec 04 16:12:54 EST 2023" docASTNodeCount="101" docActiveCodeLength="592" docExpressionCount="71" docLength="659" length="2" offset="345" starttimestamp="1701710826491" timestamp="13548190">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6381" _type="Insert" date="Mon Dec 04 16:12:57 EST 2023" docASTNodeCount="103" docActiveCodeLength="607" docExpressionCount="72" docLength="674" length="15" offset="386" repeat="13" starttimestamp="1701710826491" timestamp="13550865" timestamp2="13552141">
    <text><![CDATA[
		return expr;]]></text>
  </DocumentChange>
  <DocumentChange __id="6428" _type="Delete" date="Mon Dec 04 16:13:39 EST 2023" docASTNodeCount="109" docActiveCodeLength="631" docExpressionCount="77" docLength="672" endLine="11" length="2" offset="318" startLine="11" starttimestamp="1701710826491" timestamp="13593247">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6429" _type="Delete" date="Mon Dec 04 16:13:39 EST 2023" docASTNodeCount="114" docActiveCodeLength="670" docExpressionCount="81" docLength="670" endLine="12" length="2" offset="343" startLine="12" starttimestamp="1701710826491" timestamp="13593251">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6432" _type="Insert" date="Mon Dec 04 16:13:41 EST 2023" docASTNodeCount="112" docActiveCodeLength="656" docExpressionCount="80" docLength="672" length="2" offset="383" starttimestamp="1701710826491" timestamp="13594614">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="6468" _type="SelectTextCommand" caretOffset="489" date="Mon Dec 04 16:14:35 EST 2023" end="489" start="471" starttimestamp="1701710826491" timestamp="13648831" />
  <Command __id="6482" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:14:50 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13664121" type="Run" />
  <Command __id="6483" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:14:50 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13664121" type="Run" />
  <Command __id="6484" _type="ShellCommand" date="Mon Dec 04 16:14:50 EST 2023" starttimestamp="1701710826491" timestamp="13664412" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6485" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668327" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"COND"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6486" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668328" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6487" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668334" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):4
Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,

Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFile"), Diff(INSERT,"execution time (ms):4¶Test Result:ClassRegistry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶¶"), Diff(INSERT,"Test execution time (ms):6¶")]]]></diff>
  </Command>
  <Command __id="6488" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668335" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):4¶"), Diff(EQUAL,"Test Result:"), Diff(INSERT,"Main"), Diff(EQUAL,"Class"), Diff(DELETE,"Registry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶"), Diff(DELETE,"¶Test execution time (ms):6¶")]]]></diff>
  </Command>
  <Command __id="6489" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668357" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):29
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):29"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6490" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668359" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

Test execution time (ms):31
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"29"), Diff(INSERT,"31"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6491" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668361" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:CondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:"), Diff(DELETE,"LoadLisp"), Diff(INSERT,"Cond"), Diff(EQUAL,"Checker,100.0% complete,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,¶"), Diff(DELETE,"¶Test execution time (ms):31¶")]]]></diff>
  </Command>
  <Command __id="6492" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668362" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:CondChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6493" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668363" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6494" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668363" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6495" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668365" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:QuoteChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:QuoteChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6496" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668366" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:QuoteChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6497" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668367" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:EvalChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:EvalChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6498" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668369" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:EvalChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6499" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668369" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ListChecker,0.0% complete,0.0,10.0,Expected strings:(5 3 1)actual string ((+ 2 3) 3 (- 2 1))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):2"), Diff(INSERT,"Result:ListChecker,0.0% complete,0.0,10.0,Expected strings:(5 3 1)actual string ((+ 2 3) 3 (- 2 1))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6500" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668371" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ListChecker,0.0% complete,0.0,10.0,Expected strings:(5 3 1)actual string ((+ 2 3) 3 (- 2 1))"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6501" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668371" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ListChecker2,0.0% complete,0.0,10.0,Expected strings:(6 (3 (4 . 3)) 1)actual string ((+ 3 3) (LIST (+ 1 2) (CONS 4 3)) (- 2 1))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:ListChecker2,0.0% complete,0.0,10.0,Expected strings:(6 (3 (4 . 3)) 1)actual string ((+ 3 3) (LIST (+ 1 2) (CONS 4 3)) (- 2 1))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6502" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668372" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"Result:ListChecker2,0.0% complete,0.0,10.0,Expected strings:(6 (3 (4 . 3)) 1)actual string ((+ 3 3) (LIST (+ 1 2) (CONS 4 3)) (- 2 1))"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6503" _type="ConsoleOutput" date="Mon Dec 04 16:14:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13668373" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string COND
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string COND"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6504" _type="ShellCommand" date="Mon Dec 04 16:14:56 EST 2023" starttimestamp="1701710826491" timestamp="13670364" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6505" _type="LocalChecksRawCommand" date="Mon Dec 04 16:14:56 EST 2023" starttimestamp="1701710826491" timestamp="13670367">
    <CSVRow><![CDATA[100,Mon Dec 04 16:14:54 EST 2023,32,-3,A6BasicOperationSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListChecker- ListChecker2- ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,46,0,true,A6ExtraCondChecker CombinationChecker CondChecker EvalChecker ListChecker ListChecker2 QuoteChecker ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) CombinationChecker-(0.0/10.0) CondChecker-(10.0/10.0) EvalChecker-(10.0/10.0) ListChecker-(0.0/10.0) ListChecker2-(0.0/10.0) QuoteChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6506" _type="LocalChecksRawCommand" date="Mon Dec 04 16:14:56 EST 2023" starttimestamp="1701710826491" timestamp="13670367">
    <CSVRow><![CDATA[100,Mon Dec 04 16:14:54 EST 2023,32,-3,A6BasicOperationSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListChecker- ListChecker2- ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,46,0,true,A6ExtraCondChecker CombinationChecker CondChecker EvalChecker ListChecker ListChecker2 QuoteChecker ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) CombinationChecker-(0.0/10.0) CondChecker-(10.0/10.0) EvalChecker-(10.0/10.0) ListChecker-(0.0/10.0) ListChecker2-(0.0/10.0) QuoteChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6507" _type="MoveCaretCommand" caretOffset="471" date="Mon Dec 04 16:14:56 EST 2023" docOffset="601" starttimestamp="1701710826491" timestamp="13670460" />
  <Command __id="6509" _type="InsertStringCommand" date="Mon Dec 04 16:14:57 EST 2023" starttimestamp="1701710826491" timestamp="13671199" timestamp2="13671199">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6510" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 16:14:57 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="13671220" />
  <Command __id="6515" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:14:59 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="13672885" />
  <Command __id="6517" _type="InsertStringCommand" date="Mon Dec 04 16:14:59 EST 2023" starttimestamp="1701710826491" timestamp="13672922" timestamp2="13672922">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6518" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 16:15:00 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="13674063" />
  <Command __id="6519" _type="MoveCaretCommand" caretOffset="274" date="Mon Dec 04 16:15:00 EST 2023" docOffset="404" starttimestamp="1701710826491" timestamp="13674076" />
  <Command __id="6520" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 16:15:00 EST 2023" starttimestamp="1701710826491" timestamp="13674453" />
  <Command __id="6521" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:15:01 EST 2023" starttimestamp="1701710826491" timestamp="13674554" />
  <Command __id="6522" _type="EclipseCommand" commandID="" date="Mon Dec 04 16:15:01 EST 2023" starttimestamp="1701710826491" timestamp="13674568" />
  <Command __id="6523" _type="ShellCommand" date="Mon Dec 04 16:15:02 EST 2023" starttimestamp="1701710826491" timestamp="13675879" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="6469" _type="Delete" date="Mon Dec 04 16:14:36 EST 2023" docASTNodeCount="109" docActiveCodeLength="638" docExpressionCount="77" docLength="654" endLine="20" length="18" offset="601" startLine="20" starttimestamp="1701710826491" timestamp="13650253">
    <text><![CDATA[.eval(environment)]]></text>
  </DocumentChange>
  <DocumentChange __id="6508" _type="Insert" date="Mon Dec 04 16:14:57 EST 2023" docASTNodeCount="111" docActiveCodeLength="643" docExpressionCount="79" docLength="659" length="5" offset="601" repeat="5" starttimestamp="1701710826491" timestamp="13671195" timestamp2="13672406">
    <text><![CDATA[.eval]]></text>
  </DocumentChange>
  <DocumentChange __id="6516" _type="Replace" date="Mon Dec 04 16:14:59 EST 2023" docASTNodeCount="112" docActiveCodeLength="656" docExpressionCount="80" docLength="672" endLine="20" insertionLength="17" int_docASTNodeCount="109" int_docActiveCodeLength="639" int_docExpressionCount="77" int_docLength="655" length="4" offset="602" startLine="20" starttimestamp="1701710826491" timestamp="13672887">
    <deletedText><![CDATA[eval]]></deletedText>
    <insertedText><![CDATA[eval(environment)]]></insertedText>
  </DocumentChange>
  <Command __id="6524" _type="ShellCommand" date="Mon Dec 04 16:15:03 EST 2023" starttimestamp="1701710826491" timestamp="13676948" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6525" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:15:03 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13676968" type="Debug" />
  <Command __id="6526" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:15:03 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13676968" type="Run" />
  <Command __id="6527" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:15:03 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13676968" type="Debug" />
  <Command __id="6528" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:15:03 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13676968" type="Run" />
  <Command __id="6530" _type="MoveCaretCommand" caretOffset="486" date="Mon Dec 04 16:15:11 EST 2023" docOffset="486" starttimestamp="1701710826491" timestamp="13685349" />
  <Command __id="6531" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:13 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13687071" />
  <Command __id="6532" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:13 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13687072" />
  <Command __id="6533" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:15:14 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13687521" />
  <Command __id="6534" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:15:14 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13687521" />
  <Command __id="6535" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:14 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13687946" />
  <Command __id="6536" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:14 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13687946" />
  <Command __id="6537" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:15:14 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13688360" />
  <Command __id="6538" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:15:14 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13688360" />
  <Command __id="6539" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:15 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13688792" />
  <Command __id="6540" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:15 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13688792" />
  <Command __id="6541" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:15:15 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13689186" />
  <Command __id="6542" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:15:15 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13689186" />
  <Command __id="6543" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:16 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13689693" />
  <Command __id="6544" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:16 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13689693" />
  <Command __id="6545" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:15:16 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13690131" />
  <Command __id="6546" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:15:16 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13690131" />
  <Command __id="6547" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:17 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13690547" />
  <Command __id="6548" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:17 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13690547" />
  <Command __id="6549" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:17 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13690986" />
  <Command __id="6550" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:17 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13690986" />
  <Command __id="6551" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:15:18 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13691509" />
  <Command __id="6552" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:15:18 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13691509" />
  <Command __id="6553" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:18 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13691952" />
  <Command __id="6554" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:18 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13691953" />
  <Command __id="6555" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:15:18 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13692341" />
  <Command __id="6556" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:15:18 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13692341" />
  <Command __id="6557" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:19 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13692860" />
  <Command __id="6558" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:19 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13692860" />
  <Command __id="6559" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:19 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13693258" />
  <Command __id="6560" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:19 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13693258" />
  <Command __id="6561" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:15:20 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13693781" />
  <Command __id="6562" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:15:20 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13693781" />
  <Command __id="6563" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:20 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13694186" />
  <Command __id="6564" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:20 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13694186" />
  <Command __id="6565" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:15:21 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13694557" />
  <Command __id="6566" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:15:21 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13694557" />
  <Command __id="6567" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:21 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13694961" />
  <Command __id="6568" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:21 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13694961" />
  <Command __id="6569" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:15:21 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13695387" />
  <Command __id="6570" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:15:21 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13695387" />
  <Command __id="6571" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:22 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13695848" />
  <Command __id="6572" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:22 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13695848" />
  <Command __id="6573" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:15:22 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13696248" />
  <Command __id="6574" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 16:15:22 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="13696248" />
  <Command __id="6575" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:23 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13696649" />
  <Command __id="6576" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:15:23 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13696649" />
  <Command __id="6577" _type="MoveCaretCommand" caretOffset="378" date="Mon Dec 04 16:15:23 EST 2023" docOffset="378" starttimestamp="1701710826491" timestamp="13697067" />
  <Command __id="6578" _type="MoveCaretCommand" caretOffset="378" date="Mon Dec 04 16:15:23 EST 2023" docOffset="378" starttimestamp="1701710826491" timestamp="13697067" />
  <Command __id="6579" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:15:23 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13697483" />
  <Command __id="6580" _type="MoveCaretCommand" caretOffset="410" date="Mon Dec 04 16:15:23 EST 2023" docOffset="410" starttimestamp="1701710826491" timestamp="13697484" />
  <Command __id="6583" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:15:36 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13709837" type="Run" />
  <Command __id="6584" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:15:36 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13709837" type="Run" />
  <Command __id="6585" _type="ConsoleInput" date="Mon Dec 04 16:15:42 EST 2023" starttimestamp="1701710826491" timestamp="13716184" type="Exception">
    <outputString><![CDATA[(eval (+ 1 2))
]]></outputString>
  </Command>
  <Command __id="6586" _type="ConsoleOutput" date="Mon Dec 04 16:15:42 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13716196" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string COND"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6587" _type="ConsoleInput" date="Mon Dec 04 16:15:51 EST 2023" starttimestamp="1701710826491" timestamp="13724601" type="Exception">
    <outputString><![CDATA[(eval (list 1 2))
]]></outputString>
  </Command>
  <Command __id="6588" _type="ConsoleOutput" date="Mon Dec 04 16:15:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13724607" type="ConsoleOutput">
    <outputString><![CDATA[(1 2)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"3"), Diff(INSERT,"(1 2)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6589" _type="ShellCommand" date="Mon Dec 04 16:16:01 EST 2023" starttimestamp="1701710826491" timestamp="13735052" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6590" _type="ShellCommand" date="Mon Dec 04 16:16:02 EST 2023" starttimestamp="1701710826491" timestamp="13735735" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6591" _type="ShellCommand" date="Mon Dec 04 16:16:02 EST 2023" starttimestamp="1701710826491" timestamp="13736335" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6592" _type="ShellCommand" date="Mon Dec 04 16:16:05 EST 2023" starttimestamp="1701710826491" timestamp="13739497" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6593" _type="PasteCommand" date="Mon Dec 04 16:16:08 EST 2023" starttimestamp="1701710826491" timestamp="13741664" />
  <Command __id="6594" _type="ShellCommand" date="Mon Dec 04 16:16:19 EST 2023" starttimestamp="1701710826491" timestamp="13752901" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6595" _type="ShellCommand" date="Mon Dec 04 16:16:21 EST 2023" starttimestamp="1701710826491" timestamp="13755197" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6596" _type="ShellCommand" date="Mon Dec 04 16:16:24 EST 2023" starttimestamp="1701710826491" timestamp="13758299" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6597" _type="ShellCommand" date="Mon Dec 04 16:16:26 EST 2023" starttimestamp="1701710826491" timestamp="13759867" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6598" _type="ConsoleInput" date="Mon Dec 04 16:16:34 EST 2023" starttimestamp="1701710826491" timestamp="13767603" type="Exception">
    <outputString><![CDATA[(eval (cond (eval (quote (+ 1 2)))co(nil 1) ()T 2)))
]]></outputString>
  </Command>
  <Command __id="6599" _type="ConsoleOutput" date="Mon Dec 04 16:16:34 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13767610" type="ConsoleOutput">
    <outputString><![CDATA[2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(1 2)"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6600" _type="CopyCommand" date="Mon Dec 04 16:16:39 EST 2023" starttimestamp="1701710826491" timestamp="13772531" />
  <Command __id="6601" _type="PasteCommand" date="Mon Dec 04 16:16:39 EST 2023" starttimestamp="1701710826491" timestamp="13773089" />
  <Command __id="6602" _type="ConsoleInput" date="Mon Dec 04 16:16:45 EST 2023" starttimestamp="1701710826491" timestamp="13779387" type="Exception">
    <outputString><![CDATA[(eval (cond (nil 1) (T 2)))(quote )
]]></outputString>
  </Command>
  <Command __id="6603" _type="ExceptionCommand" date="Mon Dec 04 16:16:45 EST 2023" starttimestamp="1701710826491" timestamp="13779393" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.NullPointerException
	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:32)
	at index.EvalEvaluator.eval(EvalEvaluator.java:18)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6604" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:16:45 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13779412" type="Debug" />
  <Command __id="6605" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:16:45 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13779412" type="Run" />
  <Command __id="6606" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:16:45 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13779412" type="Debug" />
  <Command __id="6607" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:16:45 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13779412" type="Run" />
  <Command __id="6608" _type="ShellCommand" date="Mon Dec 04 16:16:54 EST 2023" starttimestamp="1701710826491" timestamp="13787945" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6610" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:17:22 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13816002" type="Run" />
  <Command __id="6611" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:17:22 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13816002" type="Run" />
  <Command __id="6612" _type="PasteCommand" date="Mon Dec 04 16:17:23 EST 2023" starttimestamp="1701710826491" timestamp="13816831" />
  <Command __id="6613" _type="ConsoleOutput" date="Mon Dec 04 16:17:23 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13817108" type="ConsoleOutput">
    <outputString><![CDATA[((OR (/= 1 1) (AND NIL 3)) (1 . 2))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"2"), Diff(INSERT,"((OR (/= 1 1) (AND NIL 3)) (1 . 2))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6614" _type="ConsoleOutput" date="Mon Dec 04 16:17:23 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13817110" type="ConsoleOutput">
    <outputString><![CDATA[((< 3 2) 3)
((AND 2 T) (QUOTE (+ 2 2)))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"(("), Diff(DELETE,"OR (/= 1 1) (AND NIL 3)) (1 ."), Diff(INSERT,"< 3 2) 3)¶((AND 2 T) (QUOTE (+ 2"), Diff(EQUAL," 2))"), Diff(INSERT,")"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6615" _type="ShellCommand" date="Mon Dec 04 16:17:26 EST 2023" starttimestamp="1701710826491" timestamp="13820336" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6616" _type="ShellCommand" date="Mon Dec 04 16:17:29 EST 2023" starttimestamp="1701710826491" timestamp="13823475" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6617" _type="ShellCommand" date="Mon Dec 04 16:17:30 EST 2023" starttimestamp="1701710826491" timestamp="13824061" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6618" _type="ShellCommand" date="Mon Dec 04 16:17:31 EST 2023" starttimestamp="1701710826491" timestamp="13824696" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6619" _type="PasteCommand" date="Mon Dec 04 16:17:34 EST 2023" starttimestamp="1701710826491" timestamp="13827987" />
  <Command __id="6620" _type="ConsoleInput" date="Mon Dec 04 16:17:36 EST 2023" starttimestamp="1701710826491" timestamp="13830069" type="Exception">
    <outputString><![CDATA[(LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2))))(cond (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))
]]></outputString>
  </Command>
  <Command __id="6621" _type="ConsoleOutput" date="Mon Dec 04 16:17:36 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="13830077" type="ConsoleOutput">
    <outputString><![CDATA[(OR (/= 1 1) (AND NIL 3))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"("), Diff(DELETE,"(< 3 2) 3)¶((AND 2 T) (QUOTE (+ 2 2)"), Diff(INSERT,"OR (/= 1 1) (AND NIL 3"), Diff(EQUAL,"))¶")]]]></diff>
  </Command>
  <Command __id="6622" _type="ShellCommand" date="Mon Dec 04 16:17:41 EST 2023" starttimestamp="1701710826491" timestamp="13835501" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6623" _type="ShellCommand" date="Mon Dec 04 16:17:57 EST 2023" starttimestamp="1701710826491" timestamp="13851453" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6624" _type="PasteCommand" date="Mon Dec 04 16:17:58 EST 2023" starttimestamp="1701710826491" timestamp="13852197" />
  <Command __id="6625" _type="ConsoleInput" date="Mon Dec 04 16:18:06 EST 2023" starttimestamp="1701710826491" timestamp="13860055" type="Exception">
    <outputString><![CDATA[(LIST (QUOTE COND) ()T 1))
]]></outputString>
  </Command>
  <Command __id="6626" _type="ExceptionCommand" date="Mon Dec 04 16:18:06 EST 2023" starttimestamp="1701710826491" timestamp="13860060" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at index.ListEvaluator.evalHelper(ListEvaluator.java:21)
	at index.ListEvaluator.evalHelper(ListEvaluator.java:21)
	at index.ListEvaluator.eval(ListEvaluator.java:13)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6627" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:18:06 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13860067" type="Debug" />
  <Command __id="6628" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:18:06 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13860067" type="Run" />
  <Command __id="6629" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:18:06 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13860067" type="Debug" />
  <Command __id="6630" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:18:06 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13860067" type="Run" />
  <Command __id="6631" _type="ShellCommand" date="Mon Dec 04 16:18:12 EST 2023" starttimestamp="1701710826491" timestamp="13866396" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6529" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:15:11 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13685277">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {"), Diff(DELETE,"//"), Diff(EQUAL,"		if(expr.getTail().isAtom()) {"), Diff(DELETE,"//"), Diff(EQUAL,"			expr = expr.getTail();"), Diff(DELETE,"//"), Diff(EQUAL,"		}else {"), Diff(DELETE,"//"), Diff(EQUAL,"			expr = expr.getTail().getHead();"), Diff(DELETE,"//"), Diff(EQUAL,"		}"), Diff(DELETE,"//"), Diff(EQUAL,"		return evalHelper(expr, environment);"), Diff(INSERT,"//"), Diff(EQUAL,"		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		if(expr.getTail().isAtom()) {
			expr = expr.getTail();
		}else {
			expr = expr.getTail().getHead();
		}
		return evalHelper(expr, environment);
//		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		
		boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="6632" _type="ShellCommand" date="Mon Dec 04 16:18:15 EST 2023" starttimestamp="1701710826491" timestamp="13868762" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6633" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:18:32 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13886370">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			return expr.getTail();		}		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="6634" _type="MoveCaretCommand" caretOffset="220" date="Mon Dec 04 16:18:32 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="13886427" />
  <Command __id="6636" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 16:18:33 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="13886894" />
  <Command __id="6637" _type="ShellCommand" date="Mon Dec 04 16:18:52 EST 2023" starttimestamp="1701710826491" timestamp="13905992" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6638" _type="ShellCommand" date="Mon Dec 04 16:18:53 EST 2023" starttimestamp="1701710826491" timestamp="13907485" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6639" _type="ShellCommand" date="Mon Dec 04 16:18:55 EST 2023" starttimestamp="1701710826491" timestamp="13908684" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6641" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:19:21 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13934743" type="Run" />
  <Command __id="6642" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:19:21 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13934743" type="Run" />
  <Command __id="6643" _type="ShellCommand" date="Mon Dec 04 16:19:21 EST 2023" starttimestamp="1701710826491" timestamp="13935052" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6665" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:19:42 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13956166" type="Debug" />
  <Command __id="6666" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:19:42 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13956166" type="Run" />
  <Command __id="6667" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:19:42 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="13956166" type="Debug" />
  <Command __id="6668" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:19:42 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13956166" type="Run" />
  <Command __id="6669" _type="LocalChecksRawCommand" date="Mon Dec 04 16:19:42 EST 2023" starttimestamp="1701710826491" timestamp="13956171">
    <CSVRow><![CDATA[101,Mon Dec 04 16:19:26 EST 2023,35,3,A6BasicOperationSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker+ ListChecker2+ LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,47,0,true,A6ExtraCondChecker CombinationChecker CondChecker EvalChecker ListChecker ListChecker2 QuoteChecker ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) CombinationChecker-(0.0/10.0) CondChecker-(10.0/10.0) EvalChecker-(10.0/10.0) ListChecker-(10.0/10.0) ListChecker2-(10.0/10.0) QuoteChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6670" _type="LocalChecksRawCommand" date="Mon Dec 04 16:19:42 EST 2023" starttimestamp="1701710826491" timestamp="13956171">
    <CSVRow><![CDATA[101,Mon Dec 04 16:19:26 EST 2023,35,3,A6BasicOperationSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker+ ListChecker2+ LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,47,0,true,A6ExtraCondChecker CombinationChecker CondChecker EvalChecker ListChecker ListChecker2 QuoteChecker ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided ,A6ExtraCondChecker ,A6ExtraCondChecker-(10.0/10.0) CombinationChecker-(0.0/10.0) CondChecker-(10.0/10.0) EvalChecker-(10.0/10.0) ListChecker-(10.0/10.0) ListChecker2-(10.0/10.0) QuoteChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6671" _type="ShellCommand" date="Mon Dec 04 16:19:42 EST 2023" starttimestamp="1701710826491" timestamp="13956177" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6672" _type="ShellCommand" date="Mon Dec 04 16:19:43 EST 2023" starttimestamp="1701710826491" timestamp="13956592" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6674" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:20:35 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14009260" type="Run" />
  <Command __id="6675" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:20:35 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14009260" type="Run" />
  <Command __id="6676" _type="PasteCommand" date="Mon Dec 04 16:20:36 EST 2023" starttimestamp="1701710826491" timestamp="14010113" />
  <Command __id="6677" _type="ConsoleOutput" date="Mon Dec 04 16:20:36 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14010389" type="ConsoleOutput">
    <outputString><![CDATA[(QUOTE (+ 2 2))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string COND"), Diff(INSERT,"(QUOTE (+ 2 2))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6678" _type="ShellCommand" date="Mon Dec 04 16:20:39 EST 2023" starttimestamp="1701710826491" timestamp="14013207" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6679" _type="ShellCommand" date="Mon Dec 04 16:20:40 EST 2023" starttimestamp="1701710826491" timestamp="14013943" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6680" _type="ShellCommand" date="Mon Dec 04 16:20:41 EST 2023" starttimestamp="1701710826491" timestamp="14015085" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6681" _type="ShellCommand" date="Mon Dec 04 16:20:44 EST 2023" starttimestamp="1701710826491" timestamp="14018457" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6682" _type="CopyCommand" date="Mon Dec 04 16:20:47 EST 2023" starttimestamp="1701710826491" timestamp="14020794" />
  <Command __id="6683" _type="ShellCommand" date="Mon Dec 04 16:20:47 EST 2023" starttimestamp="1701710826491" timestamp="14021089" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6684" _type="ShellCommand" date="Mon Dec 04 16:20:52 EST 2023" starttimestamp="1701710826491" timestamp="14026225" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6685" _type="PasteCommand" date="Mon Dec 04 16:20:53 EST 2023" starttimestamp="1701710826491" timestamp="14027220" />
  <Command __id="6686" _type="ConsoleOutput" date="Mon Dec 04 16:20:54 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14027617" type="ConsoleOutput">
    <outputString><![CDATA[(+ 2 2)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(QUOTE "), Diff(EQUAL,"(+ 2 2)"), Diff(DELETE,")"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6687" _type="ShellCommand" date="Mon Dec 04 16:20:54 EST 2023" starttimestamp="1701710826491" timestamp="14028500" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6688" _type="ShellCommand" date="Mon Dec 04 16:21:03 EST 2023" starttimestamp="1701710826491" timestamp="14036877" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6689" _type="PasteCommand" date="Mon Dec 04 16:21:03 EST 2023" starttimestamp="1701710826491" timestamp="14037317" />
  <Command __id="6690" _type="ConsoleInput" date="Mon Dec 04 16:21:07 EST 2023" starttimestamp="1701710826491" timestamp="14041506" type="Exception">
    <outputString><![CDATA[(QUOTE (QUOTE (+ 2 2)))(QUOTE (+ 2 2))(LIST (QUOTE (AND 2 T)))
]]></outputString>
  </Command>
  <Command __id="6691" _type="ConsoleOutput" date="Mon Dec 04 16:21:08 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14041510" type="ConsoleOutput">
    <outputString><![CDATA[((AND 2 T))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"("), Diff(DELETE,"+"), Diff(INSERT,"(AND"), Diff(EQUAL," 2 "), Diff(DELETE,"2"), Diff(INSERT,"T)"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="6692" _type="ShellCommand" date="Mon Dec 04 16:21:08 EST 2023" starttimestamp="1701710826491" timestamp="14042239" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6693" _type="ShellCommand" date="Mon Dec 04 16:21:11 EST 2023" starttimestamp="1701710826491" timestamp="14045071" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6694" _type="ShellCommand" date="Mon Dec 04 16:21:12 EST 2023" starttimestamp="1701710826491" timestamp="14046032" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6695" _type="ShellCommand" date="Mon Dec 04 16:21:14 EST 2023" starttimestamp="1701710826491" timestamp="14048314" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6696" _type="PasteCommand" date="Mon Dec 04 16:21:15 EST 2023" starttimestamp="1701710826491" timestamp="14049159" />
  <Command __id="6697" _type="ConsoleOutput" date="Mon Dec 04 16:21:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14049424" type="ConsoleOutput">
    <outputString><![CDATA[((AND 2 T) 4)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"((AND 2 T)"), Diff(INSERT," 4"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="6698" _type="CopyCommand" date="Mon Dec 04 16:21:18 EST 2023" starttimestamp="1701710826491" timestamp="14051784" />
  <Command __id="6699" _type="ShellCommand" date="Mon Dec 04 16:21:18 EST 2023" starttimestamp="1701710826491" timestamp="14052144" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6700" _type="ShellCommand" date="Mon Dec 04 16:21:23 EST 2023" starttimestamp="1701710826491" timestamp="14057357" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6701" _type="PasteCommand" date="Mon Dec 04 16:21:24 EST 2023" starttimestamp="1701710826491" timestamp="14058096" />
  <Command __id="6702" _type="ConsoleOutput" date="Mon Dec 04 16:21:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14058405" type="ConsoleOutput">
    <outputString><![CDATA[T
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"((AND 2 T) 4)"), Diff(INSERT,"T"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6703" _type="ShellCommand" date="Mon Dec 04 16:21:25 EST 2023" starttimestamp="1701710826491" timestamp="14058940" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6704" _type="ShellCommand" date="Mon Dec 04 16:21:32 EST 2023" starttimestamp="1701710826491" timestamp="14065644" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6705" _type="PasteCommand" date="Mon Dec 04 16:21:32 EST 2023" starttimestamp="1701710826491" timestamp="14066171" />
  <Command __id="6706" _type="ConsoleOutput" date="Mon Dec 04 16:21:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14066653" type="ConsoleOutput">
    <outputString><![CDATA[((< 3 2) 3)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"T"), Diff(INSERT,"((< 3 2) 3)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6707" _type="ShellCommand" date="Mon Dec 04 16:21:34 EST 2023" starttimestamp="1701710826491" timestamp="14067956" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6708" _type="ShellCommand" date="Mon Dec 04 16:21:37 EST 2023" starttimestamp="1701710826491" timestamp="14071275" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6709" _type="CopyCommand" date="Mon Dec 04 16:21:41 EST 2023" starttimestamp="1701710826491" timestamp="14074648" />
  <Command __id="6710" _type="PasteCommand" date="Mon Dec 04 16:21:41 EST 2023" starttimestamp="1701710826491" timestamp="14075179" />
  <Command __id="6711" _type="ExceptionCommand" date="Mon Dec 04 16:21:41 EST 2023" starttimestamp="1701710826491" timestamp="14075413" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6712" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:21:41 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="14075416" type="Debug" />
  <Command __id="6713" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:21:41 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14075416" type="Run" />
  <Command __id="6714" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:21:41 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="14075416" type="Debug" />
  <Command __id="6715" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:21:41 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14075416" type="Run" />
  <Command __id="6716" _type="ShellCommand" date="Mon Dec 04 16:21:43 EST 2023" starttimestamp="1701710826491" timestamp="14077212" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6717" _type="ShellCommand" date="Mon Dec 04 16:21:46 EST 2023" starttimestamp="1701710826491" timestamp="14080350" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6719" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:21:51 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14084575" type="Run" />
  <Command __id="6720" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:21:51 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14084575" type="Run" />
  <Command __id="6721" _type="ShellCommand" date="Mon Dec 04 16:21:51 EST 2023" starttimestamp="1701710826491" timestamp="14084980" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6722" _type="ShellCommand" date="Mon Dec 04 16:21:56 EST 2023" starttimestamp="1701710826491" timestamp="14090172" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6723" _type="PasteCommand" date="Mon Dec 04 16:21:57 EST 2023" starttimestamp="1701710826491" timestamp="14090887" />
  <Command __id="6724" _type="ConsoleOutput" date="Mon Dec 04 16:21:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14091343" type="ConsoleOutput">
    <outputString><![CDATA[NIL
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"((< 3 2) 3)"), Diff(INSERT,"NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6725" _type="ShellCommand" date="Mon Dec 04 16:21:58 EST 2023" starttimestamp="1701710826491" timestamp="14091870" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6726" _type="ShellCommand" date="Mon Dec 04 16:22:06 EST 2023" starttimestamp="1701710826491" timestamp="14099552" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6727" _type="PasteCommand" date="Mon Dec 04 16:22:06 EST 2023" starttimestamp="1701710826491" timestamp="14100495" />
  <Command __id="6728" _type="ConsoleOutput" date="Mon Dec 04 16:22:07 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14100962" type="ConsoleOutput">
    <outputString><![CDATA[NIL
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"NIL¶")]]]></diff>
  </Command>
  <Command __id="6729" _type="ShellCommand" date="Mon Dec 04 16:22:08 EST 2023" starttimestamp="1701710826491" timestamp="14102212" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6730" _type="ShellCommand" date="Mon Dec 04 16:22:19 EST 2023" starttimestamp="1701710826491" timestamp="14113375" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6731" _type="PasteCommand" date="Mon Dec 04 16:22:20 EST 2023" starttimestamp="1701710826491" timestamp="14114306" />
  <Command __id="6732" _type="ConsoleOutput" date="Mon Dec 04 16:22:21 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14114546" type="ConsoleOutput">
    <outputString><![CDATA[(1 . 2)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"NIL"), Diff(INSERT,"(1 . 2)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6733" _type="ShellCommand" date="Mon Dec 04 16:22:22 EST 2023" starttimestamp="1701710826491" timestamp="14116194" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6734" _type="ShellCommand" date="Mon Dec 04 16:22:32 EST 2023" starttimestamp="1701710826491" timestamp="14125615" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6735" _type="ShellCommand" date="Mon Dec 04 16:22:32 EST 2023" starttimestamp="1701710826491" timestamp="14126503" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6736" _type="ShellCommand" date="Mon Dec 04 16:22:33 EST 2023" starttimestamp="1701710826491" timestamp="14127033" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6737" _type="ShellCommand" date="Mon Dec 04 16:22:35 EST 2023" starttimestamp="1701710826491" timestamp="14129120" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6738" _type="ShellCommand" date="Mon Dec 04 16:22:46 EST 2023" starttimestamp="1701710826491" timestamp="14140298" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6739" _type="PasteCommand" date="Mon Dec 04 16:22:47 EST 2023" starttimestamp="1701710826491" timestamp="14141260" />
  <Command __id="6740" _type="ShellCommand" date="Mon Dec 04 16:22:52 EST 2023" starttimestamp="1701710826491" timestamp="14146381" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6747" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:23:04 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14157516" type="Run" />
  <Command __id="6748" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:23:04 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14157516" type="Run" />
  <Command __id="6749" _type="PasteCommand" date="Mon Dec 04 16:23:04 EST 2023" starttimestamp="1701710826491" timestamp="14158329" />
  <Command __id="6750" _type="ConsoleOutput" date="Mon Dec 04 16:23:05 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14158570" type="ConsoleOutput">
    <outputString><![CDATA[NIL
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(1 . 2)"), Diff(INSERT,"NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6751" _type="ShellCommand" date="Mon Dec 04 16:23:05 EST 2023" starttimestamp="1701710826491" timestamp="14159095" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6752" _type="ShellCommand" date="Mon Dec 04 16:23:10 EST 2023" starttimestamp="1701710826491" timestamp="14164249" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6753" _type="PasteCommand" date="Mon Dec 04 16:23:11 EST 2023" starttimestamp="1701710826491" timestamp="14164791" />
  <Command __id="6754" _type="ConsoleOutput" date="Mon Dec 04 16:23:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14165070" type="ConsoleOutput">
    <outputString><![CDATA[NIL
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"NIL¶")]]]></diff>
  </Command>
  <Command __id="6755" _type="ShellCommand" date="Mon Dec 04 16:23:12 EST 2023" starttimestamp="1701710826491" timestamp="14165662" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6756" _type="ShellCommand" date="Mon Dec 04 16:23:16 EST 2023" starttimestamp="1701710826491" timestamp="14169666" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6757" _type="PasteCommand" date="Mon Dec 04 16:23:16 EST 2023" starttimestamp="1701710826491" timestamp="14170500" />
  <Command __id="6758" _type="ConsoleOutput" date="Mon Dec 04 16:23:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14170787" type="ConsoleOutput">
    <outputString><![CDATA[NIL
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"NIL¶")]]]></diff>
  </Command>
  <Command __id="6759" _type="ShellCommand" date="Mon Dec 04 16:23:17 EST 2023" starttimestamp="1701710826491" timestamp="14171309" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6760" _type="ShellCommand" date="Mon Dec 04 16:23:24 EST 2023" starttimestamp="1701710826491" timestamp="14178120" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6761" _type="PasteCommand" date="Mon Dec 04 16:23:25 EST 2023" starttimestamp="1701710826491" timestamp="14178993" />
  <Command __id="6762" _type="ConsoleOutput" date="Mon Dec 04 16:23:25 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14179232" type="ConsoleOutput">
    <outputString><![CDATA[(NIL (1 . 2))
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"("), Diff(EQUAL,"NIL"), Diff(INSERT," (1 . 2))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6763" _type="ShellCommand" date="Mon Dec 04 16:23:28 EST 2023" starttimestamp="1701710826491" timestamp="14181645" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6764" _type="ShellCommand" date="Mon Dec 04 16:23:29 EST 2023" starttimestamp="1701710826491" timestamp="14182659" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6765" _type="ShellCommand" date="Mon Dec 04 16:23:29 EST 2023" starttimestamp="1701710826491" timestamp="14183222" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6766" _type="ShellCommand" date="Mon Dec 04 16:23:30 EST 2023" starttimestamp="1701710826491" timestamp="14183709" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6767" _type="ShellCommand" date="Mon Dec 04 16:23:30 EST 2023" starttimestamp="1701710826491" timestamp="14184362" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6768" _type="ShellCommand" date="Mon Dec 04 16:23:32 EST 2023" starttimestamp="1701710826491" timestamp="14186107" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6769" _type="ShellCommand" date="Mon Dec 04 16:23:33 EST 2023" starttimestamp="1701710826491" timestamp="14187285" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6770" _type="ShellCommand" date="Mon Dec 04 16:23:34 EST 2023" starttimestamp="1701710826491" timestamp="14188099" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6771" _type="ShellCommand" date="Mon Dec 04 16:23:35 EST 2023" starttimestamp="1701710826491" timestamp="14189157" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6772" _type="ShellCommand" date="Mon Dec 04 16:23:55 EST 2023" starttimestamp="1701710826491" timestamp="14208856" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6773" _type="PasteCommand" date="Mon Dec 04 16:23:55 EST 2023" starttimestamp="1701710826491" timestamp="14209392" />
  <Command __id="6774" _type="ConsoleOutput" date="Mon Dec 04 16:23:56 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14209688" type="ConsoleOutput">
    <outputString><![CDATA[((OR (/= 1 1) (AND NIL 3)) (1 . 2))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"("), Diff(DELETE,"NIL"), Diff(INSERT,"(OR (/= 1 1) (AND NIL 3))"), Diff(EQUAL," (1 . 2))¶")]]]></diff>
  </Command>
  <Command __id="6782" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:24:14 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14227603" type="Run" />
  <Command __id="6783" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:24:14 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14227604" type="Run" />
  <Command __id="6784" _type="ShellCommand" date="Mon Dec 04 16:24:14 EST 2023" starttimestamp="1701710826491" timestamp="14228321" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6785" _type="ShellCommand" date="Mon Dec 04 16:24:18 EST 2023" starttimestamp="1701710826491" timestamp="14232213" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6786" _type="PasteCommand" date="Mon Dec 04 16:24:19 EST 2023" starttimestamp="1701710826491" timestamp="14232832" />
  <Command __id="6787" _type="ConsoleOutput" date="Mon Dec 04 16:24:19 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14233082" type="ConsoleOutput">
    <outputString><![CDATA[((OR (/= 1 1) (AND NIL 3)) (1 . 2))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"((OR (/= 1 1) (AND NIL 3)) (1 . 2))¶")]]]></diff>
  </Command>
  <Command __id="6788" _type="CopyCommand" date="Mon Dec 04 16:24:24 EST 2023" starttimestamp="1701710826491" timestamp="14238198" />
  <Command __id="6789" _type="ShellCommand" date="Mon Dec 04 16:24:25 EST 2023" starttimestamp="1701710826491" timestamp="14238515" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6790" _type="ShellCommand" date="Mon Dec 04 16:24:25 EST 2023" starttimestamp="1701710826491" timestamp="14239107" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6791" _type="PasteCommand" date="Mon Dec 04 16:24:26 EST 2023" starttimestamp="1701710826491" timestamp="14240427" />
  <Command __id="6792" _type="ConsoleOutput" date="Mon Dec 04 16:24:27 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14240631" type="ConsoleOutput">
    <outputString><![CDATA[NIL
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"((OR (/= 1 1) (AND NIL 3)) (1 . 2))"), Diff(INSERT,"NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6793" _type="ShellCommand" date="Mon Dec 04 16:24:28 EST 2023" starttimestamp="1701710826491" timestamp="14241680" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6794" _type="ShellCommand" date="Mon Dec 04 16:24:30 EST 2023" starttimestamp="1701710826491" timestamp="14243663" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6795" _type="ShellCommand" date="Mon Dec 04 16:24:30 EST 2023" starttimestamp="1701710826491" timestamp="14244436" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6796" _type="ShellCommand" date="Mon Dec 04 16:24:34 EST 2023" starttimestamp="1701710826491" timestamp="14247961" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6797" _type="ShellCommand" date="Mon Dec 04 16:24:35 EST 2023" starttimestamp="1701710826491" timestamp="14248815" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6798" _type="ShellCommand" date="Mon Dec 04 16:24:36 EST 2023" starttimestamp="1701710826491" timestamp="14249636" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6799" _type="ShellCommand" date="Mon Dec 04 16:24:37 EST 2023" starttimestamp="1701710826491" timestamp="14250778" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6800" _type="ShellCommand" date="Mon Dec 04 16:24:41 EST 2023" starttimestamp="1701710826491" timestamp="14255205" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6801" _type="ShellCommand" date="Mon Dec 04 16:24:49 EST 2023" starttimestamp="1701710826491" timestamp="14263260" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6802" _type="ShellCommand" date="Mon Dec 04 16:24:50 EST 2023" starttimestamp="1701710826491" timestamp="14264252" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6803" _type="PasteCommand" date="Mon Dec 04 16:24:51 EST 2023" starttimestamp="1701710826491" timestamp="14265090" />
  <Command __id="6804" _type="ConsoleOutput" date="Mon Dec 04 16:24:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14265365" type="ConsoleOutput">
    <outputString><![CDATA[((OR (/= 1 1) (AND NIL 3)) (1 . 2))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"NIL"), Diff(INSERT,"((OR (/= 1 1) (AND NIL 3)) (1 . 2))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6805" _type="ShellCommand" date="Mon Dec 04 16:24:53 EST 2023" starttimestamp="1701710826491" timestamp="14266898" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6806" _type="ShellCommand" date="Mon Dec 04 16:24:53 EST 2023" starttimestamp="1701710826491" timestamp="14267329" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6807" _type="CopyCommand" date="Mon Dec 04 16:24:55 EST 2023" starttimestamp="1701710826491" timestamp="14268948" />
  <Command __id="6808" _type="ShellCommand" date="Mon Dec 04 16:24:55 EST 2023" starttimestamp="1701710826491" timestamp="14269233" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6809" _type="ShellCommand" date="Mon Dec 04 16:25:03 EST 2023" starttimestamp="1701710826491" timestamp="14276676" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6810" _type="PasteCommand" date="Mon Dec 04 16:25:03 EST 2023" starttimestamp="1701710826491" timestamp="14277477" />
  <Command __id="6811" _type="ConsoleOutput" date="Mon Dec 04 16:25:04 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14277770" type="ConsoleOutput">
    <outputString><![CDATA[NIL
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"((OR (/= 1 1) (AND NIL 3)) (1 . 2))"), Diff(INSERT,"NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6812" _type="ShellCommand" date="Mon Dec 04 16:25:04 EST 2023" starttimestamp="1701710826491" timestamp="14278321" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6813" _type="ShellCommand" date="Mon Dec 04 16:25:15 EST 2023" starttimestamp="1701710826491" timestamp="14288839" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6814" _type="PasteCommand" date="Mon Dec 04 16:25:16 EST 2023" starttimestamp="1701710826491" timestamp="14289837" />
  <Command __id="6815" _type="ConsoleOutput" date="Mon Dec 04 16:25:16 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14290041" type="ConsoleOutput">
    <outputString><![CDATA[COND
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"NIL"), Diff(INSERT,"COND"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6816" _type="ShellCommand" date="Mon Dec 04 16:25:17 EST 2023" starttimestamp="1701710826491" timestamp="14290593" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6817" _type="ShellCommand" date="Mon Dec 04 16:25:25 EST 2023" starttimestamp="1701710826491" timestamp="14298603" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6818" _type="PasteCommand" date="Mon Dec 04 16:25:25 EST 2023" starttimestamp="1701710826491" timestamp="14299170" />
  <Command __id="6819" _type="ExceptionCommand" date="Mon Dec 04 16:25:25 EST 2023" starttimestamp="1701710826491" timestamp="14299443" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at index.ListEvaluator.evalHelper(ListEvaluator.java:21)
	at index.ListEvaluator.evalHelper(ListEvaluator.java:21)
	at index.ListEvaluator.eval(ListEvaluator.java:13)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6820" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:25:25 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="14299449" type="Debug" />
  <Command __id="6821" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:25:25 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14299449" type="Run" />
  <Command __id="6822" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:25:25 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="14299449" type="Debug" />
  <Command __id="6823" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:25:25 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14299449" type="Run" />
  <Command __id="6824" _type="ShellCommand" date="Mon Dec 04 16:25:29 EST 2023" starttimestamp="1701710826491" timestamp="14302718" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6826" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:25:46 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14319902" type="Run" />
  <Command __id="6827" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:25:46 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14319902" type="Run" />
  <Command __id="6828" _type="PasteCommand" date="Mon Dec 04 16:25:47 EST 2023" starttimestamp="1701710826491" timestamp="14320621" />
  <Command __id="6829" _type="ConsoleOutput" date="Mon Dec 04 16:25:47 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14320819" type="ConsoleOutput">
    <outputString><![CDATA[COND
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"COND¶")]]]></diff>
  </Command>
  <Command __id="6830" _type="ExceptionCommand" date="Mon Dec 04 16:25:47 EST 2023" starttimestamp="1701710826491" timestamp="14320822" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:15)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6831" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:25:47 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="14320826" type="Debug" />
  <Command __id="6832" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:25:47 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14320826" type="Run" />
  <Command __id="6833" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:25:47 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="14320826" type="Debug" />
  <Command __id="6834" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:25:47 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14320826" type="Run" />
  <Command __id="6835" _type="ShellCommand" date="Mon Dec 04 16:25:48 EST 2023" starttimestamp="1701710826491" timestamp="14321724" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6836" _type="ShellCommand" date="Mon Dec 04 16:25:48 EST 2023" starttimestamp="1701710826491" timestamp="14322294" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6837" _type="ShellCommand" date="Mon Dec 04 16:25:51 EST 2023" starttimestamp="1701710826491" timestamp="14324985" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6838" _type="ShellCommand" date="Mon Dec 04 16:26:10 EST 2023" starttimestamp="1701710826491" timestamp="14343761" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6839" _type="ShellCommand" date="Mon Dec 04 16:26:11 EST 2023" starttimestamp="1701710826491" timestamp="14344527" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6840" _type="ShellCommand" date="Mon Dec 04 16:26:14 EST 2023" starttimestamp="1701710826491" timestamp="14347697" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6841" _type="ShellCommand" date="Mon Dec 04 16:26:23 EST 2023" starttimestamp="1701710826491" timestamp="14357226" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6635" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:18:33 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="13886829">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="6842" _type="ShellCommand" date="Mon Dec 04 16:26:37 EST 2023" starttimestamp="1701710826491" timestamp="14370819" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6844" _type="MoveCaretCommand" caretOffset="220" date="Mon Dec 04 16:26:39 EST 2023" docOffset="301" starttimestamp="1701710826491" timestamp="14372770" />
  <Command __id="6845" _type="MoveCaretCommand" caretOffset="246" date="Mon Dec 04 16:26:41 EST 2023" docOffset="327" starttimestamp="1701710826491" timestamp="14374945" />
  <Command __id="6846" _type="MoveCaretCommand" caretOffset="246" date="Mon Dec 04 16:26:41 EST 2023" docOffset="327" starttimestamp="1701710826491" timestamp="14374945" />
  <Command __id="6847" _type="MoveCaretCommand" caretOffset="250" date="Mon Dec 04 16:26:42 EST 2023" docOffset="331" starttimestamp="1701710826491" timestamp="14375526" />
  <Command __id="6848" _type="MoveCaretCommand" caretOffset="250" date="Mon Dec 04 16:26:42 EST 2023" docOffset="331" starttimestamp="1701710826491" timestamp="14375526" />
  <Command __id="6849" _type="MoveCaretCommand" caretOffset="246" date="Mon Dec 04 16:26:42 EST 2023" docOffset="327" starttimestamp="1701710826491" timestamp="14376326" />
  <Command __id="6850" _type="MoveCaretCommand" caretOffset="246" date="Mon Dec 04 16:26:42 EST 2023" docOffset="327" starttimestamp="1701710826491" timestamp="14376326" />
  <Command __id="6851" _type="MoveCaretCommand" caretOffset="285" date="Mon Dec 04 16:26:43 EST 2023" docOffset="366" starttimestamp="1701710826491" timestamp="14377234" />
  <Command __id="6852" _type="MoveCaretCommand" caretOffset="285" date="Mon Dec 04 16:26:43 EST 2023" docOffset="366" starttimestamp="1701710826491" timestamp="14377234" />
  <Command __id="6853" _type="MoveCaretCommand" caretOffset="250" date="Mon Dec 04 16:26:44 EST 2023" docOffset="331" starttimestamp="1701710826491" timestamp="14377834" />
  <Command __id="6854" _type="MoveCaretCommand" caretOffset="250" date="Mon Dec 04 16:26:44 EST 2023" docOffset="331" starttimestamp="1701710826491" timestamp="14377834" />
  <Command __id="6857" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:26:56 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14390433" type="Run" />
  <Command __id="6858" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 16:26:56 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14390433" type="Run" />
  <Command __id="6859" _type="ShellCommand" date="Mon Dec 04 16:26:58 EST 2023" starttimestamp="1701710826491" timestamp="14391640" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6860" _type="ShellCommand" date="Mon Dec 04 16:27:03 EST 2023" starttimestamp="1701710826491" timestamp="14396852" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6861" _type="PasteCommand" date="Mon Dec 04 16:27:04 EST 2023" starttimestamp="1701710826491" timestamp="14397816" />
  <Command __id="6862" _type="ShellCommand" date="Mon Dec 04 16:27:05 EST 2023" starttimestamp="1701710826491" timestamp="14398555" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6863" _type="BalloonCommand" date="Mon Dec 04 16:27:06 EST 2023" message="*******************************************
Worked 43 minutes(fixed)/60 minutes(context based) from
Mon Dec 04 15:27:06 EST 2023 to Mon Dec 04 16:27:05 EST 2023
Edited 1 Projects: 
	Assignment5
Edited 4 Files: 
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ListEvaluator.java
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/CondEvaluator.java
Number of insert: 446
Number of delete: 288
" starttimestamp="1701710826491" timestamp="14400053">
    <fineGrainedWorkTime><![CDATA[60]]></fineGrainedWorkTime>
    <insert><![CDATA[446]]></insert>
    <startTime><![CDATA[1701721626540]]></startTime>
    <endTime><![CDATA[1701725225046]]></endTime>
    <workTime><![CDATA[43]]></workTime>
    <delete><![CDATA[288]]></delete>
  </Command>
  <Command __id="6864" _type="ShellCommand" date="Mon Dec 04 16:27:07 EST 2023" starttimestamp="1701710826491" timestamp="14400879" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6865" _type="ShellCommand" date="Mon Dec 04 16:27:07 EST 2023" starttimestamp="1701710826491" timestamp="14401369" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6866" _type="ShellCommand" date="Mon Dec 04 16:27:10 EST 2023" starttimestamp="1701710826491" timestamp="14404259" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6867" _type="PasteCommand" date="Mon Dec 04 16:27:11 EST 2023" starttimestamp="1701710826491" timestamp="14404612" />
  <Command __id="6868" _type="ConsoleInput" date="Mon Dec 04 16:27:11 EST 2023" starttimestamp="1701710826491" timestamp="14405476" type="Exception">
    <outputString><![CDATA[(COND (Nil (1 . 2)) (NIL 3) (T 4))
]]></outputString>
  </Command>
  <Command __id="6869" _type="ConsoleOutput" date="Mon Dec 04 16:27:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14405487" type="ConsoleOutput">
    <outputString><![CDATA[4
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"COND"), Diff(INSERT,"4"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6870" _type="ShellCommand" date="Mon Dec 04 16:27:12 EST 2023" starttimestamp="1701710826491" timestamp="14406479" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6871" _type="ShellCommand" date="Mon Dec 04 16:27:20 EST 2023" starttimestamp="1701710826491" timestamp="14414302" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6872" _type="ShellCommand" date="Mon Dec 04 16:27:21 EST 2023" starttimestamp="1701710826491" timestamp="14414862" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6873" _type="ShellCommand" date="Mon Dec 04 16:27:21 EST 2023" starttimestamp="1701710826491" timestamp="14415329" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6874" _type="ShellCommand" date="Mon Dec 04 16:27:24 EST 2023" starttimestamp="1701710826491" timestamp="14417893" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6875" _type="ShellCommand" date="Mon Dec 04 16:27:41 EST 2023" starttimestamp="1701710826491" timestamp="14435078" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6876" _type="ShellCommand" date="Mon Dec 04 16:27:42 EST 2023" starttimestamp="1701710826491" timestamp="14435761" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6877" _type="ShellCommand" date="Mon Dec 04 16:27:44 EST 2023" starttimestamp="1701710826491" timestamp="14438080" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6878" _type="ShellCommand" date="Mon Dec 04 16:27:54 EST 2023" starttimestamp="1701710826491" timestamp="14447520" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6879" _type="ShellCommand" date="Mon Dec 04 16:27:57 EST 2023" starttimestamp="1701710826491" timestamp="14450916" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6880" _type="ShellCommand" date="Mon Dec 04 16:27:59 EST 2023" starttimestamp="1701710826491" timestamp="14452923" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6881" _type="ShellCommand" date="Mon Dec 04 16:28:00 EST 2023" starttimestamp="1701710826491" timestamp="14454208" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6882" _type="PasteCommand" date="Mon Dec 04 16:28:01 EST 2023" starttimestamp="1701710826491" timestamp="14454623" />
  <Command __id="6883" _type="ConsoleOutput" date="Mon Dec 04 16:28:01 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14454851" type="ConsoleOutput">
    <outputString><![CDATA[COND
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"4"), Diff(INSERT,"COND"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6884" _type="ShellCommand" date="Mon Dec 04 16:28:04 EST 2023" starttimestamp="1701710826491" timestamp="14458061" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6885" _type="ShellCommand" date="Mon Dec 04 16:29:22 EST 2023" starttimestamp="1701710826491" timestamp="14535972" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6886" _type="ShellCommand" date="Mon Dec 04 16:29:23 EST 2023" starttimestamp="1701710826491" timestamp="14536914" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6888" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:30:10 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14584374" type="Run" />
  <Command __id="6889" _type="ShellCommand" date="Mon Dec 04 16:30:11 EST 2023" starttimestamp="1701710826491" timestamp="14584676" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6890" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590674" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"COND"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6891" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590675" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6892" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590680" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):4
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):4"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6893" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590680" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):4"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6894" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590681" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6895" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590681" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):6"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6896" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590704" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):29
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):29"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6897" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590706" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):29"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6898" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590706" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):31
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):31"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6899" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590707" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:CondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):31"), Diff(INSERT,"Result:CondChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6900" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590709" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:CondChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6901" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590709" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6902" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590710" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6903" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590711" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:QuoteChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:QuoteChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6904" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590712" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:QuoteChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6905" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590713" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:EvalChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:EvalChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6906" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590714" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:EvalChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6907" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590715" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ListChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:ListChecker,100.0% complete,10.0,10.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6908" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590716" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ListChecker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6909" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590717" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ListChecker2,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:ListChecker2,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6910" _type="ConsoleOutput" date="Mon Dec 04 16:30:17 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14590720" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):2
Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string COND
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶Test execution time (ms):2¶"), Diff(EQUAL,"Test Result:"), Diff(DELETE,"List"), Diff(INSERT,"Combination"), Diff(EQUAL,"Checker"), Diff(DELETE,"2,10"), Diff(INSERT,","), Diff(EQUAL,"0.0% complete,"), Diff(DELETE,"1"), Diff(EQUAL,"0.0,10.0,"), Diff(INSERT,"Expected strings:4actual string COND"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6911" _type="ShellCommand" date="Mon Dec 04 16:31:00 EST 2023" starttimestamp="1701710826491" timestamp="14634045" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6912" _type="MoveCaretCommand" caretOffset="291" date="Mon Dec 04 16:31:00 EST 2023" docOffset="372" starttimestamp="1701710826491" timestamp="14634155" />
  <Command __id="6913" _type="MoveCaretCommand" caretOffset="291" date="Mon Dec 04 16:31:00 EST 2023" docOffset="372" starttimestamp="1701710826491" timestamp="14634155" />
  <Command __id="6914" _type="ShellCommand" date="Mon Dec 04 16:31:02 EST 2023" starttimestamp="1701710826491" timestamp="14635527" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6915" _type="ExceptionCommand" date="Mon Dec 04 16:32:13 EST 2023" starttimestamp="1701710826491" timestamp="14706700" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6916" _type="ConsoleOutput" date="Mon Dec 04 16:32:13 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14706706" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Test execution time (ms):2¶Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string COND"), Diff(INSERT,"	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6917" _type="ExceptionCommand" date="Mon Dec 04 16:32:13 EST 2023" starttimestamp="1701710826491" timestamp="14706709" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):3
Test Result:LispLambdaChecker2,0.0% complete,0.0,10.0,Expected strings:1actual string 

java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6918" _type="ConsoleOutput" date="Mon Dec 04 16:32:13 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14706719" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLambdaChecker,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 0 parameters with result 42


Test execution time (ms):1
Test Result:LoadLambdaChecker2,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 1 parameters with result 42

]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)"), Diff(INSERT,"Test Result:LoadLambdaChecker,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 0 parameters with result 42¶¶¶Test execution time (ms):1¶Test Result:LoadLambdaChecker2,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 1 parameters with result 42¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6919" _type="ConsoleOutput" date="Mon Dec 04 16:32:13 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14706721" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):0
Test Result:LoadLambdaChecker3,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 2 parameters with result 42
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:LoadLambdaChecker,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 0 parameters with result 42¶¶"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶Test Result:LoadLambdaChecker"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,",0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," parameters with result 42¶"), Diff(DELETE,"¶")]]]></diff>
  </Command>
  <Command __id="6920" _type="ExceptionCommand" date="Mon Dec 04 16:32:15 EST 2023" starttimestamp="1701710826491" timestamp="14708909" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6921" _type="ConsoleOutput" date="Mon Dec 04 16:32:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14708910" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):4
Test Result:LispIsListChecker,0.0% complete,0.0,15.0,Expected strings:Tactual string 

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"4"), Diff(EQUAL,"¶Test Result:L"), Diff(DELETE,"oadLambda"), Diff(INSERT,"ispIsList"), Diff(EQUAL,"Checker"), Diff(DELETE,"3"), Diff(EQUAL,",0.0% complete,0.0,15.0,Expect"), Diff(DELETE,"ing in test file a call to LAMBDA takes 2 parameters with result 42"), Diff(INSERT,"ed strings:Tactual string ¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6922" _type="ConsoleOutput" date="Mon Dec 04 16:32:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14708911" type="ConsoleOutput">
    <outputString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Test execution time (ms):4¶Test Result:LispIsListChecker,0.0% complete,0.0,15.0,Expected strings:Tactual string ¶"), Diff(INSERT,"java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6923" _type="ConsoleOutput" date="Mon Dec 04 16:32:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14708913" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'"), Diff(INSERT,"	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6924" _type="ConsoleOutput" date="Mon Dec 04 16:32:15 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14708959" type="ConsoleOutput">
    <outputString><![CDATA[	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"main.lisp.evalu"), Diff(INSERT,"org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,".BasicExpressionEvaluator.eval(BasicExpressionEvaluator"), Diff(INSERT,"g.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable"), Diff(EQUAL,".java:1"), Diff(DELETE,"4"), Diff(INSERT,"2"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.parser.terms.BasicExpression.eval(BasicExpression"), Diff(INSERT,"org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"26"), Diff(INSERT,"47"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation"), Diff(INSERT,"org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner"), Diff(EQUAL,".java:"), Diff(DELETE,"92"), Diff(INSERT,"71"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer"), Diff(INSERT,"org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite"), Diff(EQUAL,".java:"), Diff(DELETE,"100"), Diff(INSERT,"348"), Diff(EQUAL,")¶	at grad"), Diff(DELETE,"ingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer"), Diff(INSERT,"er.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"133"), Diff(INSERT,"270"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(INSERT,"190"), Diff(EQUAL,"6"), Diff(DELETE,"5"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionCheck"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"2"), Diff(EQUAL,"1"), Diff(INSERT,"538"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionCheck"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(EQUAL,"er.java:"), Diff(DELETE,"47"), Diff(INSERT,"278"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent"), Diff(EQUAL,".java:"), Diff(DELETE,"231"), Diff(INSERT,"3342"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"11"), Diff(INSERT,"232"), Diff(EQUAL,"1)¶	at j"), Diff(DELETE,"dk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)¶	at java.base/jdk."), Diff(INSERT,"ava.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Conta"), Diff(EQUAL,"in"), Diff(DELETE,"t"), Diff(EQUAL,"er"), Diff(DELETE,"nal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl"), Diff(INSERT,".dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(EQUAL,".java:"), Diff(INSERT,"48"), Diff(EQUAL,"43)¶	at java."), Diff(DELETE,"base/java.lang.reflect.Method.invoke(Method"), Diff(INSERT,"desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"566"), Diff(INSERT,"721"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="6925" _type="ExceptionCommand" date="Mon Dec 04 16:32:15 EST 2023" starttimestamp="1701710826491" timestamp="14708965" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):4
Test Result:LispIsListChecker2,0.0% complete,0.0,15.0,Expected strings:Tactual string 

java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6926" _type="ConsoleOutput" date="Mon Dec 04 16:32:16 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14710312" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:BasicAndChecker,100.0% complete,10.0,10.0,

Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)"), Diff(INSERT,"Test execution time (ms):1¶Test Result:BasicAndChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6927" _type="ConsoleOutput" date="Mon Dec 04 16:32:16 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14710315" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:BasicOrChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
Test Result:NotChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
Test Result:VariableArgumentAndChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1¶Test Result:Basic"), Diff(INSERT,"Result:BasicOrChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:NotChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:VariableArgument"), Diff(EQUAL,"AndChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6928" _type="ConsoleOutput" date="Mon Dec 04 16:32:16 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14710315" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:VariableArgumentOrChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:BasicOrChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:NotChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶"), Diff(EQUAL,"Test Result:VariableArgument"), Diff(DELETE,"And"), Diff(INSERT,"Or"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶"), Diff(DELETE,"¶Test execution time (ms):1¶")]]]></diff>
  </Command>
  <Command __id="6929" _type="ConsoleOutput" date="Mon Dec 04 16:32:19 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14712854" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:GreaterChecker,100.0% complete,10.0,10.0,

Test execution time (ms):0
Test Result:GreaterOrEqualChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:VariableArgumentOr"), Diff(INSERT,"execution time (ms):1¶Test Result:GreaterChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):0¶Test Result:GreaterOrEqual"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"¶")]]]></diff>
  </Command>
  <Command __id="6930" _type="ConsoleOutput" date="Mon Dec 04 16:32:19 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14712855" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"1¶Test Result:GreaterChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):0¶Test Result:GreaterOrEqualChecker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6931" _type="ConsoleOutput" date="Mon Dec 04 16:32:19 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14712855" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LessChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:LessChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6932" _type="ConsoleOutput" date="Mon Dec 04 16:32:19 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14712856" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LessChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6933" _type="ConsoleOutput" date="Mon Dec 04 16:32:19 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14712857" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LessOrEqualChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:LessOrEqualChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6934" _type="ExceptionCommand" date="Mon Dec 04 16:32:20 EST 2023" starttimestamp="1701710826491" timestamp="14714196" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6935" _type="ExceptionCommand" date="Mon Dec 04 16:32:20 EST 2023" starttimestamp="1701710826491" timestamp="14714198" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6936" _type="ConsoleOutput" date="Mon Dec 04 16:32:20 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14714199" type="ConsoleOutput">
    <outputString><![CDATA[	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):3
Test Result:CurryTwiceChecker,0.0% complete,0.0,20.0,Expected strings:24actual string 

]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:LessOrEqual"), Diff(INSERT,"	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)¶	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)¶¶Test execution time (ms):3¶Test Result:CurryTwice"), Diff(EQUAL,"Checker,"), Diff(DELETE,"10"), Diff(EQUAL,"0.0% complete,"), Diff(DELETE,"1"), Diff(EQUAL,"0.0,"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"0.0,"), Diff(INSERT,"Expected strings:24actual string ¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6937" _type="ExceptionCommand" date="Mon Dec 04 16:32:20 EST 2023" starttimestamp="1701710826491" timestamp="14714200" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6938" _type="ConsoleOutput" date="Mon Dec 04 16:32:20 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14714219" type="ConsoleOutput">
    <outputString><![CDATA[	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread"), Diff(INSERT,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter"), Diff(EQUAL,".java:"), Diff(DELETE,"10"), Diff(INSERT,"46"), Diff(EQUAL,"9)¶	at java.desktop/java.awt."), Diff(INSERT,"AWT"), Diff(EQUAL,"Event"), Diff(DELETE,"DispatchThread.pumpEvents(EventDispatchThread"), Diff(INSERT,"Multicaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"10"), Diff(INSERT,"232"), Diff(EQUAL,"1)¶	at java.desktop/java.awt."), Diff(DELETE,"Even"), Diff(INSERT,"Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.Lightweigh"), Diff(EQUAL,"tDispatch"), Diff(DELETE,"Thread.run(EventDispatchThread.java:90)¶¶Test execution time (ms):3¶Test Result:CurryTwiceChecker,0.0% complete,0.0,20.0,Expected strings:24actual string ¶"), Diff(INSERT,"er.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6939" _type="ExceptionCommand" date="Mon Dec 04 16:32:21 EST 2023" starttimestamp="1701710826491" timestamp="14715287" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'LET'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6940" _type="ConsoleOutput" date="Mon Dec 04 16:32:21 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14715290" type="ConsoleOutput">
    <outputString><![CDATA[	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶"), Diff(EQUAL,"	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶"), Diff(INSERT,"	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)¶	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)¶¶")]]]></diff>
  </Command>
  <Command __id="6941" _type="ConsoleOutput" date="Mon Dec 04 16:32:21 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14715295" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LetLambdaAndFunctionTest,0.0% complete,0.0,40.0,Expected strings:10
42
8
8actual string 10
42

]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)¶	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)¶	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)"), Diff(INSERT,"Test Result:LetLambdaAndFunctionTest,0.0% complete,0.0,40.0,Expected strings:10¶42¶8¶8actual string 10¶42"), Diff(EQUAL,"¶¶")]]]></diff>
  </Command>
  <Command __id="6942" _type="ExceptionCommand" date="Mon Dec 04 16:32:21 EST 2023" starttimestamp="1701710826491" timestamp="14715297" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'LET'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6943" _type="ExceptionCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716546" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6944" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716548">
    <CSVRow><![CDATA[104,Mon Dec 04 16:32:15 EST 2023,35,0,LispToStringSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,2,true,LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 LoadLispChecker TestLispFileProvided , ,LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 LoadLispChecker TestLispFileProvided ,LispIsListChecker-(0.0/15.0) LispIsListChecker2-(0.0/15.0) LispIsListChecker3-(0.0/15.0) LispIsListChecker4-(0.0/15.0) LispToStringChecker-(0.0/15.0) LispToStringChecker2-(0.0/15.0) LispToStringChecker3-(0.0/15.0) LispToStringChecker4-(0.0/15.0) LoadLispChecker-(0.0/0.0) TestLispFileProvided-(0.0/0.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6945" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716548">
    <CSVRow><![CDATA[104,Mon Dec 04 16:32:15 EST 2023,35,0,LispToStringSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,2,true,LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 LoadLispChecker TestLispFileProvided , ,LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 LoadLispChecker TestLispFileProvided ,LispIsListChecker-(0.0/15.0) LispIsListChecker2-(0.0/15.0) LispIsListChecker3-(0.0/15.0) LispIsListChecker4-(0.0/15.0) LispToStringChecker-(0.0/15.0) LispToStringChecker2-(0.0/15.0) LispToStringChecker3-(0.0/15.0) LispToStringChecker4-(0.0/15.0) LoadLispChecker-(0.0/0.0) TestLispFileProvided-(0.0/0.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6946" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716548">
    <CSVRow><![CDATA[105,Mon Dec 04 16:32:16 EST 2023,35,0,LogicalSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,3,true,BasicAndChecker BasicOrChecker NotChecker VariableArgumentAndChecker VariableArgumentOrChecker , ,VariableArgumentAndChecker VariableArgumentOrChecker ,BasicAndChecker-(10.0/10.0) BasicOrChecker-(10.0/10.0) NotChecker-(10.0/10.0) VariableArgumentAndChecker-(10.0/10.0) VariableArgumentOrChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6947" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716548">
    <CSVRow><![CDATA[105,Mon Dec 04 16:32:16 EST 2023,35,0,LogicalSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,3,true,BasicAndChecker BasicOrChecker NotChecker VariableArgumentAndChecker VariableArgumentOrChecker , ,VariableArgumentAndChecker VariableArgumentOrChecker ,BasicAndChecker-(10.0/10.0) BasicOrChecker-(10.0/10.0) NotChecker-(10.0/10.0) VariableArgumentAndChecker-(10.0/10.0) VariableArgumentOrChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6948" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716548">
    <CSVRow><![CDATA[106,Mon Dec 04 16:32:19 EST 2023,35,0,RelationalSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,4,true,GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker , , ,GreaterChecker-(10.0/10.0) GreaterOrEqualChecker-(10.0/10.0) LessChecker-(10.0/10.0) LessOrEqualChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6949" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716548">
    <CSVRow><![CDATA[106,Mon Dec 04 16:32:19 EST 2023,35,0,RelationalSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,4,true,GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker , , ,GreaterChecker-(10.0/10.0) GreaterOrEqualChecker-(10.0/10.0) LessChecker-(10.0/10.0) LessOrEqualChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6950" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716548">
    <CSVRow><![CDATA[107,Mon Dec 04 16:32:20 EST 2023,35,0,BasicCurrySuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,5,true,CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker , ,CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker ,CurryOnceChecker-(0.0/20.0) CurryTwiceChecker-(0.0/20.0) CurryTwoArgsChecker-(0.0/20.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6951" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716548">
    <CSVRow><![CDATA[107,Mon Dec 04 16:32:20 EST 2023,35,0,BasicCurrySuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,5,true,CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker , ,CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker ,CurryOnceChecker-(0.0/20.0) CurryTwiceChecker-(0.0/20.0) CurryTwoArgsChecker-(0.0/20.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6952" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716548">
    <CSVRow><![CDATA[108,Mon Dec 04 16:32:21 EST 2023,35,0,A6LetSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,6,true,BasicLetTest LetLambdaAndFunctionTest , ,BasicLetTest LetLambdaAndFunctionTest ,BasicLetTest-(0.0/10.0) LetLambdaAndFunctionTest-(0.0/40.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6953" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716548">
    <CSVRow><![CDATA[108,Mon Dec 04 16:32:21 EST 2023,35,0,A6LetSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,6,true,BasicLetTest LetLambdaAndFunctionTest , ,BasicLetTest LetLambdaAndFunctionTest ,BasicLetTest-(0.0/10.0) LetLambdaAndFunctionTest-(0.0/40.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6954" _type="ExceptionCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716552" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6955" _type="ExceptionCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716554" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6956" _type="ExceptionCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716562" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6957" _type="ConsoleOutput" date="Mon Dec 04 16:32:23 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14716572" type="ConsoleOutput">
    <outputString><![CDATA[	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:LetLambdaAndFunctionTest,0.0% complete,0.0,40.0,Exp"), Diff(INSERT,"	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.ex"), Diff(EQUAL,"ec"), Diff(INSERT,"u"), Diff(EQUAL,"te"), Diff(DELETE,"d strings:10¶42¶8¶8actual string 10¶42¶"), Diff(INSERT,"(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6958" _type="ConsoleOutput" date="Mon Dec 04 16:32:23 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14716579" type="ConsoleOutput">
    <outputString><![CDATA[	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶"), Diff(EQUAL,"	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶"), Diff(INSERT,"	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶")]]]></diff>
  </Command>
  <Command __id="6959" _type="ExceptionCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716587" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6960" _type="ExceptionCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716594" type="Exception">
    <exceptionString><![CDATA[	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6961" _type="ConsoleOutput" date="Mon Dec 04 16:32:23 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14716605" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶"), Diff(EQUAL,"	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶"), Diff(DELETE,""), Diff(EQUAL,"	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶"), Diff(INSERT,""), Diff(EQUAL,"	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶"), Diff(DELETE,"	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)¶	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)¶")]]]></diff>
  </Command>
  <Command __id="6962" _type="ExceptionCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716614" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6963" _type="ExceptionCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716621" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6964" _type="ExceptionCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716626" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6965" _type="ConsoleOutput" date="Mon Dec 04 16:32:23 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14716632" type="ConsoleOutput">
    <outputString><![CDATA[	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶"), Diff(EQUAL,"	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶"), Diff(INSERT,"	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶")]]]></diff>
  </Command>
  <Command __id="6966" _type="ExceptionCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716638" type="Exception">
    <exceptionString><![CDATA[	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6967" _type="ConsoleOutput" date="Mon Dec 04 16:32:23 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14716644" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶"), Diff(EQUAL,"	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶"), Diff(DELETE,"	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶")]]]></diff>
  </Command>
  <Command __id="6968" _type="ExceptionCommand" date="Mon Dec 04 16:32:23 EST 2023" starttimestamp="1701710826491" timestamp="14716650" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6969" _type="ConsoleOutput" date="Mon Dec 04 16:32:23 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14716658" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶"), Diff(EQUAL,"	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶"), Diff(DELETE,"	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶")]]]></diff>
  </Command>
  <Command __id="6970" _type="ExceptionCommand" date="Mon Dec 04 16:32:24 EST 2023" starttimestamp="1701710826491" timestamp="14717735" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.lazy.basic.LazyCarEvaluator.eval(LazyCarEvaluator.java:23)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment4.lazy.AbstractEvaluatorAndResultChecker.compareOutput(AbstractEvaluatorAndResultChecker.java:11)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6971" _type="ConsoleOutput" date="Mon Dec 04 16:32:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14717742" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ListMToNCarNormalEval,0.0% complete,0.0,20.0,Expected strings:"NORMAL"
2actual string "NORMAL"

]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)"), Diff(INSERT,"Test Result:ListMToNCarNormalEval,0.0% complete,0.0,20.0,Expected strings:"NORMAL"¶2actual string "NORMAL"¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6972" _type="ExceptionCommand" date="Mon Dec 04 16:32:24 EST 2023" starttimestamp="1701710826491" timestamp="14717745" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.lazyEval(BasicExpressionEvaluator.java:28)
	at main.lisp.parser.terms.BasicExpression.lazyEval(BasicExpression.java:31)
	at main.lisp.evaluator.lazy.basic.LazyCarEvaluator.lazyEval(LazyCarEvaluator.java:46)
	at main.lisp.evaluator.BasicExpressionEvaluator.lazyEval(BasicExpressionEvaluator.java:30)
	at main.lisp.parser.terms.BasicExpression.lazyEval(BasicExpression.java:31)
	at main.lisp.evaluator.lazy.BasicThunk.eval(BasicThunk.java:22)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:87)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment4.lazy.AbstractEvaluatorAndResultChecker.compareOutput(AbstractEvaluatorAndResultChecker.java:11)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6973" _type="ExceptionCommand" date="Mon Dec 04 16:32:24 EST 2023" starttimestamp="1701710826491" timestamp="14717752" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):3
Test Result:ListMToNCdrLazyEval,0.0% complete,0.0,30.0,tostring() of list cdr should contain:(Thunk: [(FUNCALL LISTMTON (

java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.lazyEval(BasicExpressionEvaluator.java:28)
	at main.lisp.parser.terms.BasicExpression.lazyEval(BasicExpression.java:31)
	at main.lisp.evaluator.lazy.basic.LazyCdrEvaluator.lazyEval(LazyCdrEvaluator.java:49)
	at main.lisp.evaluator.BasicExpressionEvaluator.lazyEval(BasicExpressionEvaluator.java:30)
	at main.lisp.parser.terms.BasicExpression.lazyEval(BasicExpression.java:31)
	at main.lisp.evaluator.lazy.basic.LazyCarEvaluator.lazyEval(LazyCarEvaluator.java:46)
	at main.lisp.evaluator.BasicExpressionEvaluator.lazyEval(BasicExpressionEvaluator.java:30)
	at main.lisp.parser.terms.BasicExpression.lazyEval(BasicExpression.java:31)
	at main.lisp.evaluator.lazy.basic.LazyCarEvaluator.lazyEval(LazyCarEvaluator.java:46)
	at main.lisp.evaluator.BasicExpressionEvaluator.lazyEval(BasicExpressionEvaluator.java:30)
	at main.lisp.parser.terms.BasicExpression.lazyEval(BasicExpression.java:31)
	at main.lisp.evaluator.lazy.BasicThunk.eval(BasicThunk.java:22)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:87)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment4.lazy.AbstractEvaluatorAndResultChecker.compareOutput(AbstractEvaluatorAndResultChecker.java:11)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6974" _type="ExceptionCommand" date="Mon Dec 04 16:32:26 EST 2023" starttimestamp="1701710826491" timestamp="14719876" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'FUNCALL'
	at main.lisp.evaluator.BasicExpressionEvaluator.lazyEval(BasicExpressionEvaluator.java:28)
	at main.lisp.parser.terms.BasicExpression.lazyEval(BasicExpression.java:31)
	at main.lisp.evaluator.lazy.BasicThunk.eval(BasicThunk.java:22)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:87)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="6975" _type="ConsoleOutput" date="Mon Dec 04 16:32:26 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14719883" type="ConsoleOutput">
    <outputString><![CDATA[
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:ListMToNCarNormalEval,0.0% complete,0.0,20.0,Expected strings:"NORMAL"¶2actual string "NORMAL"¶"), Diff(INSERT,"¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6976" _type="ConsoleOutput" date="Mon Dec 04 16:32:27 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14721013" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:LispSetqChecker,100.0% complete,10.0,10.0,

Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)¶	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)"), Diff(INSERT,"Test execution time (ms):1¶Test Result:LispSetqChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6977" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:27 EST 2023" starttimestamp="1701710826491" timestamp="14721014">
    <CSVRow><![CDATA[110,Mon Dec 04 16:32:24 EST 2023,35,0,LazinessSensitiveFunSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,8,true,ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval , ,ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval ,ListMToNCarCdrLazyEval-(0.0/15.0) ListMToNCarLazyEval-(0.0/15.0) ListMToNCarNormalEval-(0.0/20.0) ListMToNCdrLazyEval-(0.0/30.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6978" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:27 EST 2023" starttimestamp="1701710826491" timestamp="14721014">
    <CSVRow><![CDATA[110,Mon Dec 04 16:32:24 EST 2023,35,0,LazinessSensitiveFunSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,8,true,ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval , ,ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval ,ListMToNCarCdrLazyEval-(0.0/15.0) ListMToNCarLazyEval-(0.0/15.0) ListMToNCarNormalEval-(0.0/20.0) ListMToNCdrLazyEval-(0.0/30.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6979" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:27 EST 2023" starttimestamp="1701710826491" timestamp="14721014">
    <CSVRow><![CDATA[111,Mon Dec 04 16:32:26 EST 2023,35,0,BasicFunctionExpressionSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,9,true,PlusGeneratorChecker TimesGeneratorChecker , ,PlusGeneratorChecker TimesGeneratorChecker ,PlusGeneratorChecker-(0.0/50.0) TimesGeneratorChecker-(0.0/0.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6980" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:27 EST 2023" starttimestamp="1701710826491" timestamp="14721014">
    <CSVRow><![CDATA[111,Mon Dec 04 16:32:26 EST 2023,35,0,BasicFunctionExpressionSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,9,true,PlusGeneratorChecker TimesGeneratorChecker , ,PlusGeneratorChecker TimesGeneratorChecker ,PlusGeneratorChecker-(0.0/50.0) TimesGeneratorChecker-(0.0/0.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6981" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:27 EST 2023" starttimestamp="1701710826491" timestamp="14721014">
    <CSVRow><![CDATA[112,Mon Dec 04 16:32:27 EST 2023,35,0,LispSetqSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,10,true,LispSetqChecker LispSetqChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 , , ,LispSetqChecker-(10.0/10.0) LispSetqChecker2-(10.0/10.0) LoadSetqChecker-(15.0/15.0) LoadSetqChecker2-(15.0/15.0) LoadSetqChecker3-(15.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6982" _type="LocalChecksRawCommand" date="Mon Dec 04 16:32:27 EST 2023" starttimestamp="1701710826491" timestamp="14721014">
    <CSVRow><![CDATA[112,Mon Dec 04 16:32:27 EST 2023,35,0,LispSetqSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EvalChecker GreaterChecker GreaterOrEqualChecker LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker EnvironmentCallsGetParent EnvironmentCallsPut FuncallCallsExpressionFactory IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,48,10,true,LispSetqChecker LispSetqChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 , , ,LispSetqChecker-(10.0/10.0) LispSetqChecker2-(10.0/10.0) LoadSetqChecker-(15.0/15.0) LoadSetqChecker2-(15.0/15.0) LoadSetqChecker3-(15.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="6983" _type="ConsoleOutput" date="Mon Dec 04 16:32:27 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="14721016" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispSetqChecker2,100.0% complete,10.0,10.0,

Test execution time (ms):1
Test Result:LoadSetqChecker,100.0% complete,15.0,15.0,

Test execution time (ms):1
Test Result:LoadSetqChecker2,100.0% complete,15.0,15.0,

Test execution time (ms):0
Test Result:LoadSetqChecker3,100.0% complete,15.0,15.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1¶Test Result:Lisp"), Diff(INSERT,"Result:LispSetqChecker2,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:LoadSetqChecker,100.0% complete,15.0,15.0,¶¶Test execution time (ms):1¶Test Result:Load"), Diff(EQUAL,"SetqChecker"), Diff(INSERT,"2"), Diff(EQUAL,",100.0% complete,1"), Diff(DELETE,"0"), Diff(INSERT,"5"), Diff(EQUAL,".0,1"), Diff(DELETE,"0"), Diff(INSERT,"5"), Diff(EQUAL,".0,¶¶Test execution time (ms):0¶"), Diff(INSERT,"Test Result:LoadSetqChecker3,100.0% complete,15.0,15.0,¶")]]]></diff>
  </Command>
  <Command __id="7003" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:32:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="14727604" type="Debug" />
  <Command __id="7004" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:32:34 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14727604" type="Run" />
  <Command __id="7005" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:32:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="14727604" type="Debug" />
  <Command __id="7006" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:32:34 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14727605" type="Run" />
  <Command __id="7175" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,index.EnvironmentImpl,environment]]></CSVRow>
  </Command>
  <Command __id="7176" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,index.EnvironmentImpl,impl]]></CSVRow>
  </Command>
  <Command __id="7177" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,arg0,arg]]></CSVRow>
  </Command>
  <Command __id="7178" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,arg1,arg]]></CSVRow>
  </Command>
  <Command __id="7179" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,retVal,ret]]></CSVRow>
  </Command>
  <Command __id="7180" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,nameInDictionary,retVal,val]]></CSVRow>
  </Command>
  <Command __id="7181" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,missingMethodCall,main.lisp.evaluator.environment.AbstractEnvironment!getScope:->CopyableScope,No method,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="7182" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,expectedMethodCall,main.lisp.evaluator.environment.AbstractEnvironment!getParent:->Environment,Some method (lookup:main.lisp.parser.terms.IdentifierAtom->Optional),index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="7183" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,expectedMethodCall,main.lisp.evaluator.environment.AbstractEnvironment!get:*->.*,Some method (lookup:main.lisp.parser.terms.IdentifierAtom->Optional),index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="7184" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,expectedMethodCall,main.lisp.evaluator.environment.AbstractEnvironment!put:main.lisp.parser.terms.IdentifierAtom;main.lisp.parser.terms.SExpression->void,Some method (assign:main.lisp.parser.terms.IdentifierAtom;main.lisp.parser.terms.SExpression->void),index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="7185" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,publicMethodsOverride,[]]]></CSVRow>
  </Command>
  <Command __id="7186" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,expectedSignature,lookupFun:main.lisp.parser.terms.IdentifierAtom->java.util.Optional,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="7187" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,expectedSignature,assign:main.lisp.parser.terms.IdentifierAtom;main.lisp.parser.terms.SExpression->void,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="7188" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,expectedSignature,copy:->main.lisp.evaluator.Environment,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="7189" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,expectedSignature,lookup:main.lisp.parser.terms.IdentifierAtom->java.util.Optional,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="7190" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,expectedSignature,newChild:->main.lisp.evaluator.Environment,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="7191" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,expectedSignature,assignFun:main.lisp.parser.terms.IdentifierAtom;main.lisp.evaluator.function.Function->void,index.EnvironmentImpl:[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="7192" _type="CheckStyleCommand" date="Mon Dec 04 16:46:21 EST 2023" starttimestamp="1701710826491" timestamp="15554766">
    <CSVRow><![CDATA[77,Mon Dec 04 16:32:29 EST 2023,true,index/EnvironmentImpl.java,expectedSuperType,main.lisp.evaluator.environment.AbstractEnvironment,index.EnvironmentImpl[@NestedLexicalEnvironment]]]></CSVRow>
  </Command>
  <Command __id="7193" _type="MoveCaretCommand" caretOffset="285" date="Mon Dec 04 16:46:22 EST 2023" docOffset="366" starttimestamp="1701710826491" timestamp="15556105" />
  <Command __id="7194" _type="MoveCaretCommand" caretOffset="285" date="Mon Dec 04 16:46:22 EST 2023" docOffset="366" starttimestamp="1701710826491" timestamp="15556106" />
  <Command __id="7195" _type="ShellCommand" date="Mon Dec 04 16:46:27 EST 2023" starttimestamp="1701710826491" timestamp="15560815" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7196" _type="ShellCommand" date="Mon Dec 04 16:47:35 EST 2023" starttimestamp="1701710826491" timestamp="15629353" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7197" _type="ShellCommand" date="Mon Dec 04 16:47:44 EST 2023" starttimestamp="1701710826491" timestamp="15638404" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7202" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:48:06 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="15659774" type="Debug" />
  <Command __id="7203" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:48:06 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="15659774" type="Run" />
  <Command __id="7204" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:48:06 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="15659774" type="Debug" />
  <Command __id="7205" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:48:06 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="15659774" type="Run" />
  <Command __id="7206" _type="ShellCommand" date="Mon Dec 04 16:48:07 EST 2023" starttimestamp="1701710826491" timestamp="15661409" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7207" _type="ShellCommand" date="Mon Dec 04 16:48:08 EST 2023" starttimestamp="1701710826491" timestamp="15662292" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7208" _type="ShellCommand" date="Mon Dec 04 16:50:17 EST 2023" starttimestamp="1701710826491" timestamp="15790751" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7209" _type="ShellCommand" date="Mon Dec 04 16:50:18 EST 2023" starttimestamp="1701710826491" timestamp="15792113" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7210" _type="ShellCommand" date="Mon Dec 04 16:56:06 EST 2023" starttimestamp="1701710826491" timestamp="16139948" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7216" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:56:14 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="16147959" type="Run" />
  <Command __id="7217" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:56:14 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="16147959" type="Run" />
  <Command __id="7218" _type="CheckStyleCommand" date="Mon Dec 04 16:56:14 EST 2023" starttimestamp="1701710826491" timestamp="16147981">
    <CSVRow><![CDATA[78,Mon Dec 04 16:56:09 EST 2023,false,5.65,bulkierThen,113.0,20.0,5.65]]></CSVRow>
  </Command>
  <Command __id="7219" _type="CheckStyleCommand" date="Mon Dec 04 16:56:14 EST 2023" starttimestamp="1701710826491" timestamp="16147981">
    <CSVRow><![CDATA[78,Mon Dec 04 16:56:09 EST 2023,false,index/CondEvaluator.java,expectedTypes,[@NestedLexicalEnvironment, @BasicFuncallEvaluator, @LetEvaluator, @IdentifierAtomWithLookup, @FunctionEvaluator, @SetqEvaluator, @FunctionCallingSExpression, @LambdaEvaluator, @LambdaCallingSExpression]]]></CSVRow>
  </Command>
  <Command __id="7220" _type="CheckStyleCommand" date="Mon Dec 04 16:56:14 EST 2023" starttimestamp="1701710826491" timestamp="16147981">
    <CSVRow><![CDATA[78,Mon Dec 04 16:56:09 EST 2023,false,index/CondEvaluator.java,thenBranching,evalHelper]]></CSVRow>
  </Command>
  <Command __id="7221" _type="CheckStyleCommand" date="Mon Dec 04 16:56:14 EST 2023" starttimestamp="1701710826491" timestamp="16147981">
    <CSVRow><![CDATA[78,Mon Dec 04 16:56:09 EST 2023,false,index/CondEvaluator.java,nestedIfDepth,2,1]]></CSVRow>
  </Command>
  <Command __id="7222" _type="CheckStyleCommand" date="Mon Dec 04 16:56:14 EST 2023" starttimestamp="1701710826491" timestamp="16147981">
    <CSVRow><![CDATA[78,Mon Dec 04 16:56:09 EST 2023,false,index/CondEvaluator.java,nameInDictionary,index.CondEvaluator,index]]></CSVRow>
  </Command>
  <Command __id="7223" _type="CheckStyleCommand" date="Mon Dec 04 16:56:14 EST 2023" starttimestamp="1701710826491" timestamp="16147981">
    <CSVRow><![CDATA[78,Mon Dec 04 16:56:09 EST 2023,false,index/CondEvaluator.java,nameInDictionary,environment,environment]]></CSVRow>
  </Command>
  <Command __id="7224" _type="CheckStyleCommand" date="Mon Dec 04 16:56:14 EST 2023" starttimestamp="1701710826491" timestamp="16147981">
    <CSVRow><![CDATA[78,Mon Dec 04 16:56:09 EST 2023,false,index/CondEvaluator.java,publicMethodsOverride,[]]]></CSVRow>
  </Command>
  <Command __id="7225" _type="CheckStyleCommand" date="Mon Dec 04 16:56:14 EST 2023" starttimestamp="1701710826491" timestamp="16147981">
    <CSVRow><![CDATA[78,Mon Dec 04 16:56:09 EST 2023,false,index/CondEvaluator.java,nameNotInDictionary,expr,expr]]></CSVRow>
  </Command>
  <Command __id="7226" _type="ShellCommand" date="Mon Dec 04 16:56:14 EST 2023" starttimestamp="1701710826491" timestamp="16148271" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7237" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:56:33 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="16167277" type="Debug" />
  <Command __id="7238" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:56:33 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="16167277" type="Run" />
  <Command __id="7239" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 16:56:33 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="16167277" type="Debug" />
  <Command __id="7240" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 16:56:33 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="16167277" type="Run" />
  <Command __id="7241" _type="ShellCommand" date="Mon Dec 04 16:56:33 EST 2023" starttimestamp="1701710826491" timestamp="16167294" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7242" _type="ShellCommand" date="Mon Dec 04 16:56:35 EST 2023" starttimestamp="1701710826491" timestamp="16168853" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7243" _type="ShellCommand" date="Mon Dec 04 17:14:59 EST 2023" starttimestamp="1701710826491" timestamp="17272822" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7244" _type="MoveCaretCommand" caretOffset="285" date="Mon Dec 04 17:14:59 EST 2023" docOffset="366" starttimestamp="1701710826491" timestamp="17272976" />
  <Command __id="7245" _type="MoveCaretCommand" caretOffset="285" date="Mon Dec 04 17:14:59 EST 2023" docOffset="366" starttimestamp="1701710826491" timestamp="17272976" />
  <Command __id="6843" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 16:26:39 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" projectName="Assignment5" starttimestamp="1701710826491" timestamp="14372712">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			return expr.getTail();		}		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7246" _type="MoveCaretCommand" caretOffset="246" date="Mon Dec 04 17:15:00 EST 2023" docOffset="327" starttimestamp="1701710826491" timestamp="17274215" />
  <Command __id="7247" _type="MoveCaretCommand" caretOffset="246" date="Mon Dec 04 17:15:00 EST 2023" docOffset="327" starttimestamp="1701710826491" timestamp="17274215" />
  <Command __id="7249" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 17:15:10 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="17284119" />
  <Command __id="7250" _type="LocalChecksRawCommand" date="Mon Dec 04 17:15:10 EST 2023" starttimestamp="1701710826491" timestamp="17284124">
    <CSVRow><![CDATA[114,Mon Dec 04 16:56:17 EST 2023,41,0,LispLambdaSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,49,0,true,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) LispLambdaChecker2-(0.0/10.0) LispLambdaChecker3-(0.0/10.0) LoadLambdaChecker-(0.0/15.0) LoadLambdaChecker2-(0.0/15.0) LoadLambdaChecker3-(0.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="7251" _type="LocalChecksRawCommand" date="Mon Dec 04 17:15:10 EST 2023" starttimestamp="1701710826491" timestamp="17284124">
    <CSVRow><![CDATA[114,Mon Dec 04 16:56:17 EST 2023,41,0,LispLambdaSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,49,0,true,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) LispLambdaChecker2-(0.0/10.0) LispLambdaChecker3-(0.0/10.0) LoadLambdaChecker-(0.0/15.0) LoadLambdaChecker2-(0.0/15.0) LoadLambdaChecker3-(0.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="7252" _type="ShellCommand" date="Mon Dec 04 17:15:14 EST 2023" starttimestamp="1701710826491" timestamp="17287729" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7253" _type="ShellCommand" date="Mon Dec 04 17:15:26 EST 2023" starttimestamp="1701710826491" timestamp="17299609" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7254" _type="ShellCommand" date="Mon Dec 04 17:15:26 EST 2023" starttimestamp="1701710826491" timestamp="17300398" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7255" _type="ShellCommand" date="Mon Dec 04 17:16:23 EST 2023" starttimestamp="1701710826491" timestamp="17356785" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7256" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 17:16:24 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="17357554" />
  <Command __id="7257" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 17:16:24 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="17357554" />
  <Command __id="7263" _type="EclipseCommand" commandID="" date="Mon Dec 04 17:16:29 EST 2023" starttimestamp="1701710826491" timestamp="17363392" />
  <Command __id="7264" _type="EclipseCommand" commandID="" date="Mon Dec 04 17:16:29 EST 2023" starttimestamp="1701710826491" timestamp="17363395" />
  <Command __id="7265" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 17:16:30 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17363991" type="Run" />
  <Command __id="7266" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 17:16:30 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17363991" type="Run" />
  <Command __id="7267" _type="ShellCommand" date="Mon Dec 04 17:16:30 EST 2023" starttimestamp="1701710826491" timestamp="17364377" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7268" _type="ConsoleOutput" date="Mon Dec 04 17:16:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17369097" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LispLambdaChecker3,0.0% complete,0.0,10.0,Expected strings:25actual string ¶¶¶Test execution time (ms):0¶Test Result:LoadLambdaChecker,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 0 parameters with result 42¶¶¶Test execution time (ms):0¶Test Result:LoadLambdaChecker2,0.0% complete,0.0,15.0,Expecting in test file a call to LAMBDA takes 1 parameters with result 42¶¶¶Test execution time (ms):0¶Test Result:LoadLambdaChecker3,"), Diff(INSERT,"execution time (ms):0¶Test Result:TestLispFileProvided,10"), Diff(EQUAL,"0.0% complete,0.0,"), Diff(DELETE,"15"), Diff(INSERT,"0"), Diff(EQUAL,".0,"), Diff(DELETE,"Expecting in test file a call to LAMBDA takes 2 parameters with result 42"), Diff(INSERT,"¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7269" _type="ConsoleOutput" date="Mon Dec 04 17:16:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17369103" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"5"), Diff(EQUAL,"¶Test Result:"), Diff(DELETE,"TestLispFile"), Diff(INSERT,"ClassRegistry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶"), Diff(DELETE,"¶")]]]></diff>
  </Command>
  <Command __id="7270" _type="ConsoleOutput" date="Mon Dec 04 17:16:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17369103" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"5¶Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7271" _type="ConsoleOutput" date="Mon Dec 04 17:16:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17369105" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7272" _type="ConsoleOutput" date="Mon Dec 04 17:16:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17369127" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):30
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):30"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7273" _type="ConsoleOutput" date="Mon Dec 04 17:16:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17369128" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

java.lang.IllegalStateException: Expression does not start with an operator
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):30"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶java.lang.IllegalStateException: Expression does not start with an operator"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7274" _type="ConsoleOutput" date="Mon Dec 04 17:16:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17369130" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶java.lang.IllegalStateException: Expression does not start with an operator"), Diff(INSERT,"	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7275" _type="ConsoleOutput" date="Mon Dec 04 17:16:35 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17369175" type="ConsoleOutput">
    <outputString><![CDATA[	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"main.lisp.evalu"), Diff(INSERT,"java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,".BasicExpressionEvalu"), Diff(INSERT,"g.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,".eval(BasicExpressionEvaluator"), Diff(INSERT,"g.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable"), Diff(EQUAL,".java:1"), Diff(DELETE,"8"), Diff(INSERT,"2"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.parser.terms.BasicExpression.eval(BasicExpression"), Diff(INSERT,"org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"26"), Diff(INSERT,"47"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation"), Diff(INSERT,"org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner"), Diff(EQUAL,".java:"), Diff(DELETE,"92"), Diff(INSERT,"71"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer"), Diff(INSERT,"org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite"), Diff(EQUAL,".java:"), Diff(DELETE,"100"), Diff(INSERT,"348"), Diff(EQUAL,")¶	at grad"), Diff(DELETE,"ingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer"), Diff(INSERT,"er.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"133"), Diff(INSERT,"270"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(INSERT,"190"), Diff(EQUAL,"6"), Diff(DELETE,"5"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionCheck"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"2"), Diff(EQUAL,"1"), Diff(INSERT,"538"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionCheck"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(EQUAL,"er.java:"), Diff(DELETE,"47"), Diff(INSERT,"278"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent"), Diff(EQUAL,".java:"), Diff(DELETE,"231"), Diff(INSERT,"3342"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"1"), Diff(INSERT,"50"), Diff(EQUAL,"11)¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"62"), Diff(INSERT,"4488"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.DelegatingMethodAccessor"), Diff(INSERT,"desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEvent"), Diff(EQUAL,"Impl"), Diff(DELETE,".invoke(DelegatingMethodAccessorImpl"), Diff(INSERT,"(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"43"), Diff(INSERT,"772"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="7276" _type="ExceptionCommand" date="Mon Dec 04 17:16:35 EST 2023" starttimestamp="1701710826491" timestamp="17369184" type="Exception">
    <exceptionString><![CDATA[	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):3
Test Result:LispLambdaChecker2,0.0% complete,0.0,10.0,Expected strings:1actual string 

java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="7277" _type="ShellCommand" date="Mon Dec 04 17:16:59 EST 2023" starttimestamp="1701710826491" timestamp="17393435" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7278" _type="LocalChecksRawCommand" date="Mon Dec 04 17:16:59 EST 2023" starttimestamp="1701710826491" timestamp="17393443">
    <CSVRow><![CDATA[115,Mon Dec 04 17:16:35 EST 2023,41,0,LispLambdaSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,50,0,true,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) LispLambdaChecker2-(0.0/10.0) LispLambdaChecker3-(0.0/10.0) LoadLambdaChecker-(0.0/15.0) LoadLambdaChecker2-(0.0/15.0) LoadLambdaChecker3-(0.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="7279" _type="LocalChecksRawCommand" date="Mon Dec 04 17:16:59 EST 2023" starttimestamp="1701710826491" timestamp="17393443">
    <CSVRow><![CDATA[115,Mon Dec 04 17:16:35 EST 2023,41,0,LispLambdaSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,50,0,true,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) LispLambdaChecker2-(0.0/10.0) LispLambdaChecker3-(0.0/10.0) LoadLambdaChecker-(0.0/15.0) LoadLambdaChecker2-(0.0/15.0) LoadLambdaChecker3-(0.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="7280" _type="ShellCommand" date="Mon Dec 04 17:17:01 EST 2023" starttimestamp="1701710826491" timestamp="17394873" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7281" _type="ShellCommand" date="Mon Dec 04 17:17:02 EST 2023" starttimestamp="1701710826491" timestamp="17395981" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7282" _type="ShellCommand" date="Mon Dec 04 17:17:03 EST 2023" starttimestamp="1701710826491" timestamp="17397492" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7248" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 17:15:10 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17284055">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7283" _type="ShellCommand" date="Mon Dec 04 17:19:03 EST 2023" starttimestamp="1701710826491" timestamp="17516896" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7285" _type="MoveCaretCommand" caretOffset="351" date="Mon Dec 04 17:19:33 EST 2023" docOffset="351" starttimestamp="1701710826491" timestamp="17547355" />
  <Command __id="7286" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:19:34 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17548082" type="Run" />
  <Command __id="7287" _type="ShellCommand" date="Mon Dec 04 17:19:38 EST 2023" starttimestamp="1701710826491" timestamp="17551657" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7288" _type="ShellCommand" date="Mon Dec 04 17:19:39 EST 2023" starttimestamp="1701710826491" timestamp="17552598" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7289" _type="ShellCommand" date="Mon Dec 04 17:19:41 EST 2023" starttimestamp="1701710826491" timestamp="17554806" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7290" _type="ShellCommand" date="Mon Dec 04 17:19:46 EST 2023" starttimestamp="1701710826491" timestamp="17559917" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7291" _type="PasteCommand" date="Mon Dec 04 17:19:47 EST 2023" starttimestamp="1701710826491" timestamp="17561132" />
  <Command __id="7292" _type="ConsoleOutput" date="Mon Dec 04 17:19:47 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17561140" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA () Y
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)"), Diff(INSERT,"LAMBDA () Y"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7293" _type="CopyCommand" date="Mon Dec 04 17:19:54 EST 2023" starttimestamp="1701710826491" timestamp="17568430" />
  <Command __id="7294" _type="PasteCommand" date="Mon Dec 04 17:19:55 EST 2023" starttimestamp="1701710826491" timestamp="17569106" />
  <Command __id="7297" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:20:28 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17601578" type="Debug" />
  <Command __id="7298" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:20:28 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17601578" type="Run" />
  <Command __id="7299" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:20:28 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17601578" type="Debug" />
  <Command __id="7300" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:20:28 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17601578" type="Run" />
  <Command __id="7301" _type="ShellCommand" date="Mon Dec 04 17:20:28 EST 2023" starttimestamp="1701710826491" timestamp="17601884" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7284" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 17:19:33 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17547273">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7302" _type="ShellCommand" date="Mon Dec 04 17:20:34 EST 2023" starttimestamp="1701710826491" timestamp="17608374" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7303" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 17:20:37 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17611225">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.scanner.tokens.Token;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }        public IdentifierAtomImpl(Token token) {        super(token);     }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7304" _type="MoveCaretCommand" caretOffset="373" date="Mon Dec 04 17:20:37 EST 2023" docOffset="373" starttimestamp="1701710826491" timestamp="17611275" />
  <Command __id="7306" _type="MoveCaretCommand" caretOffset="351" date="Mon Dec 04 17:20:38 EST 2023" docOffset="351" starttimestamp="1701710826491" timestamp="17612084" />
  <Command __id="7307" _type="ShellCommand" date="Mon Dec 04 17:20:39 EST 2023" starttimestamp="1701710826491" timestamp="17613334" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7308" _type="ShellCommand" date="Mon Dec 04 17:21:34 EST 2023" starttimestamp="1701710826491" timestamp="17667624" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7309" _type="ShellCommand" date="Mon Dec 04 17:21:43 EST 2023" starttimestamp="1701710826491" timestamp="17676689" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7310" _type="ShellCommand" date="Mon Dec 04 17:21:46 EST 2023" starttimestamp="1701710826491" timestamp="17680242" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7311" _type="ShellCommand" date="Mon Dec 04 17:21:47 EST 2023" starttimestamp="1701710826491" timestamp="17680794" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7312" _type="ShellCommand" date="Mon Dec 04 17:21:47 EST 2023" starttimestamp="1701710826491" timestamp="17681420" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7313" _type="ShellCommand" date="Mon Dec 04 17:21:54 EST 2023" starttimestamp="1701710826491" timestamp="17688015" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7315" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:22:20 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17713827" type="Run" />
  <Command __id="7316" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:22:20 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17713827" type="Run" />
  <Command __id="7317" _type="ShellCommand" date="Mon Dec 04 17:22:23 EST 2023" starttimestamp="1701710826491" timestamp="17717443" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7318" _type="ShellCommand" date="Mon Dec 04 17:22:24 EST 2023" starttimestamp="1701710826491" timestamp="17718008" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7319" _type="ShellCommand" date="Mon Dec 04 17:22:25 EST 2023" starttimestamp="1701710826491" timestamp="17719155" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7320" _type="ShellCommand" date="Mon Dec 04 17:22:26 EST 2023" starttimestamp="1701710826491" timestamp="17720259" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7321" _type="PasteCommand" date="Mon Dec 04 17:22:29 EST 2023" starttimestamp="1701710826491" timestamp="17723121" />
  <Command __id="7322" _type="ConsoleOutput" date="Mon Dec 04 17:22:29 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17723130" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA () Y
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"LAMBDA () Y¶")]]]></diff>
  </Command>
  <Command __id="7323" _type="ShellCommand" date="Mon Dec 04 17:22:31 EST 2023" starttimestamp="1701710826491" timestamp="17724752" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7324" _type="ShellCommand" date="Mon Dec 04 17:22:32 EST 2023" starttimestamp="1701710826491" timestamp="17725758" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7325" _type="ShellCommand" date="Mon Dec 04 17:22:33 EST 2023" starttimestamp="1701710826491" timestamp="17726719" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7326" _type="ShellCommand" date="Mon Dec 04 17:22:33 EST 2023" starttimestamp="1701710826491" timestamp="17727305" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7327" _type="ShellCommand" date="Mon Dec 04 17:22:35 EST 2023" starttimestamp="1701710826491" timestamp="17729218" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7305" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 17:20:38 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17612036">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7328" _type="ShellCommand" date="Mon Dec 04 17:22:47 EST 2023" starttimestamp="1701710826491" timestamp="17741415" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7329" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 17:22:50 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17743684">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7330" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 17:22:50 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="17743753" />
  <Command __id="7331" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 17:22:50 EST 2023" docASTNodeCount="464" docActiveCodeLength="3465" docExpressionCount="229" docLength="4247" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17744145">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		// TODO Auto-generated method stub		"), Diff(DELETE,"throw new UnsupportedOperationException("Unimplemented method 'get"), Diff(INSERT,"return "), Diff(EQUAL,"LambdaEvaluator"), Diff(DELETE,"'")"), Diff(INSERT,".class"), Diff(EQUAL,";	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;	
import main.lisp.evaluator.OperationRegisterer;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import gradingTools.comp524f23.assignment6.ClassRegistryA6;

public class ClassRegistryImpl implements ClassRegistryA6 {

	@Override
	public Class<? extends Evaluator> getAndEvaluator() {
		// TODO Auto-generated method stub
		return AndEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getCondEvaluator() {
		// TODO Auto-generated method stub
		return CondEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {
		// TODO Auto-generated method stub
		return OperationRegistererImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getEvalEvaluator() {
		// TODO Auto-generated method stub
		return EvalEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEEvaluator() {
		// TODO Auto-generated method stub
		return LesserEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEvaluator() {
		// TODO Auto-generated method stub
		return LesserEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getListEvaluator() {
		// TODO Auto-generated method stub
		return ListEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLoadEvaluator() {
		// TODO Auto-generated method stub
		return LoadEvaluator.class;
	}

	@Override
	public Class<?> getMain() {
		// TODO Auto-generated method stub
		return index.class;
	}

	@Override
	public Class<? extends Evaluator> getNotEvaluator() {
		// TODO Auto-generated method stub
		return NotEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getOrEvaluator() {
		// TODO Auto-generated method stub
		return OrEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getQuoteEvaluator() {
		// TODO Auto-generated method stub
		return QuoteEvaluator.class;
	}

	@Override
	public Class<? extends SExpression> getStringFormattingSExpression() {
		// TODO Auto-generated method stub
		return BasicExpressionImpl.class;
	}

	@Override
	public Class<? extends SExpression> getFunctionCallingSExpression() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");
	}

	@Override
	public Class<? extends Evaluator> getFunctionEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getLetEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getBasicFuncallEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");
	}

	@Override
	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {
		return IdentifierAtomImpl.class;
	}

	@Override
	public Class<? extends SExpression> getLambdaCallingSExpression() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getLambdaCallingSExpression'");
	}

	@Override
	public Class<? extends Evaluator> getLambdaEvaluator() {
		// TODO Auto-generated method stub
		return LambdaEvaluator.class;
	}

	@Override
	public Class<? extends Environment> getNestedLexicalEnvironment() {
		// TODO Auto-generated method stub
		return EnvironmentImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getSetqEvaluator() {
		return SetqEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");
	}

}
]]></snapshot>
  </Command>
  <Command __id="7332" _type="MoveCaretCommand" caretOffset="3394" date="Mon Dec 04 17:22:50 EST 2023" docOffset="3394" starttimestamp="1701710826491" timestamp="17744209" />
  <Command __id="7333" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 17:22:51 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17745092">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.scanner.tokens.Token;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }        public IdentifierAtomImpl(Token token) {        super(token);     }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7334" _type="MoveCaretCommand" caretOffset="373" date="Mon Dec 04 17:22:51 EST 2023" docOffset="373" starttimestamp="1701710826491" timestamp="17745160" />
  <Command __id="7335" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 17:22:53 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17746859">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7336" _type="MoveCaretCommand" caretOffset="446" date="Mon Dec 04 17:22:53 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="17746912" />
  <Command __id="7337" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 17:22:53 EST 2023" docASTNodeCount="67" docActiveCodeLength="372" docExpressionCount="47" docLength="372" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17747426">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/QuoteEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.SExpression;public class QuoteEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			return expr.getTail();		}		return expr.getTail().getHead();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7338" _type="MoveCaretCommand" caretOffset="246" date="Mon Dec 04 17:22:53 EST 2023" docOffset="327" starttimestamp="1701710826491" timestamp="17747478" />
  <Command __id="7340" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 17:23:00 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="17753538" />
  <Command __id="7343" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:23:11 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17765139" type="Debug" />
  <Command __id="7344" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:23:11 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17765139" type="Run" />
  <Command __id="7345" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:23:11 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17765139" type="Debug" />
  <Command __id="7346" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:23:11 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17765139" type="Run" />
  <Command __id="7360" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:23:27 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17780804" type="Run" />
  <Command __id="7365" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:23:37 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17791077" type="Run" />
  <Command __id="7407" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:24:49 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17862979" type="Run" />
  <Command __id="7408" _type="MoveCaretCommand" caretOffset="811" date="Mon Dec 04 17:24:49 EST 2023" docOffset="1069" starttimestamp="1701710826491" timestamp="17863031" />
  <Command __id="7409" _type="SelectTextCommand" caretOffset="812" date="Mon Dec 04 17:24:49 EST 2023" end="812" start="809" starttimestamp="1701710826491" timestamp="17863236" />
  <Command __id="7410" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Mon Dec 04 17:24:58 EST 2023" starttimestamp="1701710826491" timestamp="17872282" />
  <Command __id="7411" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:24:58 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17872288" type="Debug" />
  <Command __id="7412" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:24:58 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17872288" type="Run" />
  <Command __id="7413" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:24:58 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17872288" type="Debug" />
  <Command __id="7414" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:24:58 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17872289" type="Run" />
  <Command __id="7424" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:25:09 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17883449" type="Run" />
  <Command __id="7425" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 17:25:09 EST 2023" starttimestamp="1701710826491" timestamp="17883449" />
  <Command __id="7428" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:25:14 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17888043" type="Run" />
  <Command __id="7429" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 17:25:17 EST 2023" starttimestamp="1701710826491" timestamp="17890702" />
  <Command __id="7430" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:25:17 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17890705" type="Run" />
  <Command __id="7431" _type="MoveCaretCommand" caretOffset="629" date="Mon Dec 04 17:25:22 EST 2023" docOffset="887" starttimestamp="1701710826491" timestamp="17895850" />
  <Command __id="7433" _type="InsertStringCommand" date="Mon Dec 04 17:25:22 EST 2023" starttimestamp="1701710826491" timestamp="17896264" timestamp2="17896264">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="7434" _type="MoveCaretCommand" caretOffset="514" date="Mon Dec 04 17:25:23 EST 2023" docOffset="772" starttimestamp="1701710826491" timestamp="17896734" />
  <Command __id="7435" _type="MoveCaretCommand" caretOffset="630" date="Mon Dec 04 17:25:24 EST 2023" docOffset="888" starttimestamp="1701710826491" timestamp="17897737" />
  <Command __id="7437" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 17:25:24 EST 2023" starttimestamp="1701710826491" timestamp="17898439" />
  <Command __id="7439" _type="InsertStringCommand" date="Mon Dec 04 17:25:25 EST 2023" starttimestamp="1701710826491" timestamp="17898780" timestamp2="17898780">
    <data><![CDATA[！]]></data>
  </Command>
  <Command __id="7440" _type="MoveCaretCommand" caretOffset="403" date="Mon Dec 04 17:25:25 EST 2023" docOffset="661" starttimestamp="1701710826491" timestamp="17899360" />
  <Command __id="7441" _type="MoveCaretCommand" caretOffset="630" date="Mon Dec 04 17:25:26 EST 2023" docOffset="888" starttimestamp="1701710826491" timestamp="17900391" />
  <Command __id="7443" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 17:25:27 EST 2023" starttimestamp="1701710826491" timestamp="17900581" />
  <Command __id="7445" _type="InsertStringCommand" date="Mon Dec 04 17:25:27 EST 2023" starttimestamp="1701710826491" timestamp="17901066" timestamp2="17901066">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="7446" _type="MoveCaretCommand" caretOffset="512" date="Mon Dec 04 17:25:28 EST 2023" docOffset="770" starttimestamp="1701710826491" timestamp="17901535" />
  <Command __id="7447" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 17:25:28 EST 2023" starttimestamp="1701710826491" timestamp="17901664" />
  <Command __id="7448" _type="EclipseCommand" commandID="" date="Mon Dec 04 17:25:28 EST 2023" starttimestamp="1701710826491" timestamp="17901762" />
  <Command __id="7449" _type="EclipseCommand" commandID="" date="Mon Dec 04 17:25:28 EST 2023" starttimestamp="1701710826491" timestamp="17901769" />
  <Command __id="7450" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:25:28 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17901803" type="Run" />
  <Command __id="7451" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:25:28 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17901803" type="Run" />
  <Command __id="7339" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 17:22:59 EST 2023" docASTNodeCount="209" docActiveCodeLength="1203" docExpressionCount="141" docLength="1203" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17753472">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import java.util.ArrayList;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.NilAtom;
import main.lisp.evaluator.function.LambdaFactory;
import main.lisp.parser.terms.SExpression;

public class LambdaEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
        expr = expr.getTail();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());
        return LambdaFactory.newInstance(ids, expr.getHead().getTail());
	}

    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {
        ArrayList<IdentifierAtom> ids = new ArrayList<>();
        while(expr instanceof NilAtom) {
            ids.add((IdentifierAtom) expr.getHead());
            expr = expr.getTail();
        }
        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];
        for(IdentifierAtom id : ids) {
            idArray[ids.indexOf(id)] = id;
        }
        return idArray;
    }
}]]></snapshot>
  </Command>
  <DocumentChange __id="7432" _type="Insert" date="Mon Dec 04 17:25:22 EST 2023" docASTNodeCount="210" docActiveCodeLength="1204" docExpressionCount="142" docLength="1204" length="1" offset="887" starttimestamp="1701710826491" timestamp="17896261">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="7436" _type="Delete" date="Mon Dec 04 17:25:24 EST 2023" docASTNodeCount="209" docActiveCodeLength="1203" docExpressionCount="141" docLength="1203" endLine="26" length="1" offset="887" startLine="26" starttimestamp="1701710826491" timestamp="17898437">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="7438" _type="Insert" date="Mon Dec 04 17:25:25 EST 2023" docASTNodeCount="209" docActiveCodeLength="1204" docExpressionCount="141" docLength="1204" length="1" offset="887" starttimestamp="1701710826491" timestamp="17898766">
    <text><![CDATA[！]]></text>
  </DocumentChange>
  <DocumentChange __id="7442" _type="Delete" date="Mon Dec 04 17:25:27 EST 2023" docASTNodeCount="209" docActiveCodeLength="1203" docExpressionCount="141" docLength="1203" endLine="26" length="1" offset="887" startLine="26" starttimestamp="1701710826491" timestamp="17900578">
    <text><![CDATA[！]]></text>
  </DocumentChange>
  <DocumentChange __id="7444" _type="Insert" date="Mon Dec 04 17:25:27 EST 2023" docASTNodeCount="210" docActiveCodeLength="1204" docExpressionCount="142" docLength="1204" length="1" offset="887" starttimestamp="1701710826491" timestamp="17901064">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <Command __id="7452" _type="MoveCaretCommand" caretOffset="630" date="Mon Dec 04 17:25:29 EST 2023" docOffset="888" starttimestamp="1701710826491" timestamp="17902933" />
  <DocumentChange __id="7453" _type="Insert" date="Mon Dec 04 17:25:31 EST 2023" docASTNodeCount="212" docActiveCodeLength="1205" docExpressionCount="143" docLength="1205" length="1" offset="888" starttimestamp="1701710826491" timestamp="17904557">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <Command __id="7454" _type="InsertStringCommand" date="Mon Dec 04 17:25:31 EST 2023" starttimestamp="1701710826491" timestamp="17904560" timestamp2="17904560">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="7455" _type="MoveCaretCommand" caretOffset="655" date="Mon Dec 04 17:25:31 EST 2023" docOffset="913" starttimestamp="1701710826491" timestamp="17905372" />
  <Command __id="7456" _type="MoveCaretCommand" caretOffset="655" date="Mon Dec 04 17:25:32 EST 2023" docOffset="913" starttimestamp="1701710826491" timestamp="17905820" />
  <Command __id="7471" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:25:41 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17914993" type="Run" />
  <Command __id="7472" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:25:41 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17914993" type="Run" />
  <Command __id="7473" _type="PasteCommand" date="Mon Dec 04 17:25:42 EST 2023" starttimestamp="1701710826491" timestamp="17915721" />
  <Command __id="7474" _type="ConsoleOutput" date="Mon Dec 04 17:25:42 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17916040" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA (X Y) Y
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"LAMBDA ("), Diff(INSERT,"X Y"), Diff(EQUAL,") Y¶")]]]></diff>
  </Command>
  <Command __id="7475" _type="ShellCommand" date="Mon Dec 04 17:25:48 EST 2023" starttimestamp="1701710826491" timestamp="17921715" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7476" _type="ShellCommand" date="Mon Dec 04 17:25:51 EST 2023" starttimestamp="1701710826491" timestamp="17924806" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7477" _type="SelectTextCommand" caretOffset="460" date="Mon Dec 04 17:26:08 EST 2023" end="464" start="460" starttimestamp="1701710826491" timestamp="17942504" />
  <Command __id="7478" _type="SelectTextCommand" caretOffset="454" date="Mon Dec 04 17:26:10 EST 2023" end="465" start="454" starttimestamp="1701710826491" timestamp="17943973" />
  <Command __id="7479" _type="CheckStyleCommand" date="Mon Dec 04 17:26:10 EST 2023" starttimestamp="1701710826491" timestamp="17943982">
    <CSVRow><![CDATA[115,Mon Dec 04 17:25:33 EST 2023,true,index/LambdaEvaluator.java,tags,index.LambdaEvaluator,@LambdaEvaluator]]></CSVRow>
  </Command>
  <Command __id="7481" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 17:26:10 EST 2023" starttimestamp="1701710826491" timestamp="17944253" />
  <Command __id="7482" _type="MoveCaretCommand" caretOffset="403" date="Mon Dec 04 17:26:11 EST 2023" docOffset="661" starttimestamp="1701710826491" timestamp="17944820" />
  <DocumentChange __id="7457" _type="Insert" date="Mon Dec 04 17:25:32 EST 2023" docASTNodeCount="211" docActiveCodeLength="1206" docExpressionCount="143" docLength="1206" length="1" offset="913" starttimestamp="1701710826491" timestamp="17905929">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="7480" _type="Delete" date="Mon Dec 04 17:26:10 EST 2023" docASTNodeCount="208" docActiveCodeLength="1195" docExpressionCount="140" docLength="1195" endLine="21" length="11" offset="712" startLine="21" starttimestamp="1701710826491" timestamp="17944244">
    <text><![CDATA[.getHead().]]></text>
  </DocumentChange>
  <Command __id="7483" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 17:26:12 EST 2023" docOffset="711" starttimestamp="1701710826491" timestamp="17945956" />
  <Command __id="7484" _type="MoveCaretCommand" caretOffset="453" date="Mon Dec 04 17:26:13 EST 2023" docOffset="711" starttimestamp="1701710826491" timestamp="17946740" />
  <Command __id="7485" _type="MoveCaretCommand" caretOffset="454" date="Mon Dec 04 17:26:13 EST 2023" docOffset="712" starttimestamp="1701710826491" timestamp="17947323" />
  <Command __id="7498" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:26:19 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17953498" type="Run" />
  <Command __id="7499" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 17:26:19 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17953498" type="Run" />
  <Command __id="7500" _type="PasteCommand" date="Mon Dec 04 17:26:20 EST 2023" starttimestamp="1701710826491" timestamp="17954309" />
  <Command __id="7501" _type="ConsoleOutput" date="Mon Dec 04 17:26:21 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17954559" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA (X Y) (+ X Y)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"LAMBDA (X Y) "), Diff(DELETE,"Y"), Diff(INSERT,"(+ X Y)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7513" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 17:26:33 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17967303" type="Run" />
  <Command __id="7514" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 17:26:33 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17967303" type="Run" />
  <Command __id="7515" _type="ShellCommand" date="Mon Dec 04 17:26:34 EST 2023" starttimestamp="1701710826491" timestamp="17967610" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7516" _type="ConsoleOutput" date="Mon Dec 04 17:26:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17971348" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"LAMBDA (X Y) (+ X Y)"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7517" _type="ConsoleOutput" date="Mon Dec 04 17:26:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17971349" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7518" _type="ConsoleOutput" date="Mon Dec 04 17:26:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17971354" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7519" _type="ConsoleOutput" date="Mon Dec 04 17:26:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17971356" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,

Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"5"), Diff(INSERT,"7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7520" _type="ConsoleOutput" date="Mon Dec 04 17:26:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17971357" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:"), Diff(INSERT,"Main"), Diff(EQUAL,"Class"), Diff(DELETE,"Registry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶"), Diff(DELETE,"¶Test execution time (ms):7¶")]]]></diff>
  </Command>
  <Command __id="7521" _type="ConsoleOutput" date="Mon Dec 04 17:26:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17971379" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):29
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):29"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7522" _type="ConsoleOutput" date="Mon Dec 04 17:26:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17971380" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

java.lang.IllegalStateException: Expression does not start with an operator
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):29"), Diff(INSERT,"Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶java.lang.IllegalStateException: Expression does not start with an operator"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7523" _type="ConsoleOutput" date="Mon Dec 04 17:26:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17971382" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶java.lang.IllegalStateException: Expression does not start with an operator"), Diff(INSERT,"	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7524" _type="ConsoleOutput" date="Mon Dec 04 17:26:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="17971416" type="ConsoleOutput">
    <outputString><![CDATA[	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator"), Diff(INSERT,"java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl"), Diff(EQUAL,".java:"), Diff(DELETE,"18"), Diff(INSERT,"43"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.parser.terms.BasicExpression.eval(BasicExpression"), Diff(INSERT,"java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"26"), Diff(INSERT,"50"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation"), Diff(INSERT,"org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner"), Diff(EQUAL,".java:"), Diff(DELETE,"92"), Diff(INSERT,"325"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvalu"), Diff(INSERT,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,"Registerer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"g.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"100"), Diff(INSERT,"363"), Diff(EQUAL,")¶	at grad"), Diff(DELETE,"ingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer"), Diff(INSERT,"er.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"133"), Diff(INSERT,"219"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"65"), Diff(INSERT,"1531"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"21"), Diff(INSERT,"6638"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionCheck"), Diff(INSERT,"java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Contain"), Diff(EQUAL,"er.java:"), Diff(DELETE,"47"), Diff(INSERT,"2263"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"231"), Diff(INSERT,"4918"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"111"), Diff(INSERT,"2307"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="7525" _type="ExceptionCommand" date="Mon Dec 04 17:26:37 EST 2023" starttimestamp="1701710826491" timestamp="17971424" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):34
Test Result:LispLambdaChecker,0.0% complete,0.0,10.0,Expected strings:3actual string 

java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="7526" _type="ShellCommand" date="Mon Dec 04 17:26:47 EST 2023" starttimestamp="1701710826491" timestamp="17981086" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7528" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:27:03 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17996610" type="Debug" />
  <Command __id="7529" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 17:27:03 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17996610" type="Run" />
  <Command __id="7530" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:27:03 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17996610" type="Debug" />
  <Command __id="7531" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 17:27:03 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17996610" type="Run" />
  <Command __id="7532" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:27:03 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17997355" type="Debug" />
  <Command __id="7533" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 17:27:03 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17997355" type="Run" />
  <Command __id="7534" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 17:27:03 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="17997355" type="Debug" />
  <Command __id="7535" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 17:27:03 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="17997355" type="Run" />
  <Command __id="7536" _type="BalloonCommand" date="Mon Dec 04 17:27:06 EST 2023" message="*******************************************
Worked 60 minutes(fixed)/60 minutes(context based) from
Mon Dec 04 16:27:06 EST 2023 to Mon Dec 04 17:27:03 EST 2023
Edited 1 Projects: 
	Assignment5
Edited 1 Files: 
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java
Number of insert: 6
Number of delete: 13
" starttimestamp="1701710826491" timestamp="18000054">
    <fineGrainedWorkTime><![CDATA[60]]></fineGrainedWorkTime>
    <insert><![CDATA[6]]></insert>
    <startTime><![CDATA[1701725226544]]></startTime>
    <endTime><![CDATA[1701728823846]]></endTime>
    <workTime><![CDATA[60]]></workTime>
    <delete><![CDATA[13]]></delete>
  </Command>
  <Command __id="7537" _type="LocalChecksRawCommand" date="Mon Dec 04 17:27:06 EST 2023" starttimestamp="1701710826491" timestamp="18000083">
    <CSVRow><![CDATA[116,Mon Dec 04 17:26:37 EST 2023,41,0,LispLambdaSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,51,0,true,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) LispLambdaChecker2-(0.0/10.0) LispLambdaChecker3-(0.0/10.0) LoadLambdaChecker-(0.0/15.0) LoadLambdaChecker2-(0.0/15.0) LoadLambdaChecker3-(0.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="7538" _type="LocalChecksRawCommand" date="Mon Dec 04 17:27:06 EST 2023" starttimestamp="1701710826491" timestamp="18000083">
    <CSVRow><![CDATA[116,Mon Dec 04 17:26:37 EST 2023,41,0,LispLambdaSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,51,0,true,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) LispLambdaChecker2-(0.0/10.0) LispLambdaChecker3-(0.0/10.0) LoadLambdaChecker-(0.0/15.0) LoadLambdaChecker2-(0.0/15.0) LoadLambdaChecker3-(0.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="7539" _type="ShellCommand" date="Mon Dec 04 17:27:11 EST 2023" starttimestamp="1701710826491" timestamp="18005317" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7540" _type="ShellCommand" date="Mon Dec 04 17:27:13 EST 2023" starttimestamp="1701710826491" timestamp="18007127" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7541" _type="ShellCommand" date="Mon Dec 04 19:25:53 EST 2023" starttimestamp="1701710826491" timestamp="25127227" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7542" _type="ShellCommand" date="Mon Dec 04 19:26:16 EST 2023" starttimestamp="1701710826491" timestamp="25150501" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7543" _type="ShellCommand" date="Mon Dec 04 19:26:28 EST 2023" starttimestamp="1701710826491" timestamp="25162355" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7544" _type="ShellCommand" date="Mon Dec 04 19:26:39 EST 2023" starttimestamp="1701710826491" timestamp="25172948" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7545" _type="ShellCommand" date="Mon Dec 04 19:26:42 EST 2023" starttimestamp="1701710826491" timestamp="25176408" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7546" _type="ShellCommand" date="Mon Dec 04 19:26:43 EST 2023" starttimestamp="1701710826491" timestamp="25176734" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7547" _type="ShellCommand" date="Mon Dec 04 19:26:43 EST 2023" starttimestamp="1701710826491" timestamp="25177241" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7548" _type="MoveCaretCommand" caretOffset="89" date="Mon Dec 04 19:26:44 EST 2023" docOffset="347" starttimestamp="1701710826491" timestamp="25178197" />
  <Command __id="7549" _type="ShellCommand" date="Mon Dec 04 19:26:44 EST 2023" starttimestamp="1701710826491" timestamp="25178459" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="7486" _type="Insert" date="Mon Dec 04 17:26:14 EST 2023" docASTNodeCount="209" docActiveCodeLength="1196" docExpressionCount="141" docLength="1196" length="1" offset="712" starttimestamp="1701710826491" timestamp="17948348">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="7550" _type="ShellCommand" date="Mon Dec 04 19:26:48 EST 2023" starttimestamp="1701710826491" timestamp="25182078" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7551" _type="ShellCommand" date="Mon Dec 04 19:26:48 EST 2023" starttimestamp="1701710826491" timestamp="25182489" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7552" _type="ShellCommand" date="Mon Dec 04 19:26:49 EST 2023" starttimestamp="1701710826491" timestamp="25183001" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7553" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:26:52 EST 2023" docASTNodeCount="233" docActiveCodeLength="1448" docExpressionCount="171" docLength="1448" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25185904">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.parser.terms.AbstractSExpression;import main.lisp.parser.terms.Atom;import main.lisp.parser.terms.BasicExpression;import main.lisp.parser.terms.SExpression;public class BasicExpressionImpl extends BasicExpression implements SExpression{		public BasicExpressionImpl(SExpression head, SExpression tail) {		super(head, tail);	}	@Override	public boolean isList() {		if((this.getTail() instanceof Atom)) {			return this.getTail().isNIL();		}else {			return this.getTail().isList();		}	}	@Override	public String toStringAsSExpressionDeep() {		if(this.isAtom()) {			return "(" + this.toString() + ")";		}		return "(" + this.getHead().toStringAsSExpressionDeep() + " " + "." + " " +				this.getTail().toStringAsSExpressionDeep() + ")";	}	@Override	public String toStringAsSExpression() {		return "(" + this.getHead().toString() + " " + "." + " " +				this.getTail().toString() + ")";	}	@Override	public String toStringAsList() {		return "("+((AbstractSExpression)this).toStringAsListHelperPublic()+")";	}	@Override	public String toString() {		return this.isList()? this.toStringAsList() : this.toStringAsSExpression();	}	@Override	public String toStringAsListHelperPublic() {		if(this.getTail().isNIL()) {			return this.getHead().toString();		}else {			return this.getHead().toString() + " " + ((AbstractSExpression)this.getTail()).toStringAsListHelperPublic();			}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7554" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 19:26:52 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="25185965" />
  <Command __id="7556" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 19:27:02 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="25196266" />
  <Command __id="7557" _type="ShellCommand" date="Mon Dec 04 19:27:03 EST 2023" starttimestamp="1701710826491" timestamp="25196732" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7555" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:27:02 EST 2023" docASTNodeCount="226" docActiveCodeLength="1981" docExpressionCount="155" docLength="1981" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25196192">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());	"), Diff(INSERT,"	BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LAMBDA", new LambdaEvaluator());	"), Diff(EQUAL,"}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.OperationRegisterer;
import main.lisp.evaluator.BasicOperationRegisterer;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{
	
	public static void registerBasic() {
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());
	}
	
	public static void registerArithmetic() {
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());
	}
	
	public static void registerLogic() {
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());
	}
	
	public static void registerAdvance() {
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LAMBDA", new LambdaEvaluator());
	}
	

	@Override
	public void registerOperations() {
		registerAll();
	}
	
	public static void registerAll() {
		registerBasic();
		registerArithmetic();
		registerLogic();
		registerAdvance();
	}

}
]]></snapshot>
  </Command>
  <Command __id="7558" _type="ShellCommand" date="Mon Dec 04 19:27:11 EST 2023" starttimestamp="1701710826491" timestamp="25205059" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7560" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 19:27:12 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="25206409" />
  <Command __id="7561" _type="MoveCaretCommand" caretOffset="252" date="Mon Dec 04 19:27:14 EST 2023" docOffset="378" starttimestamp="1701710826491" timestamp="25207732" />
  <Command __id="7562" _type="MoveCaretCommand" caretOffset="279" date="Mon Dec 04 19:27:14 EST 2023" docOffset="405" starttimestamp="1701710826491" timestamp="25208155" />
  <Command __id="7563" _type="MoveCaretCommand" caretOffset="320" date="Mon Dec 04 19:27:15 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="25208806" />
  <Command __id="7564" _type="MoveCaretCommand" caretOffset="354" date="Mon Dec 04 19:27:15 EST 2023" docOffset="480" starttimestamp="1701710826491" timestamp="25209316" />
  <Command __id="7565" _type="MoveCaretCommand" caretOffset="364" date="Mon Dec 04 19:27:16 EST 2023" docOffset="490" starttimestamp="1701710826491" timestamp="25209774" />
  <Command __id="7566" _type="MoveCaretCommand" caretOffset="463" date="Mon Dec 04 19:27:17 EST 2023" docOffset="589" starttimestamp="1701710826491" timestamp="25210647" />
  <Command __id="7567" _type="ShellCommand" date="Mon Dec 04 19:27:19 EST 2023" starttimestamp="1701710826491" timestamp="25212647" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7568" _type="ShellCommand" date="Mon Dec 04 19:27:19 EST 2023" starttimestamp="1701710826491" timestamp="25213388" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7569" _type="ShellCommand" date="Mon Dec 04 19:27:22 EST 2023" starttimestamp="1701710826491" timestamp="25215857" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7570" _type="ShellCommand" date="Mon Dec 04 19:27:23 EST 2023" starttimestamp="1701710826491" timestamp="25216745" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7571" _type="ShellCommand" date="Mon Dec 04 19:27:27 EST 2023" starttimestamp="1701710826491" timestamp="25220772" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7572" _type="ShellCommand" date="Mon Dec 04 19:27:42 EST 2023" starttimestamp="1701710826491" timestamp="25235591" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7573" _type="ShellCommand" date="Mon Dec 04 19:27:46 EST 2023" starttimestamp="1701710826491" timestamp="25240489" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7578" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 19:28:50 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="25304245" type="Debug" />
  <Command __id="7579" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 19:28:50 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25304245" type="Run" />
  <Command __id="7580" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 19:28:50 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="25304245" type="Debug" />
  <Command __id="7581" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 19:28:50 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25304245" type="Run" />
  <Command __id="7582" _type="BalloonCommand" date="Mon Dec 04 19:29:01 EST 2023" message="*******************************************
Worked 60 minutes(fixed)/60 minutes(context based) from
Mon Dec 04 17:27:06 EST 2023 to Mon Dec 04 19:28:50 EST 2023
Edited 0 Projects: 
Edited 0 Files: 
Number of insert: 0
Number of delete: 0
" starttimestamp="1701710826491" timestamp="25314589">
    <fineGrainedWorkTime><![CDATA[60]]></fineGrainedWorkTime>
    <insert><![CDATA[0]]></insert>
    <startTime><![CDATA[1701728826545]]></startTime>
    <endTime><![CDATA[1701736130736]]></endTime>
    <workTime><![CDATA[60]]></workTime>
    <delete><![CDATA[0]]></delete>
  </Command>
  <Command __id="7583" _type="ShellCommand" date="Mon Dec 04 19:29:02 EST 2023" starttimestamp="1701710826491" timestamp="25316022" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7584" _type="ShellCommand" date="Mon Dec 04 19:29:02 EST 2023" starttimestamp="1701710826491" timestamp="25316381" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7585" _type="ShellCommand" date="Mon Dec 04 19:29:03 EST 2023" starttimestamp="1701710826491" timestamp="25316912" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7586" _type="ShellCommand" date="Mon Dec 04 19:29:11 EST 2023" starttimestamp="1701710826491" timestamp="25324918" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7587" _type="ShellCommand" date="Mon Dec 04 19:29:12 EST 2023" starttimestamp="1701710826491" timestamp="25325971" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7588" _type="ShellCommand" date="Mon Dec 04 19:29:12 EST 2023" starttimestamp="1701710826491" timestamp="25326016" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7589" _type="ShellCommand" date="Mon Dec 04 19:29:16 EST 2023" starttimestamp="1701710826491" timestamp="25329624" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7590" _type="MoveCaretCommand" caretOffset="150" date="Mon Dec 04 19:29:16 EST 2023" docOffset="276" starttimestamp="1701710826491" timestamp="25329649" />
  <Command __id="7591" _type="ShellCommand" date="Mon Dec 04 19:29:17 EST 2023" starttimestamp="1701710826491" timestamp="25330782" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7592" _type="ShellCommand" date="Mon Dec 04 19:29:28 EST 2023" starttimestamp="1701710826491" timestamp="25341770" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7593" _type="MoveCaretCommand" caretOffset="463" date="Mon Dec 04 19:29:28 EST 2023" docOffset="589" starttimestamp="1701710826491" timestamp="25341845" />
  <Command __id="7594" _type="ShellCommand" date="Mon Dec 04 19:29:37 EST 2023" starttimestamp="1701710826491" timestamp="25351150" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7595" _type="ShellCommand" date="Mon Dec 04 19:29:38 EST 2023" starttimestamp="1701710826491" timestamp="25351811" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7596" _type="ShellCommand" date="Mon Dec 04 19:29:39 EST 2023" starttimestamp="1701710826491" timestamp="25353309" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7597" _type="ShellCommand" date="Mon Dec 04 19:30:23 EST 2023" starttimestamp="1701710826491" timestamp="25397508" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7598" _type="MoveCaretCommand" caretOffset="463" date="Mon Dec 04 19:30:31 EST 2023" docOffset="589" starttimestamp="1701710826491" timestamp="25404521" />
  <Command __id="7599" _type="MoveCaretCommand" caretOffset="663" date="Mon Dec 04 19:30:31 EST 2023" docOffset="789" starttimestamp="1701710826491" timestamp="25405267" />
  <Command __id="7600" _type="MoveCaretCommand" caretOffset="463" date="Mon Dec 04 19:30:32 EST 2023" docOffset="589" starttimestamp="1701710826491" timestamp="25406095" />
  <Command __id="7601" _type="MoveCaretCommand" caretOffset="320" date="Mon Dec 04 19:30:33 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="25406752" />
  <Command __id="7602" _type="MoveCaretCommand" caretOffset="252" date="Mon Dec 04 19:30:33 EST 2023" docOffset="378" starttimestamp="1701710826491" timestamp="25407103" />
  <Command __id="7603" _type="MoveCaretCommand" caretOffset="320" date="Mon Dec 04 19:30:33 EST 2023" docOffset="446" starttimestamp="1701710826491" timestamp="25407393" />
  <Command __id="7604" _type="MoveCaretCommand" caretOffset="364" date="Mon Dec 04 19:30:34 EST 2023" docOffset="490" starttimestamp="1701710826491" timestamp="25407738" />
  <Command __id="7605" _type="MoveCaretCommand" caretOffset="279" date="Mon Dec 04 19:30:34 EST 2023" docOffset="405" starttimestamp="1701710826491" timestamp="25408192" />
  <Command __id="7606" _type="MoveCaretCommand" caretOffset="237" date="Mon Dec 04 19:30:35 EST 2023" docOffset="363" starttimestamp="1701710826491" timestamp="25409352" />
  <Command __id="7607" _type="MoveCaretCommand" caretOffset="216" date="Mon Dec 04 19:30:36 EST 2023" docOffset="342" starttimestamp="1701710826491" timestamp="25410124" />
  <Command __id="7608" _type="MoveCaretCommand" caretOffset="148" date="Mon Dec 04 19:30:36 EST 2023" docOffset="274" starttimestamp="1701710826491" timestamp="25410389" />
  <Command __id="7609" _type="MoveCaretCommand" caretOffset="252" date="Mon Dec 04 19:30:38 EST 2023" docOffset="378" starttimestamp="1701710826491" timestamp="25411642" />
  <Command __id="7610" _type="MoveCaretCommand" caretOffset="354" date="Mon Dec 04 19:30:38 EST 2023" docOffset="480" starttimestamp="1701710826491" timestamp="25411896" />
  <Command __id="7611" _type="MoveCaretCommand" caretOffset="399" date="Mon Dec 04 19:30:38 EST 2023" docOffset="525" starttimestamp="1701710826491" timestamp="25412093" />
  <Command __id="7612" _type="ShellCommand" date="Mon Dec 04 19:30:40 EST 2023" starttimestamp="1701710826491" timestamp="25413592" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7559" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:27:12 EST 2023" docASTNodeCount="233" docActiveCodeLength="1448" docExpressionCount="171" docLength="1448" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25206356">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.parser.terms.AbstractSExpression;import main.lisp.parser.terms.Atom;import main.lisp.parser.terms.BasicExpression;import main.lisp.parser.terms.SExpression;public class BasicExpressionImpl extends BasicExpression implements SExpression{		public BasicExpressionImpl(SExpression head, SExpression tail) {		super(head, tail);	}	@Override	public boolean isList() {		if((this.getTail() instanceof Atom)) {			return this.getTail().isNIL();		}else {			return this.getTail().isList();		}	}	@Override	public String toStringAsSExpressionDeep() {		if(this.isAtom()) {			return "(" + this.toString() + ")";		}		return "(" + this.getHead().toStringAsSExpressionDeep() + " " + "." + " " +				this.getTail().toStringAsSExpressionDeep() + ")";	}	@Override	public String toStringAsSExpression() {		return "(" + this.getHead().toString() + " " + "." + " " +				this.getTail().toString() + ")";	}	@Override	public String toStringAsList() {		return "("+((AbstractSExpression)this).toStringAsListHelperPublic()+")";	}	@Override	public String toString() {		return this.isList()? this.toStringAsList() : this.toStringAsSExpression();	}	@Override	public String toStringAsListHelperPublic() {		if(this.getTail().isNIL()) {			return this.getHead().toString();		}else {			return this.getHead().toString() + " " + ((AbstractSExpression)this.getTail()).toStringAsListHelperPublic();			}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7613" _type="ShellCommand" date="Mon Dec 04 19:30:50 EST 2023" starttimestamp="1701710826491" timestamp="25424181" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7615" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 19:31:02 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="25436220" />
  <Command __id="7616" _type="ShellCommand" date="Mon Dec 04 19:31:03 EST 2023" starttimestamp="1701710826491" timestamp="25436920" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7617" _type="ShellCommand" date="Mon Dec 04 19:31:13 EST 2023" starttimestamp="1701710826491" timestamp="25446518" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7618" _type="ShellCommand" date="Mon Dec 04 19:31:20 EST 2023" starttimestamp="1701710826491" timestamp="25453599" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7619" _type="ShellCommand" date="Mon Dec 04 19:32:01 EST 2023" starttimestamp="1701710826491" timestamp="25494888" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7620" _type="EclipseCommand" commandID="" date="Mon Dec 04 19:32:01 EST 2023" starttimestamp="1701710826491" timestamp="25494912" />
  <Command __id="7621" _type="EclipseCommand" commandID="" date="Mon Dec 04 19:32:01 EST 2023" starttimestamp="1701710826491" timestamp="25494918" />
  <Command __id="7623" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 19:32:01 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="25495098" />
  <Command __id="7624" _type="MoveCaretCommand" caretOffset="15" date="Mon Dec 04 19:32:02 EST 2023" docOffset="15" starttimestamp="1701710826491" timestamp="25496061" />
  <Command __id="7625" _type="ShellCommand" date="Mon Dec 04 19:32:02 EST 2023" starttimestamp="1701710826491" timestamp="25496273" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7614" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:31:02 EST 2023" docASTNodeCount="226" docActiveCodeLength="1981" docExpressionCount="155" docLength="1981" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25436142">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LAMBDA", new LambdaEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7622" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:32:01 EST 2023" docASTNodeCount="6" docActiveCodeLength="63" docExpressionCount="2" docLength="63" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25495037">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

public class BasicExpressionEvaluatorImpl {

}
]]></snapshot>
  </Command>
  <Command __id="7626" _type="ShellCommand" date="Mon Dec 04 19:32:10 EST 2023" starttimestamp="1701710826491" timestamp="25504194" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="7627" _type="Insert" date="Mon Dec 04 19:32:12 EST 2023" docASTNodeCount="14" docActiveCodeLength="100" docExpressionCount="9" docLength="100" length="37" offset="15" repeat="19" starttimestamp="1701710826491" timestamp="25505615" timestamp2="25510978">
    <text><![CDATA[
import main.lisp.evaluator.BasicExp
]]></text>
  </DocumentChange>
  <Command __id="7628" _type="InsertStringCommand" date="Mon Dec 04 19:32:12 EST 2023" starttimestamp="1701710826491" timestamp="25505616" timestamp2="25505616">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7630" _type="InsertStringCommand" date="Mon Dec 04 19:32:12 EST 2023" starttimestamp="1701710826491" timestamp="25506029" timestamp2="25506029">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7631" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Dec 04 19:32:12 EST 2023" starttimestamp="1701710826491" timestamp="25506263" />
  <Command __id="7633" _type="InsertStringCommand" date="Mon Dec 04 19:32:13 EST 2023" starttimestamp="1701710826491" timestamp="25507046" timestamp2="25507046">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7635" _type="InsertStringCommand" date="Mon Dec 04 19:32:13 EST 2023" starttimestamp="1701710826491" timestamp="25507139" timestamp2="25507139">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="7637" _type="InsertStringCommand" date="Mon Dec 04 19:32:13 EST 2023" starttimestamp="1701710826491" timestamp="25507256" timestamp2="25507256">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="7639" _type="InsertStringCommand" date="Mon Dec 04 19:32:13 EST 2023" starttimestamp="1701710826491" timestamp="25507408" timestamp2="25507408">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7641" _type="InsertStringCommand" date="Mon Dec 04 19:32:14 EST 2023" starttimestamp="1701710826491" timestamp="25507511" timestamp2="25507511">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7643" _type="InsertStringCommand" date="Mon Dec 04 19:32:14 EST 2023" starttimestamp="1701710826491" timestamp="25507664" timestamp2="25507664">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7645" _type="InsertStringCommand" date="Mon Dec 04 19:32:14 EST 2023" starttimestamp="1701710826491" timestamp="25507764" timestamp2="25507764">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7647" _type="PasteCommand" date="Mon Dec 04 19:32:14 EST 2023" starttimestamp="1701710826491" timestamp="25507936" />
  <Command __id="7649" _type="InsertStringCommand" date="Mon Dec 04 19:32:14 EST 2023" starttimestamp="1701710826491" timestamp="25508211" timestamp2="25508211">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7650" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Dec 04 19:32:14 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="25508217" />
  <Command __id="7659" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Dec 04 19:32:17 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="25511141" />
  <Command __id="7661" _type="InsertStringCommand" date="Mon Dec 04 19:32:17 EST 2023" starttimestamp="1701710826491" timestamp="25511147" timestamp2="25511147">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7662" _type="MoveCaretCommand" caretOffset="112" date="Mon Dec 04 19:32:19 EST 2023" docOffset="112" starttimestamp="1701710826491" timestamp="25512922" />
  <Command __id="7664" _type="InsertStringCommand" date="Mon Dec 04 19:32:20 EST 2023" starttimestamp="1701710826491" timestamp="25513576" timestamp2="25513576">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7666" _type="InsertStringCommand" date="Mon Dec 04 19:32:20 EST 2023" starttimestamp="1701710826491" timestamp="25513681" timestamp2="25513681">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="7668" _type="InsertStringCommand" date="Mon Dec 04 19:32:20 EST 2023" starttimestamp="1701710826491" timestamp="25513782" timestamp2="25513782">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="7670" _type="InsertStringCommand" date="Mon Dec 04 19:32:20 EST 2023" starttimestamp="1701710826491" timestamp="25513965" timestamp2="25513965">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="7672" _type="InsertStringCommand" date="Mon Dec 04 19:32:20 EST 2023" starttimestamp="1701710826491" timestamp="25514085" timestamp2="25514085">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7674" _type="InsertStringCommand" date="Mon Dec 04 19:32:20 EST 2023" starttimestamp="1701710826491" timestamp="25514222" timestamp2="25514222">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="7676" _type="InsertStringCommand" date="Mon Dec 04 19:32:20 EST 2023" starttimestamp="1701710826491" timestamp="25514306" timestamp2="25514306">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7678" _type="InsertStringCommand" date="Mon Dec 04 19:32:20 EST 2023" starttimestamp="1701710826491" timestamp="25514398" timestamp2="25514398">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7680" _type="InsertStringCommand" date="Mon Dec 04 19:32:20 EST 2023" starttimestamp="1701710826491" timestamp="25514480" timestamp2="25514480">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7682" _type="InsertStringCommand" date="Mon Dec 04 19:32:21 EST 2023" starttimestamp="1701710826491" timestamp="25514587" timestamp2="25514587">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7684" _type="InsertStringCommand" date="Mon Dec 04 19:32:21 EST 2023" starttimestamp="1701710826491" timestamp="25514835" timestamp2="25514835">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7686" _type="InsertStringCommand" date="Mon Dec 04 19:32:22 EST 2023" starttimestamp="1701710826491" timestamp="25515615" timestamp2="25515615">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="7688" _type="InsertStringCommand" date="Mon Dec 04 19:32:22 EST 2023" starttimestamp="1701710826491" timestamp="25515885" timestamp2="25515885">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7690" _type="InsertStringCommand" date="Mon Dec 04 19:32:22 EST 2023" starttimestamp="1701710826491" timestamp="25516113" timestamp2="25516113">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7692" _type="InsertStringCommand" date="Mon Dec 04 19:32:22 EST 2023" starttimestamp="1701710826491" timestamp="25516215" timestamp2="25516215">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7694" _type="InsertStringCommand" date="Mon Dec 04 19:32:22 EST 2023" starttimestamp="1701710826491" timestamp="25516364" timestamp2="25516364">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="7696" _type="InsertStringCommand" date="Mon Dec 04 19:32:23 EST 2023" starttimestamp="1701710826491" timestamp="25516619" timestamp2="25516619">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="7698" _type="InsertStringCommand" date="Mon Dec 04 19:32:23 EST 2023" starttimestamp="1701710826491" timestamp="25516860" timestamp2="25516860">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="7700" _type="InsertStringCommand" date="Mon Dec 04 19:32:23 EST 2023" starttimestamp="1701710826491" timestamp="25517008" timestamp2="25517008">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="7702" _type="InsertStringCommand" date="Mon Dec 04 19:32:23 EST 2023" starttimestamp="1701710826491" timestamp="25517066" timestamp2="25517066">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7704" _type="InsertStringCommand" date="Mon Dec 04 19:32:23 EST 2023" starttimestamp="1701710826491" timestamp="25517127" timestamp2="25517127">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7706" _type="InsertStringCommand" date="Mon Dec 04 19:32:23 EST 2023" starttimestamp="1701710826491" timestamp="25517231" timestamp2="25517231">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7708" _type="InsertStringCommand" date="Mon Dec 04 19:32:23 EST 2023" starttimestamp="1701710826491" timestamp="25517367" timestamp2="25517367">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7710" _type="InsertStringCommand" date="Mon Dec 04 19:32:24 EST 2023" starttimestamp="1701710826491" timestamp="25517520" timestamp2="25517520">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7712" _type="InsertStringCommand" date="Mon Dec 04 19:32:24 EST 2023" starttimestamp="1701710826491" timestamp="25517594" timestamp2="25517594">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7714" _type="InsertStringCommand" date="Mon Dec 04 19:32:24 EST 2023" starttimestamp="1701710826491" timestamp="25517652" timestamp2="25517652">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7716" _type="InsertStringCommand" date="Mon Dec 04 19:32:24 EST 2023" starttimestamp="1701710826491" timestamp="25517805" timestamp2="25517805">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="7718" _type="InsertStringCommand" date="Mon Dec 04 19:32:24 EST 2023" starttimestamp="1701710826491" timestamp="25518041" timestamp2="25518041">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="7720" _type="InsertStringCommand" date="Mon Dec 04 19:32:24 EST 2023" starttimestamp="1701710826491" timestamp="25518088" timestamp2="25518088">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7722" _type="InsertStringCommand" date="Mon Dec 04 19:32:24 EST 2023" starttimestamp="1701710826491" timestamp="25518218" timestamp2="25518218">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="7724" _type="InsertStringCommand" date="Mon Dec 04 19:32:24 EST 2023" starttimestamp="1701710826491" timestamp="25518311" timestamp2="25518311">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="7726" _type="InsertStringCommand" date="Mon Dec 04 19:32:24 EST 2023" starttimestamp="1701710826491" timestamp="25518435" timestamp2="25518435">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7728" _type="InsertStringCommand" date="Mon Dec 04 19:32:25 EST 2023" starttimestamp="1701710826491" timestamp="25518521" timestamp2="25518521">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7730" _type="InsertStringCommand" date="Mon Dec 04 19:32:25 EST 2023" starttimestamp="1701710826491" timestamp="25518628" timestamp2="25518628">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7732" _type="InsertStringCommand" date="Mon Dec 04 19:32:25 EST 2023" starttimestamp="1701710826491" timestamp="25518713" timestamp2="25518713">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7733" _type="MoveCaretCommand" caretOffset="149" date="Mon Dec 04 19:32:26 EST 2023" docOffset="149" starttimestamp="1701710826491" timestamp="25519775" />
  <Command __id="7734" _type="MoveCaretCommand" caretOffset="119" date="Mon Dec 04 19:32:29 EST 2023" docOffset="119" starttimestamp="1701710826491" timestamp="25522634" />
  <Command __id="7735" _type="MoveCaretCommand" caretOffset="119" date="Mon Dec 04 19:32:29 EST 2023" docOffset="119" starttimestamp="1701710826491" timestamp="25522774" />
  <Command __id="7736" _type="MoveCaretCommand" caretOffset="117" date="Mon Dec 04 19:32:30 EST 2023" docOffset="117" starttimestamp="1701710826491" timestamp="25523837" />
  <Command __id="7737" _type="SelectTextCommand" caretOffset="122" date="Mon Dec 04 19:32:30 EST 2023" end="122" start="112" starttimestamp="1701710826491" timestamp="25523965" />
  <Command __id="7739" _type="InsertStringCommand" date="Mon Dec 04 19:32:30 EST 2023" starttimestamp="1701710826491" timestamp="25524320" timestamp2="25524320">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7741" _type="InsertStringCommand" date="Mon Dec 04 19:32:31 EST 2023" starttimestamp="1701710826491" timestamp="25524719" timestamp2="25524719">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="7743" _type="InsertStringCommand" date="Mon Dec 04 19:32:31 EST 2023" starttimestamp="1701710826491" timestamp="25524961" timestamp2="25524961">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7745" _type="InsertStringCommand" date="Mon Dec 04 19:32:31 EST 2023" starttimestamp="1701710826491" timestamp="25525481" timestamp2="25525481">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7747" _type="InsertStringCommand" date="Mon Dec 04 19:32:32 EST 2023" starttimestamp="1701710826491" timestamp="25525540" timestamp2="25525540">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7749" _type="InsertStringCommand" date="Mon Dec 04 19:32:32 EST 2023" starttimestamp="1701710826491" timestamp="25525646" timestamp2="25525646">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7751" _type="InsertStringCommand" date="Mon Dec 04 19:32:32 EST 2023" starttimestamp="1701710826491" timestamp="25525686" timestamp2="25525686">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7752" _type="MoveCaretCommand" caretOffset="148" date="Mon Dec 04 19:32:32 EST 2023" docOffset="148" starttimestamp="1701710826491" timestamp="25526498" />
  <Command __id="7753" _type="MoveCaretCommand" caretOffset="146" date="Mon Dec 04 19:32:33 EST 2023" docOffset="146" starttimestamp="1701710826491" timestamp="25527215" />
  <Command __id="7754" _type="MoveCaretCommand" caretOffset="145" date="Mon Dec 04 19:32:34 EST 2023" docOffset="145" starttimestamp="1701710826491" timestamp="25527786" />
  <Command __id="7756" _type="InsertStringCommand" date="Mon Dec 04 19:32:35 EST 2023" starttimestamp="1701710826491" timestamp="25528727" timestamp2="25528727">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7758" _type="InsertStringCommand" date="Mon Dec 04 19:32:35 EST 2023" starttimestamp="1701710826491" timestamp="25528876" timestamp2="25528876">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7760" _type="InsertStringCommand" date="Mon Dec 04 19:32:36 EST 2023" starttimestamp="1701710826491" timestamp="25529804" timestamp2="25529804">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="7762" _type="InsertStringCommand" date="Mon Dec 04 19:32:36 EST 2023" starttimestamp="1701710826491" timestamp="25529987" timestamp2="25529987">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7764" _type="InsertStringCommand" date="Mon Dec 04 19:32:36 EST 2023" starttimestamp="1701710826491" timestamp="25530306" timestamp2="25530306">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="7766" _type="InsertStringCommand" date="Mon Dec 04 19:32:36 EST 2023" starttimestamp="1701710826491" timestamp="25530433" timestamp2="25530433">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7768" _type="InsertStringCommand" date="Mon Dec 04 19:32:37 EST 2023" starttimestamp="1701710826491" timestamp="25530539" timestamp2="25530539">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7770" _type="InsertStringCommand" date="Mon Dec 04 19:32:37 EST 2023" starttimestamp="1701710826491" timestamp="25530711" timestamp2="25530711">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7772" _type="InsertStringCommand" date="Mon Dec 04 19:32:37 EST 2023" starttimestamp="1701710826491" timestamp="25531005" timestamp2="25531005">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7774" _type="InsertStringCommand" date="Mon Dec 04 19:32:37 EST 2023" starttimestamp="1701710826491" timestamp="25531091" timestamp2="25531091">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7776" _type="InsertStringCommand" date="Mon Dec 04 19:32:37 EST 2023" starttimestamp="1701710826491" timestamp="25531228" timestamp2="25531228">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7778" _type="InsertStringCommand" date="Mon Dec 04 19:32:37 EST 2023" starttimestamp="1701710826491" timestamp="25531368" timestamp2="25531368">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7779" _type="ShellCommand" date="Mon Dec 04 19:32:38 EST 2023" starttimestamp="1701710826491" timestamp="25532496" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7780" _type="ShellCommand" date="Mon Dec 04 19:32:39 EST 2023" starttimestamp="1701710826491" timestamp="25532913" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7781" _type="ShellCommand" date="Mon Dec 04 19:32:41 EST 2023" starttimestamp="1701710826491" timestamp="25534679" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7782" _type="ShellCommand" date="Mon Dec 04 19:32:45 EST 2023" starttimestamp="1701710826491" timestamp="25539025" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7784" _type="PasteCommand" date="Mon Dec 04 19:32:45 EST 2023" starttimestamp="1701710826491" timestamp="25539409" />
  <Command __id="7785" _type="MoveCaretCommand" caretOffset="176" date="Mon Dec 04 19:32:48 EST 2023" docOffset="176" starttimestamp="1701710826491" timestamp="25542387" />
  <Command __id="7786" _type="SelectTextCommand" caretOffset="178" date="Mon Dec 04 19:32:49 EST 2023" end="178" start="167" starttimestamp="1701710826491" timestamp="25542557" />
  <Command __id="7787" _type="ShellCommand" date="Mon Dec 04 19:32:51 EST 2023" starttimestamp="1701710826491" timestamp="25545241" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7788" _type="ShellCommand" date="Mon Dec 04 19:32:51 EST 2023" starttimestamp="1701710826491" timestamp="25545336" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7791" _type="ShellCommand" date="Mon Dec 04 19:32:55 EST 2023" starttimestamp="1701710826491" timestamp="25549347" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7792" _type="ShellCommand" date="Mon Dec 04 19:32:55 EST 2023" starttimestamp="1701710826491" timestamp="25549430" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7795" _type="ShellCommand" date="Mon Dec 04 19:32:58 EST 2023" starttimestamp="1701710826491" timestamp="25552234" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7796" _type="ShellCommand" date="Mon Dec 04 19:32:58 EST 2023" starttimestamp="1701710826491" timestamp="25552286" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7799" _type="ShellCommand" date="Mon Dec 04 19:33:01 EST 2023" starttimestamp="1701710826491" timestamp="25555141" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7800" _type="ShellCommand" date="Mon Dec 04 19:33:01 EST 2023" starttimestamp="1701710826491" timestamp="25555220" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7803" _type="MoveCaretCommand" caretOffset="555" date="Mon Dec 04 19:33:04 EST 2023" docOffset="555" starttimestamp="1701710826491" timestamp="25558002" />
  <Command __id="7804" _type="ShellCommand" date="Mon Dec 04 19:33:08 EST 2023" starttimestamp="1701710826491" timestamp="25562380" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7805" _type="ShellCommand" date="Mon Dec 04 19:33:08 EST 2023" starttimestamp="1701710826491" timestamp="25562482" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7808" _type="MoveCaretCommand" caretOffset="711" date="Mon Dec 04 19:33:09 EST 2023" docOffset="711" starttimestamp="1701710826491" timestamp="25563012" />
  <Command __id="7809" _type="MoveCaretCommand" caretOffset="625" date="Mon Dec 04 19:33:11 EST 2023" docOffset="625" starttimestamp="1701710826491" timestamp="25565355" />
  <Command __id="7810" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 19:33:12 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="25566141" />
  <Command __id="7811" _type="ShellCommand" date="Mon Dec 04 19:33:14 EST 2023" starttimestamp="1701710826491" timestamp="25568266" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="7660" _type="Replace" date="Mon Dec 04 19:32:17 EST 2023" docASTNodeCount="14" docActiveCodeLength="117" docExpressionCount="9" docLength="117" endLine="2" insertionLength="25" int_docASTNodeCount="6" int_docActiveCodeLength="92" int_docExpressionCount="2" int_docLength="92" length="8" offset="43" startLine="2" starttimestamp="1701710826491" timestamp="25511143">
    <deletedText><![CDATA[BasicExp]]></deletedText>
    <insertedText><![CDATA[BasicExpressionEvaluator;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7663" _type="Insert" date="Mon Dec 04 19:32:20 EST 2023" docASTNodeCount="16" docActiveCodeLength="152" docExpressionCount="10" docLength="152" length="35" offset="112" repeat="35" starttimestamp="1701710826491" timestamp="25513575" timestamp2="25518712">
    <text><![CDATA[implements BasicExpressionEvaluator]]></text>
  </DocumentChange>
  <DocumentChange __id="7738" _type="Replace" date="Mon Dec 04 19:32:30 EST 2023" docASTNodeCount="21" docActiveCodeLength="143" docExpressionCount="11" docLength="143" endLine="4" insertionLength="1" int_docASTNodeCount="16" int_docActiveCodeLength="142" int_docExpressionCount="9" int_docLength="142" length="10" offset="112" startLine="4" starttimestamp="1701710826491" timestamp="25524315">
    <deletedText><![CDATA[implements]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7740" _type="Insert" date="Mon Dec 04 19:32:31 EST 2023" docASTNodeCount="16" docActiveCodeLength="149" docExpressionCount="10" docLength="149" length="6" offset="113" repeat="6" starttimestamp="1701710826491" timestamp="25524719" timestamp2="25525686">
    <text><![CDATA[xtends]]></text>
  </DocumentChange>
  <DocumentChange __id="7755" _type="Insert" date="Mon Dec 04 19:32:35 EST 2023" docASTNodeCount="16" docActiveCodeLength="164" docExpressionCount="10" docLength="164" length="15" offset="145" repeat="12" starttimestamp="1701710826491" timestamp="25528725" timestamp2="25531366">
    <text><![CDATA[
	
	@Override
	]]></text>
  </DocumentChange>
  <DocumentChange __id="7783" _type="Replace" date="Mon Dec 04 19:32:45 EST 2023" docASTNodeCount="90" docActiveCodeLength="695" docExpressionCount="58" docLength="695" endLine="7" insertionLength="532" int_docASTNodeCount="16" int_docActiveCodeLength="163" int_docExpressionCount="10" int_docLength="163" length="1" offset="159" startLine="7" starttimestamp="1701710826491" timestamp="25539402">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	public SExpression eval(SExpression expr, Environment environment) {
		if (expr.getHead() instanceof IdentifierAtom) {
			String operator = ((IdentifierAtom)expr.getHead()).getValue();
			Evaluator eval = BuiltinOperationManagerSingleton.get().getEvaluator(operator);
			if (eval == null) {
				throw new IllegalStateException("No evaluator registered for operator '" + operator + "'");
			}
			return eval.eval(expr, environment);
		} else {
			throw new IllegalStateException("Expression does not start with an operator");
		}
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7789" _type="Insert" date="Mon Dec 04 19:32:51 EST 2023" docASTNodeCount="100" docActiveCodeLength="738" docExpressionCount="67" docLength="738" length="43" offset="68" repeat="2" starttimestamp="1701710826491" timestamp="25545340" timestamp2="25545341">
    <text><![CDATA[
import main.lisp.parser.terms.SExpression;]]></text>
  </DocumentChange>
  <DocumentChange __id="7793" _type="Insert" date="Mon Dec 04 19:32:55 EST 2023" docASTNodeCount="108" docActiveCodeLength="778" docExpressionCount="74" docLength="778" length="40" offset="68" repeat="2" starttimestamp="1701710826491" timestamp="25549433" timestamp2="25549434">
    <text><![CDATA[
import main.lisp.evaluator.Environment;]]></text>
  </DocumentChange>
  <DocumentChange __id="7797" _type="Insert" date="Mon Dec 04 19:32:58 EST 2023" docASTNodeCount="118" docActiveCodeLength="824" docExpressionCount="83" docLength="824" length="46" offset="108" repeat="2" starttimestamp="1701710826491" timestamp="25552289" timestamp2="25552290">
    <text><![CDATA[
import main.lisp.parser.terms.IdentifierAtom;]]></text>
  </DocumentChange>
  <DocumentChange __id="7801" _type="Insert" date="Mon Dec 04 19:33:01 EST 2023" docASTNodeCount="126" docActiveCodeLength="885" docExpressionCount="90" docLength="885" length="61" offset="68" repeat="2" starttimestamp="1701710826491" timestamp="25555224" timestamp2="25555224">
    <text><![CDATA[
import main.lisp.evaluator.BuiltinOperationManagerSingleton;]]></text>
  </DocumentChange>
  <DocumentChange __id="7806" _type="Insert" date="Mon Dec 04 19:33:08 EST 2023" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="97" docLength="923" length="38" offset="169" repeat="2" starttimestamp="1701710826491" timestamp="25562486" timestamp2="25562486">
    <text><![CDATA[
import main.lisp.evaluator.Evaluator;]]></text>
  </DocumentChange>
  <Command __id="7812" _type="ShellCommand" date="Mon Dec 04 19:33:18 EST 2023" starttimestamp="1701710826491" timestamp="25571702" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7814" _type="InsertStringCommand" date="Mon Dec 04 19:33:30 EST 2023" starttimestamp="1701710826491" timestamp="25583745" timestamp2="25583745">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="7815" _type="ShellCommand" date="Mon Dec 04 19:33:30 EST 2023" starttimestamp="1701710826491" timestamp="25584258" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7816" _type="ShellCommand" date="Mon Dec 04 19:33:35 EST 2023" starttimestamp="1701710826491" timestamp="25588989" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7817" _type="ShellCommand" date="Mon Dec 04 19:33:38 EST 2023" starttimestamp="1701710826491" timestamp="25592488" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7818" _type="ShellCommand" date="Mon Dec 04 19:33:40 EST 2023" starttimestamp="1701710826491" timestamp="25593559" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7819" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 19:33:41 EST 2023" starttimestamp="1701710826491" timestamp="25594658" />
  <Command __id="7820" _type="EclipseCommand" commandID="" date="Mon Dec 04 19:33:41 EST 2023" starttimestamp="1701710826491" timestamp="25594761" />
  <Command __id="7821" _type="EclipseCommand" commandID="" date="Mon Dec 04 19:33:41 EST 2023" starttimestamp="1701710826491" timestamp="25594767" />
  <Command __id="7822" _type="MoveCaretCommand" caretOffset="350" date="Mon Dec 04 19:33:41 EST 2023" docOffset="350" starttimestamp="1701710826491" timestamp="25594979" />
  <Command __id="7823" _type="MoveCaretCommand" caretOffset="375" date="Mon Dec 04 19:33:41 EST 2023" docOffset="375" starttimestamp="1701710826491" timestamp="25595303" />
  <Command __id="7824" _type="MoveCaretCommand" caretOffset="386" date="Mon Dec 04 19:33:42 EST 2023" docOffset="386" starttimestamp="1701710826491" timestamp="25595618" />
  <Command __id="7825" _type="ShellCommand" date="Mon Dec 04 19:33:45 EST 2023" starttimestamp="1701710826491" timestamp="25599297" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="7813" _type="Insert" date="Mon Dec 04 19:33:30 EST 2023" docASTNodeCount="134" docActiveCodeLength="924" docExpressionCount="97" docLength="924" length="1" offset="456" starttimestamp="1701710826491" timestamp="25583742">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="7826" _type="ShellCommand" date="Mon Dec 04 19:36:21 EST 2023" starttimestamp="1701710826491" timestamp="25755205" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7828" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 19:36:23 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="25757024" />
  <Command __id="7829" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Mon Dec 04 19:36:25 EST 2023" starttimestamp="1701710826491" timestamp="25758682" />
  <Command __id="7830" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 19:36:25 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25758865" type="Run" />
  <Command __id="7831" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 19:36:25 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25758865" type="Run" />
  <Command __id="7832" _type="ConsoleInput" date="Mon Dec 04 19:36:37 EST 2023" starttimestamp="1701710826491" timestamp="25771225" type="Exception">
    <outputString><![CDATA[()+ 1 2
]]></outputString>
  </Command>
  <Command __id="7833" _type="ConsoleOutput" date="Mon Dec 04 19:36:37 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="25771235" type="ConsoleOutput">
    <outputString><![CDATA[3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7834" _type="ConsoleInput" date="Mon Dec 04 19:36:45 EST 2023" starttimestamp="1701710826491" timestamp="25779369" type="Exception">
    <outputString><![CDATA[(/= 1 2)
]]></outputString>
  </Command>
  <Command __id="7835" _type="ConsoleOutput" date="Mon Dec 04 19:36:45 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="25779374" type="ConsoleOutput">
    <outputString><![CDATA[T
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"3"), Diff(INSERT,"T"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7836" _type="ConsoleInput" date="Mon Dec 04 19:36:51 EST 2023" starttimestamp="1701710826491" timestamp="25785442" type="Exception">
    <outputString><![CDATA[(= 1 2_
]]></outputString>
  </Command>
  <Command __id="7849" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 19:37:09 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25802555" type="Run" />
  <Command __id="7850" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 19:37:09 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25802555" type="Run" />
  <Command __id="7853" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 19:37:42 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="25836009" type="Debug" />
  <Command __id="7854" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 19:37:42 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25836010" type="Run" />
  <Command __id="7855" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 19:37:42 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="25836010" type="Debug" />
  <Command __id="7856" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 19:37:42 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25836010" type="Run" />
  <Command __id="7857" _type="ShellCommand" date="Mon Dec 04 19:38:09 EST 2023" starttimestamp="1701710826491" timestamp="25863335" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7827" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:36:23 EST 2023" docASTNodeCount="81" docActiveCodeLength="497" docExpressionCount="57" docLength="497" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25756967">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7858" _type="ShellCommand" date="Mon Dec 04 19:38:43 EST 2023" starttimestamp="1701710826491" timestamp="25897435" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7860" _type="MoveCaretCommand" caretOffset="386" date="Mon Dec 04 19:39:18 EST 2023" docOffset="386" starttimestamp="1701710826491" timestamp="25931812" />
  <Command __id="7861" _type="MoveCaretCommand" caretOffset="820" date="Mon Dec 04 19:39:19 EST 2023" docOffset="820" starttimestamp="1701710826491" timestamp="25932954" />
  <Command __id="7862" _type="MoveCaretCommand" caretOffset="457" date="Mon Dec 04 19:39:20 EST 2023" docOffset="457" starttimestamp="1701710826491" timestamp="25934119" />
  <Command __id="7863" _type="SelectTextCommand" caretOffset="456" date="Mon Dec 04 19:39:22 EST 2023" end="457" start="456" starttimestamp="1701710826491" timestamp="25935767" />
  <Command __id="7865" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 19:39:22 EST 2023" starttimestamp="1701710826491" timestamp="25936353" />
  <Command __id="7866" _type="MoveCaretCommand" caretOffset="506" date="Mon Dec 04 19:40:02 EST 2023" docOffset="506" starttimestamp="1701710826491" timestamp="25975831" />
  <Command __id="7867" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 19:40:03 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="25976822" />
  <Command __id="7868" _type="MoveCaretCommand" caretOffset="572" date="Mon Dec 04 19:40:03 EST 2023" docOffset="572" starttimestamp="1701710826491" timestamp="25977344" />
  <Command __id="7869" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 19:40:04 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="25977773" />
  <Command __id="7870" _type="MoveCaretCommand" caretOffset="506" date="Mon Dec 04 19:40:04 EST 2023" docOffset="506" starttimestamp="1701710826491" timestamp="25978249" />
  <Command __id="7871" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 19:40:05 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="25978821" />
  <Command __id="7872" _type="MoveCaretCommand" caretOffset="506" date="Mon Dec 04 19:40:05 EST 2023" docOffset="506" starttimestamp="1701710826491" timestamp="25979078" />
  <Command __id="7873" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 19:40:05 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="25979372" />
  <Command __id="7874" _type="MoveCaretCommand" caretOffset="373" date="Mon Dec 04 19:40:06 EST 2023" docOffset="373" starttimestamp="1701710826491" timestamp="25980342" />
  <Command __id="7875" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 19:40:07 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="25980966" />
  <Command __id="7876" _type="MoveCaretCommand" caretOffset="506" date="Mon Dec 04 19:40:07 EST 2023" docOffset="506" starttimestamp="1701710826491" timestamp="25981228" />
  <Command __id="7877" _type="MoveCaretCommand" caretOffset="678" date="Mon Dec 04 19:40:09 EST 2023" docOffset="678" starttimestamp="1701710826491" timestamp="25982812" />
  <Command __id="7878" _type="MoveCaretCommand" caretOffset="830" date="Mon Dec 04 19:40:10 EST 2023" docOffset="830" starttimestamp="1701710826491" timestamp="25983586" />
  <Command __id="7879" _type="ShellCommand" date="Mon Dec 04 19:40:12 EST 2023" starttimestamp="1701710826491" timestamp="25985971" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7859" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:39:18 EST 2023" docASTNodeCount="134" docActiveCodeLength="924" docExpressionCount="97" docLength="924" projectName="Assignment5" starttimestamp="1701710826491" timestamp="25931760">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;"), Diff(DELETE,"public class BasicExpressionEvaluatorImpl {"), Diff(INSERT,"import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {			if (expr.getHead() instanceof IdentifierAtom) {			String operator = ((IdentifierAtom)expr.getHead()).getValue();			Evaluator eval = BuiltinOperationManagerSingleton.get().getEvaluator(operator);			if (eval == null) {				throw new IllegalStateException("No evaluator registered for operator '" + operator + "'");			}			return eval.eval(expr, environment);		} else {			throw new IllegalStateException("Expression does not start with an operator");		}	}"), Diff(EQUAL,"}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.BasicExpressionEvaluator;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{
	
	@Override
	public SExpression eval(SExpression expr, Environment environment) {	
		if (expr.getHead() instanceof IdentifierAtom) {
			String operator = ((IdentifierAtom)expr.getHead()).getValue();
			Evaluator eval = BuiltinOperationManagerSingleton.get().getEvaluator(operator);
			if (eval == null) {
				throw new IllegalStateException("No evaluator registered for operator '" + operator + "'");
			}
			return eval.eval(expr, environment);
		} else {
			throw new IllegalStateException("Expression does not start with an operator");
		}
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="7864" _type="Delete" date="Mon Dec 04 19:39:22 EST 2023" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="97" docLength="923" endLine="12" length="1" offset="456" startLine="12" starttimestamp="1701710826491" timestamp="25936345">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="7880" _type="ShellCommand" date="Mon Dec 04 19:40:37 EST 2023" starttimestamp="1701710826491" timestamp="26010547" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7881" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:40:53 EST 2023" docASTNodeCount="209" docActiveCodeLength="1196" docExpressionCount="141" docLength="1196" projectName="Assignment5" starttimestamp="1701710826491" timestamp="26027273">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr."), Diff(DELETE,"getHead()."), Diff(EQUAL,"getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while("), Diff(INSERT,"!("), Diff(EQUAL,"expr instanceof NilAtom)"), Diff(INSERT,")"), Diff(EQUAL," {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[package index;

import java.util.ArrayList;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.NilAtom;
import main.lisp.evaluator.function.LambdaFactory;
import main.lisp.parser.terms.SExpression;

public class LambdaEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
        expr = expr.getTail();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());
        return LambdaFactory.newInstance(ids, expr.getTail());
	}

    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {
        ArrayList<IdentifierAtom> ids = new ArrayList<>();
        while(!(expr instanceof NilAtom)) {
            ids.add((IdentifierAtom) expr.getHead());
            expr = expr.getTail();
        }
        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];
        for(IdentifierAtom id : ids) {
            idArray[ids.indexOf(id)] = id;
        }
        return idArray;
    }
}]]></snapshot>
  </Command>
  <Command __id="7882" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 19:40:53 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="26027346" />
  <Command __id="7883" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:40:58 EST 2023" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="97" docLength="923" projectName="Assignment5" starttimestamp="1701710826491" timestamp="26031889">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {"), Diff(DELETE,"	"), Diff(EQUAL,"		if (expr.getHead() instanceof IdentifierAtom) {			String operator = ((IdentifierAtom)expr.getHead()).getValue();			Evaluator eval = BuiltinOperationManagerSingleton.get().getEvaluator(operator);			if (eval == null) {				throw new IllegalStateException("No evaluator registered for operator '" + operator + "'");			}			return eval.eval(expr, environment);		} else {			throw new IllegalStateException("Expression does not start with an operator");		}	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.BasicExpressionEvaluator;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{
	
	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		if (expr.getHead() instanceof IdentifierAtom) {
			String operator = ((IdentifierAtom)expr.getHead()).getValue();
			Evaluator eval = BuiltinOperationManagerSingleton.get().getEvaluator(operator);
			if (eval == null) {
				throw new IllegalStateException("No evaluator registered for operator '" + operator + "'");
			}
			return eval.eval(expr, environment);
		} else {
			throw new IllegalStateException("Expression does not start with an operator");
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="7884" _type="MoveCaretCommand" caretOffset="830" date="Mon Dec 04 19:40:58 EST 2023" docOffset="830" starttimestamp="1701710826491" timestamp="26031952" />
  <Command __id="7886" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 19:41:01 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="26035174" />
  <Command __id="7887" _type="MoveCaretCommand" caretOffset="101" date="Mon Dec 04 19:41:03 EST 2023" docOffset="292" starttimestamp="1701710826491" timestamp="26037305" />
  <Command __id="7885" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:41:01 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="26035110">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7888" _type="MoveCaretCommand" caretOffset="141" date="Mon Dec 04 19:41:05 EST 2023" docOffset="332" starttimestamp="1701710826491" timestamp="26038759" />
  <Command __id="7889" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:41:07 EST 2023" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="97" docLength="923" projectName="Assignment5" starttimestamp="1701710826491" timestamp="26040672">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		if (expr.getHead() instanceof IdentifierAtom) {			String operator = ((IdentifierAtom)expr.getHead()).getValue();			Evaluator eval = BuiltinOperationManagerSingleton.get().getEvaluator(operator);			if (eval == null) {				throw new IllegalStateException("No evaluator registered for operator '" + operator + "'");			}			return eval.eval(expr, environment);		} else {			throw new IllegalStateException("Expression does not start with an operator");		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7890" _type="MoveCaretCommand" caretOffset="830" date="Mon Dec 04 19:41:07 EST 2023" docOffset="830" starttimestamp="1701710826491" timestamp="26040736" />
  <Command __id="7891" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:41:13 EST 2023" docASTNodeCount="233" docActiveCodeLength="1448" docExpressionCount="171" docLength="1448" projectName="Assignment5" starttimestamp="1701710826491" timestamp="26047258">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.parser.terms.AbstractSExpression;import main.lisp.parser.terms.Atom;import main.lisp.parser.terms.BasicExpression;import main.lisp.parser.terms.SExpression;public class BasicExpressionImpl extends BasicExpression implements SExpression{		public BasicExpressionImpl(SExpression head, SExpression tail) {		super(head, tail);	}	@Override	public boolean isList() {		if((this.getTail() instanceof Atom)) {			return this.getTail().isNIL();		}else {			return this.getTail().isList();		}	}	@Override	public String toStringAsSExpressionDeep() {		if(this.isAtom()) {			return "(" + this.toString() + ")";		}		return "(" + this.getHead().toStringAsSExpressionDeep() + " " + "." + " " +				this.getTail().toStringAsSExpressionDeep() + ")";	}	@Override	public String toStringAsSExpression() {		return "(" + this.getHead().toString() + " " + "." + " " +				this.getTail().toString() + ")";	}	@Override	public String toStringAsList() {		return "("+((AbstractSExpression)this).toStringAsListHelperPublic()+")";	}	@Override	public String toString() {		return this.isList()? this.toStringAsList() : this.toStringAsSExpression();	}	@Override	public String toStringAsListHelperPublic() {		if(this.getTail().isNIL()) {			return this.getHead().toString();		}else {			return this.getHead().toString() + " " + ((AbstractSExpression)this.getTail()).toStringAsListHelperPublic();			}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7892" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 19:41:13 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="26047326" />
  <Command __id="7893" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:41:15 EST 2023" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="97" docLength="923" projectName="Assignment5" starttimestamp="1701710826491" timestamp="26048942">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		if (expr.getHead() instanceof IdentifierAtom) {			String operator = ((IdentifierAtom)expr.getHead()).getValue();			Evaluator eval = BuiltinOperationManagerSingleton.get().getEvaluator(operator);			if (eval == null) {				throw new IllegalStateException("No evaluator registered for operator '" + operator + "'");			}			return eval.eval(expr, environment);		} else {			throw new IllegalStateException("Expression does not start with an operator");		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7894" _type="MoveCaretCommand" caretOffset="830" date="Mon Dec 04 19:41:15 EST 2023" docOffset="830" starttimestamp="1701710826491" timestamp="26049012" />
  <Command __id="7895" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:41:23 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="26056711">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.scanner.tokens.Token;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }        public IdentifierAtomImpl(Token token) {        super(token);     }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7896" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 19:41:23 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="26056785" />
  <Command __id="7898" _type="MoveCaretCommand" caretOffset="830" date="Mon Dec 04 19:41:42 EST 2023" docOffset="830" starttimestamp="1701710826491" timestamp="26076111" />
  <Command __id="7899" _type="MoveCaretCommand" caretOffset="506" date="Mon Dec 04 19:41:46 EST 2023" docOffset="506" starttimestamp="1701710826491" timestamp="26080088" />
  <Command __id="7900" _type="ShellCommand" date="Mon Dec 04 19:41:47 EST 2023" starttimestamp="1701710826491" timestamp="26081053" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7901" _type="ShellCommand" date="Mon Dec 04 19:42:19 EST 2023" starttimestamp="1701710826491" timestamp="26113172" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7902" _type="MoveCaretCommand" caretOffset="456" date="Mon Dec 04 19:42:21 EST 2023" docOffset="456" starttimestamp="1701710826491" timestamp="26114695" />
  <Command __id="7903" _type="SelectTextCommand" caretOffset="459" date="Mon Dec 04 19:42:22 EST 2023" end="916" start="459" starttimestamp="1701710826491" timestamp="26115892" />
  <Command __id="7904" _type="InsertStringCommand" date="Mon Dec 04 19:42:23 EST 2023" starttimestamp="1701710826491" timestamp="26116832" timestamp2="26116832">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="7905" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 19:42:23 EST 2023" starttimestamp="1701710826491" timestamp="26117157" />
  <Command __id="7906" _type="InsertStringCommand" date="Mon Dec 04 19:42:23 EST 2023" starttimestamp="1701710826491" timestamp="26117413" timestamp2="26117413">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="7907" _type="InsertStringCommand" date="Mon Dec 04 19:42:24 EST 2023" starttimestamp="1701710826491" timestamp="26117606" timestamp2="26117606">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7908" _type="InsertStringCommand" date="Mon Dec 04 19:42:24 EST 2023" starttimestamp="1701710826491" timestamp="26117758" timestamp2="26117758">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="7909" _type="InsertStringCommand" date="Mon Dec 04 19:42:24 EST 2023" starttimestamp="1701710826491" timestamp="26117909" timestamp2="26117909">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7910" _type="InsertStringCommand" date="Mon Dec 04 19:42:24 EST 2023" starttimestamp="1701710826491" timestamp="26118029" timestamp2="26118029">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7911" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 19:42:25 EST 2023" starttimestamp="1701710826491" timestamp="26118520" />
  <Command __id="7912" _type="InsertStringCommand" date="Mon Dec 04 19:42:25 EST 2023" starttimestamp="1701710826491" timestamp="26118668" timestamp2="26118668">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7913" _type="InsertStringCommand" date="Mon Dec 04 19:42:25 EST 2023" starttimestamp="1701710826491" timestamp="26118809" timestamp2="26118809">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7914" _type="InsertStringCommand" date="Mon Dec 04 19:42:25 EST 2023" starttimestamp="1701710826491" timestamp="26118894" timestamp2="26118894">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7915" _type="InsertStringCommand" date="Mon Dec 04 19:42:25 EST 2023" starttimestamp="1701710826491" timestamp="26119078" timestamp2="26119078">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="7916" _type="InsertStringCommand" date="Mon Dec 04 19:42:25 EST 2023" starttimestamp="1701710826491" timestamp="26119196" timestamp2="26119196">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7917" _type="InsertStringCommand" date="Mon Dec 04 19:42:25 EST 2023" starttimestamp="1701710826491" timestamp="26119239" timestamp2="26119239">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7918" _type="InsertStringCommand" date="Mon Dec 04 19:42:25 EST 2023" starttimestamp="1701710826491" timestamp="26119344" timestamp2="26119344">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7919" _type="InsertStringCommand" date="Mon Dec 04 19:42:26 EST 2023" starttimestamp="1701710826491" timestamp="26119614" timestamp2="26119614">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7920" _type="InsertStringCommand" date="Mon Dec 04 19:42:26 EST 2023" starttimestamp="1701710826491" timestamp="26120252" timestamp2="26120252">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="7921" _type="InsertStringCommand" date="Mon Dec 04 19:42:26 EST 2023" starttimestamp="1701710826491" timestamp="26120420" timestamp2="26120420">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="7922" _type="InsertStringCommand" date="Mon Dec 04 19:42:27 EST 2023" starttimestamp="1701710826491" timestamp="26120514" timestamp2="26120514">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7923" _type="InsertStringCommand" date="Mon Dec 04 19:42:27 EST 2023" starttimestamp="1701710826491" timestamp="26120545" timestamp2="26120545">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="7924" _type="InsertStringCommand" date="Mon Dec 04 19:42:27 EST 2023" starttimestamp="1701710826491" timestamp="26120663" timestamp2="26120663">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7925" _type="InsertStringCommand" date="Mon Dec 04 19:42:28 EST 2023" starttimestamp="1701710826491" timestamp="26121638" timestamp2="26121638">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="7926" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Dec 04 19:42:28 EST 2023" starttimestamp="1701710826491" timestamp="26122423" />
  <Command __id="7927" _type="InsertStringCommand" date="Mon Dec 04 19:42:29 EST 2023" starttimestamp="1701710826491" timestamp="26122527" timestamp2="26122527">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="7928" _type="InsertStringCommand" date="Mon Dec 04 19:42:29 EST 2023" starttimestamp="1701710826491" timestamp="26122754" timestamp2="26122754">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7929" _type="InsertStringCommand" date="Mon Dec 04 19:42:29 EST 2023" starttimestamp="1701710826491" timestamp="26122885" timestamp2="26122885">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="7930" _type="InsertStringCommand" date="Mon Dec 04 19:42:29 EST 2023" starttimestamp="1701710826491" timestamp="26123296" timestamp2="26123296">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7931" _type="InsertStringCommand" date="Mon Dec 04 19:42:30 EST 2023" starttimestamp="1701710826491" timestamp="26123540" timestamp2="26123540">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7932" _type="InsertStringCommand" date="Mon Dec 04 19:42:30 EST 2023" starttimestamp="1701710826491" timestamp="26123656" timestamp2="26123656">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7933" _type="InsertStringCommand" date="Mon Dec 04 19:42:30 EST 2023" starttimestamp="1701710826491" timestamp="26123754" timestamp2="26123754">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7934" _type="InsertStringCommand" date="Mon Dec 04 19:42:30 EST 2023" starttimestamp="1701710826491" timestamp="26123920" timestamp2="26123920">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="7935" _type="InsertStringCommand" date="Mon Dec 04 19:42:30 EST 2023" starttimestamp="1701710826491" timestamp="26124025" timestamp2="26124025">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7936" _type="InsertStringCommand" date="Mon Dec 04 19:42:30 EST 2023" starttimestamp="1701710826491" timestamp="26124108" timestamp2="26124108">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7937" _type="InsertStringCommand" date="Mon Dec 04 19:42:30 EST 2023" starttimestamp="1701710826491" timestamp="26124189" timestamp2="26124189">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7938" _type="SelectTextCommand" caretOffset="471" date="Mon Dec 04 19:42:32 EST 2023" end="472" start="471" starttimestamp="1701710826491" timestamp="26125915" />
  <Command __id="7939" _type="InsertStringCommand" date="Mon Dec 04 19:42:32 EST 2023" starttimestamp="1701710826491" timestamp="26126021" timestamp2="26126021">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="7940" _type="MoveCaretCommand" caretOffset="487" date="Mon Dec 04 19:42:32 EST 2023" docOffset="487" starttimestamp="1701710826491" timestamp="26126218" />
  <Command __id="7941" _type="InsertStringCommand" date="Mon Dec 04 19:42:33 EST 2023" starttimestamp="1701710826491" timestamp="26126772" timestamp2="26126772">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7942" _type="InsertStringCommand" date="Mon Dec 04 19:42:33 EST 2023" starttimestamp="1701710826491" timestamp="26126891" timestamp2="26126891">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="7943" _type="InsertStringCommand" date="Mon Dec 04 19:42:33 EST 2023" starttimestamp="1701710826491" timestamp="26126993" timestamp2="26126993">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7948" _type="EclipseCommand" commandID="" date="Mon Dec 04 19:42:37 EST 2023" starttimestamp="1701710826491" timestamp="26130732" />
  <Command __id="7949" _type="EclipseCommand" commandID="" date="Mon Dec 04 19:42:37 EST 2023" starttimestamp="1701710826491" timestamp="26130740" />
  <Command __id="7950" _type="ShellCommand" date="Mon Dec 04 19:42:38 EST 2023" starttimestamp="1701710826491" timestamp="26132400" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7951" _type="ShellCommand" date="Mon Dec 04 19:42:49 EST 2023" starttimestamp="1701710826491" timestamp="26142771" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7952" _type="ShellCommand" date="Mon Dec 04 19:42:50 EST 2023" starttimestamp="1701710826491" timestamp="26143568" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7953" _type="ShellCommand" date="Mon Dec 04 19:44:36 EST 2023" starttimestamp="1701710826491" timestamp="26249792" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7954" _type="ShellCommand" date="Mon Dec 04 19:44:36 EST 2023" starttimestamp="1701710826491" timestamp="26250360" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7955" _type="ShellCommand" date="Mon Dec 04 19:46:36 EST 2023" starttimestamp="1701710826491" timestamp="26369895" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7956" _type="ShellCommand" date="Mon Dec 04 19:46:38 EST 2023" starttimestamp="1701710826491" timestamp="26371534" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7957" _type="ShellCommand" date="Mon Dec 04 19:46:48 EST 2023" starttimestamp="1701710826491" timestamp="26382480" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7958" _type="ShellCommand" date="Mon Dec 04 19:46:56 EST 2023" starttimestamp="1701710826491" timestamp="26390127" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7959" _type="ShellCommand" date="Mon Dec 04 19:47:00 EST 2023" starttimestamp="1701710826491" timestamp="26393560" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7960" _type="ShellCommand" date="Mon Dec 04 19:47:00 EST 2023" starttimestamp="1701710826491" timestamp="26394139" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7964" _type="EclipseCommand" commandID="" date="Mon Dec 04 20:15:54 EST 2023" starttimestamp="1701710826491" timestamp="28128489" />
  <Command __id="7965" _type="EclipseCommand" commandID="" date="Mon Dec 04 20:15:54 EST 2023" starttimestamp="1701710826491" timestamp="28128490" />
  <Command __id="7966" _type="ShellCommand" date="Mon Dec 04 20:15:55 EST 2023" starttimestamp="1701710826491" timestamp="28129473" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7967" _type="ShellCommand" date="Mon Dec 04 20:17:03 EST 2023" starttimestamp="1701710826491" timestamp="28197209" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7968" _type="ShellCommand" date="Mon Dec 04 20:17:04 EST 2023" starttimestamp="1701710826491" timestamp="28198039" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7897" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 19:41:42 EST 2023" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="97" docLength="923" projectName="Assignment5" starttimestamp="1701710826491" timestamp="26076037">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		if (expr.getHead() instanceof IdentifierAtom) {			String operator = ((IdentifierAtom)expr.getHead()).getValue();			Evaluator eval = BuiltinOperationManagerSingleton.get().getEvaluator(operator);			if (eval == null) {				throw new IllegalStateException("No evaluator registered for operator '" + operator + "'");			}			return eval.eval(expr, environment);		} else {			throw new IllegalStateException("Expression does not start with an operator");		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7976" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:19:45 EST 2023" docASTNodeCount="132" docActiveCodeLength="798" docExpressionCount="95" docLength="798" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28358575">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;"), Diff(INSERT,"import main.lisp.evaluator.function.Lambda;"), Diff(EQUAL,"import main.lisp.parser.terms.IdentifierAtom;"), Diff(DELETE,""), Diff(EQUAL,"import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		"), Diff(DELETE,"if (expr.getHead() instanceof IdentifierAtom) {			String operator = ((IdentifierAtom)expr.getHead()).getValue();			Evaluator eval = BuiltinOperationManagerSingleton.get().get"), Diff(INSERT,"Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new Lambda"), Diff(EQUAL,"Evaluator("), Diff(DELETE,"operator"), Diff(EQUAL,");		"), Diff(DELETE,"	"), Diff(DELETE,"if (eval == null) {				throw new IllegalStateException("No evaluator registered for operator '" + operator + "'");			}			return eval.eval(expr, environment);		} else {			throw new IllegalStateException("Expression does not start with an operator");		}"), Diff(INSERT,"Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;"), Diff(EQUAL,"	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.BasicExpressionEvaluator;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{
	
	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		Environment childEnvironment = environment.newChild();
		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();
		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);
		IdentifierAtom[] ids = lambda.getArgumentNames();
		childEnvironment.assign(null, lambda);
		return expr;
	}

}
]]></snapshot>
  </Command>
  <Command __id="7984" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:19:55 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28369317">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;"), Diff(INSERT,"import main.lisp.evaluator.ExpressionEvaluatorFactory;"), Diff(EQUAL,"import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		"), Diff(INSERT,"ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		"), Diff(EQUAL,"IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.Main;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtomFactory;
import main.lisp.evaluator.ExpressionEvaluatorFactory;
import main.lisp.evaluator.environment.EnvironmentFactory;

public class index {

	public static void main(String[] args) {
		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);
		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);
		EnvironmentFactory.setClass(EnvironmentImpl.class);
		OperationRegistererImpl.registerAll();
		ExpressionFactory.setClass(BasicExpressionImpl.class);
		Main.main(args);
	}

}
]]></snapshot>
  </Command>
  <Command __id="7986" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:19:59 EST 2023" docASTNodeCount="132" docActiveCodeLength="798" docExpressionCount="95" docLength="798" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28373153">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7974" _type="EclipseCommand" commandID="" date="Mon Dec 04 20:19:44 EST 2023" starttimestamp="1701710826491" timestamp="28357891" />
  <Command __id="7975" _type="EclipseCommand" commandID="" date="Mon Dec 04 20:19:44 EST 2023" starttimestamp="1701710826491" timestamp="28357892" />
  <Command __id="7977" _type="MoveCaretCommand" caretOffset="431" date="Mon Dec 04 20:19:45 EST 2023" docOffset="431" starttimestamp="1701710826491" timestamp="28358632" />
  <Command __id="7978" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 20:19:45 EST 2023" starttimestamp="1701710826491" timestamp="28358802" />
  <Command __id="7979" _type="BreakPointCommand" date="Mon Dec 04 20:19:45 EST 2023" lineNumber="-1" starttimestamp="1701710826491" timestamp="28358819" type="BreakPointAdded" />
  <Command __id="7980" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 20:19:46 EST 2023" starttimestamp="1701710826491" timestamp="28359739" />
  <Command __id="7981" _type="BreakPointCommand" date="Mon Dec 04 20:19:46 EST 2023" lineNumber="15" starttimestamp="1701710826491" timestamp="28359740" type="BreakPointAdded" />
  <Command __id="7982" _type="BreakPointCommand" date="Mon Dec 04 20:19:46 EST 2023" lineNumber="-1" starttimestamp="1701710826491" timestamp="28360482" type="BreakPointRemoved" />
  <Command __id="7983" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 20:19:47 EST 2023" starttimestamp="1701710826491" timestamp="28360513" />
  <Command __id="7985" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 20:19:55 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="28369375" />
  <Command __id="7987" _type="MoveCaretCommand" caretOffset="431" date="Mon Dec 04 20:19:59 EST 2023" docOffset="431" starttimestamp="1701710826491" timestamp="28373209" />
  <Command __id="7989" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 20:20:01 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="28374646" />
  <Command __id="7990" _type="MoveCaretCommand" caretOffset="3287" date="Mon Dec 04 20:20:05 EST 2023" docOffset="3523" starttimestamp="1701710826491" timestamp="28378836" />
  <Command __id="7988" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:20:01 EST 2023" docASTNodeCount="463" docActiveCodeLength="3407" docExpressionCount="228" docLength="4121" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28374570">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		"), Diff(DELETE,"// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLambdaCallingSExpression'")"), Diff(INSERT,"return BasicExpressionEvaluatorImpl.class"), Diff(EQUAL,";	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		"), Diff(DELETE,"// TODO Auto-generated method stub		"), Diff(EQUAL,"return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;	
import main.lisp.evaluator.OperationRegisterer;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import gradingTools.comp524f23.assignment6.ClassRegistryA6;

public class ClassRegistryImpl implements ClassRegistryA6 {

	@Override
	public Class<? extends Evaluator> getAndEvaluator() {
		// TODO Auto-generated method stub
		return AndEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getCondEvaluator() {
		// TODO Auto-generated method stub
		return CondEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {
		// TODO Auto-generated method stub
		return OperationRegistererImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getEvalEvaluator() {
		// TODO Auto-generated method stub
		return EvalEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEEvaluator() {
		// TODO Auto-generated method stub
		return LesserEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEvaluator() {
		// TODO Auto-generated method stub
		return LesserEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getListEvaluator() {
		// TODO Auto-generated method stub
		return ListEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLoadEvaluator() {
		// TODO Auto-generated method stub
		return LoadEvaluator.class;
	}

	@Override
	public Class<?> getMain() {
		// TODO Auto-generated method stub
		return index.class;
	}

	@Override
	public Class<? extends Evaluator> getNotEvaluator() {
		// TODO Auto-generated method stub
		return NotEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getOrEvaluator() {
		// TODO Auto-generated method stub
		return OrEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getQuoteEvaluator() {
		// TODO Auto-generated method stub
		return QuoteEvaluator.class;
	}

	@Override
	public Class<? extends SExpression> getStringFormattingSExpression() {
		// TODO Auto-generated method stub
		return BasicExpressionImpl.class;
	}

	@Override
	public Class<? extends SExpression> getFunctionCallingSExpression() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");
	}

	@Override
	public Class<? extends Evaluator> getFunctionEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getLetEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getBasicFuncallEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");
	}

	@Override
	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {
		return IdentifierAtomImpl.class;
	}

	@Override
	public Class<? extends SExpression> getLambdaCallingSExpression() {
		return BasicExpressionEvaluatorImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getLambdaEvaluator() {
		return LambdaEvaluator.class;
	}

	@Override
	public Class<? extends Environment> getNestedLexicalEnvironment() {
		// TODO Auto-generated method stub
		return EnvironmentImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getSetqEvaluator() {
		return SetqEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="7992" _type="Replace" date="Mon Dec 04 20:20:08 EST 2023" docASTNodeCount="461" docActiveCodeLength="3374" docExpressionCount="227" docLength="4088" endLine="132" insertionLength="1" int_docASTNodeCount="460" int_docActiveCodeLength="3373" int_docExpressionCount="226" int_docLength="4087" length="34" offset="3488" startLine="132" starttimestamp="1701710826491" timestamp="28382377">
    <deletedText><![CDATA[BasicExpressionEvaluatorImpl.class]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7994" _type="Insert" date="Mon Dec 04 20:20:09 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" length="3" offset="3489" repeat="3" starttimestamp="1701710826491" timestamp="28382515" timestamp2="28382788">
    <text><![CDATA[ull]]></text>
  </DocumentChange>
  <Command __id="8004" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:20:11 EST 2023" docASTNodeCount="132" docActiveCodeLength="798" docExpressionCount="95" docLength="798" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28384961">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="7991" _type="SelectTextCommand" caretOffset="3252" date="Mon Dec 04 20:20:08 EST 2023" end="3286" start="3252" starttimestamp="1701710826491" timestamp="28381666" />
  <Command __id="7993" _type="InsertStringCommand" date="Mon Dec 04 20:20:08 EST 2023" starttimestamp="1701710826491" timestamp="28382384" timestamp2="28382384">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7995" _type="InsertStringCommand" date="Mon Dec 04 20:20:09 EST 2023" starttimestamp="1701710826491" timestamp="28382516" timestamp2="28382516">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="7997" _type="InsertStringCommand" date="Mon Dec 04 20:20:09 EST 2023" starttimestamp="1701710826491" timestamp="28382663" timestamp2="28382663">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="7999" _type="InsertStringCommand" date="Mon Dec 04 20:20:09 EST 2023" starttimestamp="1701710826491" timestamp="28382790" timestamp2="28382790">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="8000" _type="MoveCaretCommand" caretOffset="3257" date="Mon Dec 04 20:20:10 EST 2023" docOffset="3493" starttimestamp="1701710826491" timestamp="28383647" />
  <Command __id="8001" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Dec 04 20:20:10 EST 2023" starttimestamp="1701710826491" timestamp="28383833" />
  <Command __id="8002" _type="EclipseCommand" commandID="" date="Mon Dec 04 20:20:10 EST 2023" starttimestamp="1701710826491" timestamp="28383935" />
  <Command __id="8003" _type="EclipseCommand" commandID="" date="Mon Dec 04 20:20:10 EST 2023" starttimestamp="1701710826491" timestamp="28383946" />
  <Command __id="8005" _type="MoveCaretCommand" caretOffset="431" date="Mon Dec 04 20:20:11 EST 2023" docOffset="431" starttimestamp="1701710826491" timestamp="28385007" />
  <Command __id="8007" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 20:20:15 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="28388752" />
  <Command __id="8015" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 20:20:18 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="28392251" type="Run" />
  <Command __id="8028" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 20:20:30 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="28403664" type="Run" />
  <Command __id="8029" _type="ShellCommand" date="Mon Dec 04 20:20:30 EST 2023" starttimestamp="1701710826491" timestamp="28404051" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8006" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:20:15 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28388697">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8024" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:20:23 EST 2023" docASTNodeCount="132" docActiveCodeLength="798" docExpressionCount="95" docLength="798" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28397304">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8033" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 20:21:03 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="28437442" type="Run" />
  <Command __id="8034" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:21:05 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28439129">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return "), Diff(DELETE,"BasicExpressionEvaluatorImpl.class"), Diff(INSERT,"null"), Diff(EQUAL,";	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;	
import main.lisp.evaluator.OperationRegisterer;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import gradingTools.comp524f23.assignment6.ClassRegistryA6;

public class ClassRegistryImpl implements ClassRegistryA6 {

	@Override
	public Class<? extends Evaluator> getAndEvaluator() {
		// TODO Auto-generated method stub
		return AndEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getCondEvaluator() {
		// TODO Auto-generated method stub
		return CondEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {
		// TODO Auto-generated method stub
		return OperationRegistererImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getEvalEvaluator() {
		// TODO Auto-generated method stub
		return EvalEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEEvaluator() {
		// TODO Auto-generated method stub
		return LesserEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEvaluator() {
		// TODO Auto-generated method stub
		return LesserEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getListEvaluator() {
		// TODO Auto-generated method stub
		return ListEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLoadEvaluator() {
		// TODO Auto-generated method stub
		return LoadEvaluator.class;
	}

	@Override
	public Class<?> getMain() {
		// TODO Auto-generated method stub
		return index.class;
	}

	@Override
	public Class<? extends Evaluator> getNotEvaluator() {
		// TODO Auto-generated method stub
		return NotEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getOrEvaluator() {
		// TODO Auto-generated method stub
		return OrEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getQuoteEvaluator() {
		// TODO Auto-generated method stub
		return QuoteEvaluator.class;
	}

	@Override
	public Class<? extends SExpression> getStringFormattingSExpression() {
		// TODO Auto-generated method stub
		return BasicExpressionImpl.class;
	}

	@Override
	public Class<? extends SExpression> getFunctionCallingSExpression() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");
	}

	@Override
	public Class<? extends Evaluator> getFunctionEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getLetEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getBasicFuncallEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");
	}

	@Override
	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {
		return IdentifierAtomImpl.class;
	}

	@Override
	public Class<? extends SExpression> getLambdaCallingSExpression() {
		return null;
	}

	@Override
	public Class<? extends Evaluator> getLambdaEvaluator() {
		return LambdaEvaluator.class;
	}

	@Override
	public Class<? extends Environment> getNestedLexicalEnvironment() {
		// TODO Auto-generated method stub
		return EnvironmentImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getSetqEvaluator() {
		return SetqEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");
	}

}
]]></snapshot>
  </Command>
  <Command __id="8035" _type="MoveCaretCommand" caretOffset="3257" date="Mon Dec 04 20:21:05 EST 2023" docOffset="3493" starttimestamp="1701710826491" timestamp="28439187" />
  <Command __id="8036" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:21:06 EST 2023" docASTNodeCount="132" docActiveCodeLength="798" docExpressionCount="95" docLength="798" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28439822">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8037" _type="MoveCaretCommand" caretOffset="286" date="Mon Dec 04 20:21:06 EST 2023" docOffset="286" starttimestamp="1701710826491" timestamp="28439875" />
  <Command __id="8038" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:21:12 EST 2023" docASTNodeCount="226" docActiveCodeLength="1981" docExpressionCount="155" docLength="1981" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28445905">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/OperationRegistererImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.OperationRegisterer;import main.lisp.evaluator.BasicOperationRegisterer;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class OperationRegistererImpl extends BasicOperationRegisterer implements OperationRegisterer{		public static void registerBasic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("QUOTE", new QuoteEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LIST", new ListEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator());	}		public static void registerArithmetic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<", new LesserEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterEqualEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LesserEqualEvaluator());	}		public static void registerLogic() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("AND", new AndEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("OR", new OrEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("NOT", new NotEvaluator());	}		public static void registerAdvance() {		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("SETQ", new SetqEvaluator());		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LAMBDA", new LambdaEvaluator());	}		@Override	public void registerOperations() {		registerAll();	}		public static void registerAll() {		registerBasic();		registerArithmetic();		registerLogic();		registerAdvance();	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8039" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 20:21:12 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="28445966" />
  <Command __id="8040" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:21:13 EST 2023" docASTNodeCount="132" docActiveCodeLength="798" docExpressionCount="95" docLength="798" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28447327">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8041" _type="MoveCaretCommand" caretOffset="286" date="Mon Dec 04 20:21:13 EST 2023" docOffset="286" starttimestamp="1701710826491" timestamp="28447387" />
  <Command __id="8043" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 20:21:16 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="28449564" />
  <Command __id="8042" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:21:15 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28449502">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.scanner.tokens.Token;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }        public IdentifierAtomImpl(Token token) {        super(token);     }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8044" _type="MoveCaretCommand" caretOffset="375" date="Mon Dec 04 20:21:19 EST 2023" docOffset="544" starttimestamp="1701710826491" timestamp="28452633" />
  <Command __id="8045" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:21:23 EST 2023" docASTNodeCount="132" docActiveCodeLength="798" docExpressionCount="95" docLength="798" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28457334">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8046" _type="MoveCaretCommand" caretOffset="286" date="Mon Dec 04 20:21:23 EST 2023" docOffset="286" starttimestamp="1701710826491" timestamp="28457398" />
  <Command __id="8047" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:21:28 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28461991">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return null;	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8048" _type="MoveCaretCommand" caretOffset="3257" date="Mon Dec 04 20:21:28 EST 2023" docOffset="3493" starttimestamp="1701710826491" timestamp="28462042" />
  <Command __id="8050" _type="MoveCaretCommand" caretOffset="286" date="Mon Dec 04 20:21:32 EST 2023" docOffset="286" starttimestamp="1701710826491" timestamp="28465626" />
  <Command __id="8051" _type="ShellCommand" date="Mon Dec 04 20:21:34 EST 2023" starttimestamp="1701710826491" timestamp="28467613" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8052" _type="ShellCommand" date="Mon Dec 04 20:21:40 EST 2023" starttimestamp="1701710826491" timestamp="28473866" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8053" _type="MoveCaretCommand" caretOffset="266" date="Mon Dec 04 20:21:40 EST 2023" docOffset="266" starttimestamp="1701710826491" timestamp="28473931" />
  <Command __id="8054" _type="ShellCommand" date="Mon Dec 04 20:21:43 EST 2023" starttimestamp="1701710826491" timestamp="28476575" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8055" _type="ShellCommand" date="Mon Dec 04 20:21:50 EST 2023" starttimestamp="1701710826491" timestamp="28484369" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8056" _type="ShellCommand" date="Mon Dec 04 20:21:52 EST 2023" starttimestamp="1701710826491" timestamp="28485697" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8057" _type="ShellCommand" date="Mon Dec 04 20:21:52 EST 2023" starttimestamp="1701710826491" timestamp="28486335" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8058" _type="ShellCommand" date="Mon Dec 04 20:21:53 EST 2023" starttimestamp="1701710826491" timestamp="28487102" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8059" _type="ShellCommand" date="Mon Dec 04 20:22:24 EST 2023" starttimestamp="1701710826491" timestamp="28518235" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8060" _type="ShellCommand" date="Mon Dec 04 20:22:27 EST 2023" starttimestamp="1701710826491" timestamp="28520913" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8061" _type="ShellCommand" date="Mon Dec 04 20:22:39 EST 2023" starttimestamp="1701710826491" timestamp="28532582" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8062" _type="ShellCommand" date="Mon Dec 04 20:22:39 EST 2023" starttimestamp="1701710826491" timestamp="28533336" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8063" _type="ShellCommand" date="Mon Dec 04 20:22:40 EST 2023" starttimestamp="1701710826491" timestamp="28534207" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8064" _type="ShellCommand" date="Mon Dec 04 20:22:41 EST 2023" starttimestamp="1701710826491" timestamp="28534890" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8072" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 20:23:39 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28593305" type="Run" />
  <Command __id="8073" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 20:23:39 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28593305" type="Run" />
  <Command __id="8074" _type="ShellCommand" date="Mon Dec 04 20:23:40 EST 2023" starttimestamp="1701710826491" timestamp="28593619" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8075" _type="ConsoleOutput" date="Mon Dec 04 20:23:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28596936" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8076" _type="ConsoleOutput" date="Mon Dec 04 20:23:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28596937" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8077" _type="ConsoleOutput" date="Mon Dec 04 20:23:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28596938" type="ConsoleOutput">
    <outputString><![CDATA[
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8078" _type="ConsoleOutput" date="Mon Dec 04 20:23:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28596944" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8079" _type="ConsoleOutput" date="Mon Dec 04 20:23:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28596944" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):6"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8080" _type="ConsoleOutput" date="Mon Dec 04 20:23:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28596945" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):8
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):8"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8081" _type="ConsoleOutput" date="Mon Dec 04 20:23:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28596946" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):8"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8082" _type="ExceptionCommand" date="Mon Dec 04 20:23:43 EST 2023" starttimestamp="1701710826491" timestamp="28596962" type="Exception">
    <exceptionString><![CDATA[java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.LambdaEvaluator.extractIdentifiers(LambdaEvaluator.java:28)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="8083" _type="ConsoleOutput" date="Mon Dec 04 20:23:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28596964" type="ConsoleOutput">
    <outputString><![CDATA[	at index.LambdaEvaluator.evalHelper(LambdaEvaluator.java:21)
	at index.LambdaEvaluator.eval(LambdaEvaluator.java:17)
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:17)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"	at index.LambdaEvaluator.evalHelper(LambdaEvaluator.java:21)¶	at index.LambdaEvaluator.eval(LambdaEvaluator.java:17)¶	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:17)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)¶	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8084" _type="ConsoleOutput" date="Mon Dec 04 20:23:43 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28597001" type="ConsoleOutput">
    <outputString><![CDATA[	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at index.LambdaEvaluator.evalHelper(LambdaEvaluator.java:21)¶	at index.LambdaEvaluator.eval(LambdaEvaluator.java:17)¶	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:17)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶"), Diff(EQUAL,"	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.A"), Diff(DELETE,"JUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext"), Diff(INSERT,"GradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method"), Diff(EQUAL,".java:5"), Diff(DELETE,"2"), Diff(INSERT,"66"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment"), Diff(INSERT,"bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager"), Diff(EQUAL,".java:"), Diff(INSERT,"190"), Diff(EQUAL,"6"), Diff(DELETE,"2"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionCheck"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"45"), Diff(INSERT,"1357"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase"), Diff(INSERT,"bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(EQUAL,".java:23"), Diff(INSERT,"2"), Diff(EQUAL,"1)¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window"), Diff(EQUAL,".java:"), Diff(DELETE,"111"), Diff(INSERT,"2772"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="8085" _type="ExceptionCommand" date="Mon Dec 04 20:23:43 EST 2023" starttimestamp="1701710826491" timestamp="28597007" type="Exception">
    <exceptionString><![CDATA[	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
java.lang.IndexOutOfBoundsException: Index -1 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionLastResultChecker.actualOutput(AbstractLispExpressionLastResultChecker.java:5)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:23)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="8086" _type="ShellCommand" date="Mon Dec 04 20:23:58 EST 2023" starttimestamp="1701710826491" timestamp="28611704" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8087" _type="LocalChecksRawCommand" date="Mon Dec 04 20:23:58 EST 2023" starttimestamp="1701710826491" timestamp="28611708">
    <CSVRow><![CDATA[117,Mon Dec 04 20:23:43 EST 2023,40,-1,LispLambdaChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadLispChecker- PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,52,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8088" _type="LocalChecksRawCommand" date="Mon Dec 04 20:23:58 EST 2023" starttimestamp="1701710826491" timestamp="28611708">
    <CSVRow><![CDATA[117,Mon Dec 04 20:23:43 EST 2023,40,-1,LispLambdaChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadLispChecker- PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,52,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8089" _type="ShellCommand" date="Mon Dec 04 20:23:59 EST 2023" starttimestamp="1701710826491" timestamp="28612746" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8049" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:21:32 EST 2023" docASTNodeCount="132" docActiveCodeLength="798" docExpressionCount="95" docLength="798" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28465549">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8090" _type="ShellCommand" date="Mon Dec 04 20:24:03 EST 2023" starttimestamp="1701710826491" timestamp="28616814" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8092" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 20:24:15 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="28629459" />
  <Command __id="8093" _type="MoveCaretCommand" caretOffset="177" date="Mon Dec 04 20:24:18 EST 2023" docOffset="435" starttimestamp="1701710826491" timestamp="28632443" />
  <Command __id="8094" _type="MoveCaretCommand" caretOffset="208" date="Mon Dec 04 20:24:20 EST 2023" docOffset="466" starttimestamp="1701710826491" timestamp="28633968" />
  <Command __id="8095" _type="MoveCaretCommand" caretOffset="248" date="Mon Dec 04 20:24:20 EST 2023" docOffset="506" starttimestamp="1701710826491" timestamp="28634277" />
  <Command __id="8135" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 20:24:27 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28640672" type="Run" />
  <Command __id="8136" _type="ShellCommand" date="Mon Dec 04 20:24:27 EST 2023" starttimestamp="1701710826491" timestamp="28640721" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8137" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 20:24:28 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28641620" type="Run" />
  <Command __id="8138" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 20:24:28 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28641620" type="Run" />
  <Command __id="8139" _type="ShellCommand" date="Mon Dec 04 20:24:28 EST 2023" starttimestamp="1701710826491" timestamp="28641933" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8140" _type="ConsoleOutput" date="Mon Dec 04 20:24:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28645250" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)"), Diff(INSERT,"Test execution time (ms):0¶Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8141" _type="ConsoleOutput" date="Mon Dec 04 20:24:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28645252" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"7"), Diff(EQUAL,"¶Test Result:"), Diff(DELETE,"TestLispFile"), Diff(INSERT,"ClassRegistry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶"), Diff(DELETE,"¶")]]]></diff>
  </Command>
  <Command __id="8142" _type="ConsoleOutput" date="Mon Dec 04 20:24:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28645254" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):8
Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL,"¶Test Result:"), Diff(INSERT,"Main"), Diff(EQUAL,"Class"), Diff(DELETE,"Registry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶")]]]></diff>
  </Command>
  <Command __id="8143" _type="ExceptionCommand" date="Mon Dec 04 20:24:31 EST 2023" starttimestamp="1701710826491" timestamp="28645270" type="Exception">
    <exceptionString><![CDATA[java.lang.ClassCastException: class index.BasicExpressionImpl cannot be cast to class main.lisp.evaluator.function.Lambda (index.BasicExpressionImpl and main.lisp.evaluator.function.Lambda are in unnamed module of loader 'app')
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:17)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="8144" _type="ConsoleOutput" date="Mon Dec 04 20:24:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28645273" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):8¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)¶	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8145" _type="ConsoleOutput" date="Mon Dec 04 20:24:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28645326" type="ConsoleOutput">
    <outputString><![CDATA[	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"main.lisp.parser.terms.BasicExpression.eval(BasicExpression"), Diff(INSERT,"org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"26"), Diff(INSERT,"50"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation"), Diff(INSERT,"org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"92"), Diff(INSERT,"17"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvalu"), Diff(INSERT,"org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,"Registerer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"g.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"100"), Diff(INSERT,"78"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvalu"), Diff(INSERT,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,"Registerer.evaluate(AbstractLispExpressionInputterAndEvalu"), Diff(INSERT,"g.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,"Register"), Diff(INSERT,"g.junit.runners.ParentRunner$1.schedule(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(INSERT,"7"), Diff(EQUAL,"1"), Diff(DELETE,"33"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvalu"), Diff(INSERT,"org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,"Registerer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"g.junit.runners.ParentRunner.access$000(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"6"), Diff(EQUAL,"5"), Diff(INSERT,"8"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionCheck"), Diff(INSERT,"org.junit.runners.ParentRunner$2.evaluate(ParentRunn"), Diff(EQUAL,"er.java:2"), Diff(DELETE,"1"), Diff(INSERT,"68"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionCheck"), Diff(INSERT,"org.junit.runners.ParentRunner.run(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"47"), Diff(INSERT,"363"), Diff(EQUAL,")¶	at grader.basics."), Diff(DELETE,"testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFail"), Diff(INSERT,"junit.AGradableJUnitTest.test(AGradable"), Diff(EQUAL,"JUnitTest"), Diff(DELETE,"Case"), Diff(EQUAL,".java:"), Diff(DELETE,"2"), Diff(EQUAL,"31"), Diff(INSERT,"7"), Diff(EQUAL,")¶	at grader.basics."), Diff(DELETE,"testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCas"), Diff(INSERT,"junit.AGradableJUnitSuite.open(AGradableJUnitSuit"), Diff(EQUAL,"e.java:1"), Diff(DELETE,"1"), Diff(INSERT,"9"), Diff(EQUAL,"1)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(Framework"), Diff(INSERT,"bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(Unified"), Diff(EQUAL,"Method.java:"), Diff(DELETE,"50"), Diff(INSERT,"219"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand"), Diff(EQUAL,".java:"), Diff(DELETE,"12"), Diff(INSERT,"69"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod"), Diff(INSERT,"bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager"), Diff(EQUAL,".java:"), Diff(DELETE,"47"), Diff(INSERT,"1906"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager"), Diff(EQUAL,".java:17"), Diff(INSERT,"01"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.runLeaf(ParentRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"32"), Diff(INSERT,"158"), Diff(EQUAL,"5)¶	at "), Diff(DELETE,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"7"), Diff(INSERT,"153"), Diff(EQUAL,"8)¶	at "), Diff(DELETE,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"57"), Diff(INSERT,"1531"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$3.run(ParentRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"290"), Diff(INSERT,"1406"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$1.schedule(ParentRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"7"), Diff(EQUAL,"1"), Diff(INSERT,"357"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.runChildren(ParentRunn"), Diff(INSERT,"bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapt"), Diff(EQUAL,"er.java:"), Diff(DELETE,"288"), Diff(INSERT,"469"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.access$000(ParentRunn"), Diff(INSERT,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(EQUAL,"er.java:"), Diff(DELETE,"5"), Diff(INSERT,"27"), Diff(EQUAL,"8)¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$2.evaluate(ParentRunn"), Diff(INSERT,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(EQUAL,"er.java:2"), Diff(DELETE,"68"), Diff(INSERT,"77"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.run(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.Component.processMouseEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"63"), Diff(INSERT,"8"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTes"), Diff(INSERT,"java.desktop/javax.swing.JComponent.processMouseEvent(JComponen"), Diff(EQUAL,"t.java:3"), Diff(DELETE,"17"), Diff(INSERT,"342"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContex"), Diff(INSERT,"java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Componen"), Diff(EQUAL,"t.java:5"), Diff(DELETE,"2"), Diff(INSERT,"011"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironm"), Diff(INSERT,"java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Compon"), Diff(EQUAL,"ent.java:"), Diff(DELETE,"62"), Diff(INSERT,"4843"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionCheck"), Diff(INSERT,"java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Contain"), Diff(EQUAL,"er.java:45"), Diff(INSERT,"56"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(EQUAL,".java:23"), Diff(DELETE,"1"), Diff(INSERT,"07"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.Window.dispatchEventImpl(Window"), Diff(EQUAL,".java:"), Diff(DELETE,"111"), Diff(INSERT,"2772"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"6"), Diff(INSERT,"77"), Diff(EQUAL,"2)¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"43"), Diff(INSERT,"721"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/java.lang.reflect.Method.invoke(Method"), Diff(INSERT,"desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"566"), Diff(INSERT,"715"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="8146" _type="ConsoleOutput" date="Mon Dec 04 20:24:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="28645380" type="ConsoleOutput">
    <outputString><![CDATA[	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionLastResultChecker.actualOutput(AbstractLispExpressionLastResultChecker.java:5)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:23)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"	at java.base/java.util.Objects.checkIndex(Objects.java:372)¶	at java.base/java.util.ArrayList.get(ArrayList.java:459)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionLastResultChecker.actualOutput(AbstractLispExpressionLastResultChecker.java:5)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:23)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶"), Diff(EQUAL,"	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.A"), Diff(INSERT,"JUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)¶	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRun"), Diff(EQUAL,"GradableJUnit"), Diff(DELETE,"Suite.open(AGradableJUnitSuit"), Diff(INSERT,"Test(JUnitTestsEnvironment.java:62)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCas"), Diff(EQUAL,"e.java:1"), Diff(DELETE,"9"), Diff(INSERT,"1"), Diff(EQUAL,"1)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at "), Diff(DELETE,"bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(Unified"), Diff(INSERT,"org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(Framework"), Diff(EQUAL,"Method.java:"), Diff(DELETE,"219"), Diff(INSERT,"50"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand"), Diff(INSERT,"org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable"), Diff(EQUAL,".java:"), Diff(DELETE,"69"), Diff(INSERT,"12"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager"), Diff(INSERT,"org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"1701"), Diff(INSERT,"47"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager"), Diff(INSERT,"org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod"), Diff(EQUAL,".java:1"), Diff(DELETE,"538"), Diff(INSERT,"7"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(INSERT,"org.junit.runners.ParentRunner.runLeaf(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"1531"), Diff(INSERT,"325"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManag"), Diff(INSERT,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"1406"), Diff(INSERT,"78"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManag"), Diff(INSERT,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"13"), Diff(EQUAL,"57)¶	at "), Diff(DELETE,"bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(INSERT,"org.junit.runners.ParentRunner$3.run(ParentRunn"), Diff(EQUAL,"er.java:2"), Diff(DELETE,"78"), Diff(INSERT,"90"), Diff(EQUAL,")¶	at "), Diff(DELETE,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(INSERT,"org.junit.runners.ParentRunner$1.schedule(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"27"), Diff(EQUAL,"7"), Diff(INSERT,"1"), Diff(EQUAL,")¶	at "), Diff(DELETE,"java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component"), Diff(INSERT,"org.junit.runners.ParentRunner.runChildren(ParentRunner"), Diff(EQUAL,".java:"), Diff(DELETE,"6400"), Diff(INSERT,"288"), Diff(EQUAL,")¶	at "), Diff(DELETE,"java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component"), Diff(INSERT,"org.junit.runners.ParentRunner.access$000(ParentRunner"), Diff(EQUAL,".java:5"), Diff(DELETE,"011"), Diff(INSERT,"8"), Diff(EQUAL,")¶	at "), Diff(DELETE,"java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(INSERT,"org.junit.runners.ParentRunner$2.evaluate(ParentRunner"), Diff(EQUAL,".java:"), Diff(DELETE,"4843"), Diff(INSERT,"268"), Diff(EQUAL,")¶	at "), Diff(DELETE,"java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Contai"), Diff(INSERT,"org.junit.runners.ParentRunner.run(ParentRun"), Diff(EQUAL,"ner.java:"), Diff(DELETE,"4556"), Diff(INSERT,"363"), Diff(EQUAL,")¶	at "), Diff(DELETE,"java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(INSERT,"grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest"), Diff(EQUAL,".java:"), Diff(DELETE,"230"), Diff(INSERT,"31"), Diff(EQUAL,"7)¶	at "), Diff(DELETE,"java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueu"), Diff(INSERT,"grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuit"), Diff(EQUAL,"e.java:"), Diff(DELETE,"772"), Diff(INSERT,"191"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715"), Diff(INSERT,"base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="8147" _type="ShellCommand" date="Mon Dec 04 20:24:38 EST 2023" starttimestamp="1701710826491" timestamp="28651781" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8148" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 20:24:38 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="28651907" type="Debug" />
  <Command __id="8149" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 20:24:38 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28651907" type="Run" />
  <Command __id="8150" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 20:24:38 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="28651907" type="Debug" />
  <Command __id="8151" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 20:24:38 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28651907" type="Run" />
  <Command __id="8152" _type="ShellCommand" date="Mon Dec 04 20:24:39 EST 2023" starttimestamp="1701710826491" timestamp="28652938" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8153" _type="LocalChecksRawCommand" date="Mon Dec 04 20:24:39 EST 2023" starttimestamp="1701710826491" timestamp="28652939">
    <CSVRow><![CDATA[118,Mon Dec 04 20:24:31 EST 2023,40,0,LispLambdaChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadLispChecker PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,53,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8154" _type="LocalChecksRawCommand" date="Mon Dec 04 20:24:39 EST 2023" starttimestamp="1701710826491" timestamp="28652939">
    <CSVRow><![CDATA[118,Mon Dec 04 20:24:31 EST 2023,40,0,LispLambdaChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadLispChecker PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,53,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8155" _type="BalloonCommand" date="Mon Dec 04 20:29:01 EST 2023" message="*******************************************
Worked 17 minutes(fixed)/55 minutes(context based) from
Mon Dec 04 19:29:01 EST 2023 to Mon Dec 04 20:24:39 EST 2023
Edited 1 Projects: 
	Assignment5
Edited 3 Files: 
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java
	/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java
Number of insert: 344
Number of delete: 1
" starttimestamp="1701710826491" timestamp="28914590">
    <fineGrainedWorkTime><![CDATA[55]]></fineGrainedWorkTime>
    <insert><![CDATA[344]]></insert>
    <startTime><![CDATA[1701736141080]]></startTime>
    <endTime><![CDATA[1701739479430]]></endTime>
    <workTime><![CDATA[17]]></workTime>
    <delete><![CDATA[1]]></delete>
  </Command>
  <Command __id="8156" _type="ShellCommand" date="Mon Dec 04 20:32:14 EST 2023" starttimestamp="1701710826491" timestamp="29107785" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8157" _type="ShellCommand" date="Mon Dec 04 20:32:15 EST 2023" starttimestamp="1701710826491" timestamp="29109172" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8158" _type="ShellCommand" date="Mon Dec 04 20:35:43 EST 2023" starttimestamp="1701710826491" timestamp="29316997" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8159" _type="ShellCommand" date="Mon Dec 04 20:35:47 EST 2023" starttimestamp="1701710826491" timestamp="29320593" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8091" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:24:15 EST 2023" docASTNodeCount="209" docActiveCodeLength="1196" docExpressionCount="141" docLength="1196" projectName="Assignment5" starttimestamp="1701710826491" timestamp="28629390">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="8097" _type="Insert" date="Mon Dec 04 20:24:22 EST 2023" docASTNodeCount="203" docActiveCodeLength="1166" docExpressionCount="136" docLength="1198" length="2" offset="436" starttimestamp="1701710826491" timestamp="28635940">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8098" _type="Insert" date="Mon Dec 04 20:24:22 EST 2023" docASTNodeCount="198" docActiveCodeLength="1127" docExpressionCount="132" docLength="1200" length="2" offset="469" starttimestamp="1701710826491" timestamp="28635941">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8101" _type="Insert" date="Mon Dec 04 20:24:23 EST 2023" docASTNodeCount="200" docActiveCodeLength="1142" docExpressionCount="133" docLength="1215" length="15" offset="510" repeat="13" starttimestamp="1701710826491" timestamp="28637209" timestamp2="28638619">
    <text><![CDATA[
		return expr;]]></text>
  </DocumentChange>
  <Command __id="8160" _type="ShellCommand" date="Mon Dec 04 20:37:09 EST 2023" starttimestamp="1701710826491" timestamp="29403171" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8162" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 20:37:11 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="29405163" />
  <Command __id="8163" _type="MoveCaretCommand" caretOffset="122" date="Mon Dec 04 20:37:12 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="29405850" />
  <Command __id="8164" _type="ShellCommand" date="Mon Dec 04 20:37:14 EST 2023" starttimestamp="1701710826491" timestamp="29407583" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8165" _type="ShellCommand" date="Mon Dec 04 20:37:16 EST 2023" starttimestamp="1701710826491" timestamp="29410285" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8166" _type="ShellCommand" date="Mon Dec 04 20:37:18 EST 2023" starttimestamp="1701710826491" timestamp="29412138" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8167" _type="ShellCommand" date="Mon Dec 04 20:37:20 EST 2023" starttimestamp="1701710826491" timestamp="29414223" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8168" _type="ShellCommand" date="Mon Dec 04 20:37:21 EST 2023" starttimestamp="1701710826491" timestamp="29415076" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8169" _type="ShellCommand" date="Mon Dec 04 20:37:28 EST 2023" starttimestamp="1701710826491" timestamp="29421590" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8170" _type="ShellCommand" date="Mon Dec 04 20:37:29 EST 2023" starttimestamp="1701710826491" timestamp="29423070" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8171" _type="ShellCommand" date="Mon Dec 04 20:37:30 EST 2023" starttimestamp="1701710826491" timestamp="29423549" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8172" _type="ShellCommand" date="Mon Dec 04 20:37:31 EST 2023" starttimestamp="1701710826491" timestamp="29424971" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8173" _type="ShellCommand" date="Mon Dec 04 20:38:11 EST 2023" starttimestamp="1701710826491" timestamp="29464809" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8174" _type="ShellCommand" date="Mon Dec 04 20:38:12 EST 2023" starttimestamp="1701710826491" timestamp="29466093" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8161" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:37:11 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="29405090">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8175" _type="ShellCommand" date="Mon Dec 04 20:38:14 EST 2023" starttimestamp="1701710826491" timestamp="29467923" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8177" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 20:38:17 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="29470878" />
  <Command __id="8178" _type="MoveCaretCommand" caretOffset="71" date="Mon Dec 04 20:38:18 EST 2023" docOffset="240" starttimestamp="1701710826491" timestamp="29472129" />
  <Command __id="8179" _type="SelectTextCommand" caretOffset="75" date="Mon Dec 04 20:38:18 EST 2023" end="75" start="57" starttimestamp="1701710826491" timestamp="29472283" />
  <Command __id="8176" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:38:17 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="29470806">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.scanner.tokens.Token;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }        public IdentifierAtomImpl(Token token) {        super(token);     }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8180" _type="CopyCommand" date="Mon Dec 04 20:38:20 EST 2023" starttimestamp="1701710826491" timestamp="29474448" />
  <Command __id="8182" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 20:38:24 EST 2023" docOffset="525" starttimestamp="1701710826491" timestamp="29478308" />
  <Command __id="8183" _type="ShellCommand" date="Mon Dec 04 20:38:27 EST 2023" starttimestamp="1701710826491" timestamp="29481180" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8184" _type="ShellCommand" date="Mon Dec 04 20:39:00 EST 2023" starttimestamp="1701710826491" timestamp="29514471" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8185" _type="ShellCommand" date="Mon Dec 04 20:39:01 EST 2023" starttimestamp="1701710826491" timestamp="29515391" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8186" _type="BalloonCommand" date="Mon Dec 04 21:29:01 EST 2023" message="*******************************************
Worked 6 minutes(fixed)/10 minutes(context based) from
Mon Dec 04 20:29:01 EST 2023 to Mon Dec 04 20:39:01 EST 2023
Edited 0 Projects: 
Edited 0 Files: 
Number of insert: 0
Number of delete: 0
" starttimestamp="1701710826491" timestamp="32514592">
    <fineGrainedWorkTime><![CDATA[10]]></fineGrainedWorkTime>
    <insert><![CDATA[0]]></insert>
    <startTime><![CDATA[1701739741081]]></startTime>
    <endTime><![CDATA[1701740341882]]></endTime>
    <workTime><![CDATA[6]]></workTime>
    <delete><![CDATA[0]]></delete>
  </Command>
  <Command __id="8187" _type="ShellCommand" date="Mon Dec 04 21:46:47 EST 2023" starttimestamp="1701710826491" timestamp="33581157" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8188" _type="ShellCommand" date="Mon Dec 04 21:46:48 EST 2023" starttimestamp="1701710826491" timestamp="33582402" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8181" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 20:38:24 EST 2023" docASTNodeCount="200" docActiveCodeLength="1142" docExpressionCount="133" docLength="1215" projectName="Assignment5" starttimestamp="1701710826491" timestamp="29478252">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {"), Diff(INSERT,"//"), Diff(EQUAL,"        expr = expr.getTail();"), Diff(INSERT,"//"), Diff(EQUAL,"		return evalHelper(expr, environment);	"), Diff(INSERT,"	return expr;	"), Diff(EQUAL,"}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[package index;

import java.util.ArrayList;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.NilAtom;
import main.lisp.evaluator.function.LambdaFactory;
import main.lisp.parser.terms.SExpression;

public class LambdaEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
//        expr = expr.getTail();
//		return evalHelper(expr, environment);
		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());
        return LambdaFactory.newInstance(ids, expr.getTail());
	}

    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {
        ArrayList<IdentifierAtom> ids = new ArrayList<>();
        while(!(expr instanceof NilAtom)) {
            ids.add((IdentifierAtom) expr.getHead());
            expr = expr.getTail();
        }
        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];
        for(IdentifierAtom id : ids) {
            idArray[ids.indexOf(id)] = id;
        }
        return idArray;
    }
}]]></snapshot>
  </Command>
  <Command __id="8189" _type="ShellCommand" date="Mon Dec 04 21:48:55 EST 2023" starttimestamp="1701710826491" timestamp="33708783" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8190" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:48:57 EST 2023" docASTNodeCount="132" docActiveCodeLength="798" docExpressionCount="95" docLength="798" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33710680">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8191" _type="MoveCaretCommand" caretOffset="266" date="Mon Dec 04 21:48:57 EST 2023" docOffset="266" starttimestamp="1701710826491" timestamp="33710750" />
  <Command __id="8192" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:48:58 EST 2023" docASTNodeCount="109" docActiveCodeLength="673" docExpressionCount="71" docLength="673" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33712012">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/IdentifierAtomImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.scanner.tokens.Token;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class IdentifierAtomImpl extends IdentifierAtom implements SExpression{    public IdentifierAtomImpl(String string) {        super(string);    }        public IdentifierAtomImpl(Token token) {        super(token);     }    @Override    public SExpression eval(Environment var1){        Optional<SExpression> retVal = var1.lookup(this);        if(retVal.isPresent()) {            return retVal.get();        }        return this;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8193" _type="SelectTextCommand" caretOffset="75" date="Mon Dec 04 21:48:58 EST 2023" end="75" start="57" starttimestamp="1701710826491" timestamp="33712071" />
  <Command __id="8194" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:49:02 EST 2023" docASTNodeCount="132" docActiveCodeLength="798" docExpressionCount="95" docLength="798" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33715694">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8195" _type="MoveCaretCommand" caretOffset="266" date="Mon Dec 04 21:49:02 EST 2023" docOffset="266" starttimestamp="1701710826491" timestamp="33715773" />
  <Command __id="8196" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:49:02 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33716299">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8197" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 21:49:02 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="33716339" />
  <Command __id="8198" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:49:03 EST 2023" docASTNodeCount="200" docActiveCodeLength="1142" docExpressionCount="133" docLength="1215" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33717366">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {//        expr = expr.getTail();//		return evalHelper(expr, environment);		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8199" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 21:49:03 EST 2023" docOffset="525" starttimestamp="1701710826491" timestamp="33717420" />
  <Command __id="8200" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:49:05 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33718638">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8201" _type="MoveCaretCommand" caretOffset="122" date="Mon Dec 04 21:49:05 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="33718682" />
  <Command __id="8202" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:49:05 EST 2023" docASTNodeCount="132" docActiveCodeLength="798" docExpressionCount="95" docLength="798" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33719137">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8203" _type="MoveCaretCommand" caretOffset="266" date="Mon Dec 04 21:49:05 EST 2023" docOffset="266" starttimestamp="1701710826491" timestamp="33719176" />
  <Command __id="8205" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 21:49:15 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="33729232" />
  <Command __id="8214" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:49:28 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33741909" type="Run" />
  <Command __id="8215" _type="ConsoleOutput" date="Mon Dec 04 21:49:32 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="33745683" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at java.base/java.util.Objects.checkIndex(Objects.java:372)¶	at java.base/java.util.ArrayList.get(ArrayList.java:459)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionLastResultChecker.actualOutput(AbstractLispExpressionLastResultChecker.java:5)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:23)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)¶	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8216" _type="ConsoleOutput" date="Mon Dec 04 21:49:32 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="33745684" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8217" _type="ShellCommand" date="Mon Dec 04 21:49:32 EST 2023" starttimestamp="1701710826491" timestamp="33745751" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8218" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:49:33 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33746557" type="Run" />
  <Command __id="8219" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:49:33 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33746943" type="Run" />
  <Command __id="8220" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Mon Dec 04 21:49:39 EST 2023" starttimestamp="1701710826491" timestamp="33752779" />
  <Command __id="8221" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:49:39 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33752800" type="Debug" />
  <Command __id="8222" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 21:49:39 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33752800" type="Run" />
  <Command __id="8223" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:49:39 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33752800" type="Debug" />
  <Command __id="8224" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 21:49:39 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33752800" type="Run" />
  <Command __id="8225" _type="BreakPointCommand" date="Mon Dec 04 21:49:40 EST 2023" lineNumber="133" starttimestamp="1701710826491" timestamp="33754189" type="BreakPointRemoved" />
  <Command __id="8226" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 21:49:40 EST 2023" starttimestamp="1701710826491" timestamp="33754213" />
  <Command __id="8235" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:49:49 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33763043" type="Run" />
  <Command __id="8240" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:49:53 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33766839" type="Run" />
  <Command __id="8241" _type="BreakPointCommand" date="Mon Dec 04 21:49:59 EST 2023" lineNumber="128" starttimestamp="1701710826491" timestamp="33773030" type="BreakPointRemoved" />
  <Command __id="8242" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 21:49:59 EST 2023" starttimestamp="1701710826491" timestamp="33773058" />
  <Command __id="8243" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 21:50:02 EST 2023" starttimestamp="1701710826491" timestamp="33775775" />
  <Command __id="8244" _type="BreakPointCommand" date="Mon Dec 04 21:50:02 EST 2023" lineNumber="123" starttimestamp="1701710826491" timestamp="33775776" type="BreakPointAdded" />
  <Command __id="8256" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:50:07 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33780993" type="Run" />
  <Command __id="8261" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:50:14 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33788027" type="Run" />
  <Command __id="8262" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Mon Dec 04 21:50:17 EST 2023" starttimestamp="1701710826491" timestamp="33791006" />
  <Command __id="8263" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:50:17 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33791026" type="Debug" />
  <Command __id="8264" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 21:50:17 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33791026" type="Run" />
  <Command __id="8265" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:50:17 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33791026" type="Debug" />
  <Command __id="8266" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 21:50:17 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33791026" type="Run" />
  <Command __id="8204" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:49:15 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33729156">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return null;	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8267" _type="BreakPointCommand" date="Mon Dec 04 21:50:19 EST 2023" lineNumber="123" starttimestamp="1701710826491" timestamp="33792793" type="BreakPointRemoved" />
  <Command __id="8268" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 21:50:19 EST 2023" starttimestamp="1701710826491" timestamp="33792821" />
  <Command __id="8269" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:50:21 EST 2023" docASTNodeCount="200" docActiveCodeLength="1142" docExpressionCount="133" docLength="1215" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33795058">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {//        expr = expr.getTail();//		return evalHelper(expr, environment);		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8270" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 21:50:21 EST 2023" docOffset="525" starttimestamp="1701710826491" timestamp="33795109" />
  <Command __id="8271" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:50:22 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33796269">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8272" _type="MoveCaretCommand" caretOffset="122" date="Mon Dec 04 21:50:22 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="33796323" />
  <Command __id="8273" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:50:26 EST 2023" docASTNodeCount="200" docActiveCodeLength="1142" docExpressionCount="133" docLength="1215" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33800315">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {//        expr = expr.getTail();//		return evalHelper(expr, environment);		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8274" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 21:50:26 EST 2023" docOffset="525" starttimestamp="1701710826491" timestamp="33800386" />
  <Command __id="8275" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:50:27 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33800957">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8276" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 21:50:27 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="33801010" />
  <Command __id="8277" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:50:28 EST 2023" docASTNodeCount="200" docActiveCodeLength="1142" docExpressionCount="133" docLength="1215" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33802199">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {//        expr = expr.getTail();//		return evalHelper(expr, environment);		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8278" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 21:50:28 EST 2023" docOffset="525" starttimestamp="1701710826491" timestamp="33802250" />
  <Command __id="8279" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:50:33 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33806525">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8280" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 21:50:33 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="33806581" />
  <Command __id="8282" _type="MoveCaretCommand" caretOffset="266" date="Mon Dec 04 21:50:33 EST 2023" docOffset="266" starttimestamp="1701710826491" timestamp="33807384" />
  <Command __id="8293" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:50:44 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33817827" type="Run" />
  <Command __id="8301" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:50:48 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33822351" type="Run" />
  <Command __id="8302" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 21:50:49 EST 2023" starttimestamp="1701710826491" timestamp="33823234" />
  <Command __id="8303" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:50:49 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33823240" type="Run" />
  <Command __id="8308" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:51:02 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="33836083" type="Run" />
  <Command __id="8309" _type="ShellCommand" date="Mon Dec 04 21:51:28 EST 2023" starttimestamp="1701710826491" timestamp="33862108" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8310" _type="ShellCommand" date="Mon Dec 04 21:51:49 EST 2023" starttimestamp="1701710826491" timestamp="33882939" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8311" _type="ShellCommand" date="Mon Dec 04 21:51:50 EST 2023" starttimestamp="1701710826491" timestamp="33883664" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8318" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:59:35 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="34349502" type="Debug" />
  <Command __id="8319" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 21:59:35 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34349502" type="Run" />
  <Command __id="8320" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 21:59:35 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="34349502" type="Debug" />
  <Command __id="8321" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 21:59:35 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34349502" type="Run" />
  <Command __id="8322" _type="ShellCommand" date="Mon Dec 04 21:59:36 EST 2023" starttimestamp="1701710826491" timestamp="34349511" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8323" _type="ShellCommand" date="Mon Dec 04 21:59:36 EST 2023" starttimestamp="1701710826491" timestamp="34350231" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8324" _type="ShellCommand" date="Mon Dec 04 21:59:41 EST 2023" starttimestamp="1701710826491" timestamp="34354643" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8325" _type="ShellCommand" date="Mon Dec 04 21:59:42 EST 2023" starttimestamp="1701710826491" timestamp="34355879" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8326" _type="ShellCommand" date="Mon Dec 04 21:59:42 EST 2023" starttimestamp="1701710826491" timestamp="34356202" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8327" _type="ShellCommand" date="Mon Dec 04 21:59:42 EST 2023" starttimestamp="1701710826491" timestamp="34356461" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8328" _type="ShellCommand" date="Mon Dec 04 22:00:23 EST 2023" starttimestamp="1701710826491" timestamp="34396762" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8329" _type="ShellCommand" date="Mon Dec 04 22:00:23 EST 2023" starttimestamp="1701710826491" timestamp="34397485" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8281" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 21:50:33 EST 2023" docASTNodeCount="132" docActiveCodeLength="798" docExpressionCount="95" docLength="798" projectName="Assignment5" starttimestamp="1701710826491" timestamp="33807326">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{		@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="8313" _type="Replace" date="Mon Dec 04 21:59:31 EST 2023" docASTNodeCount="262" docActiveCodeLength="2065" docExpressionCount="167" docLength="2371" endLine="23" insertionLength="2371" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="798" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="34345503">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.BasicExpressionEvaluator;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{
	
	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		Environment childEnvironment = environment.newChild();
		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();
		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);
		IdentifierAtom[] ids = lambda.getArgumentNames();
		childEnvironment.assign(null, lambda);
		return expr;
	}

}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.BasicExpressionEvaluator;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.BasicLambda;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator implements SExpression{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		Environment childEnvironment = environment.newChild();
		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();
		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);
		IdentifierAtom[] ids = lambda.getArgumentNames();
		childEnvironment.assign(null, lambda);
		return expr;
	}

	@Override
	public SExpression eval(Environment arg0) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'eval'");
	}

	@Override
	public SExpression getHead() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getHead'");
	}

	@Override
	public SExpression getTail() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getTail'");
	}

	@Override
	public boolean isAtom() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'isAtom'");
	}

	@Override
	public boolean isList() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'isList'");
	}

	@Override
	public boolean isNIL() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'isNIL'");
	}

	@Override
	public String toStringAsList() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'toStringAsList'");
	}

	@Override
	public String toStringAsSExpression() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpression'");
	}

	@Override
	public String toStringAsSExpressionDeep() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpressionDeep'");
	}

}
]]></insertedText>
  </DocumentChange>
  <Command __id="8331" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:00:25 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34399305">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8333" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:00:26 EST 2023" docASTNodeCount="200" docActiveCodeLength="1142" docExpressionCount="133" docLength="1215" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34399826">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {//        expr = expr.getTail();//		return evalHelper(expr, environment);		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8330" _type="ShellCommand" date="Mon Dec 04 22:00:25 EST 2023" starttimestamp="1701710826491" timestamp="34398511" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8332" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:00:25 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="34399356" />
  <Command __id="8334" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 22:00:26 EST 2023" docOffset="525" starttimestamp="1701710826491" timestamp="34399877" />
  <Command __id="8336" _type="MoveCaretCommand" caretOffset="122" date="Mon Dec 04 22:00:27 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="34400963" />
  <Command __id="8338" _type="MoveCaretCommand" caretOffset="2943" date="Mon Dec 04 22:00:28 EST 2023" docOffset="3179" starttimestamp="1701710826491" timestamp="34401670" />
  <Command __id="8339" _type="MoveCaretCommand" caretOffset="3213" date="Mon Dec 04 22:00:29 EST 2023" docOffset="3449" starttimestamp="1701710826491" timestamp="34403366" />
  <Command __id="8340" _type="MoveCaretCommand" caretOffset="3257" date="Mon Dec 04 22:00:30 EST 2023" docOffset="3493" starttimestamp="1701710826491" timestamp="34403925" />
  <Command __id="8341" _type="MoveCaretCommand" caretOffset="3260" date="Mon Dec 04 22:00:30 EST 2023" docOffset="3496" starttimestamp="1701710826491" timestamp="34404425" />
  <Command __id="8342" _type="ShellCommand" date="Mon Dec 04 22:00:32 EST 2023" starttimestamp="1701710826491" timestamp="34405717" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8343" _type="ShellCommand" date="Mon Dec 04 22:00:34 EST 2023" starttimestamp="1701710826491" timestamp="34407817" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8344" _type="ShellCommand" date="Mon Dec 04 22:00:34 EST 2023" starttimestamp="1701710826491" timestamp="34408295" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8335" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:00:27 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34400915">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8337" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:00:28 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34401627">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return null;	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8347" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:01:03 EST 2023" docASTNodeCount="200" docActiveCodeLength="1142" docExpressionCount="133" docLength="1215" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34436672">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {//        expr = expr.getTail();//		return evalHelper(expr, environment);		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8349" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:01:03 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34437271">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8345" _type="ShellCommand" date="Mon Dec 04 22:01:02 EST 2023" starttimestamp="1701710826491" timestamp="34435638" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8346" _type="MoveCaretCommand" caretOffset="3173" date="Mon Dec 04 22:01:02 EST 2023" docOffset="3409" starttimestamp="1701710826491" timestamp="34435711" />
  <Command __id="8348" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 22:01:03 EST 2023" docOffset="525" starttimestamp="1701710826491" timestamp="34436727" />
  <Command __id="8350" _type="MoveCaretCommand" caretOffset="122" date="Mon Dec 04 22:01:03 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="34437317" />
  <Command __id="8352" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 22:01:05 EST 2023" docOffset="525" starttimestamp="1701710826491" timestamp="34438797" />
  <Command __id="8354" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:01:05 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="34439052" />
  <Command __id="8356" _type="MoveCaretCommand" caretOffset="688" date="Mon Dec 04 22:01:05 EST 2023" docOffset="688" starttimestamp="1701710826491" timestamp="34439308" />
  <Command __id="8357" _type="ShellCommand" date="Mon Dec 04 22:01:06 EST 2023" starttimestamp="1701710826491" timestamp="34440176" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8358" _type="ShellCommand" date="Mon Dec 04 22:01:53 EST 2023" starttimestamp="1701710826491" timestamp="34486588" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8359" _type="ShellCommand" date="Mon Dec 04 22:02:48 EST 2023" starttimestamp="1701710826491" timestamp="34542077" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8360" _type="ShellCommand" date="Mon Dec 04 22:03:34 EST 2023" starttimestamp="1701710826491" timestamp="34587991" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8361" _type="ShellCommand" date="Mon Dec 04 22:03:35 EST 2023" starttimestamp="1701710826491" timestamp="34589157" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8362" _type="ShellCommand" date="Mon Dec 04 22:03:36 EST 2023" starttimestamp="1701710826491" timestamp="34589825" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8363" _type="ShellCommand" date="Mon Dec 04 22:03:38 EST 2023" starttimestamp="1701710826491" timestamp="34592507" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8364" _type="ShellCommand" date="Mon Dec 04 22:04:01 EST 2023" starttimestamp="1701710826491" timestamp="34615180" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8365" _type="MoveCaretCommand" caretOffset="2003" date="Mon Dec 04 22:04:01 EST 2023" docOffset="2003" starttimestamp="1701710826491" timestamp="34615240" />
  <Command __id="8366" _type="MoveCaretCommand" caretOffset="2003" date="Mon Dec 04 22:04:01 EST 2023" docOffset="2003" starttimestamp="1701710826491" timestamp="34615240" />
  <Command __id="8367" _type="ShellCommand" date="Mon Dec 04 22:04:05 EST 2023" starttimestamp="1701710826491" timestamp="34618662" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8368" _type="ShellCommand" date="Mon Dec 04 22:04:10 EST 2023" starttimestamp="1701710826491" timestamp="34624245" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8369" _type="ShellCommand" date="Mon Dec 04 22:04:13 EST 2023" starttimestamp="1701710826491" timestamp="34627165" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8351" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:01:05 EST 2023" docASTNodeCount="200" docActiveCodeLength="1142" docExpressionCount="133" docLength="1215" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34438742">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {//        expr = expr.getTail();//		return evalHelper(expr, environment);		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8353" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:01:05 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34439005">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8355" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:01:05 EST 2023" docASTNodeCount="262" docActiveCodeLength="2065" docExpressionCount="167" docLength="2371" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34439262">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;"), Diff(INSERT,"import main.lisp.evaluator.function.BasicLambda;"), Diff(EQUAL,"import main.lisp.evaluator.function.Lambda;"), Diff(DELETE,""), Diff(EQUAL,"import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator"), Diff(INSERT," implements SExpression"), Diff(EQUAL,"{"), Diff(DELETE,"	"), Diff(EQUAL,"	@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);"), Diff(DELETE,""), Diff(EQUAL,"		return expr;	}"), Diff(INSERT,"	@Override	public SExpression eval(Environment arg0) {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'eval'");	}	@Override	public SExpression getHead() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getHead'");	}	@Override	public SExpression getTail() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getTail'");	}	@Override	public boolean isAtom() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'isAtom'");	}	@Override	public boolean isList() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'isList'");	}	@Override	public boolean isNIL() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'isNIL'");	}	@Override	public String toStringAsList() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'toStringAsList'");	}	@Override	public String toStringAsSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpression'");	}	@Override	public String toStringAsSExpressionDeep() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpressionDeep'");	}"), Diff(EQUAL,"}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.BasicExpressionEvaluator;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.BasicLambda;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator implements SExpression{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		Environment childEnvironment = environment.newChild();
		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();
		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);
		IdentifierAtom[] ids = lambda.getArgumentNames();
		childEnvironment.assign(null, lambda);
		return expr;
	}

	@Override
	public SExpression eval(Environment arg0) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'eval'");
	}

	@Override
	public SExpression getHead() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getHead'");
	}

	@Override
	public SExpression getTail() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getTail'");
	}

	@Override
	public boolean isAtom() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'isAtom'");
	}

	@Override
	public boolean isList() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'isList'");
	}

	@Override
	public boolean isNIL() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'isNIL'");
	}

	@Override
	public String toStringAsList() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'toStringAsList'");
	}

	@Override
	public String toStringAsSExpression() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpression'");
	}

	@Override
	public String toStringAsSExpressionDeep() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpressionDeep'");
	}

}
]]></snapshot>
  </Command>
  <Command __id="8370" _type="ShellCommand" date="Mon Dec 04 22:04:35 EST 2023" starttimestamp="1701710826491" timestamp="34648571" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8371" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:04:36 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34650387">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8372" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:04:36 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="34650438" />
  <Command __id="8373" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:04:37 EST 2023" docASTNodeCount="200" docActiveCodeLength="1142" docExpressionCount="133" docLength="1215" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34650682">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {//        expr = expr.getTail();//		return evalHelper(expr, environment);		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8374" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 22:04:37 EST 2023" docOffset="525" starttimestamp="1701710826491" timestamp="34650729" />
  <Command __id="8375" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:04:38 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34652264">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8376" _type="MoveCaretCommand" caretOffset="122" date="Mon Dec 04 22:04:38 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="34652313" />
  <Command __id="8377" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:04:39 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34652524">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return null;	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8378" _type="MoveCaretCommand" caretOffset="3173" date="Mon Dec 04 22:04:39 EST 2023" docOffset="3409" starttimestamp="1701710826491" timestamp="34652567" />
  <Command __id="8379" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:04:39 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34652912">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8380" _type="MoveCaretCommand" caretOffset="122" date="Mon Dec 04 22:04:39 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="34652966" />
  <Command __id="8381" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:04:39 EST 2023" docASTNodeCount="200" docActiveCodeLength="1142" docExpressionCount="133" docLength="1215" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34653261">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {//        expr = expr.getTail();//		return evalHelper(expr, environment);		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8382" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 22:04:39 EST 2023" docOffset="525" starttimestamp="1701710826491" timestamp="34653310" />
  <Command __id="8383" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:04:40 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34653569">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8384" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:04:40 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="34653618" />
  <Command __id="8386" _type="MoveCaretCommand" caretOffset="2003" date="Mon Dec 04 22:04:40 EST 2023" docOffset="2003" starttimestamp="1701710826491" timestamp="34653896" />
  <Command __id="8385" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:04:40 EST 2023" docASTNodeCount="262" docActiveCodeLength="2065" docExpressionCount="167" docLength="2371" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34653850">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator implements SExpression{	@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}	@Override	public SExpression eval(Environment arg0) {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'eval'");	}	@Override	public SExpression getHead() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getHead'");	}	@Override	public SExpression getTail() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getTail'");	}	@Override	public boolean isAtom() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'isAtom'");	}	@Override	public boolean isList() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'isList'");	}	@Override	public boolean isNIL() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'isNIL'");	}	@Override	public String toStringAsList() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'toStringAsList'");	}	@Override	public String toStringAsSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpression'");	}	@Override	public String toStringAsSExpressionDeep() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpressionDeep'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8387" _type="MoveCaretCommand" caretOffset="922" date="Mon Dec 04 22:04:42 EST 2023" docOffset="922" starttimestamp="1701710826491" timestamp="34656213" />
  <Command __id="8388" _type="MoveCaretCommand" caretOffset="922" date="Mon Dec 04 22:04:42 EST 2023" docOffset="922" starttimestamp="1701710826491" timestamp="34656213" />
  <Command __id="8390" _type="MoveCaretCommand" caretOffset="267" date="Mon Dec 04 22:04:43 EST 2023" docOffset="525" starttimestamp="1701710826491" timestamp="34657291" />
  <Command __id="8391" _type="ShellCommand" date="Mon Dec 04 22:04:44 EST 2023" starttimestamp="1701710826491" timestamp="34658119" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8392" _type="ShellCommand" date="Mon Dec 04 22:08:05 EST 2023" starttimestamp="1701710826491" timestamp="34858909" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8393" _type="ShellCommand" date="Mon Dec 04 22:08:07 EST 2023" starttimestamp="1701710826491" timestamp="34860560" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8394" _type="ShellCommand" date="Mon Dec 04 22:08:13 EST 2023" starttimestamp="1701710826491" timestamp="34866823" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8395" _type="ShellCommand" date="Mon Dec 04 22:08:14 EST 2023" starttimestamp="1701710826491" timestamp="34867565" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8396" _type="ShellCommand" date="Mon Dec 04 22:15:51 EST 2023" starttimestamp="1701710826491" timestamp="35324882" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8397" _type="ShellCommand" date="Mon Dec 04 22:15:53 EST 2023" starttimestamp="1701710826491" timestamp="35326629" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8398" _type="BalloonCommand" date="Mon Dec 04 22:29:01 EST 2023" message="*******************************************
Worked 8 minutes(fixed)/46 minutes(context based) from
Mon Dec 04 21:29:01 EST 2023 to Mon Dec 04 22:15:53 EST 2023
Edited 0 Projects: 
Edited 0 Files: 
Number of insert: 0
Number of delete: 0
" starttimestamp="1701710826491" timestamp="36114602">
    <fineGrainedWorkTime><![CDATA[46]]></fineGrainedWorkTime>
    <insert><![CDATA[0]]></insert>
    <startTime><![CDATA[1701743341083]]></startTime>
    <endTime><![CDATA[1701746153120]]></endTime>
    <workTime><![CDATA[8]]></workTime>
    <delete><![CDATA[0]]></delete>
  </Command>
  <Command __id="8399" _type="ShellCommand" date="Mon Dec 04 22:38:45 EST 2023" starttimestamp="1701710826491" timestamp="36698995" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8400" _type="ShellCommand" date="Mon Dec 04 22:38:46 EST 2023" starttimestamp="1701710826491" timestamp="36700257" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8401" _type="ShellCommand" date="Mon Dec 04 22:50:00 EST 2023" starttimestamp="1701710826491" timestamp="37374068" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8403" _type="EclipseCommand" commandID="" date="Mon Dec 04 22:50:00 EST 2023" starttimestamp="1701710826491" timestamp="37374452" />
  <Command __id="8404" _type="EclipseCommand" commandID="" date="Mon Dec 04 22:50:00 EST 2023" starttimestamp="1701710826491" timestamp="37374475" />
  <Command __id="8405" _type="ShellCommand" date="Mon Dec 04 22:50:02 EST 2023" starttimestamp="1701710826491" timestamp="37375529" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8389" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:04:43 EST 2023" docASTNodeCount="200" docActiveCodeLength="1142" docExpressionCount="133" docLength="1215" projectName="Assignment5" starttimestamp="1701710826491" timestamp="34657238">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {//        expr = expr.getTail();//		return evalHelper(expr, environment);		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="8402" _type="Replace" date="Mon Dec 04 22:50:00 EST 2023" docASTNodeCount="209" docActiveCodeLength="1199" docExpressionCount="141" docLength="1214" endLine="37" insertionLength="1214" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1215" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="37374365">
    <deletedText><![CDATA[package index;

import java.util.ArrayList;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.NilAtom;
import main.lisp.evaluator.function.LambdaFactory;
import main.lisp.parser.terms.SExpression;

public class LambdaEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
//        expr = expr.getTail();
//		return evalHelper(expr, environment);
		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());
        return LambdaFactory.newInstance(ids, expr.getTail());
	}

    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {
        ArrayList<IdentifierAtom> ids = new ArrayList<>();
        while(!(expr instanceof NilAtom)) {
            ids.add((IdentifierAtom) expr.getHead());
            expr = expr.getTail();
        }
        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];
        for(IdentifierAtom id : ids) {
            idArray[ids.indexOf(id)] = id;
        }
        return idArray;
    }
}]]></deletedText>
    <insertedText><![CDATA[package index;

import java.util.ArrayList;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.NilAtom;
import main.lisp.evaluator.function.LambdaFactory;
import main.lisp.parser.terms.SExpression;

public class LambdaEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
        expr = expr.getTail();
		return evalHelper(expr, environment);
		// return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());
        return LambdaFactory.newInstance(ids, expr.getTail());
	}

    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {
        ArrayList<IdentifierAtom> ids = new ArrayList<>();
        while(!(expr instanceof NilAtom)) {
            ids.add((IdentifierAtom) expr.getHead());
            expr = expr.getTail();
        }
        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];
        for(IdentifierAtom id : ids) {
            idArray[ids.indexOf(id)] = id;
        }
        return idArray;
    }
}]]></insertedText>
  </DocumentChange>
  <Command __id="8406" _type="ShellCommand" date="Mon Dec 04 22:50:19 EST 2023" starttimestamp="1701710826491" timestamp="37393349" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8407" _type="MoveCaretCommand" caretOffset="354" date="Mon Dec 04 22:50:20 EST 2023" docOffset="354" starttimestamp="1701710826491" timestamp="37393852" />
  <Command __id="8408" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:50:23 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37397010">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8409" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:50:23 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="37397071" />
  <Command __id="8410" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:50:23 EST 2023" docASTNodeCount="262" docActiveCodeLength="2065" docExpressionCount="167" docLength="2371" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37397298">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator implements SExpression{	@Override	public SExpression eval(SExpression expr, Environment environment) {		Environment childEnvironment = environment.newChild();		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);		IdentifierAtom[] ids = lambda.getArgumentNames();		childEnvironment.assign(null, lambda);		return expr;	}	@Override	public SExpression eval(Environment arg0) {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'eval'");	}	@Override	public SExpression getHead() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getHead'");	}	@Override	public SExpression getTail() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getTail'");	}	@Override	public boolean isAtom() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'isAtom'");	}	@Override	public boolean isList() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'isList'");	}	@Override	public boolean isNIL() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'isNIL'");	}	@Override	public String toStringAsList() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'toStringAsList'");	}	@Override	public String toStringAsSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpression'");	}	@Override	public String toStringAsSExpressionDeep() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpressionDeep'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="8412" _type="Replace" date="Mon Dec 04 22:50:23 EST 2023" docASTNodeCount="194" docActiveCodeLength="1178" docExpressionCount="146" docLength="1178" endLine="78" insertionLength="1178" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="2371" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="37397493">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.BasicExpressionEvaluator;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.BasicLambda;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator implements SExpression{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		Environment childEnvironment = environment.newChild();
		LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();
		Lambda lambda = (Lambda)lambdaEvaluator.eval(expr, environment);
		IdentifierAtom[] ids = lambda.getArgumentNames();
		childEnvironment.assign(null, lambda);
		return expr;
	}

	@Override
	public SExpression eval(Environment arg0) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'eval'");
	}

	@Override
	public SExpression getHead() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getHead'");
	}

	@Override
	public SExpression getTail() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getTail'");
	}

	@Override
	public boolean isAtom() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'isAtom'");
	}

	@Override
	public boolean isList() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'isList'");
	}

	@Override
	public boolean isNIL() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'isNIL'");
	}

	@Override
	public String toStringAsList() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'toStringAsList'");
	}

	@Override
	public String toStringAsSExpression() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpression'");
	}

	@Override
	public String toStringAsSExpressionDeep() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpressionDeep'");
	}

}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.BasicExpressionEvaluator;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.BasicLambda;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		if(BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().getHead().toString()).getClass().equals(LambdaEvaluator.class)){
			Environment childEnvironment = environment.newChild();
			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();
			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);
			IdentifierAtom[] ids = lambda.getArgumentNames();
			for (IdentifierAtom id : ids){
				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));
				expr = expr.getTail();
			}
			return lambda.eval(childEnvironment);
		}else{
			return super.eval(expr, environment);
		}
	}
}
]]></insertedText>
  </DocumentChange>
  <Command __id="8413" _type="EclipseCommand" commandID="" date="Mon Dec 04 22:50:24 EST 2023" starttimestamp="1701710826491" timestamp="37397588" />
  <Command __id="8414" _type="EclipseCommand" commandID="" date="Mon Dec 04 22:50:24 EST 2023" starttimestamp="1701710826491" timestamp="37397602" />
  <Command __id="8416" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:50:26 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="37400395" />
  <Command __id="8417" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Mon Dec 04 22:50:28 EST 2023" starttimestamp="1701710826491" timestamp="37402136" />
  <Command __id="8418" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 22:50:28 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37402342" type="Run" />
  <Command __id="8419" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 22:50:28 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37402342" type="Run" />
  <Command __id="8420" _type="ShellCommand" date="Mon Dec 04 22:50:29 EST 2023" starttimestamp="1701710826491" timestamp="37402657" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8421" _type="ConsoleOutput" date="Mon Dec 04 22:50:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37406945" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"8¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8422" _type="ConsoleOutput" date="Mon Dec 04 22:50:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37406948" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8423" _type="ConsoleOutput" date="Mon Dec 04 22:50:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37406952" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8424" _type="ConsoleOutput" date="Mon Dec 04 22:50:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37406953" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):6"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8425" _type="ConsoleOutput" date="Mon Dec 04 22:50:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37406955" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):7¶"), Diff(EQUAL,"Test Result:"), Diff(INSERT,"Main"), Diff(EQUAL,"Class"), Diff(DELETE,"Registry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶")]]]></diff>
  </Command>
  <Command __id="8426" _type="ExceptionCommand" date="Mon Dec 04 22:50:33 EST 2023" starttimestamp="1701710826491" timestamp="37406971" type="Exception">
    <exceptionString><![CDATA[java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="8427" _type="ConsoleOutput" date="Mon Dec 04 22:50:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37406974" type="ConsoleOutput">
    <outputString><![CDATA[	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):7¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:16)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)¶	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8428" _type="ConsoleOutput" date="Mon Dec 04 22:50:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37407026" type="ConsoleOutput">
    <outputString><![CDATA[	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluat"), Diff(INSERT,"java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccess"), Diff(EQUAL,"orImpl.java:"), Diff(DELETE,"1"), Diff(EQUAL,"6"), Diff(INSERT,"2"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.parser.terms.BasicExpression.eval(BasicExpression"), Diff(INSERT,"java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl"), Diff(EQUAL,".java:"), Diff(DELETE,"26"), Diff(INSERT,"43"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation"), Diff(INSERT,"java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"92"), Diff(INSERT,"50"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvalu"), Diff(INSERT,"org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,"Registerer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer"), Diff(INSERT,"g.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"100"), Diff(INSERT,"47"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvalu"), Diff(INSERT,"org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,"Registerer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"g.junit.runners.ParentRunner.runLeaf(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"133"), Diff(INSERT,"325"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvalu"), Diff(INSERT,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,"Registerer.evaluate(AbstractLispExpressionInputterAndEvalu"), Diff(INSERT,"g.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,"Register"), Diff(INSERT,"g.junit.runners.ParentRunner$1.schedule(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"65"), Diff(INSERT,"71"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionCheck"), Diff(INSERT,"org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"21"), Diff(INSERT,"58"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionCheck"), Diff(INSERT,"org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"47"), Diff(INSERT,"363"), Diff(EQUAL,")¶	at grader.basics."), Diff(DELETE,"testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFail"), Diff(INSERT,"junit.AGradableJUnitTest.test(AGradable"), Diff(EQUAL,"JUnitTest"), Diff(DELETE,"Case"), Diff(EQUAL,".java:"), Diff(DELETE,"2"), Diff(EQUAL,"31"), Diff(INSERT,"7"), Diff(EQUAL,")¶	at grader.basics."), Diff(DELETE,"testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCas"), Diff(INSERT,"junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuit"), Diff(EQUAL,"e.java:1"), Diff(DELETE,"1"), Diff(INSERT,"9"), Diff(EQUAL,"1)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(Framework"), Diff(INSERT,"bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(Unified"), Diff(EQUAL,"Method.java:"), Diff(DELETE,"50"), Diff(INSERT,"219"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand"), Diff(EQUAL,".java:"), Diff(DELETE,"12"), Diff(INSERT,"69"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod"), Diff(INSERT,"bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager"), Diff(EQUAL,".java:"), Diff(DELETE,"47"), Diff(INSERT,"1906"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager"), Diff(EQUAL,".java:17"), Diff(INSERT,"01"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.runLeaf(ParentRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"32"), Diff(INSERT,"158"), Diff(EQUAL,"5)¶	at "), Diff(DELETE,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"7"), Diff(INSERT,"153"), Diff(EQUAL,"8)¶	at "), Diff(DELETE,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"57"), Diff(INSERT,"1531"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$3.run(ParentRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"290"), Diff(INSERT,"1406"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$1.schedule(ParentRunn"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:"), Diff(DELETE,"7"), Diff(EQUAL,"1"), Diff(INSERT,"357"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.runChildren(ParentRunn"), Diff(INSERT,"bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapt"), Diff(EQUAL,"er.java:"), Diff(DELETE,"288"), Diff(INSERT,"469"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.access$000(ParentRunn"), Diff(INSERT,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(EQUAL,"er.java:"), Diff(DELETE,"5"), Diff(INSERT,"27"), Diff(EQUAL,"8)¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner$2.evaluate(ParentRunn"), Diff(INSERT,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(EQUAL,"er.java:2"), Diff(DELETE,"68"), Diff(INSERT,"77"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.run(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.Component.processMouseEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"63"), Diff(INSERT,"8"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTes"), Diff(INSERT,"java.desktop/javax.swing.JComponent.processMouseEvent(JComponen"), Diff(EQUAL,"t.java:3"), Diff(DELETE,"17"), Diff(INSERT,"342"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext"), Diff(INSERT,"java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"5"), Diff(EQUAL,"2"), Diff(INSERT,"263"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.junit.JUnitTestsEnvir"), Diff(INSERT,"java.desktop/java.awt.Component.dispatchEventImpl(Comp"), Diff(EQUAL,"on"), Diff(DELETE,"m"), Diff(EQUAL,"ent."), Diff(DELETE,"getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment"), Diff(INSERT,"java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"6"), Diff(EQUAL,"2"), Diff(INSERT,"321"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionCheck"), Diff(INSERT,"java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Contain"), Diff(EQUAL,"er.java:4"), Diff(DELETE,"5"), Diff(INSERT,"918"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"231"), Diff(INSERT,"4556"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"111"), Diff(INSERT,"2307"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.NativeMethodAccessor"), Diff(INSERT,"desktop/java.awt.Window.dispatchEvent"), Diff(EQUAL,"Impl"), Diff(DELETE,".invoke0(Native Method"), Diff(INSERT,"(Window.java:2772"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="8429" _type="ConsoleOutput" date="Mon Dec 04 22:50:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37407057" type="ConsoleOutput">
    <outputString><![CDATA[	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionLastResultChecker.actualOutput(AbstractLispExpressionLastResultChecker.java:5)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:23)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionLastResultChecker.actualOutput(AbstractLispExpressionLastResultChecker.java:5)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:23)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶"), Diff(EQUAL,"	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.A"), Diff(DELETE,"GradableJUnitSuite.test(AGradableJUnitSuite"), Diff(INSERT,"JUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext"), Diff(EQUAL,".java:"), Diff(DELETE,"348"), Diff(INSERT,"52"), Diff(EQUAL,")¶	at grader.basics.junit."), Diff(DELETE,"A"), Diff(INSERT,"JUnitTestsEnvironment.getAndPossiblyRun"), Diff(EQUAL,"GradableJUnit"), Diff(DELETE,"Suite.open(AGradableJUnitSuit"), Diff(INSERT,"Test(JUnitTestsEnvironment.java:62)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCas"), Diff(EQUAL,"e.java:1"), Diff(DELETE,"9"), Diff(INSERT,"1"), Diff(EQUAL,"1)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at "), Diff(DELETE,"bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(Unified"), Diff(INSERT,"org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(Framework"), Diff(EQUAL,"Method.java:"), Diff(DELETE,"219"), Diff(INSERT,"50"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand"), Diff(INSERT,"org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable"), Diff(EQUAL,".java:"), Diff(DELETE,"69"), Diff(INSERT,"12"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager"), Diff(INSERT,"org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod"), Diff(EQUAL,".java:"), Diff(DELETE,"1906"), Diff(INSERT,"47"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager"), Diff(INSERT,"org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod"), Diff(EQUAL,".java:17"), Diff(DELETE,"01"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManag"), Diff(INSERT,"org.junit.runners.ParentRunner.runLeaf(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"158"), Diff(INSERT,"32"), Diff(EQUAL,"5)¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(INSERT,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"153"), Diff(INSERT,"7"), Diff(EQUAL,"8)¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(INSERT,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"1531"), Diff(INSERT,"57"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManag"), Diff(INSERT,"org.junit.runners.ParentRunner$3.run(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"1406"), Diff(INSERT,"290"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManag"), Diff(INSERT,"org.junit.runners.ParentRunner$1.schedule(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"135"), Diff(EQUAL,"7"), Diff(INSERT,"1"), Diff(EQUAL,")¶	at "), Diff(DELETE,"bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(INSERT,"org.junit.runners.ParentRunner.runChildren(ParentRunn"), Diff(EQUAL,"er.java:2"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL,"8)¶	at "), Diff(DELETE,"java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(INSERT,"org.junit.runners.ParentRunner.access$000(ParentRunn"), Diff(EQUAL,"er.java:"), Diff(DELETE,"277"), Diff(INSERT,"58"), Diff(EQUAL,")¶	at "), Diff(DELETE,"java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component"), Diff(INSERT,"org.junit.runners.ParentRunner$2.evaluate(ParentRunner"), Diff(EQUAL,".java:"), Diff(DELETE,"6400"), Diff(INSERT,"268"), Diff(EQUAL,")¶	at "), Diff(DELETE,"java.desktop/java.awt.Container.processEvent(Contai"), Diff(INSERT,"org.junit.runners.ParentRunner.run(ParentRun"), Diff(EQUAL,"ner.java:"), Diff(DELETE,"22"), Diff(INSERT,"3"), Diff(EQUAL,"63)¶	at "), Diff(DELETE,"java.desktop/java.awt.Component.dispatchEventImpl(Componen"), Diff(INSERT,"grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTes"), Diff(EQUAL,"t.java:"), Diff(DELETE,"5011"), Diff(INSERT,"317"), Diff(EQUAL,")¶	at "), Diff(DELETE,"java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(INSERT,"grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite"), Diff(EQUAL,".java:"), Diff(INSERT,"3"), Diff(EQUAL,"48"), Diff(DELETE,"43"), Diff(EQUAL,")¶	at "), Diff(DELETE,"java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container"), Diff(INSERT,"grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite"), Diff(EQUAL,".java:"), Diff(DELETE,"4"), Diff(INSERT,"1"), Diff(EQUAL,"91"), Diff(DELETE,"8"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Conta"), Diff(INSERT,"base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk."), Diff(EQUAL,"in"), Diff(INSERT,"t"), Diff(EQUAL,"er"), Diff(DELETE,".dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window"), Diff(INSERT,"nal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl"), Diff(EQUAL,".java:"), Diff(DELETE,"277"), Diff(INSERT,"6"), Diff(EQUAL,"2)¶")]]]></diff>
  </Command>
  <Command __id="8415" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:50:26 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37400341">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8430" _type="ShellCommand" date="Mon Dec 04 22:50:38 EST 2023" starttimestamp="1701710826491" timestamp="37411710" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8431" _type="LocalChecksRawCommand" date="Mon Dec 04 22:50:38 EST 2023" starttimestamp="1701710826491" timestamp="37411714">
    <CSVRow><![CDATA[119,Mon Dec 04 22:50:33 EST 2023,40,0,LispLambdaSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadLispChecker PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,54,0,true,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) LispLambdaChecker2-(0.0/10.0) LispLambdaChecker3-(0.0/10.0) LoadLambdaChecker-(0.0/15.0) LoadLambdaChecker2-(0.0/15.0) LoadLambdaChecker3-(0.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8432" _type="LocalChecksRawCommand" date="Mon Dec 04 22:50:38 EST 2023" starttimestamp="1701710826491" timestamp="37411714">
    <CSVRow><![CDATA[119,Mon Dec 04 22:50:33 EST 2023,40,0,LispLambdaSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadLispChecker PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,54,0,true,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) LispLambdaChecker2-(0.0/10.0) LispLambdaChecker3-(0.0/10.0) LoadLambdaChecker-(0.0/15.0) LoadLambdaChecker2-(0.0/15.0) LoadLambdaChecker3-(0.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8434" _type="SelectTextCommand" caretOffset="685" date="Mon Dec 04 22:50:53 EST 2023" end="685" start="549" starttimestamp="1701710826491" timestamp="37427070" />
  <Command __id="8433" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:50:53 EST 2023" docASTNodeCount="194" docActiveCodeLength="1178" docExpressionCount="146" docLength="1178" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37427031">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator"), Diff(DELETE," implements SExpression"), Diff(EQUAL,"{"), Diff(INSERT,""), Diff(EQUAL,"	@Override	public SExpression eval(SExpression expr, Environment environment) {		"), Diff(INSERT,"if(BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().getHead().toString()).getClass().equals(LambdaEvaluator.class)){			"), Diff(EQUAL,"Environment childEnvironment = environment.newChild();		"), Diff(INSERT,"	"), Diff(EQUAL,"LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();		"), Diff(INSERT,"	"), Diff(EQUAL,"Lambda lambda = (Lambda)lambdaEvaluator.eval(expr"), Diff(INSERT,".getHead()"), Diff(EQUAL,", environment);		"), Diff(INSERT,"	"), Diff(EQUAL,"IdentifierAtom[] ids = lambda.getArgumentNames();		"), Diff(DELETE,"childEnvironment.assign(null, lambda);		return expr;	}	@Override	public SExpression eval(Environment arg0) {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'eval'");	}	@Override	public SExpression getHead() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getHead'");	}	@Override	public SExpression getTail() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getTail'");	}	@Override	public boolean isAtom() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'isAtom'");	}	@Override	public boolean isList() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'isList'");	}	@Override	public boolean isNIL() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'isNIL'");	}	@Override	public String toStringAsList() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'toStringAsList'");	}	@Override	public String toStringAsSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpression'");	}	@Override	public String toStringAsSExpressionDeep() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'toStringAsSExpressionDeep'""), Diff(INSERT,"	for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment"), Diff(EQUAL,");	"), Diff(INSERT,"	"), Diff(EQUAL,"}"), Diff(INSERT,"	}"), Diff(EQUAL,"}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.BasicExpressionEvaluator;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.BasicLambda;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		if(BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().getHead().toString()).getClass().equals(LambdaEvaluator.class)){
			Environment childEnvironment = environment.newChild();
			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();
			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);
			IdentifierAtom[] ids = lambda.getArgumentNames();
			for (IdentifierAtom id : ids){
				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));
				expr = expr.getTail();
			}
			return lambda.eval(childEnvironment);
		}else{
			return super.eval(expr, environment);
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="8435" _type="MoveCaretCommand" caretOffset="548" date="Mon Dec 04 22:51:09 EST 2023" docOffset="548" starttimestamp="1701710826491" timestamp="37443286" />
  <Command __id="8436" _type="MoveCaretCommand" caretOffset="548" date="Mon Dec 04 22:51:09 EST 2023" docOffset="548" starttimestamp="1701710826491" timestamp="37443286" />
  <Command __id="8437" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:51:13 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37446822">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8438" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:51:13 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="37446887" />
  <Command __id="8439" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:51:19 EST 2023" docASTNodeCount="194" docActiveCodeLength="1178" docExpressionCount="146" docLength="1178" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37452661">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().getHead().toString()).getClass().equals(LambdaEvaluator.class)){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8440" _type="MoveCaretCommand" caretOffset="548" date="Mon Dec 04 22:51:19 EST 2023" docOffset="548" starttimestamp="1701710826491" timestamp="37452723" />
  <Command __id="8441" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:51:25 EST 2023" docASTNodeCount="194" docActiveCodeLength="1178" docExpressionCount="146" docLength="1178" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37458824">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().getHead().toString()).getClass().equals(LambdaEvaluator.class)){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8442" _type="MoveCaretCommand" caretOffset="548" date="Mon Dec 04 22:51:25 EST 2023" docOffset="548" starttimestamp="1701710826491" timestamp="37458884" />
  <Command __id="8443" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:51:26 EST 2023" docASTNodeCount="233" docActiveCodeLength="1448" docExpressionCount="171" docLength="1448" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37459987">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.parser.terms.AbstractSExpression;import main.lisp.parser.terms.Atom;import main.lisp.parser.terms.BasicExpression;import main.lisp.parser.terms.SExpression;public class BasicExpressionImpl extends BasicExpression implements SExpression{		public BasicExpressionImpl(SExpression head, SExpression tail) {		super(head, tail);	}	@Override	public boolean isList() {		if((this.getTail() instanceof Atom)) {			return this.getTail().isNIL();		}else {			return this.getTail().isList();		}	}	@Override	public String toStringAsSExpressionDeep() {		if(this.isAtom()) {			return "(" + this.toString() + ")";		}		return "(" + this.getHead().toStringAsSExpressionDeep() + " " + "." + " " +				this.getTail().toStringAsSExpressionDeep() + ")";	}	@Override	public String toStringAsSExpression() {		return "(" + this.getHead().toString() + " " + "." + " " +				this.getTail().toString() + ")";	}	@Override	public String toStringAsList() {		return "("+((AbstractSExpression)this).toStringAsListHelperPublic()+")";	}	@Override	public String toString() {		return this.isList()? this.toStringAsList() : this.toStringAsSExpression();	}	@Override	public String toStringAsListHelperPublic() {		if(this.getTail().isNIL()) {			return this.getHead().toString();		}else {			return this.getHead().toString() + " " + ((AbstractSExpression)this.getTail()).toStringAsListHelperPublic();			}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8444" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:51:26 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="37460043" />
  <Command __id="8445" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:51:33 EST 2023" docASTNodeCount="194" docActiveCodeLength="1178" docExpressionCount="146" docLength="1178" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37467334">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().getHead().toString()).getClass().equals(LambdaEvaluator.class)){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8446" _type="MoveCaretCommand" caretOffset="548" date="Mon Dec 04 22:51:33 EST 2023" docOffset="548" starttimestamp="1701710826491" timestamp="37467404" />
  <Command __id="8447" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:51:34 EST 2023" docASTNodeCount="194" docActiveCodeLength="1178" docExpressionCount="146" docLength="1178" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37468355">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().getHead().toString()).getClass().equals(LambdaEvaluator.class)){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8448" _type="MoveCaretCommand" caretOffset="548" date="Mon Dec 04 22:51:34 EST 2023" docOffset="548" starttimestamp="1701710826491" timestamp="37468403" />
  <Command __id="8449" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:51:36 EST 2023" docASTNodeCount="263" docActiveCodeLength="1792" docExpressionCount="179" docLength="1792" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37469558">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ArithmeticEvaluatorHelper.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.parser.terms.DecimalAtom;
import main.lisp.parser.terms.IntegerAtom;
import main.lisp.parser.terms.NilAtomicExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.TAtomicExpressionFactory;

public class ArithmeticEvaluatorHelper {
	
	public static SExpression getDifference(SExpression expr, Environment environment, String comparator) {
		expr = expr.getTail();
		
		SExpression firstEvaled = expr.getHead().eval(environment);
		SExpression secondEvaled = expr.getTail().getHead().eval(environment);
		
		IntegerAtom firstInt = null;
		IntegerAtom secondInt = null;
		DecimalAtom firstDec = null;
		DecimalAtom secondDec = null;
		
		if (firstEvaled instanceof IntegerAtom) {
			firstInt = (IntegerAtom)firstEvaled;
			secondInt = (IntegerAtom)secondEvaled;
		}
		if (firstEvaled instanceof DecimalAtom) {
			firstDec = (DecimalAtom)firstEvaled;
			secondDec = (DecimalAtom)secondEvaled;
		}
		double difference = firstInt.getValue() - secondInt.getValue();
		if(comparator.equals("greater")) {
			if(difference > 0) {
				return TAtomicExpressionFactory.newInstance();
			}else {
				return NilAtomicExpressionFactory.newInstance();
			}
		}else if(comparator.equals("lesser")) {
			if(difference < 0) {
				return TAtomicExpressionFactory.newInstance();
			}else {
				return NilAtomicExpressionFactory.newInstance();
			}
		}else if(comparator.equals("GreaterEqual")){
			if(difference >= 0) {
				return TAtomicExpressionFactory.newInstance();
			}else {
				return NilAtomicExpressionFactory.newInstance();
			}
		}else {
			if(difference <= 0) {
				return TAtomicExpressionFactory.newInstance();
			}else {
				return NilAtomicExpressionFactory.newInstance();
			}
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="8450" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:51:36 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="37469613" />
  <Command __id="8451" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:51:40 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37474136">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return null;	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <DocumentChange __id="8453" _type="Replace" date="Mon Dec 04 22:51:40 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" endLine="158" insertionLength="4091" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="4091" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="37474317">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;	
import main.lisp.evaluator.OperationRegisterer;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import gradingTools.comp524f23.assignment6.ClassRegistryA6;

public class ClassRegistryImpl implements ClassRegistryA6 {

	@Override
	public Class<? extends Evaluator> getAndEvaluator() {
		// TODO Auto-generated method stub
		return AndEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getCondEvaluator() {
		// TODO Auto-generated method stub
		return CondEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {
		// TODO Auto-generated method stub
		return OperationRegistererImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getEvalEvaluator() {
		// TODO Auto-generated method stub
		return EvalEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEEvaluator() {
		// TODO Auto-generated method stub
		return LesserEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEvaluator() {
		// TODO Auto-generated method stub
		return LesserEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getListEvaluator() {
		// TODO Auto-generated method stub
		return ListEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLoadEvaluator() {
		// TODO Auto-generated method stub
		return LoadEvaluator.class;
	}

	@Override
	public Class<?> getMain() {
		// TODO Auto-generated method stub
		return index.class;
	}

	@Override
	public Class<? extends Evaluator> getNotEvaluator() {
		// TODO Auto-generated method stub
		return NotEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getOrEvaluator() {
		// TODO Auto-generated method stub
		return OrEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getQuoteEvaluator() {
		// TODO Auto-generated method stub
		return QuoteEvaluator.class;
	}

	@Override
	public Class<? extends SExpression> getStringFormattingSExpression() {
		// TODO Auto-generated method stub
		return BasicExpressionImpl.class;
	}

	@Override
	public Class<? extends SExpression> getFunctionCallingSExpression() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");
	}

	@Override
	public Class<? extends Evaluator> getFunctionEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getLetEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getBasicFuncallEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");
	}

	@Override
	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {
		return IdentifierAtomImpl.class;
	}

	@Override
	public Class<? extends SExpression> getLambdaCallingSExpression() {
		return null;
	}

	@Override
	public Class<? extends Evaluator> getLambdaEvaluator() {
		return LambdaEvaluator.class;
	}

	@Override
	public Class<? extends Environment> getNestedLexicalEnvironment() {
		// TODO Auto-generated method stub
		return EnvironmentImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getSetqEvaluator() {
		return SetqEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");
	}

}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;	
import main.lisp.evaluator.OperationRegisterer;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import gradingTools.comp524f23.assignment6.ClassRegistryA6;

public class ClassRegistryImpl implements ClassRegistryA6 {

	@Override
	public Class<? extends Evaluator> getAndEvaluator() {
		// TODO Auto-generated method stub
		return AndEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getCondEvaluator() {
		// TODO Auto-generated method stub
		return CondEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {
		// TODO Auto-generated method stub
		return OperationRegistererImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getEvalEvaluator() {
		// TODO Auto-generated method stub
		return EvalEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEEvaluator() {
		// TODO Auto-generated method stub
		return LesserEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEvaluator() {
		// TODO Auto-generated method stub
		return LesserEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getListEvaluator() {
		// TODO Auto-generated method stub
		return ListEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLoadEvaluator() {
		// TODO Auto-generated method stub
		return LoadEvaluator.class;
	}

	@Override
	public Class<?> getMain() {
		// TODO Auto-generated method stub
		return index.class;
	}

	@Override
	public Class<? extends Evaluator> getNotEvaluator() {
		// TODO Auto-generated method stub
		return NotEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getOrEvaluator() {
		// TODO Auto-generated method stub
		return OrEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getQuoteEvaluator() {
		// TODO Auto-generated method stub
		return QuoteEvaluator.class;
	}

	@Override
	public Class<? extends SExpression> getStringFormattingSExpression() {
		// TODO Auto-generated method stub
		return BasicExpressionImpl.class;
	}

	@Override
	public Class<? extends SExpression> getFunctionCallingSExpression() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");
	}

	@Override
	public Class<? extends Evaluator> getFunctionEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getLetEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getBasicFuncallEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");
	}

	@Override
	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {
		return IdentifierAtomImpl.class;
	}

	@Override
	public Class<? extends SExpression> getLambdaCallingSExpression() {
		return null;
	}

	@Override
	public Class<? extends Evaluator> getLambdaEvaluator() {
		return LambdaEvaluator.class;
	}

	@Override
	public Class<? extends Environment> getNestedLexicalEnvironment() {
		// TODO Auto-generated method stub
		return EnvironmentImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getSetqEvaluator() {
		return SetqEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");
	}

}
]]></insertedText>
  </DocumentChange>
  <Command __id="8454" _type="EclipseCommand" commandID="" date="Mon Dec 04 22:51:40 EST 2023" starttimestamp="1701710826491" timestamp="37474423" />
  <Command __id="8455" _type="EclipseCommand" commandID="" date="Mon Dec 04 22:51:40 EST 2023" starttimestamp="1701710826491" timestamp="37474442" />
  <Command __id="8456" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:51:42 EST 2023" docASTNodeCount="162" docActiveCodeLength="916" docExpressionCount="117" docLength="932" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37475968">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/CondEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.NilAtom;import main.lisp.parser.terms.SExpression;public class CondEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isNIL()) {			return new NilAtom();		}		if(!expr.getHead().getHead().eval(environment).isNIL()) {			if(expr.getHead().getTail() instanceof NilAtom) {				return expr.getHead().getHead().eval(environment);			}			if(expr.getHead().getTail().isAtom()) {				return expr.getHead().getTail();			}else {				return expr.getHead().getTail().getHead().eval(environment);			}		}else {			return evalHelper(expr.getTail(), environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8457" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:51:42 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="37476029" />
  <Command __id="8458" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:51:46 EST 2023" docASTNodeCount="197" docActiveCodeLength="1082" docExpressionCount="125" docLength="1150" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37479907">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EnvironmentImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.Optional;import main.lisp.evaluator.Environment;import main.lisp.evaluator.environment.AbstractEnvironment;import main.lisp.evaluator.function.Function;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class EnvironmentImpl extends AbstractEnvironment{	public EnvironmentImpl() {		super();	}	public EnvironmentImpl(Environment parent) {		super(parent);	}	@Override	public void assign(IdentifierAtom arg0, SExpression arg1) {		put(arg0, arg1);	}	@Override	public void assignFun(IdentifierAtom arg0, Function arg1) {			}	@Override	public Environment copy() {		// TODO Auto-generated method stub		return null;	}	@Override	public Optional<SExpression> lookup(IdentifierAtom arg0) {		Optional<SExpression> retVal = get(arg0);		return (retVal == null && getParent() != null) ? getParent().lookup(arg0) : retVal;	}	@Override	public Optional<Function> lookupFun(IdentifierAtom arg0) {		// TODO Auto-generated method stub		return Optional.empty();	}	@Override	public Environment newChild() {		return new EnvironmentImpl(this);	}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8459" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:51:46 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="37479976" />
  <Command __id="8460" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:51:48 EST 2023" docASTNodeCount="162" docActiveCodeLength="916" docExpressionCount="117" docLength="932" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37481956">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/CondEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.NilAtom;import main.lisp.parser.terms.SExpression;public class CondEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		expr = expr.getTail();		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isNIL()) {			return new NilAtom();		}		if(!expr.getHead().getHead().eval(environment).isNIL()) {			if(expr.getHead().getTail() instanceof NilAtom) {				return expr.getHead().getHead().eval(environment);			}			if(expr.getHead().getTail().isAtom()) {				return expr.getHead().getTail();			}else {				return expr.getHead().getTail().getHead().eval(environment);			}		}else {			return evalHelper(expr.getTail(), environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8461" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:51:48 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="37482015" />
  <Command __id="8463" _type="MoveCaretCommand" caretOffset="3409" date="Mon Dec 04 22:51:49 EST 2023" docOffset="3409" starttimestamp="1701710826491" timestamp="37482911" />
  <Command __id="8465" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:53:01 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37555124" type="Debug" />
  <Command __id="8466" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 22:53:01 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37555124" type="Run" />
  <Command __id="8467" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:53:01 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37555124" type="Debug" />
  <Command __id="8468" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 22:53:01 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37555124" type="Run" />
  <Command __id="8470" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 22:53:05 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37559049" type="Run" />
  <Command __id="8471" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 22:53:05 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37559049" type="Run" />
  <Command __id="8472" _type="ShellCommand" date="Mon Dec 04 22:53:05 EST 2023" starttimestamp="1701710826491" timestamp="37559358" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8473" _type="ConsoleOutput" date="Mon Dec 04 22:53:12 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37566210" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionLastResultChecker.actualOutput(AbstractLispExpressionLastResultChecker.java:5)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:23)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)¶	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"), Diff(INSERT,"Test execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8474" _type="ConsoleOutput" date="Mon Dec 04 22:53:12 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37566211" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8475" _type="ConsoleOutput" date="Mon Dec 04 22:53:12 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37566215" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8476" _type="ConsoleOutput" date="Mon Dec 04 22:53:12 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37566216" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):5"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8477" _type="ConsoleOutput" date="Mon Dec 04 22:53:12 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37566217" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8478" _type="ConsoleOutput" date="Mon Dec 04 22:53:12 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37566217" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8479" _type="ExceptionCommand" date="Mon Dec 04 22:53:12 EST 2023" starttimestamp="1701710826491" timestamp="37566237" type="Exception">
    <exceptionString><![CDATA[java.lang.UnsupportedOperationException: Instances of Atom do not have a tail
	at main.lisp.parser.terms.Atom.getTail(Atom.java:36)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="8480" _type="ConsoleOutput" date="Mon Dec 04 22:53:12 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37566240" type="ConsoleOutput">
    <outputString><![CDATA[	at index.LambdaEvaluator.eval(LambdaEvaluator.java:16)
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:19)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at index.LoadEvaluator.eval(LoadEvaluator.java:42)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:27)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"	at index.LambdaEvaluator.eval(LambdaEvaluator.java:16)¶	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:19)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at index.LoadEvaluator.eval(LoadEvaluator.java:42)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:27)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8481" _type="ConsoleOutput" date="Mon Dec 04 22:53:12 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="37566265" type="ConsoleOutput">
    <outputString><![CDATA[	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"index.LambdaEvaluator.eval(LambdaEvaluator.java:16)¶	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:19)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at index.LoadEvaluator.eval(LoadEvaluator.java:42)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:27)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation"), Diff(INSERT,"grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext"), Diff(EQUAL,".java:"), Diff(DELETE,"9"), Diff(INSERT,"5"), Diff(EQUAL,"2)¶	at grad"), Diff(DELETE,"ingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker"), Diff(INSERT,"er.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment"), Diff(EQUAL,".java:"), Diff(INSERT,"6"), Diff(EQUAL,"2"), Diff(DELETE,"1"), Diff(EQUAL,")¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:4"), Diff(DELETE,"7"), Diff(INSERT,"5"), Diff(EQUAL,")¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)¶	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶"), Diff(INSERT,"	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶")]]]></diff>
  </Command>
  <Command __id="8482" _type="ExceptionCommand" date="Mon Dec 04 22:53:12 EST 2023" starttimestamp="1701710826491" timestamp="37566273" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

Test execution time (ms):34
Test Result:LoadLispChecker,0.0% complete,0.0,0.0,Expected strings:Tactual string 42

java.lang.NullPointerException
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:16)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="8483" _type="ShellCommand" date="Mon Dec 04 22:53:18 EST 2023" starttimestamp="1701710826491" timestamp="37572327" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8484" _type="LocalChecksRawCommand" date="Mon Dec 04 22:53:18 EST 2023" starttimestamp="1701710826491" timestamp="37572329">
    <CSVRow><![CDATA[120,Mon Dec 04 22:53:12 EST 2023,40,0,LispLambdaChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadLispChecker PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,55,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8485" _type="LocalChecksRawCommand" date="Mon Dec 04 22:53:18 EST 2023" starttimestamp="1701710826491" timestamp="37572329">
    <CSVRow><![CDATA[120,Mon Dec 04 22:53:12 EST 2023,40,0,LispLambdaChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadLispChecker PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,55,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8487" _type="SelectTextCommand" caretOffset="466" date="Mon Dec 04 22:53:18 EST 2023" end="466" start="436" starttimestamp="1701710826491" timestamp="37572472" />
  <Command __id="8500" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:53:35 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37589396" type="Run" />
  <Command __id="8510" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:53:40 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37594267" type="Run" />
  <Command __id="8511" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Mon Dec 04 22:53:54 EST 2023" starttimestamp="1701710826491" timestamp="37607789" />
  <Command __id="8512" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:53:54 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37607809" type="Debug" />
  <Command __id="8513" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:53:54 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37607809" type="Debug" />
  <Command __id="8514" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 22:53:54 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37607809" type="Run" />
  <Command __id="8515" _type="ShellCommand" date="Mon Dec 04 22:53:54 EST 2023" starttimestamp="1701710826491" timestamp="37608399" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8462" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:51:49 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37482845">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return null;	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8486" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:53:18 EST 2023" docASTNodeCount="209" docActiveCodeLength="1199" docExpressionCount="141" docLength="1214" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37572434">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {"), Diff(DELETE,"//"), Diff(EQUAL,"        expr = expr.getTail();"), Diff(DELETE,"//"), Diff(EQUAL,"		return evalHelper(expr, environment);		"), Diff(INSERT,"// "), Diff(EQUAL,"return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[package index;

import java.util.ArrayList;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.NilAtom;
import main.lisp.evaluator.function.LambdaFactory;
import main.lisp.parser.terms.SExpression;

public class LambdaEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
        expr = expr.getTail();
		return evalHelper(expr, environment);
		// return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());
        return LambdaFactory.newInstance(ids, expr.getTail());
	}

    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {
        ArrayList<IdentifierAtom> ids = new ArrayList<>();
        while(!(expr instanceof NilAtom)) {
            ids.add((IdentifierAtom) expr.getHead());
            expr = expr.getTail();
        }
        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];
        for(IdentifierAtom id : ids) {
            idArray[ids.indexOf(id)] = id;
        }
        return idArray;
    }
}]]></snapshot>
  </Command>
  <Command __id="8516" _type="ShellCommand" date="Mon Dec 04 22:54:09 EST 2023" starttimestamp="1701710826491" timestamp="37623165" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8517" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:54:11 EST 2023" docASTNodeCount="263" docActiveCodeLength="1792" docExpressionCount="179" docLength="1792" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37624913">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ArithmeticEvaluatorHelper.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.DecimalAtom;import main.lisp.parser.terms.IntegerAtom;import main.lisp.parser.terms.NilAtomicExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.parser.terms.TAtomicExpressionFactory;public class ArithmeticEvaluatorHelper {		public static SExpression getDifference(SExpression expr, Environment environment, String comparator) {		expr = expr.getTail();				SExpression firstEvaled = expr.getHead().eval(environment);		SExpression secondEvaled = expr.getTail().getHead().eval(environment);				IntegerAtom firstInt = null;		IntegerAtom secondInt = null;		DecimalAtom firstDec = null;		DecimalAtom secondDec = null;				if (firstEvaled instanceof IntegerAtom) {			firstInt = (IntegerAtom)firstEvaled;			secondInt = (IntegerAtom)secondEvaled;		}		if (firstEvaled instanceof DecimalAtom) {			firstDec = (DecimalAtom)firstEvaled;			secondDec = (DecimalAtom)secondEvaled;		}		double difference = firstInt.getValue() - secondInt.getValue();		if(comparator.equals("greater")) {			if(difference > 0) {				return TAtomicExpressionFactory.newInstance();			}else {				return NilAtomicExpressionFactory.newInstance();			}		}else if(comparator.equals("lesser")) {			if(difference < 0) {				return TAtomicExpressionFactory.newInstance();			}else {				return NilAtomicExpressionFactory.newInstance();			}		}else if(comparator.equals("GreaterEqual")){			if(difference >= 0) {				return TAtomicExpressionFactory.newInstance();			}else {				return NilAtomicExpressionFactory.newInstance();			}		}else {			if(difference <= 0) {				return TAtomicExpressionFactory.newInstance();			}else {				return NilAtomicExpressionFactory.newInstance();			}		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8518" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 22:54:11 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="37624966" />
  <Command __id="8519" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:54:11 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37625394">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return null;	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8520" _type="MoveCaretCommand" caretOffset="3409" date="Mon Dec 04 22:54:11 EST 2023" docOffset="3409" starttimestamp="1701710826491" timestamp="37625446" />
  <Command __id="8521" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 22:54:12 EST 2023" docASTNodeCount="194" docActiveCodeLength="1178" docExpressionCount="146" docLength="1178" projectName="Assignment5" starttimestamp="1701710826491" timestamp="37626175">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().getHead().toString()).getClass().equals(LambdaEvaluator.class)){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8524" _type="EclipseCommand" commandID="" date="Mon Dec 04 22:54:12 EST 2023" starttimestamp="1701710826491" timestamp="37626463" />
  <Command __id="8525" _type="EclipseCommand" commandID="" date="Mon Dec 04 22:54:12 EST 2023" starttimestamp="1701710826491" timestamp="37626470" />
  <Command __id="8526" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 22:54:14 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="37628309" />
  <Command __id="8527" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 22:54:14 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="37628309" />
  <Command __id="8536" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:54:21 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37634688" type="Run" />
  <Command __id="8545" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:54:26 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37640262" type="Run" />
  <Command __id="8546" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 22:54:30 EST 2023" starttimestamp="1701710826491" timestamp="37644075" />
  <Command __id="8547" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:54:30 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37644082" type="Run" />
  <Command __id="8550" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:54:40 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37653771" type="Run" />
  <Command __id="8588" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:55:35 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37709213" type="Run" />
  <Command __id="8592" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:55:44 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37718340" type="Run" />
  <Command __id="8593" _type="ShellCommand" date="Mon Dec 04 22:55:54 EST 2023" starttimestamp="1701710826491" timestamp="37728365" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8594" _type="ShellCommand" date="Mon Dec 04 22:57:28 EST 2023" starttimestamp="1701710826491" timestamp="37821893" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8595" _type="ShellCommand" date="Mon Dec 04 22:57:29 EST 2023" starttimestamp="1701710826491" timestamp="37822649" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8614" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:58:30 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37883917" type="Run" />
  <Command __id="8615" _type="ShellCommand" date="Mon Dec 04 22:58:32 EST 2023" starttimestamp="1701710826491" timestamp="37886396" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8616" _type="BreakPointCommand" date="Mon Dec 04 22:58:33 EST 2023" lineNumber="16" starttimestamp="1701710826491" timestamp="37886585" type="BreakPointRemoved" />
  <Command __id="8617" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 22:58:33 EST 2023" starttimestamp="1701710826491" timestamp="37886600" />
  <Command __id="8618" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 22:58:34 EST 2023" starttimestamp="1701710826491" timestamp="37887540" />
  <Command __id="8619" _type="BreakPointCommand" date="Mon Dec 04 22:58:34 EST 2023" lineNumber="17" starttimestamp="1701710826491" timestamp="37887541" type="BreakPointAdded" />
  <Command __id="8620" _type="ShellCommand" date="Mon Dec 04 22:58:35 EST 2023" starttimestamp="1701710826491" timestamp="37888736" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8638" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:58:53 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37906784" type="Run" />
  <Command __id="8641" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:59:00 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37913519" type="Run" />
  <Command __id="8642" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 22:59:00 EST 2023" starttimestamp="1701710826491" timestamp="37913520" />
  <Command __id="8644" _type="MoveCaretCommand" caretOffset="436" date="Mon Dec 04 22:59:00 EST 2023" docOffset="436" starttimestamp="1701710826491" timestamp="37913782" />
  <Command __id="8647" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:59:05 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37918616" type="Run" />
  <Command __id="8648" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 22:59:05 EST 2023" starttimestamp="1701710826491" timestamp="37918616" />
  <Command __id="8651" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:59:08 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37922054" type="Run" />
  <Command __id="8652" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 22:59:08 EST 2023" starttimestamp="1701710826491" timestamp="37922054" />
  <Command __id="8660" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:59:22 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37935854" type="Run" />
  <Command __id="8663" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:59:33 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37947174" type="Run" />
  <Command __id="8664" _type="ShellCommand" date="Mon Dec 04 22:59:38 EST 2023" starttimestamp="1701710826491" timestamp="37951806" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8676" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 22:59:52 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37965527" type="Run" />
  <Command __id="8693" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:00:00 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37973636" type="Run" />
  <Command __id="8697" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:00:11 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37985468" type="Run" />
  <Command __id="8698" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:00:12 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37986444" type="Run" />
  <Command __id="8705" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:00:24 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="37997539" type="Run" />
  <Command __id="8708" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:00:31 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38005126" type="Run" />
  <Command __id="8709" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 23:00:33 EST 2023" starttimestamp="1701710826491" timestamp="38007031" />
  <Command __id="8710" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:00:33 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38007034" type="Run" />
  <Command __id="8718" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:00:46 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38019865" type="Run" />
  <Command __id="8719" _type="ShellCommand" date="Mon Dec 04 23:01:24 EST 2023" starttimestamp="1701710826491" timestamp="38057860" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8725" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:01:48 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38081510" type="Run" />
  <Command __id="8726" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:01:48 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38081510" type="Run" />
  <Command __id="8727" _type="ShellCommand" date="Mon Dec 04 23:01:48 EST 2023" starttimestamp="1701710826491" timestamp="38081835" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8728" _type="ConsoleOutput" date="Mon Dec 04 23:01:53 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38087175" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"49849¶Test Result:LoadLispChecker,0.0% complete,0.0,0.0,Expected strings:Tactual string 42"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8729" _type="ConsoleOutput" date="Mon Dec 04 23:01:53 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38087178" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8730" _type="ConsoleOutput" date="Mon Dec 04 23:01:53 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38087181" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8731" _type="ConsoleOutput" date="Mon Dec 04 23:01:53 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38087182" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):5"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8732" _type="ConsoleOutput" date="Mon Dec 04 23:01:53 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38087184" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):7¶"), Diff(EQUAL,"Test Result:"), Diff(INSERT,"Main"), Diff(EQUAL,"Class"), Diff(DELETE,"Registry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶")]]]></diff>
  </Command>
  <Command __id="8733" _type="ConsoleOutput" date="Mon Dec 04 23:01:53 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38087207" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):31
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"7¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"31"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8734" _type="ConsoleOutput" date="Mon Dec 04 23:01:53 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38087209" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

Test execution time (ms):33
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):3"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8735" _type="ConsoleOutput" date="Mon Dec 04 23:01:53 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38087211" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispLambdaChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:L"), Diff(DELETE,"oadLisp"), Diff(INSERT,"ispLambda"), Diff(EQUAL,"Checker,100.0% complete,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,¶"), Diff(DELETE,"¶Test execution time (ms):33¶")]]]></diff>
  </Command>
  <Command __id="8736" _type="ConsoleOutput" date="Mon Dec 04 23:01:57 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38090840" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):3
Test Result:LispLambdaChecker2,0.0% complete,0.0,10.0,Expected strings:1actual string X
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶Test execution time (ms):3¶"), Diff(EQUAL,"Test Result:LispLambdaChecker"), Diff(INSERT,"2"), Diff(EQUAL,","), Diff(DELETE,"10"), Diff(EQUAL,"0.0% complete,"), Diff(DELETE,"1"), Diff(EQUAL,"0.0,10.0,"), Diff(INSERT,"Expected strings:1actual string X"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8737" _type="ShellCommand" date="Mon Dec 04 23:02:14 EST 2023" starttimestamp="1701710826491" timestamp="38108506" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8738" _type="LocalChecksRawCommand" date="Mon Dec 04 23:02:14 EST 2023" starttimestamp="1701710826491" timestamp="38108507">
    <CSVRow><![CDATA[121,Mon Dec 04 23:01:53 EST 2023,43,3,LispLambdaChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispLambdaChecker+ LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker+ LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,56,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8739" _type="LocalChecksRawCommand" date="Mon Dec 04 23:02:14 EST 2023" starttimestamp="1701710826491" timestamp="38108507">
    <CSVRow><![CDATA[121,Mon Dec 04 23:01:53 EST 2023,43,3,LispLambdaChecker,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispLambdaChecker+ LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker+ LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,56,0,false, ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(10.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8740" _type="LocalChecksRawCommand" date="Mon Dec 04 23:02:14 EST 2023" starttimestamp="1701710826491" timestamp="38108507">
    <CSVRow><![CDATA[122,Mon Dec 04 23:01:57 EST 2023,43,0,LispLambdaChecker2,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispLambdaChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,56,1,false, , , ,LispLambdaChecker2-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8741" _type="LocalChecksRawCommand" date="Mon Dec 04 23:02:14 EST 2023" starttimestamp="1701710826491" timestamp="38108507">
    <CSVRow><![CDATA[122,Mon Dec 04 23:01:57 EST 2023,43,0,LispLambdaChecker2,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispLambdaChecker LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker2 LispLambdaChecker3 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,56,1,false, , , ,LispLambdaChecker2-(0.0/10.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8775" _type="ShellCommand" date="Mon Dec 04 23:05:43 EST 2023" starttimestamp="1701710826491" timestamp="38317265" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8776" _type="LocalChecksRawCommand" date="Mon Dec 04 23:05:43 EST 2023" starttimestamp="1701710826491" timestamp="38317271">
    <CSVRow><![CDATA[123,Mon Dec 04 23:04:45 EST 2023,49,6,LispLambdaSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispLambdaChecker LispLambdaChecker3+ LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLambdaChecker+ LoadLambdaChecker2+ LoadLambdaChecker3+ LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,57,0,true,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(10.0/10.0) LispLambdaChecker2-(0.0/10.0) LispLambdaChecker3-(10.0/10.0) LoadLambdaChecker-(15.0/15.0) LoadLambdaChecker2-(15.0/15.0) LoadLambdaChecker3-(15.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8777" _type="LocalChecksRawCommand" date="Mon Dec 04 23:05:43 EST 2023" starttimestamp="1701710826491" timestamp="38317271">
    <CSVRow><![CDATA[123,Mon Dec 04 23:04:45 EST 2023,49,6,LispLambdaSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispLambdaChecker LispLambdaChecker3+ LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLambdaChecker+ LoadLambdaChecker2+ LoadLambdaChecker3+ LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispLambdaChecker2 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,57,0,true,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(10.0/10.0) LispLambdaChecker2-(0.0/10.0) LispLambdaChecker3-(10.0/10.0) LoadLambdaChecker-(15.0/15.0) LoadLambdaChecker2-(15.0/15.0) LoadLambdaChecker3-(15.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="8778" _type="MoveCaretCommand" caretOffset="787" date="Mon Dec 04 23:05:43 EST 2023" docOffset="787" starttimestamp="1701710826491" timestamp="38317345" />
  <Command __id="8779" _type="MoveCaretCommand" caretOffset="787" date="Mon Dec 04 23:05:43 EST 2023" docOffset="787" starttimestamp="1701710826491" timestamp="38317345" />
  <Command __id="8792" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:05:53 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38326580" type="Run" />
  <Command __id="8798" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:05:57 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38330822" type="Run" />
  <Command __id="8799" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:05:57 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38331495" type="Run" />
  <Command __id="8809" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:06:05 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38338737" type="Run" />
  <Command __id="8810" _type="ShellCommand" date="Mon Dec 04 23:06:08 EST 2023" starttimestamp="1701710826491" timestamp="38342027" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8819" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:06:32 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38365685" type="Run" />
  <Command __id="8820" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 23:06:32 EST 2023" starttimestamp="1701710826491" timestamp="38365685" />
  <Command __id="8828" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:06:39 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38373480" type="Run" />
  <Command __id="8829" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 23:06:39 EST 2023" starttimestamp="1701710826491" timestamp="38373480" />
  <Command __id="8833" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:06:44 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38378371" type="Run" />
  <Command __id="8834" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Mon Dec 04 23:06:44 EST 2023" starttimestamp="1701710826491" timestamp="38378371" />
  <Command __id="8835" _type="ConsoleOutput" date="Mon Dec 04 23:06:44 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38378399" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):48809
Test Result:LoadLispChecker,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"6"), Diff(INSERT,"48809"), Diff(EQUAL,"¶Test Result:"), Diff(DELETE,"ClassRegistryProvided,100.0% complete,0.0,0.0,¶¶Test execution time (ms):8¶Test Result:MainClassProvided"), Diff(INSERT,"LoadLispChecker"), Diff(EQUAL,",100.0% complete,0.0,0.0,¶")]]]></diff>
  </Command>
  <Command __id="8836" _type="ShellCommand" date="Mon Dec 04 23:06:46 EST 2023" starttimestamp="1701710826491" timestamp="38380158" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8837" _type="ShellCommand" date="Mon Dec 04 23:06:47 EST 2023" starttimestamp="1701710826491" timestamp="38380846" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8838" _type="ShellCommand" date="Mon Dec 04 23:06:47 EST 2023" starttimestamp="1701710826491" timestamp="38381154" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8840" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:06:56 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38389925" type="Run" />
  <Command __id="8841" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 23:07:12 EST 2023" starttimestamp="1701710826491" timestamp="38406234" />
  <Command __id="8842" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:07:12 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38406238" type="Run" />
  <Command __id="8843" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 23:07:15 EST 2023" starttimestamp="1701710826491" timestamp="38409443" />
  <Command __id="8844" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:07:15 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38409448" type="Run" />
  <Command __id="8849" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:07:19 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38413013" type="Run" />
  <Command __id="8852" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:07:25 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38418960" type="Run" />
  <Command __id="8853" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 23:07:29 EST 2023" starttimestamp="1701710826491" timestamp="38422534" />
  <Command __id="8854" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:07:29 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38422539" type="Run" />
  <Command __id="8855" _type="SelectTextCommand" caretOffset="989" date="Mon Dec 04 23:07:36 EST 2023" end="1022" start="989" starttimestamp="1701710826491" timestamp="38430013" />
  <Command __id="8856" _type="SelectTextCommand" caretOffset="989" date="Mon Dec 04 23:07:36 EST 2023" end="1022" start="989" starttimestamp="1701710826491" timestamp="38430013" />
  <Command __id="8857" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:07:37 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38430820" type="Run" />
  <Command __id="8858" _type="MoveCaretCommand" caretOffset="989" date="Mon Dec 04 23:07:42 EST 2023" docOffset="989" starttimestamp="1701710826491" timestamp="38435526" />
  <Command __id="8859" _type="MoveCaretCommand" caretOffset="989" date="Mon Dec 04 23:07:42 EST 2023" docOffset="989" starttimestamp="1701710826491" timestamp="38435526" />
  <Command __id="8860" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:07:42 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38436356" type="Run" />
  <Command __id="8873" _type="ShellCommand" date="Mon Dec 04 23:08:00 EST 2023" starttimestamp="1701710826491" timestamp="38454091" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8874" _type="ShellCommand" date="Mon Dec 04 23:08:01 EST 2023" starttimestamp="1701710826491" timestamp="38454951" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8880" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:08:07 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38460963" type="Run" />
  <Command __id="8881" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:08:07 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38460965" type="Run" />
  <Command __id="8882" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:08:07 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38460965" type="Run" />
  <Command __id="8883" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:08:07 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38461049" type="Run" />
  <Command __id="8884" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:08:07 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38461052" type="Run" />
  <Command __id="8885" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:08:07 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38461052" type="Run" />
  <Command __id="8889" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:08:18 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38471876" type="Run" />
  <Command __id="8894" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:08:47 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38500785" type="Run" />
  <Command __id="8895" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 23:08:51 EST 2023" starttimestamp="1701710826491" timestamp="38505041" />
  <Command __id="8896" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:08:51 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38505046" type="Run" />
  <Command __id="8901" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:09:04 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="38517950">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8902" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 23:09:04 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="38517954" />
  <Command __id="8903" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 23:09:04 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="38517998" />
  <Command __id="8917" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:09:44 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38558397" type="Run" />
  <Command __id="8918" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Mon Dec 04 23:09:47 EST 2023" starttimestamp="1701710826491" timestamp="38561398" />
  <Command __id="8919" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:09:47 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38561414" type="Debug" />
  <Command __id="8920" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:09:47 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38561414" type="Run" />
  <Command __id="8921" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:09:47 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38561414" type="Debug" />
  <Command __id="8922" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:09:47 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38561414" type="Run" />
  <Command __id="8904" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:09:06 EST 2023" docASTNodeCount="181" docActiveCodeLength="1076" docExpressionCount="134" docLength="1199" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38519831">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		// BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).getClass().equals(LambdaEvaluator.class);		if(!expr.getHead().isAtom()){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8915" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:09:40 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38553973">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8923" _type="SelectTextCommand" caretOffset="466" date="Mon Dec 04 23:09:49 EST 2023" end="478" start="466" starttimestamp="1701710826491" timestamp="38562880" />
  <Command __id="8924" _type="SelectTextCommand" caretOffset="466" date="Mon Dec 04 23:09:49 EST 2023" end="478" start="466" starttimestamp="1701710826491" timestamp="38562880" />
  <Command __id="8925" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:10:07 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38580666">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return null;	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8926" _type="MoveCaretCommand" caretOffset="3409" date="Mon Dec 04 23:10:07 EST 2023" docOffset="3409" starttimestamp="1701710826491" timestamp="38580716" />
  <Command __id="8927" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:10:08 EST 2023" docASTNodeCount="263" docActiveCodeLength="1792" docExpressionCount="179" docLength="1792" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38581553">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ArithmeticEvaluatorHelper.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.parser.terms.DecimalAtom;import main.lisp.parser.terms.IntegerAtom;import main.lisp.parser.terms.NilAtomicExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.parser.terms.TAtomicExpressionFactory;public class ArithmeticEvaluatorHelper {		public static SExpression getDifference(SExpression expr, Environment environment, String comparator) {		expr = expr.getTail();				SExpression firstEvaled = expr.getHead().eval(environment);		SExpression secondEvaled = expr.getTail().getHead().eval(environment);				IntegerAtom firstInt = null;		IntegerAtom secondInt = null;		DecimalAtom firstDec = null;		DecimalAtom secondDec = null;				if (firstEvaled instanceof IntegerAtom) {			firstInt = (IntegerAtom)firstEvaled;			secondInt = (IntegerAtom)secondEvaled;		}		if (firstEvaled instanceof DecimalAtom) {			firstDec = (DecimalAtom)firstEvaled;			secondDec = (DecimalAtom)secondEvaled;		}		double difference = firstInt.getValue() - secondInt.getValue();		if(comparator.equals("greater")) {			if(difference > 0) {				return TAtomicExpressionFactory.newInstance();			}else {				return NilAtomicExpressionFactory.newInstance();			}		}else if(comparator.equals("lesser")) {			if(difference < 0) {				return TAtomicExpressionFactory.newInstance();			}else {				return NilAtomicExpressionFactory.newInstance();			}		}else if(comparator.equals("GreaterEqual")){			if(difference >= 0) {				return TAtomicExpressionFactory.newInstance();			}else {				return NilAtomicExpressionFactory.newInstance();			}		}else {			if(difference <= 0) {				return TAtomicExpressionFactory.newInstance();			}else {				return NilAtomicExpressionFactory.newInstance();			}		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8928" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 23:10:08 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="38581605" />
  <Command __id="8929" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:10:13 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38587188">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return null;	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8930" _type="MoveCaretCommand" caretOffset="3409" date="Mon Dec 04 23:10:13 EST 2023" docOffset="3409" starttimestamp="1701710826491" timestamp="38587256" />
  <Command __id="8931" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:10:15 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38588798">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8932" _type="MoveCaretCommand" caretOffset="122" date="Mon Dec 04 23:10:15 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="38588850" />
  <Command __id="8934" _type="SelectTextCommand" caretOffset="466" date="Mon Dec 04 23:10:15 EST 2023" end="478" start="466" starttimestamp="1701710826491" timestamp="38589474" />
  <Command __id="8935" _type="ShellCommand" date="Mon Dec 04 23:10:17 EST 2023" starttimestamp="1701710826491" timestamp="38590714" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8933" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:10:15 EST 2023" docASTNodeCount="201" docActiveCodeLength="1237" docExpressionCount="154" docLength="1253" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38589418">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8940" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:11:27 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38661461" type="Run" />
  <Command __id="8941" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:11:27 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38661461" type="Run" />
  <Command __id="8942" _type="ShellCommand" date="Mon Dec 04 23:11:28 EST 2023" starttimestamp="1701710826491" timestamp="38661765" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8943" _type="ConsoleOutput" date="Mon Dec 04 23:11:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664413" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"48809¶Test Result:LoadLispChecker,100.0% complete,0.0,0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8944" _type="ConsoleOutput" date="Mon Dec 04 23:11:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664414" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8945" _type="ConsoleOutput" date="Mon Dec 04 23:11:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664419" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFile"), Diff(INSERT,"execution time (ms):5¶Test Result:ClassRegistry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶"), Diff(DELETE,"¶")]]]></diff>
  </Command>
  <Command __id="8946" _type="ConsoleOutput" date="Mon Dec 04 23:11:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664420" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"5¶Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8947" _type="ConsoleOutput" date="Mon Dec 04 23:11:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664420" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):7"), Diff(INSERT,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8948" _type="ConsoleOutput" date="Mon Dec 04 23:11:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664444" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):30
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"execution time (ms):30"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8949" _type="ConsoleOutput" date="Mon Dec 04 23:11:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664445" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

Test execution time (ms):32
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):3"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8950" _type="ConsoleOutput" date="Mon Dec 04 23:11:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664446" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispLambdaChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:L"), Diff(DELETE,"oadLisp"), Diff(INSERT,"ispLambda"), Diff(EQUAL,"Checker,100.0% complete,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,¶"), Diff(DELETE,"¶Test execution time (ms):32¶")]]]></diff>
  </Command>
  <Command __id="8951" _type="ConsoleOutput" date="Mon Dec 04 23:11:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664447" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LispLambdaChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8952" _type="ConsoleOutput" date="Mon Dec 04 23:11:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664448" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispLambdaChecker2,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:LispLambdaChecker2,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8953" _type="ConsoleOutput" date="Mon Dec 04 23:11:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664450" type="ConsoleOutput">
    <outputString><![CDATA[java.lang.ClassCastException: class main.lisp.parser.terms.IntegerAtom cannot be cast to class main.lisp.parser.terms.IdentifierAtom (main.lisp.parser.terms.IntegerAtom and main.lisp.parser.terms.IdentifierAtom are in unnamed module of loader 'app')
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test Result:LispLambdaChecker2,100.0% complete,10.0,10.0,"), Diff(INSERT,"java.lang.ClassCastException: class main.lisp.parser.terms.IntegerAtom cannot be cast to class main.lisp.parser.terms.IdentifierAtom (main.lisp.parser.terms.IntegerAtom and main.lisp.parser.terms.IdentifierAtom are in unnamed module of loader 'app')"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8954" _type="ConsoleOutput" date="Mon Dec 04 23:11:30 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664454" type="ConsoleOutput">
    <outputString><![CDATA[	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:25)
	at index.EvalEvaluator.eval(EvalEvaluator.java:19)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:28)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:26)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"java.lang.ClassCastException: class main.lisp.parser.terms.IntegerAtom cannot be cast to class main.lisp.parser.terms.IdentifierAtom (main.lisp.parser.terms.IntegerAtom and main.lisp.parser.terms.IdentifierAtom are in unnamed module of loader 'app'"), Diff(INSERT,"	at index.EvalEvaluator.evalHelper(EvalEvaluator.java:25)¶	at index.EvalEvaluator.eval(EvalEvaluator.java:19)¶	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:28)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)¶	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)¶	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:26)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)¶	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)¶	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:231)¶	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:111)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)¶	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)¶	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)¶	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)¶	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)¶	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="8955" _type="ConsoleOutput" date="Mon Dec 04 23:11:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664514" type="ConsoleOutput">
    <outputString><![CDATA[	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at "), Diff(DELETE,"index.EvalEvalu"), Diff(INSERT,"org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(DELETE,".evalHelper(EvalEvalu"), Diff(INSERT,"g.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	"), Diff(EQUAL,"at"), Diff(INSERT," "), Diff(EQUAL,"or"), Diff(INSERT,"g.junit.runners.ParentRunner.runChildren(ParentRunner"), Diff(EQUAL,".java:2"), Diff(DELETE,"5"), Diff(INSERT,"88"), Diff(EQUAL,")¶	at "), Diff(DELETE,"index.EvalEvaluator.eval(EvalEvaluato"), Diff(INSERT,"org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunne"), Diff(EQUAL,"r.java:"), Diff(DELETE,"19"), Diff(INSERT,"363"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.evaluato"), Diff(INSERT,"grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grade"), Diff(EQUAL,"r."), Diff(DELETE,"B"), Diff(INSERT,"b"), Diff(EQUAL,"asic"), Diff(DELETE,"ExpressionEvaluator.eval(BasicExpressionEvaluator"), Diff(INSERT,"s.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite"), Diff(EQUAL,".java:1"), Diff(DELETE,"6"), Diff(INSERT,"91"), Diff(EQUAL,")¶	at "), Diff(DELETE,"index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluat"), Diff(INSERT,"java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccess"), Diff(EQUAL,"orImpl.java:"), Diff(INSERT,"6"), Diff(EQUAL,"2"), Diff(DELETE,"8"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.parser.terms.BasicExpression.eval(BasicExpression"), Diff(INSERT,"java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl"), Diff(EQUAL,".java:"), Diff(DELETE,"26"), Diff(INSERT,"43"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda"), Diff(INSERT,"java.base/java.lang.reflect.Method.invoke(Method"), Diff(EQUAL,".java:"), Diff(DELETE,"7"), Diff(EQUAL,"5"), Diff(INSERT,"66"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom"), Diff(INSERT,"bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod"), Diff(EQUAL,".java:2"), Diff(DELETE,"2"), Diff(INSERT,"70"), Diff(EQUAL,")¶	at "), Diff(DELETE,"index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl"), Diff(INSERT,"bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager"), Diff(EQUAL,".java:"), Diff(DELETE,"26"), Diff(INSERT,"1444"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.parser.terms.BasicExpression.eval(BasicExpression"), Diff(INSERT,"bus.uigen.undo.BasicCommand.execute(BasicCommand"), Diff(EQUAL,".java:"), Diff(DELETE,"2"), Diff(EQUAL,"6"), Diff(INSERT,"9"), Diff(EQUAL,")¶	at "), Diff(DELETE,"main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation"), Diff(INSERT,"bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager"), Diff(EQUAL,".java:"), Diff(DELETE,"92"), Diff(INSERT,"1701"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:1"), Diff(DELETE,"00"), Diff(INSERT,"538"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManag"), Diff(EQUAL,"er.java:13"), Diff(DELETE,"3"), Diff(INSERT,"57"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegister"), Diff(INSERT,"bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticast"), Diff(EQUAL,"er.java:"), Diff(DELETE,"65"), Diff(INSERT,"277"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker"), Diff(INSERT,"java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent"), Diff(EQUAL,".java:"), Diff(INSERT,"334"), Diff(EQUAL,"2"), Diff(DELETE,"1"), Diff(EQUAL,")¶	at "), Diff(DELETE,"gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker"), Diff(INSERT,"java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"47"), Diff(INSERT,"5011"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(EQUAL,".java:"), Diff(DELETE,"231"), Diff(INSERT,"4843"), Diff(EQUAL,")¶	at "), Diff(DELETE,"grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase"), Diff(INSERT,"java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"111"), Diff(INSERT,"4918"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl"), Diff(INSERT,"desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container"), Diff(EQUAL,".java:"), Diff(DELETE,"6"), Diff(EQUAL,"2"), Diff(INSERT,"307"), Diff(EQUAL,")¶	at java."), Diff(DELETE,"base/jdk.internal.reflect.DelegatingMethodAccessor"), Diff(INSERT,"desktop/java.awt.Window.dispatchEvent"), Diff(EQUAL,"Impl"), Diff(DELETE,".invoke(DelegatingMethodAccessorImpl"), Diff(INSERT,"(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component"), Diff(EQUAL,".java:"), Diff(INSERT,"48"), Diff(EQUAL,"43)¶	at java."), Diff(DELETE,"base/java.lang.reflect.Method.invoke(Method"), Diff(INSERT,"desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"566"), Diff(INSERT,"772"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod"), Diff(INSERT,"java.desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"50"), Diff(INSERT,"721"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallabl"), Diff(INSERT,"java.desktop/java.awt.EventQueue$4.run(EventQueu"), Diff(EQUAL,"e.java:"), Diff(DELETE,"12"), Diff(INSERT,"715"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod"), Diff(INSERT,"java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(DELETE,"47"), Diff(INSERT,"85"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod"), Diff(INSERT,"java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(DELETE,"17"), Diff(INSERT,"95"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.ParentRunner.runLeaf(ParentRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue$5.run(EventQueue"), Diff(EQUAL,".java:"), Diff(DELETE,"32"), Diff(INSERT,"74"), Diff(EQUAL,"5)¶	at "), Diff(DELETE,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner"), Diff(INSERT,"java.desktop/java.awt.EventQueue$5.run(EventQueue"), Diff(EQUAL,".java:7"), Diff(DELETE,"8"), Diff(INSERT,"43"), Diff(EQUAL,")¶	at "), Diff(DELETE,"org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57"), Diff(INSERT,"java.base/java.security.AccessController.doPrivileged(Native Method"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="8956" _type="ConsoleOutput" date="Mon Dec 04 23:11:31 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38664524" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLambdaChecker2,100.0% complete,15.0,15.0,

Test execution time (ms):0
Test Result:LoadLambdaChecker3,100.0% complete,15.0,15.0,
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)¶	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)¶	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)¶	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)¶	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)¶	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)¶	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:317)¶	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:348)¶	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:191)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)¶	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)¶	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)¶	at java.base/java.lang.reflect.Method.invoke(Method.java:566)¶	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)¶	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)¶	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)¶	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)¶	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)¶	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)¶	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)¶	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)¶	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)¶	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)¶	at java.desktop/java.awt.Component.processEvent(Component.java:6400)¶	at java.desktop/java.awt.Container.processEvent(Container.java:2263)¶	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)¶	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)¶	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)¶	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)¶	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)¶	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)¶	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)¶	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)¶	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)¶	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)¶	at java.base/java.security.AccessController.doPrivileged(Native Method)"), Diff(INSERT,"Test Result:LoadLambdaChecker2,100.0% complete,15.0,15.0,¶¶Test execution time (ms):0¶Test Result:LoadLambdaChecker3,100.0% complete,15.0,15.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8957" _type="ShellCommand" date="Mon Dec 04 23:11:38 EST 2023" starttimestamp="1701710826491" timestamp="38671706" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8958" _type="ShellCommand" date="Mon Dec 04 23:11:38 EST 2023" starttimestamp="1701710826491" timestamp="38672187" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8959" _type="ShellCommand" date="Mon Dec 04 23:11:39 EST 2023" starttimestamp="1701710826491" timestamp="38672531" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="8937" _type="Replace" date="Mon Dec 04 23:11:26 EST 2023" docASTNodeCount="232" docActiveCodeLength="1409" docExpressionCount="179" docLength="1425" endLine="37" insertionLength="1425" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1253" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="38660280">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		if(expr.getTail().isAtom()) {
			expr = expr.getTail();
		}else {
			expr = expr.getTail().getHead();
		}
		return evalHelper(expr, environment);
//		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			return expr;
		}
		
		boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		if(expr.getTail().isAtom()) {
			expr = expr.getTail();
		}else {
			expr = expr.getTail().getHead();
		}
		return evalHelper(expr, environment);
//		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			if(environment.lookup((IdentifierAtom)expr).isPresent()) {
				return environment.lookup((IdentifierAtom)expr).get();
			}
			return expr;
		}
		
		boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></insertedText>
  </DocumentChange>
  <Command __id="8976" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:12:28 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38722283" type="Run" />
  <Command __id="9003" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:12:48 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38741600" type="Run" />
  <Command __id="9013" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:12:56 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38749666" type="Run" />
  <Command __id="9014" _type="ShellCommand" date="Mon Dec 04 23:13:18 EST 2023" starttimestamp="1701710826491" timestamp="38772011" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9015" _type="ShellCommand" date="Mon Dec 04 23:13:19 EST 2023" starttimestamp="1701710826491" timestamp="38772613" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9016" _type="ShellCommand" date="Mon Dec 04 23:13:20 EST 2023" starttimestamp="1701710826491" timestamp="38773939" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8966" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:12:24 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38718467">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="8984" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:12:37 EST 2023" docASTNodeCount="181" docActiveCodeLength="1076" docExpressionCount="134" docLength="1199" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38731119">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		// BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).getClass().equals(LambdaEvaluator.class);		if(!expr.getHead().isAtom()){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9017" _type="ShellCommand" date="Mon Dec 04 23:13:33 EST 2023" starttimestamp="1701710826491" timestamp="38787206" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9019" _type="SelectTextCommand" caretOffset="715" date="Mon Dec 04 23:13:35 EST 2023" end="715" start="703" starttimestamp="1701710826491" timestamp="38788957" />
  <Command __id="9018" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:13:35 EST 2023" docASTNodeCount="232" docActiveCodeLength="1409" docExpressionCount="179" docLength="1425" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38788902">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;"), Diff(INSERT,"import main.lisp.parser.terms.IdentifierAtom;"), Diff(EQUAL,"import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			"), Diff(INSERT,"if(environment.lookup((IdentifierAtom)expr).isPresent()) {				return environment.lookup((IdentifierAtom)expr).get();			}			"), Diff(EQUAL,"return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		if(expr.getTail().isAtom()) {
			expr = expr.getTail();
		}else {
			expr = expr.getTail().getHead();
		}
		return evalHelper(expr, environment);
//		return expr;
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			if(environment.lookup((IdentifierAtom)expr).isPresent()) {
				return environment.lookup((IdentifierAtom)expr).get();
			}
			return expr;
		}
		
		boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);
		if(isOperator) {
			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);
		}else {
			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);
		}
		
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="9020" _type="MoveCaretCommand" caretOffset="825" date="Mon Dec 04 23:13:36 EST 2023" docOffset="825" starttimestamp="1701710826491" timestamp="38790431" />
  <Command __id="9021" _type="MoveCaretCommand" caretOffset="825" date="Mon Dec 04 23:13:36 EST 2023" docOffset="825" starttimestamp="1701710826491" timestamp="38790431" />
  <Command __id="9022" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Dec 04 23:13:37 EST 2023" starttimestamp="1701710826491" timestamp="38791106" />
  <Command __id="9023" _type="BreakPointCommand" date="Mon Dec 04 23:13:37 EST 2023" lineNumber="24" starttimestamp="1701710826491" timestamp="38791106" type="BreakPointAdded" />
  <Command __id="9024" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:13:42 EST 2023" docASTNodeCount="209" docActiveCodeLength="1199" docExpressionCount="141" docLength="1214" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38796085">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);		// return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9025" _type="MoveCaretCommand" caretOffset="822" date="Mon Dec 04 23:13:42 EST 2023" docOffset="822" starttimestamp="1701710826491" timestamp="38796142" />
  <Command __id="9028" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:13:47 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38801469" type="Run" />
  <Command __id="9029" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 23:13:49 EST 2023" starttimestamp="1701710826491" timestamp="38802703" />
  <Command __id="9030" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:13:49 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38802709" type="Run" />
  <Command __id="9031" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 23:13:49 EST 2023" starttimestamp="1701710826491" timestamp="38803214" />
  <Command __id="9032" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:13:49 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38803219" type="Run" />
  <Command __id="9033" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 23:13:50 EST 2023" starttimestamp="1701710826491" timestamp="38803625" />
  <Command __id="9034" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:13:50 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38803627" type="Run" />
  <Command __id="9035" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 23:13:50 EST 2023" starttimestamp="1701710826491" timestamp="38803979" />
  <Command __id="9036" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:13:50 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38803980" type="Run" />
  <Command __id="9037" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 23:13:51 EST 2023" starttimestamp="1701710826491" timestamp="38804563" />
  <Command __id="9038" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:13:51 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38804569" type="Run" />
  <Command __id="9039" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Mon Dec 04 23:13:51 EST 2023" starttimestamp="1701710826491" timestamp="38805175" />
  <Command __id="9040" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:13:51 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38805180" type="Run" />
  <Command __id="9043" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:13:55 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38809037" type="Run" />
  <Command __id="9046" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:14:05 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38819078" type="Run" />
  <Command __id="9051" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:14:11 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38824976" type="Run" />
  <Command __id="9054" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:14:17 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38831470" type="Run" />
  <Command __id="9026" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:13:43 EST 2023" docASTNodeCount="181" docActiveCodeLength="1076" docExpressionCount="134" docLength="1199" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38797442">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		// BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).getClass().equals(LambdaEvaluator.class);		if(!expr.getHead().isAtom()){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9049" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:14:08 EST 2023" docASTNodeCount="232" docActiveCodeLength="1409" docExpressionCount="179" docLength="1425" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38821792">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/EvalEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import main.lisp.evaluator.BuiltinOperationManagerSingleton;public class EvalEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(expr.getTail().isAtom()) {			expr = expr.getTail();		}else {			expr = expr.getTail().getHead();		}		return evalHelper(expr, environment);//		return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {		if(expr.isAtom()) {			if(environment.lookup((IdentifierAtom)expr).isPresent()) {				return environment.lookup((IdentifierAtom)expr).get();			}			return expr;		}				boolean isOperator = (!expr.getTail().getHead().isAtom()) && (BuiltinOperationManagerSingleton.get().getEvaluator(expr.getTail().getHead().getHead().toString()) != null);		if(isOperator) {			SExpression expression = ExpressionFactory.newInstance(expr.getHead(), evalHelper(expr.getTail().getHead(), environment));			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expression, environment);		}else {			return BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).eval(expr, environment);		}			}	}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9058" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:14:21 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="38834800">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9062" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:14:26 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="38839812">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9090" _type="ConsoleOutput" date="Mon Dec 04 23:14:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38846697" type="ConsoleOutput">
    <outputString><![CDATA[	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at java."), Diff(DELETE,"desktop/java.awt.EventQueue$4.run(EventQueue"), Diff(INSERT,"base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(EQUAL,".java:"), Diff(DELETE,"721"), Diff(INSERT,"85"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="9091" _type="ConsoleOutput" date="Mon Dec 04 23:14:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38846699" type="ConsoleOutput">
    <outputString><![CDATA[	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"5)¶")]]]></diff>
  </Command>
  <Command __id="9092" _type="ConsoleOutput" date="Mon Dec 04 23:14:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38846717" type="ConsoleOutput">
    <outputString><![CDATA[	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at java."), Diff(DELETE,"base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain"), Diff(INSERT,"desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread"), Diff(EQUAL,".java:"), Diff(DELETE,"95"), Diff(INSERT,"124"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="9093" _type="ConsoleOutput" date="Mon Dec 04 23:14:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38846724" type="ConsoleOutput">
    <outputString><![CDATA[	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at java.desktop/java.awt.EventDispatchThread.pumpEvents"), Diff(DELETE,"ForFilter"), Diff(EQUAL,"(EventDispatchThread.java:1"), Diff(DELETE,"24"), Diff(INSERT,"01"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="9094" _type="ConsoleOutput" date="Mon Dec 04 23:14:33 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38846728" type="ConsoleOutput">
    <outputString><![CDATA[	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"	at java.desktop/java.awt.EventDispatchThread."), Diff(DELETE,"pumpEvents"), Diff(INSERT,"run"), Diff(EQUAL,"(EventDispatchThread.java:"), Diff(DELETE,"101"), Diff(INSERT,"90"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="9095" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:14:40 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38853854">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return null;	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9096" _type="MoveCaretCommand" caretOffset="3409" date="Mon Dec 04 23:14:40 EST 2023" docOffset="3409" starttimestamp="1701710826491" timestamp="38853910" />
  <Command __id="9097" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:14:41 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38855040">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9098" _type="MoveCaretCommand" caretOffset="122" date="Mon Dec 04 23:14:41 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="38855096" />
  <Command __id="9099" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:14:42 EST 2023" docASTNodeCount="209" docActiveCodeLength="1199" docExpressionCount="141" docLength="1214" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38855513">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);		// return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9100" _type="MoveCaretCommand" caretOffset="822" date="Mon Dec 04 23:14:42 EST 2023" docOffset="822" starttimestamp="1701710826491" timestamp="38855568" />
  <Command __id="9101" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:14:42 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38856342">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9102" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 23:14:42 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="38856395" />
  <Command __id="9104" _type="MoveCaretCommand" caretOffset="1149" date="Mon Dec 04 23:14:43 EST 2023" docOffset="1149" starttimestamp="1701710826491" timestamp="38857000" />
  <Command __id="9105" _type="ShellCommand" date="Mon Dec 04 23:14:46 EST 2023" starttimestamp="1701710826491" timestamp="38860194" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9111" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:15:21 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38895303" type="Run" />
  <Command __id="9112" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:15:21 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38895303" type="Run" />
  <Command __id="9113" _type="ShellCommand" date="Mon Dec 04 23:15:22 EST 2023" starttimestamp="1701710826491" timestamp="38895610" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9114" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898460" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9115" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898461" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9116" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898468" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,

Test execution time (ms):6
Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFile"), Diff(INSERT,"execution time (ms):5¶Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,¶¶Test execution time (ms):6¶Test Result:MainClass"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶")]]]></diff>
  </Command>
  <Command __id="9117" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898492" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):31
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"5¶Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,¶¶Test execution time (ms):6¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"31"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9118" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898494" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

Test execution time (ms):32
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):3"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9119" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898495" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispLambdaChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:L"), Diff(DELETE,"oadLisp"), Diff(INSERT,"ispLambda"), Diff(EQUAL,"Checker,100.0% complete,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,¶"), Diff(DELETE,"¶Test execution time (ms):32¶")]]]></diff>
  </Command>
  <Command __id="9120" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898496" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LispLambdaChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9121" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898497" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispLambdaChecker2,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:LispLambdaChecker2,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9122" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898498" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LispLambdaChecker2,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9123" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898499" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispLambdaChecker3,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:LispLambdaChecker3,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9124" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898500" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LispLambdaChecker3,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9125" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898502" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLambdaChecker,100.0% complete,15.0,15.0,

Test execution time (ms):0
Test Result:LoadLambdaChecker2,100.0% complete,15.0,15.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:LoadLambdaChecker,100.0% complete,15.0,15.0,¶¶Test execution time (ms):0¶Test Result:LoadLambdaChecker2,100.0% complete,15.0,15.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9126" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898502" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLambdaChecker,100.0% complete,15.0,15.0,¶¶Test execution time (ms):0¶Test Result:LoadLambdaChecker2,100.0% complete,15.0,15.0,¶"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9127" _type="ConsoleOutput" date="Mon Dec 04 23:15:24 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38898503" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLambdaChecker3,100.0% complete,15.0,15.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:LoadLambdaChecker3,100.0% complete,15.0,15.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9103" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:14:43 EST 2023" docASTNodeCount="181" docActiveCodeLength="1076" docExpressionCount="134" docLength="1199" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38856948">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		// BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).getClass().equals(LambdaEvaluator.class);		if(!expr.getHead().isAtom()){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9128" _type="ShellCommand" date="Mon Dec 04 23:15:29 EST 2023" starttimestamp="1701710826491" timestamp="38902730" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9129" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:15:29 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38902736" type="Debug" />
  <Command __id="9130" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:15:29 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38902736" type="Run" />
  <Command __id="9131" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:15:29 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="38902736" type="Debug" />
  <Command __id="9132" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:15:29 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38902736" type="Run" />
  <Command __id="9133" _type="MoveCaretCommand" caretOffset="789" date="Mon Dec 04 23:15:29 EST 2023" docOffset="789" starttimestamp="1701710826491" timestamp="38903205" />
  <Command __id="9134" _type="MoveCaretCommand" caretOffset="789" date="Mon Dec 04 23:15:29 EST 2023" docOffset="789" starttimestamp="1701710826491" timestamp="38903205" />
  <Command __id="9135" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:15:30 EST 2023" docASTNodeCount="461" docActiveCodeLength="3377" docExpressionCount="227" docLength="4091" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38904414">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionEvaluator'");	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return null;	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9136" _type="MoveCaretCommand" caretOffset="3409" date="Mon Dec 04 23:15:30 EST 2023" docOffset="3409" starttimestamp="1701710826491" timestamp="38904469" />
  <Command __id="9137" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:15:33 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38906674">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9138" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 23:15:33 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="38906736" />
  <Command __id="9140" _type="MoveCaretCommand" caretOffset="822" date="Mon Dec 04 23:15:33 EST 2023" docOffset="822" starttimestamp="1701710826491" timestamp="38907070" />
  <Command __id="9141" _type="ShellCommand" date="Mon Dec 04 23:15:37 EST 2023" starttimestamp="1701710826491" timestamp="38910904" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9143" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:16:48 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38981882" type="Run" />
  <Command __id="9144" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:16:48 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38981882" type="Run" />
  <Command __id="9145" _type="ShellCommand" date="Mon Dec 04 23:16:48 EST 2023" starttimestamp="1701710826491" timestamp="38982210" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9146" _type="ShellCommand" date="Mon Dec 04 23:16:49 EST 2023" starttimestamp="1701710826491" timestamp="38982716" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9147" _type="ShellCommand" date="Mon Dec 04 23:16:51 EST 2023" starttimestamp="1701710826491" timestamp="38984827" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9148" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986112" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLambdaChecker3,100.0% complete,15.0,15.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9149" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986114" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:TestLispFileProvided,100.0% complete,0.0,0.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9150" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986118" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:TestLispFileProvided,100.0% complete,0.0,0.0,¶"), Diff(INSERT,"execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9151" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986118" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ClassRegistryProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):5"), Diff(INSERT,"Result:ClassRegistryProvided,100.0% complete,0.0,0.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9152" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986121" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):7
Test Result:MainClassProvided,100.0% complete,0.0,0.0,
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):7¶"), Diff(EQUAL,"Test Result:"), Diff(INSERT,"Main"), Diff(EQUAL,"Class"), Diff(DELETE,"Registry"), Diff(EQUAL,"Provided,100.0% complete,0.0,0.0,¶")]]]></diff>
  </Command>
  <Command __id="9153" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986143" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):31
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"7¶Test Result:MainClassProvided,100.0% complete,0.0,0.0,"), Diff(INSERT,"31"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9154" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986145" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLispChecker,100.0% complete,0.0,0.0,

Test execution time (ms):32
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LoadLispChecker,100.0% complete,0.0,0.0,¶¶"), Diff(EQUAL,"Test execution time (ms):3"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9155" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986145" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispLambdaChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:L"), Diff(DELETE,"oadLisp"), Diff(INSERT,"ispLambda"), Diff(EQUAL,"Checker,100.0% complete,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,"), Diff(INSERT,"1"), Diff(EQUAL,"0.0,¶"), Diff(DELETE,"¶Test execution time (ms):32¶")]]]></diff>
  </Command>
  <Command __id="9156" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986146" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LispLambdaChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9157" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986148" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispLambdaChecker2,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:LispLambdaChecker2,100.0% complete,10.0,10.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9158" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986148" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LispLambdaChecker2,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9159" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986149" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LispLambdaChecker3,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:LispLambdaChecker3,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9160" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986150" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LispLambdaChecker3,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9161" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986151" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLambdaChecker,100.0% complete,15.0,15.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:LoadLambdaChecker,100.0% complete,15.0,15.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9162" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986151" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLambdaChecker,100.0% complete,15.0,15.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9163" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986152" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLambdaChecker2,100.0% complete,15.0,15.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:LoadLambdaChecker2,100.0% complete,15.0,15.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9164" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986153" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLambdaChecker2,100.0% complete,15.0,15.0,"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9165" _type="ConsoleOutput" date="Mon Dec 04 23:16:52 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38986153" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LoadLambdaChecker3,100.0% complete,15.0,15.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:LoadLambdaChecker3,100.0% complete,15.0,15.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9166" _type="ConsoleOutput" date="Mon Dec 04 23:17:01 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38995206" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:BasicAndChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
Test Result:BasicOrChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LoadLambda"), Diff(INSERT,"execution time (ms):1¶Test Result:BasicAndChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:BasicOr"), Diff(EQUAL,"Checker"), Diff(DELETE,"3"), Diff(EQUAL,",100.0% complete,1"), Diff(DELETE,"5"), Diff(INSERT,"0"), Diff(EQUAL,".0,1"), Diff(DELETE,"5"), Diff(INSERT,"0"), Diff(EQUAL,".0,¶"), Diff(INSERT,"¶")]]]></diff>
  </Command>
  <Command __id="9167" _type="ConsoleOutput" date="Mon Dec 04 23:17:01 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38995207" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1¶"), Diff(DELETE,"Test Result:BasicAndChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:BasicOrChecker,100.0% complete,10.0,10.0,¶¶")]]]></diff>
  </Command>
  <Command __id="9168" _type="ConsoleOutput" date="Mon Dec 04 23:17:01 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38995207" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:NotChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:NotChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9169" _type="ConsoleOutput" date="Mon Dec 04 23:17:01 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38995209" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:NotChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9170" _type="LocalChecksRawCommand" date="Mon Dec 04 23:17:01 EST 2023" starttimestamp="1701710826491" timestamp="38995210">
    <CSVRow><![CDATA[126,Mon Dec 04 23:16:52 EST 2023,50,0,LispLambdaSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,60,0,true,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(10.0/10.0) LispLambdaChecker2-(10.0/10.0) LispLambdaChecker3-(10.0/10.0) LoadLambdaChecker-(15.0/15.0) LoadLambdaChecker2-(15.0/15.0) LoadLambdaChecker3-(15.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="9171" _type="LocalChecksRawCommand" date="Mon Dec 04 23:17:01 EST 2023" starttimestamp="1701710826491" timestamp="38995210">
    <CSVRow><![CDATA[126,Mon Dec 04 23:16:52 EST 2023,50,0,LispLambdaSuite,A6ExtraCondChecker BasicAndChecker BasicOrChecker ClassRegistryProvided CondChecker EnvironmentCallsGetParent EnvironmentCallsPut EvalChecker GreaterChecker GreaterOrEqualChecker IdentifierCallsEnvironmentLookup IdentifierCallsOptionalGet LessChecker LessOrEqualChecker LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LispSetqChecker LispSetqChecker2 ListChecker ListChecker2 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 LoadLispChecker LoadSetqChecker LoadSetqChecker2 LoadSetqChecker3 MainClassProvided NotChecker QuoteChecker TestLispFileProvided VariableArgumentAndChecker VariableArgumentOrChecker , ,BasicLetTest CombinationChecker CurryOnceChecker CurryTwiceChecker CurryTwoArgsChecker DerivedSafeChecker FuncallCallsExpressionFactory LambdaCallsLambdaFactory LetLambdaAndFunctionTest LispIsListChecker LispIsListChecker2 LispIsListChecker3 LispIsListChecker4 LispToStringChecker LispToStringChecker2 LispToStringChecker3 LispToStringChecker4 ListMToNCarCdrLazyEval ListMToNCarLazyEval ListMToNCarNormalEval ListMToNCdrLazyEval PlusGeneratorChecker ProjectStructureOrganizesEvaluators TimesGeneratorChecker ,A6CommonPropertiesInherited A6CommonSignaturesAreInherited A6Encapsulation A6NoHiddenFields A6NoStarImports A6NonPublicAccessModifiersMatched A6PackageDeclarations A6PublicMethodsOverride F21A6NoCheckstyleWarnings ,60,0,true,LispLambdaChecker LispLambdaChecker2 LispLambdaChecker3 LoadLambdaChecker LoadLambdaChecker2 LoadLambdaChecker3 ,ClassRegistryProvided LoadLispChecker MainClassProvided TestLispFileProvided , ,LispLambdaChecker-(10.0/10.0) LispLambdaChecker2-(10.0/10.0) LispLambdaChecker3-(10.0/10.0) LoadLambdaChecker-(15.0/15.0) LoadLambdaChecker2-(15.0/15.0) LoadLambdaChecker3-(15.0/15.0) , ,]]></CSVRow>
  </Command>
  <Command __id="9172" _type="ConsoleOutput" date="Mon Dec 04 23:17:01 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38995211" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:VariableArgumentAndChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:VariableArgumentAndChecker,100.0% complete,10.0,10.0,¶"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9173" _type="ConsoleOutput" date="Mon Dec 04 23:17:01 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38995211" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:VariableArgumentAndChecker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9174" _type="ConsoleOutput" date="Mon Dec 04 23:17:01 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38995213" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:VariableArgumentOrChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):0"), Diff(INSERT,"Result:VariableArgumentOrChecker,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9175" _type="ConsoleOutput" date="Mon Dec 04 23:17:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38997305" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2
Test Result:GreaterChecker,100.0% complete,10.0,10.0,

Test execution time (ms):0
Test Result:GreaterOrEqualChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:VariableArgumentOr"), Diff(INSERT,"execution time (ms):2¶Test Result:GreaterChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):0¶Test Result:GreaterOrEqual"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"¶")]]]></diff>
  </Command>
  <Command __id="9176" _type="ConsoleOutput" date="Mon Dec 04 23:17:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38997306" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"2¶Test Result:GreaterChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):0¶Test Result:GreaterOrEqualChecker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9177" _type="ConsoleOutput" date="Mon Dec 04 23:17:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38997308" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LessChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:LessChecker,100.0% complete,10.0,10.0,¶¶"), Diff(EQUAL,"Test execution time (ms):1¶")]]]></diff>
  </Command>
  <Command __id="9178" _type="ConsoleOutput" date="Mon Dec 04 23:17:03 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="38997309" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:LessOrEqualChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:Less"), Diff(INSERT,"OrEqual"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶"), Diff(DELETE,"¶Test execution time (ms):1¶")]]]></diff>
  </Command>
  <Command __id="9179" _type="ConsoleOutput" date="Mon Dec 04 23:19:36 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="39150159" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test Result:CondChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
Test Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,

Test execution time (ms):0
Test Result:QuoteChecker,100.0% complete,10.0,10.0,

]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:LessOrEqual"), Diff(INSERT,"execution time (ms):1¶Test Result:CondChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):0¶Test Result:Quote"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶"), Diff(INSERT,"¶")]]]></diff>
  </Command>
  <Command __id="9180" _type="ConsoleOutput" date="Mon Dec 04 23:19:36 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="39150160" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1¶"), Diff(DELETE,"Test Result:CondChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):1¶Test Result:A6ExtraCondChecker,100.0% complete,10.0,10.0,¶¶Test execution time (ms):0¶Test Result:QuoteChecker,100.0% complete,10.0,10.0,¶¶")]]]></diff>
  </Command>
  <Command __id="9181" _type="ConsoleOutput" date="Mon Dec 04 23:19:36 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="39150163" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:EvalChecker,100.0% complete,10.0,10.0,

Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test Result:EvalChecker,100.0% complete,10.0,10.0,¶¶"), Diff(EQUAL,"Test execution time (ms):1¶")]]]></diff>
  </Command>
  <Command __id="9182" _type="ConsoleOutput" date="Mon Dec 04 23:19:36 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="39150164" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ListChecker,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test Result:"), Diff(DELETE,"Eval"), Diff(INSERT,"List"), Diff(EQUAL,"Checker,100.0% complete,10.0,10.0,¶"), Diff(DELETE,"¶Test execution time (ms):1¶")]]]></diff>
  </Command>
  <Command __id="9183" _type="ConsoleOutput" date="Mon Dec 04 23:19:36 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="39150165" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"Result:ListChecker,100.0% complete,10.0,10.0,"), Diff(INSERT,"execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9184" _type="ConsoleOutput" date="Mon Dec 04 23:19:36 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="39150166" type="ConsoleOutput">
    <outputString><![CDATA[Test Result:ListChecker2,100.0% complete,10.0,10.0,
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test "), Diff(DELETE,"execution time (ms):1"), Diff(INSERT,"Result:ListChecker2,100.0% complete,10.0,10.0,"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9185" _type="ConsoleOutput" date="Mon Dec 04 23:19:36 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="39150170" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):2
Test Result:CombinationChecker,0.0% complete,0.0,10.0,Expected strings:4actual string COND
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶Test execution time (ms):2¶"), Diff(EQUAL,"Test Result:"), Diff(DELETE,"List"), Diff(INSERT,"Combination"), Diff(EQUAL,"Checker"), Diff(DELETE,"2,10"), Diff(INSERT,","), Diff(EQUAL,"0.0% complete,"), Diff(DELETE,"1"), Diff(EQUAL,"0.0,10.0,"), Diff(INSERT,"Expected strings:4actual string COND"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9201" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:41:22 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="40455542" type="Debug" />
  <Command __id="9202" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:41:22 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="40455542" type="Run" />
  <Command __id="9203" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:41:22 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="40455542" type="Debug" />
  <Command __id="9204" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:41:22 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="40455542" type="Run" />
  <Command __id="9205" _type="ShellCommand" date="Mon Dec 04 23:41:23 EST 2023" starttimestamp="1701710826491" timestamp="40457041" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9206" _type="ShellCommand" date="Mon Dec 04 23:42:35 EST 2023" starttimestamp="1701710826491" timestamp="40529259" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9207" _type="ShellCommand" date="Mon Dec 04 23:42:36 EST 2023" starttimestamp="1701710826491" timestamp="40529566" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9208" _type="ShellCommand" date="Mon Dec 04 23:42:47 EST 2023" starttimestamp="1701710826491" timestamp="40541050" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9209" _type="MoveCaretCommand" caretOffset="866" date="Mon Dec 04 23:42:47 EST 2023" docOffset="866" starttimestamp="1701710826491" timestamp="40541121" />
  <Command __id="9210" _type="ShellCommand" date="Mon Dec 04 23:42:51 EST 2023" starttimestamp="1701710826491" timestamp="40544774" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9211" _type="ShellCommand" date="Mon Dec 04 23:43:02 EST 2023" starttimestamp="1701710826491" timestamp="40555668" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9212" _type="MoveCaretCommand" caretOffset="745" date="Mon Dec 04 23:43:02 EST 2023" docOffset="745" starttimestamp="1701710826491" timestamp="40555729" />
  <Command __id="9213" _type="ShellCommand" date="Mon Dec 04 23:43:03 EST 2023" starttimestamp="1701710826491" timestamp="40557013" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9214" _type="ShellCommand" date="Mon Dec 04 23:43:06 EST 2023" starttimestamp="1701710826491" timestamp="40560412" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9215" _type="MoveCaretCommand" caretOffset="566" date="Mon Dec 04 23:43:06 EST 2023" docOffset="566" starttimestamp="1701710826491" timestamp="40560476" />
  <Command __id="9216" _type="MoveCaretCommand" caretOffset="524" date="Mon Dec 04 23:43:08 EST 2023" docOffset="524" starttimestamp="1701710826491" timestamp="40561592" />
  <Command __id="9217" _type="InsertStringCommand" date="Mon Dec 04 23:43:09 EST 2023" starttimestamp="1701710826491" timestamp="40562553" timestamp2="40562553">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="9218" _type="ShellCommand" date="Mon Dec 04 23:43:10 EST 2023" starttimestamp="1701710826491" timestamp="40564348" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9139" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:15:33 EST 2023" docASTNodeCount="209" docActiveCodeLength="1199" docExpressionCount="141" docLength="1214" projectName="Assignment5" starttimestamp="1701710826491" timestamp="38907011">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);		// return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9219" _type="ShellCommand" date="Mon Dec 04 23:43:13 EST 2023" starttimestamp="1701710826491" timestamp="40566545" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9221" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 23:43:15 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="40569088" />
  <Command __id="9222" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Mon Dec 04 23:43:17 EST 2023" starttimestamp="1701710826491" timestamp="40571000" />
  <Command __id="9223" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:43:17 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="40571201" type="Run" />
  <Command __id="9224" _type="RunCommand" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:43:17 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="40571201" type="Run" />
  <Command __id="9225" _type="ShellCommand" date="Mon Dec 04 23:43:18 EST 2023" starttimestamp="1701710826491" timestamp="40571511" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9226" _type="ShellCommand" date="Mon Dec 04 23:46:45 EST 2023" starttimestamp="1701710826491" timestamp="40778840" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9227" _type="ShellCommand" date="Mon Dec 04 23:46:45 EST 2023" starttimestamp="1701710826491" timestamp="40779482" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9228" _type="ShellCommand" date="Mon Dec 04 23:52:25 EST 2023" starttimestamp="1701710826491" timestamp="41118624" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9220" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:43:15 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="40569036">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9238" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:56:20 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41354052" type="Debug" />
  <Command __id="9239" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:56:20 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41354052" type="Run" />
  <Command __id="9240" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:56:20 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41354052" type="Debug" />
  <Command __id="9241" _type="ProgramExecutionEvent" className="/Assignment5/src/index/RunF23A5Tests.java" date="Mon Dec 04 23:56:20 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41354052" type="Run" />
  <Command __id="9242" _type="ShellCommand" date="Mon Dec 04 23:56:21 EST 2023" starttimestamp="1701710826491" timestamp="41354837" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9243" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:56:22 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41356224">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9244" _type="MoveCaretCommand" caretOffset="122" date="Mon Dec 04 23:56:22 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="41356283" />
  <Command __id="9245" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:56:23 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41357354">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9246" _type="MoveCaretCommand" caretOffset="0" date="Mon Dec 04 23:56:23 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="41357400" />
  <Command __id="9248" _type="MoveCaretCommand" caretOffset="524" date="Mon Dec 04 23:56:25 EST 2023" docOffset="524" starttimestamp="1701710826491" timestamp="41358753" />
  <Command __id="9249" _type="ShellCommand" date="Mon Dec 04 23:56:28 EST 2023" starttimestamp="1701710826491" timestamp="41361857" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9250" _type="ShellCommand" date="Mon Dec 04 23:57:05 EST 2023" starttimestamp="1701710826491" timestamp="41398877" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9251" _type="ShellCommand" date="Mon Dec 04 23:57:06 EST 2023" starttimestamp="1701710826491" timestamp="41399638" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9247" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:56:25 EST 2023" docASTNodeCount="209" docActiveCodeLength="1199" docExpressionCount="141" docLength="1214" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41358709">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);		// return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9252" _type="ShellCommand" date="Mon Dec 04 23:57:35 EST 2023" starttimestamp="1701710826491" timestamp="41429464" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9254" _type="MoveCaretCommand" caretOffset="122" date="Mon Dec 04 23:57:39 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="41432539" />
  <Command __id="9267" _type="EclipseCommand" commandID="" date="Mon Dec 04 23:57:42 EST 2023" starttimestamp="1701710826491" timestamp="41435610" />
  <Command __id="9268" _type="EclipseCommand" commandID="" date="Mon Dec 04 23:57:42 EST 2023" starttimestamp="1701710826491" timestamp="41435612" />
  <Command __id="9272" _type="EclipseCommand" commandID="" date="Mon Dec 04 23:58:01 EST 2023" starttimestamp="1701710826491" timestamp="41455350" />
  <Command __id="9273" _type="EclipseCommand" commandID="" date="Mon Dec 04 23:58:01 EST 2023" starttimestamp="1701710826491" timestamp="41455351" />
  <Command __id="9274" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Mon Dec 04 23:58:03 EST 2023" starttimestamp="1701710826491" timestamp="41457313" />
  <Command __id="9275" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 23:58:03 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41457486" type="Run" />
  <Command __id="9276" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Mon Dec 04 23:58:03 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41457486" type="Run" />
  <Command __id="9277" _type="ShellCommand" date="Mon Dec 04 23:58:05 EST 2023" starttimestamp="1701710826491" timestamp="41458773" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9278" _type="ShellCommand" date="Mon Dec 04 23:58:05 EST 2023" starttimestamp="1701710826491" timestamp="41459460" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9279" _type="ShellCommand" date="Mon Dec 04 23:58:07 EST 2023" starttimestamp="1701710826491" timestamp="41461189" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9280" _type="ShellCommand" date="Mon Dec 04 23:58:08 EST 2023" starttimestamp="1701710826491" timestamp="41461713" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9281" _type="ShellCommand" date="Mon Dec 04 23:58:08 EST 2023" starttimestamp="1701710826491" timestamp="41462105" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9282" _type="ShellCommand" date="Mon Dec 04 23:58:09 EST 2023" starttimestamp="1701710826491" timestamp="41463357" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9283" _type="ConsoleOutput" date="Mon Dec 04 23:58:10 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="41463864" type="ConsoleOutput">
    <outputString><![CDATA[(setq f (lambda (x) x))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at index.OperationRegistererImpl.registerAdvance(OperationRegistererImpl.java:33)¶	at index.OperationRegistererImpl.registerAll(OperationRegistererImpl.java:46)¶	at index.index.main(index.java:15"), Diff(INSERT,"(setq f (lambda (x) x)"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="9284" _type="PasteCommand" date="Mon Dec 04 23:58:10 EST 2023" starttimestamp="1701710826491" timestamp="41463867" />
  <Command __id="9285" _type="ConsoleOutput" date="Mon Dec 04 23:58:10 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="41463874" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA (X) X
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(setq f (lambda (x) x))"), Diff(INSERT,"LAMBDA (X) X"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9286" _type="ShellCommand" date="Mon Dec 04 23:58:11 EST 2023" starttimestamp="1701710826491" timestamp="41465478" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9287" _type="ShellCommand" date="Mon Dec 04 23:58:13 EST 2023" starttimestamp="1701710826491" timestamp="41466630" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9288" _type="ConsoleInput" date="Mon Dec 04 23:58:19 EST 2023" starttimestamp="1701710826491" timestamp="41472593" type="Exception">
    <outputString><![CDATA[(funcall f 1)
]]></outputString>
  </Command>
  <Command __id="9289" _type="ExceptionCommand" date="Mon Dec 04 23:58:19 EST 2023" starttimestamp="1701710826491" timestamp="41472598" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:24)
	at index.FuncallEvaluator.evalHelper(FuncallEvaluator.java:21)
	at index.FuncallEvaluator.eval(FuncallEvaluator.java:15)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:24)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:17)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="9290" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:58:19 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41472605" type="Debug" />
  <Command __id="9291" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 23:58:19 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41472605" type="Run" />
  <Command __id="9292" _type="ProgramExecutionEvent" className="(Unknown)" date="Mon Dec 04 23:58:19 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41472605" type="Debug" />
  <Command __id="9293" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Mon Dec 04 23:58:19 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41472605" type="Run" />
  <Command __id="9294" _type="ShellCommand" date="Mon Dec 04 23:58:42 EST 2023" starttimestamp="1701710826491" timestamp="41496222" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9295" _type="ShellCommand" date="Mon Dec 04 23:58:49 EST 2023" starttimestamp="1701710826491" timestamp="41502749" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9296" _type="ShellCommand" date="Mon Dec 04 23:59:11 EST 2023" starttimestamp="1701710826491" timestamp="41524963" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9297" _type="ShellCommand" date="Mon Dec 04 23:59:12 EST 2023" starttimestamp="1701710826491" timestamp="41525686" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9298" _type="ShellCommand" date="Mon Dec 04 23:59:13 EST 2023" starttimestamp="1701710826491" timestamp="41526912" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9299" _type="ShellCommand" date="Mon Dec 04 23:59:18 EST 2023" starttimestamp="1701710826491" timestamp="41531535" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9300" _type="ShellCommand" date="Mon Dec 04 23:59:18 EST 2023" starttimestamp="1701710826491" timestamp="41532496" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9301" _type="ShellCommand" date="Mon Dec 04 23:59:19 EST 2023" starttimestamp="1701710826491" timestamp="41532977" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9302" _type="ShellCommand" date="Mon Dec 04 23:59:19 EST 2023" starttimestamp="1701710826491" timestamp="41533367" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9303" _type="ShellCommand" date="Mon Dec 04 23:59:20 EST 2023" starttimestamp="1701710826491" timestamp="41534398" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9304" _type="ShellCommand" date="Mon Dec 04 23:59:31 EST 2023" starttimestamp="1701710826491" timestamp="41544891" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9305" _type="ShellCommand" date="Mon Dec 04 23:59:54 EST 2023" starttimestamp="1701710826491" timestamp="41567592" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9306" _type="ShellCommand" date="Mon Dec 04 23:59:54 EST 2023" starttimestamp="1701710826491" timestamp="41568178" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9253" _type="DiffBasedFileOpenCommand" date="Mon Dec 04 23:57:38 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41432484">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9307" _type="ShellCommand" date="Mon Dec 04 23:59:56 EST 2023" starttimestamp="1701710826491" timestamp="41569866" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9309" _type="SelectTextCommand" caretOffset="694" date="Tue Dec 05 00:00:01 EST 2023" end="694" start="620" starttimestamp="1701710826491" timestamp="41574987" />
  <Command __id="9310" _type="ShellCommand" date="Tue Dec 05 00:00:19 EST 2023" starttimestamp="1701710826491" timestamp="41593500" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9311" _type="ShellCommand" date="Tue Dec 05 00:00:35 EST 2023" starttimestamp="1701710826491" timestamp="41608614" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9312" _type="ShellCommand" date="Tue Dec 05 00:00:43 EST 2023" starttimestamp="1701710826491" timestamp="41616865" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9313" _type="ShellCommand" date="Tue Dec 05 00:00:46 EST 2023" starttimestamp="1701710826491" timestamp="41620180" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9314" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Tue Dec 05 00:00:53 EST 2023" starttimestamp="1701710826491" timestamp="41627006" />
  <Command __id="9315" _type="BreakPointCommand" date="Tue Dec 05 00:00:53 EST 2023" lineNumber="18" starttimestamp="1701710826491" timestamp="41627007" type="BreakPointAdded" />
  <Command __id="9316" _type="MoveCaretCommand" caretOffset="675" date="Tue Dec 05 00:01:03 EST 2023" docOffset="849" starttimestamp="1701710826491" timestamp="41637042" />
  <Command __id="9317" _type="SelectTextCommand" caretOffset="679" date="Tue Dec 05 00:01:03 EST 2023" end="679" start="669" starttimestamp="1701710826491" timestamp="41637214" />
  <Command __id="9319" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:01:20 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41653874" type="Run" />
  <Command __id="9320" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:01:20 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41653874" type="Run" />
  <Command __id="9321" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:01:20 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41653983" type="Run" />
  <Command __id="9322" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:01:20 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41653993" type="Run" />
  <Command __id="9323" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:01:20 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41654134" type="Run" />
  <Command __id="9324" _type="ShellCommand" date="Tue Dec 05 00:01:22 EST 2023" starttimestamp="1701710826491" timestamp="41655982" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9325" _type="ShellCommand" date="Tue Dec 05 00:01:26 EST 2023" starttimestamp="1701710826491" timestamp="41660238" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9326" _type="ConsoleOutput" date="Tue Dec 05 00:01:27 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="41660519" type="ConsoleOutput">
    <outputString><![CDATA[(setq f (lambda (x) x))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"LAMBDA"), Diff(INSERT,"(setq f (lambda"), Diff(EQUAL," ("), Diff(DELETE,"X"), Diff(INSERT,"x"), Diff(EQUAL,") "), Diff(DELETE,"X"), Diff(INSERT,"x))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9327" _type="PasteCommand" date="Tue Dec 05 00:01:27 EST 2023" starttimestamp="1701710826491" timestamp="41660522" />
  <Command __id="9328" _type="ConsoleOutput" date="Tue Dec 05 00:01:27 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="41660530" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA (X) X
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(setq f (lambda (x) x))"), Diff(INSERT,"LAMBDA (X) X"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9329" _type="ShellCommand" date="Tue Dec 05 00:01:27 EST 2023" starttimestamp="1701710826491" timestamp="41661413" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9330" _type="ShellCommand" date="Tue Dec 05 00:01:31 EST 2023" starttimestamp="1701710826491" timestamp="41664885" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9331" _type="PasteCommand" date="Tue Dec 05 00:01:31 EST 2023" starttimestamp="1701710826491" timestamp="41665267" />
  <Command __id="9334" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:01:36 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41669776" type="Run" />
  <Command __id="9337" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:01:42 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41675635" type="Run" />
  <Command __id="9347" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:02:13 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41707454" type="Run" />
  <Command __id="9348" _type="ShellCommand" date="Tue Dec 05 00:02:24 EST 2023" starttimestamp="1701710826491" timestamp="41717685" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9353" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:02:51 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41744593" type="Run" />
  <Command __id="9308" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:00:01 EST 2023" docASTNodeCount="136" docActiveCodeLength="874" docExpressionCount="95" docLength="874" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41574933">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;


public class FuncallEvaluator implements Evaluator{

    @Override
    public SExpression eval(SExpression expr, Environment environment) {
        expr = expr.getTail();
		return evalHelper(expr, environment);
    }
    public static SExpression evalHelper(SExpression expr, Environment environment) {
        Lambda lambda = (Lambda) expr.getHead().eval(environment);
        SExpression expression = ExpressionFactory.newInstance(lambda, expr.getTail());
        BasicExpressionEvaluatorImpl basicExpressionEvaluatorImpl = new BasicExpressionEvaluatorImpl();
        return basicExpressionEvaluatorImpl.eval(expression, environment);
	}
}
]]></snapshot>
  </Command>
  <Command __id="9354" _type="MoveCaretCommand" caretOffset="497" date="Tue Dec 05 00:02:52 EST 2023" docOffset="671" starttimestamp="1701710826491" timestamp="41745763" />
  <Command __id="9356" _type="InsertStringCommand" date="Tue Dec 05 00:02:53 EST 2023" starttimestamp="1701710826491" timestamp="41746780" timestamp2="41746780">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="9357" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Dec 05 00:02:53 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="41746790" />
  <Command __id="9358" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Dec 05 00:03:03 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="41756554" />
  <Command __id="9359" _type="MoveCaretCommand" caretOffset="349" date="Tue Dec 05 00:03:03 EST 2023" docOffset="523" starttimestamp="1701710826491" timestamp="41756609" />
  <Command __id="9360" _type="MoveCaretCommand" caretOffset="498" date="Tue Dec 05 00:03:03 EST 2023" docOffset="672" starttimestamp="1701710826491" timestamp="41757381" />
  <Command __id="9362" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:04 EST 2023" starttimestamp="1701710826491" timestamp="41758255" />
  <DocumentChange __id="9355" _type="Insert" date="Tue Dec 05 00:02:53 EST 2023" docASTNodeCount="137" docActiveCodeLength="875" docExpressionCount="96" docLength="875" length="1" offset="671" starttimestamp="1701710826491" timestamp="41746778">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="9361" _type="Delete" date="Tue Dec 05 00:03:04 EST 2023" docASTNodeCount="136" docActiveCodeLength="874" docExpressionCount="95" docLength="874" endLine="18" length="1" offset="671" startLine="18" starttimestamp="1701710826491" timestamp="41758252">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="9364" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:03:29 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41783207" type="Debug" />
  <Command __id="9365" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:03:29 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41783207" type="Run" />
  <Command __id="9366" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:03:29 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="41783207" type="Debug" />
  <Command __id="9367" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:03:29 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="41783207" type="Run" />
  <Command __id="9368" _type="MoveCaretCommand" caretOffset="427" date="Tue Dec 05 00:03:30 EST 2023" docOffset="601" starttimestamp="1701710826491" timestamp="41783872" />
  <DocumentChange __id="9369" _type="Insert" date="Tue Dec 05 00:03:31 EST 2023" docASTNodeCount="139" docActiveCodeLength="887" docExpressionCount="97" docLength="887" length="13" offset="601" repeat="5" starttimestamp="1701710826491" timestamp="41785349" timestamp2="41787542">
    <text><![CDATA[
        Lmab]]></text>
  </DocumentChange>
  <Command __id="9370" _type="InsertStringCommand" date="Tue Dec 05 00:03:31 EST 2023" starttimestamp="1701710826491" timestamp="41785351" timestamp2="41785351">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9372" _type="InsertStringCommand" date="Tue Dec 05 00:03:33 EST 2023" starttimestamp="1701710826491" timestamp="41787087" timestamp2="41787087">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="9374" _type="InsertStringCommand" date="Tue Dec 05 00:03:33 EST 2023" starttimestamp="1701710826491" timestamp="41787321" timestamp2="41787321">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9376" _type="InsertStringCommand" date="Tue Dec 05 00:03:33 EST 2023" starttimestamp="1701710826491" timestamp="41787424" timestamp2="41787424">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9378" _type="InsertStringCommand" date="Tue Dec 05 00:03:34 EST 2023" starttimestamp="1701710826491" timestamp="41787544" timestamp2="41787544">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="9379" _type="Delete" date="Tue Dec 05 00:03:34 EST 2023" docASTNodeCount="136" docActiveCodeLength="883" docExpressionCount="95" docLength="883" endLine="18" length="4" offset="610" repeat="4" startLine="18" starttimestamp="1701710826491" timestamp="41787951" timestamp2="41788353">
    <text><![CDATA[Lmab]]></text>
  </DocumentChange>
  <Command __id="9380" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:34 EST 2023" starttimestamp="1701710826491" timestamp="41787954" />
  <Command __id="9382" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:34 EST 2023" starttimestamp="1701710826491" timestamp="41788087" />
  <Command __id="9384" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:34 EST 2023" starttimestamp="1701710826491" timestamp="41788207" />
  <Command __id="9386" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:34 EST 2023" starttimestamp="1701710826491" timestamp="41788354" />
  <DocumentChange __id="9387" _type="Insert" date="Tue Dec 05 00:03:35 EST 2023" docASTNodeCount="139" docActiveCodeLength="904" docExpressionCount="98" docLength="904" length="21" offset="610" repeat="21" starttimestamp="1701710826491" timestamp="41789063" timestamp2="41792160">
    <text><![CDATA[ExpressionFactory.new]]></text>
  </DocumentChange>
  <Command __id="9388" _type="InsertStringCommand" date="Tue Dec 05 00:03:35 EST 2023" starttimestamp="1701710826491" timestamp="41789065" timestamp2="41789065">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9390" _type="InsertStringCommand" date="Tue Dec 05 00:03:35 EST 2023" starttimestamp="1701710826491" timestamp="41789315" timestamp2="41789315">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="9392" _type="InsertStringCommand" date="Tue Dec 05 00:03:35 EST 2023" starttimestamp="1701710826491" timestamp="41789435" timestamp2="41789435">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="9394" _type="InsertStringCommand" date="Tue Dec 05 00:03:36 EST 2023" starttimestamp="1701710826491" timestamp="41789538" timestamp2="41789538">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9396" _type="InsertStringCommand" date="Tue Dec 05 00:03:36 EST 2023" starttimestamp="1701710826491" timestamp="41789602" timestamp2="41789602">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9398" _type="InsertStringCommand" date="Tue Dec 05 00:03:36 EST 2023" starttimestamp="1701710826491" timestamp="41789707" timestamp2="41789707">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9400" _type="InsertStringCommand" date="Tue Dec 05 00:03:36 EST 2023" starttimestamp="1701710826491" timestamp="41789874" timestamp2="41789874">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9402" _type="InsertStringCommand" date="Tue Dec 05 00:03:36 EST 2023" starttimestamp="1701710826491" timestamp="41790003" timestamp2="41790003">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9404" _type="InsertStringCommand" date="Tue Dec 05 00:03:36 EST 2023" starttimestamp="1701710826491" timestamp="41790056" timestamp2="41790056">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9406" _type="InsertStringCommand" date="Tue Dec 05 00:03:36 EST 2023" starttimestamp="1701710826491" timestamp="41790155" timestamp2="41790155">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9408" _type="InsertStringCommand" date="Tue Dec 05 00:03:36 EST 2023" starttimestamp="1701710826491" timestamp="41790295" timestamp2="41790295">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="9410" _type="InsertStringCommand" date="Tue Dec 05 00:03:37 EST 2023" starttimestamp="1701710826491" timestamp="41790550" timestamp2="41790550">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9412" _type="InsertStringCommand" date="Tue Dec 05 00:03:37 EST 2023" starttimestamp="1701710826491" timestamp="41790766" timestamp2="41790766">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="9414" _type="InsertStringCommand" date="Tue Dec 05 00:03:37 EST 2023" starttimestamp="1701710826491" timestamp="41790978" timestamp2="41790978">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9416" _type="InsertStringCommand" date="Tue Dec 05 00:03:37 EST 2023" starttimestamp="1701710826491" timestamp="41791069" timestamp2="41791069">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9418" _type="InsertStringCommand" date="Tue Dec 05 00:03:37 EST 2023" starttimestamp="1701710826491" timestamp="41791175" timestamp2="41791175">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9420" _type="InsertStringCommand" date="Tue Dec 05 00:03:37 EST 2023" starttimestamp="1701710826491" timestamp="41791265" timestamp2="41791265">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="9422" _type="InsertStringCommand" date="Tue Dec 05 00:03:37 EST 2023" starttimestamp="1701710826491" timestamp="41791486" timestamp2="41791486">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="9423" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Dec 05 00:03:37 EST 2023" start_end="START" starttimestamp="1701710826491" timestamp="41791493" />
  <Command __id="9427" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Dec 05 00:03:38 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="41792358" />
  <Command __id="9429" _type="InsertStringCommand" date="Tue Dec 05 00:03:38 EST 2023" starttimestamp="1701710826491" timestamp="41792391" timestamp2="41792391">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9430" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Dec 05 00:03:53 EST 2023" start_end="END" starttimestamp="1701710826491" timestamp="41806797" />
  <Command __id="9431" _type="MoveCaretCommand" caretOffset="479" date="Tue Dec 05 00:03:53 EST 2023" docOffset="653" starttimestamp="1701710826491" timestamp="41806874" />
  <DocumentChange __id="9428" _type="Replace" date="Tue Dec 05 00:03:38 EST 2023" docASTNodeCount="142" docActiveCodeLength="926" docExpressionCount="100" docLength="926" endLine="18" insertionLength="25" int_docASTNodeCount="138" int_docActiveCodeLength="901" int_docExpressionCount="97" int_docLength="901" length="3" offset="628" startLine="18" starttimestamp="1701710826491" timestamp="41792361">
    <deletedText><![CDATA[new]]></deletedText>
    <insertedText><![CDATA[newInstance(expr, lambda)]]></insertedText>
  </DocumentChange>
  <Command __id="9432" _type="SelectTextCommand" caretOffset="436" date="Tue Dec 05 00:03:55 EST 2023" end="479" start="436" starttimestamp="1701710826491" timestamp="41808536" />
  <Command __id="9434" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:56 EST 2023" starttimestamp="1701710826491" timestamp="41809591" />
  <Command __id="9436" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:56 EST 2023" starttimestamp="1701710826491" timestamp="41809835" />
  <Command __id="9438" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:56 EST 2023" starttimestamp="1701710826491" timestamp="41810148" />
  <Command __id="9440" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:56 EST 2023" starttimestamp="1701710826491" timestamp="41810370" />
  <Command __id="9442" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:57 EST 2023" starttimestamp="1701710826491" timestamp="41810519" />
  <Command __id="9444" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:57 EST 2023" starttimestamp="1701710826491" timestamp="41810689" />
  <Command __id="9446" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:57 EST 2023" starttimestamp="1701710826491" timestamp="41810856" />
  <Command __id="9448" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:57 EST 2023" starttimestamp="1701710826491" timestamp="41811091" />
  <Command __id="9450" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:57 EST 2023" starttimestamp="1701710826491" timestamp="41811435" />
  <Command __id="9452" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Dec 05 00:03:58 EST 2023" starttimestamp="1701710826491" timestamp="41811789" />
  <Command __id="9453" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Dec 05 00:04:00 EST 2023" starttimestamp="1701710826491" timestamp="41814165" />
  <Command __id="9454" _type="EclipseCommand" commandID="" date="Tue Dec 05 00:04:00 EST 2023" starttimestamp="1701710826491" timestamp="41814265" />
  <Command __id="9455" _type="EclipseCommand" commandID="" date="Tue Dec 05 00:04:00 EST 2023" starttimestamp="1701710826491" timestamp="41814273" />
  <Command __id="9456" _type="ShellCommand" date="Tue Dec 05 00:04:01 EST 2023" starttimestamp="1701710826491" timestamp="41815313" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9457" _type="ShellCommand" date="Tue Dec 05 00:07:01 EST 2023" starttimestamp="1701710826491" timestamp="41994586" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9459" _type="EclipseCommand" commandID="" date="Tue Dec 05 00:07:01 EST 2023" starttimestamp="1701710826491" timestamp="41994937" />
  <Command __id="9460" _type="EclipseCommand" commandID="" date="Tue Dec 05 00:07:01 EST 2023" starttimestamp="1701710826491" timestamp="41994943" />
  <Command __id="9461" _type="ShellCommand" date="Tue Dec 05 00:07:12 EST 2023" starttimestamp="1701710826491" timestamp="42006135" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9462" _type="ShellCommand" date="Tue Dec 05 00:09:52 EST 2023" starttimestamp="1701710826491" timestamp="42166208" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9463" _type="ShellCommand" date="Tue Dec 05 00:09:56 EST 2023" starttimestamp="1701710826491" timestamp="42169601" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9465" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:18:59 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42712612" type="Run" />
  <Command __id="9466" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:18:59 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42712612" type="Run" />
  <Command __id="9467" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:18:59 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42712722" type="Run" />
  <Command __id="9468" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:18:59 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42712734" type="Run" />
  <Command __id="9470" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:18:59 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42712874" type="Run" />
  <Command __id="9471" _type="EclipseCommand" commandID="" date="Tue Dec 05 00:19:00 EST 2023" starttimestamp="1701710826491" timestamp="42713704" />
  <Command __id="9472" _type="EclipseCommand" commandID="" date="Tue Dec 05 00:19:00 EST 2023" starttimestamp="1701710826491" timestamp="42713713" />
  <Command __id="9473" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:19:00 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42713731" type="Run" />
  <Command __id="9474" _type="ShellCommand" date="Tue Dec 05 00:19:00 EST 2023" starttimestamp="1701710826491" timestamp="42714479" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9475" _type="ShellCommand" date="Tue Dec 05 00:19:10 EST 2023" starttimestamp="1701710826491" timestamp="42724198" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9476" _type="PasteCommand" date="Tue Dec 05 00:19:10 EST 2023" starttimestamp="1701710826491" timestamp="42724489" />
  <Command __id="9477" _type="ConsoleOutput" date="Tue Dec 05 00:19:11 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="42725051" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA (X) X
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"LAMBDA (X) X¶")]]]></diff>
  </Command>
  <Command __id="9478" _type="ShellCommand" date="Tue Dec 05 00:19:12 EST 2023" starttimestamp="1701710826491" timestamp="42725779" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9479" _type="ShellCommand" date="Tue Dec 05 00:19:15 EST 2023" starttimestamp="1701710826491" timestamp="42728580" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9480" _type="PasteCommand" date="Tue Dec 05 00:19:15 EST 2023" starttimestamp="1701710826491" timestamp="42728831" />
  <DocumentChange __id="9433" _type="Delete" date="Tue Dec 05 00:03:56 EST 2023" docASTNodeCount="136" docActiveCodeLength="874" docExpressionCount="95" docLength="874" endLine="18" length="52" offset="601" repeat="10" startLine="17" starttimestamp="1701710826491" timestamp="41809587" timestamp2="41811785">
    <text><![CDATA[
        ExpressionFactory.newInstance(expr, lambda)]]></text>
  </DocumentChange>
  <DocumentChange __id="9458" _type="Replace" date="Tue Dec 05 00:07:01 EST 2023" docASTNodeCount="136" docActiveCodeLength="874" docExpressionCount="95" docLength="874" endLine="23" insertionLength="874" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="874" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="41994847">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;


public class FuncallEvaluator implements Evaluator{

    @Override
    public SExpression eval(SExpression expr, Environment environment) {
        expr = expr.getTail();
		return evalHelper(expr, environment);
    }
    public static SExpression evalHelper(SExpression expr, Environment environment) {
        Lambda lambda = (Lambda) expr.getHead().eval(environment);
        SExpression expression = ExpressionFactory.newInstance(lambda, expr.getTail());
        BasicExpressionEvaluatorImpl basicExpressionEvaluatorImpl = new BasicExpressionEvaluatorImpl();
        return basicExpressionEvaluatorImpl.eval(expression, environment);
	}
}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;


public class FuncallEvaluator implements Evaluator{

    @Override
    public SExpression eval(SExpression expr, Environment environment) {
        expr = expr.getTail();
		return evalHelper(expr, environment);
    }
    public static SExpression evalHelper(SExpression expr, Environment environment) {
        Lambda lambda = (Lambda) expr.getHead().eval(environment);
        SExpression expression = ExpressionFactory.newInstance(lambda, expr.getTail());
        BasicExpressionEvaluatorImpl basicExpressionEvaluatorImpl = new BasicExpressionEvaluatorImpl();
        return basicExpressionEvaluatorImpl.eval(expression, environment);
	}
}
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9469" _type="Replace" date="Tue Dec 05 00:18:59 EST 2023" docASTNodeCount="158" docActiveCodeLength="992" docExpressionCount="112" docLength="992" endLine="23" insertionLength="992" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="874" offset="0" startLine="0" starttimestamp="1701710826491" timestamp="42712816">
    <deletedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;


public class FuncallEvaluator implements Evaluator{

    @Override
    public SExpression eval(SExpression expr, Environment environment) {
        expr = expr.getTail();
		return evalHelper(expr, environment);
    }
    public static SExpression evalHelper(SExpression expr, Environment environment) {
        Lambda lambda = (Lambda) expr.getHead().eval(environment);
        SExpression expression = ExpressionFactory.newInstance(lambda, expr.getTail());
        BasicExpressionEvaluatorImpl basicExpressionEvaluatorImpl = new BasicExpressionEvaluatorImpl();
        return basicExpressionEvaluatorImpl.eval(expression, environment);
	}
}
]]></deletedText>
    <insertedText><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.NilAtom;
import main.lisp.parser.terms.SExpression;


public class FuncallEvaluator implements Evaluator{

    @Override
    public SExpression eval(SExpression expr, Environment environment) {
        expr = expr.getTail();
		return evalHelper(expr, environment);
    }
    public static SExpression evalHelper(SExpression expr, Environment environment) {
        Lambda lambda = (Lambda) expr.getHead().eval(environment);
        SExpression temp = ExpressionFactory.newInstance(lambda, new NilAtom());
        SExpression expression = ExpressionFactory.newInstance(temp, expr.getTail());
        BasicExpressionEvaluatorImpl basicExpressionEvaluatorImpl = new BasicExpressionEvaluatorImpl();
        return basicExpressionEvaluatorImpl.eval(expression, environment);
	}
}
]]></insertedText>
  </DocumentChange>
  <Command __id="9481" _type="ConsoleInput" date="Tue Dec 05 00:19:16 EST 2023" starttimestamp="1701710826491" timestamp="42730020" type="Exception">
    <outputString><![CDATA[(setq f (lambda (x) x))(funcall f 1)
]]></outputString>
  </Command>
  <Command __id="9482" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:19:16 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42730168" type="Run" />
  <Command __id="9483" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:19:24 EST 2023" docASTNodeCount="155" docActiveCodeLength="925" docExpressionCount="111" docLength="925" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42737780">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator."), Diff(DELETE,"BuiltinOperationManagerSingleton;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.BasicLambda"), Diff(INSERT,"Environment"), Diff(EQUAL,";import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		"), Diff(DELETE,"// BuiltinOperationManagerSingleton.get().getEvaluator(expr.getHead().toString()).getClass().equals(LambdaEvaluator.class);		"), Diff(EQUAL,"if(!expr.getHead().isAtom()){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.BasicExpressionEvaluator;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		if(!expr.getHead().isAtom()){
			Environment childEnvironment = environment.newChild();
			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();
			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);
			IdentifierAtom[] ids = lambda.getArgumentNames();
			for (IdentifierAtom id : ids){
				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));
				expr = expr.getTail();
			}
			return lambda.eval(childEnvironment);
		}else{
			return super.eval(expr, environment);
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="9491" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:19:26 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="42739618">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9493" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:19:27 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42741293" type="Run" />
  <Command __id="9494" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Tue Dec 05 00:19:27 EST 2023" starttimestamp="1701710826491" timestamp="42741293" />
  <Command __id="9495" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:19:27 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42741305" type="Debug" />
  <Command __id="9496" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:19:27 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42741305" type="Run" />
  <Command __id="9497" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:19:27 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42741305" type="Debug" />
  <Command __id="9498" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:19:27 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42741305" type="Run" />
  <Command __id="9499" _type="ExceptionCommand" date="Tue Dec 05 00:19:27 EST 2023" starttimestamp="1701710826491" timestamp="42741323" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.LambdaEvaluator.evalHelper(LambdaEvaluator.java:22)
	at index.LambdaEvaluator.eval(LambdaEvaluator.java:17)
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:16)
	at index.FuncallEvaluator.evalHelper(FuncallEvaluator.java:23)
	at index.FuncallEvaluator.eval(FuncallEvaluator.java:16)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:24)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:17)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="9501" _type="MoveCaretCommand" caretOffset="640" date="Tue Dec 05 00:19:29 EST 2023" docOffset="640" starttimestamp="1701710826491" timestamp="42743177" />
  <Command __id="9502" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Tue Dec 05 00:19:42 EST 2023" starttimestamp="1701710826491" timestamp="42756053" />
  <Command __id="9503" _type="BreakPointCommand" date="Tue Dec 05 00:19:42 EST 2023" lineNumber="20" starttimestamp="1701710826491" timestamp="42756054" type="BreakPointAdded" />
  <Command __id="9504" _type="BreakPointCommand" date="Tue Dec 05 00:19:43 EST 2023" lineNumber="18" starttimestamp="1701710826491" timestamp="42756862" type="BreakPointRemoved" />
  <Command __id="9505" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Tue Dec 05 00:19:43 EST 2023" starttimestamp="1701710826491" timestamp="42756890" />
  <Command __id="9510" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:19:47 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42760518" type="Run" />
  <Command __id="9511" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:19:47 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42760518" type="Run" />
  <Command __id="9512" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:19:47 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42760627" type="Run" />
  <Command __id="9513" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:19:47 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42760636" type="Run" />
  <Command __id="9514" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:19:47 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42760787" type="Run" />
  <Command __id="9515" _type="ShellCommand" date="Tue Dec 05 00:19:48 EST 2023" starttimestamp="1701710826491" timestamp="42762099" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9516" _type="ShellCommand" date="Tue Dec 05 00:19:51 EST 2023" starttimestamp="1701710826491" timestamp="42764862" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9518" _type="PasteCommand" date="Tue Dec 05 00:19:51 EST 2023" starttimestamp="1701710826491" timestamp="42765078" />
  <Command __id="9520" _type="UndoCommand" date="Tue Dec 05 00:19:52 EST 2023" starttimestamp="1701710826491" timestamp="42765932" />
  <Command __id="9521" _type="PasteCommand" date="Tue Dec 05 00:19:53 EST 2023" starttimestamp="1701710826491" timestamp="42766688" />
  <Command __id="9522" _type="ConsoleOutput" date="Tue Dec 05 00:19:53 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="42767090" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA (X) X
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"LAMBDA (X) X¶")]]]></diff>
  </Command>
  <Command __id="9523" _type="ConsoleInput" date="Tue Dec 05 00:19:58 EST 2023" starttimestamp="1701710826491" timestamp="42771567" type="Exception">
    <outputString><![CDATA[(setq f (lambda (x) x))(funcall f 1)
]]></outputString>
  </Command>
  <Command __id="9524" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:19:58 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42771694" type="Run" />
  <Command __id="9529" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:20:04 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42777734" type="Run" />
  <Command __id="9533" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:20:25 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42799381" type="Run" />
  <Command __id="9538" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:20:45 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42819232" type="Run" />
  <Command __id="9539" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Tue Dec 05 00:20:47 EST 2023" starttimestamp="1701710826491" timestamp="42820911" />
  <Command __id="9540" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:20:47 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42820914" type="Run" />
  <Command __id="9541" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:20:51 EST 2023" starttimestamp="1701710826491" timestamp="42824749" />
  <Command __id="9542" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:20:51 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42824754" type="Run" />
  <Command __id="9543" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:20:55 EST 2023" starttimestamp="1701710826491" timestamp="42829292" />
  <Command __id="9544" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:20:55 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42829297" type="Run" />
  <Command __id="9545" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:20:56 EST 2023" starttimestamp="1701710826491" timestamp="42829975" />
  <Command __id="9546" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:20:56 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42829980" type="Run" />
  <Command __id="9550" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:21:05 EST 2023" projectName="null" starttimestamp="1701710826491" timestamp="42839203">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9551" _type="MoveCaretCommand" caretOffset="0" date="Tue Dec 05 00:21:05 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="42839238" />
  <Command __id="9552" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:21:05 EST 2023" docASTNodeCount="158" docActiveCodeLength="992" docExpressionCount="112" docLength="992" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42839289">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.NilAtom;import main.lisp.parser.terms.SExpression;public class FuncallEvaluator implements Evaluator{    @Override    public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);    }    public static SExpression evalHelper(SExpression expr, Environment environment) {        Lambda lambda = (Lambda) expr.getHead().eval(environment);        SExpression temp = ExpressionFactory.newInstance(lambda, new NilAtom());        SExpression expression = ExpressionFactory.newInstance(temp, expr.getTail());        BasicExpressionEvaluatorImpl basicExpressionEvaluatorImpl = new BasicExpressionEvaluatorImpl();        return basicExpressionEvaluatorImpl.eval(expression, environment);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9553" _type="MoveCaretCommand" caretOffset="912" date="Tue Dec 05 00:21:05 EST 2023" docOffset="912" starttimestamp="1701710826491" timestamp="42839354" />
  <Command __id="9555" _type="MoveCaretCommand" caretOffset="551" date="Tue Dec 05 00:21:06 EST 2023" docOffset="551" starttimestamp="1701710826491" timestamp="42840291" />
  <Command __id="9556" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Dec 05 00:21:34 EST 2023" starttimestamp="1701710826491" timestamp="42867616" />
  <Command __id="9557" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42867623" type="Debug" />
  <Command __id="9558" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:21:34 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42867623" type="Run" />
  <Command __id="9559" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:34 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42867623" type="Debug" />
  <Command __id="9560" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:21:34 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42867623" type="Run" />
  <Command __id="9561" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:21:35 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42868606" type="Run" />
  <Command __id="9562" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:21:35 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42868606" type="Run" />
  <Command __id="9563" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:35 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42868714" type="Run" />
  <Command __id="9564" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:35 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42868727" type="Run" />
  <Command __id="9565" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:35 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42868865" type="Run" />
  <Command __id="9566" _type="ShellCommand" date="Tue Dec 05 00:21:36 EST 2023" starttimestamp="1701710826491" timestamp="42869897" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9567" _type="ShellCommand" date="Tue Dec 05 00:21:37 EST 2023" starttimestamp="1701710826491" timestamp="42870647" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9568" _type="PasteCommand" date="Tue Dec 05 00:21:37 EST 2023" starttimestamp="1701710826491" timestamp="42871495" />
  <Command __id="9569" _type="ConsoleOutput" date="Tue Dec 05 00:21:38 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="42871961" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA (X) X
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"LAMBDA (X) X¶")]]]></diff>
  </Command>
  <Command __id="9570" _type="ConsoleInput" date="Tue Dec 05 00:21:41 EST 2023" starttimestamp="1701710826491" timestamp="42875319" type="Exception">
    <outputString><![CDATA[(setq f (lambda (x) x))(funcall f 1)
]]></outputString>
  </Command>
  <Command __id="9571" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:41 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42875444" type="Run" />
  <Command __id="9572" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:21:44 EST 2023" starttimestamp="1701710826491" timestamp="42877706" />
  <Command __id="9573" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:44 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42877710" type="Run" />
  <Command __id="9574" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:21:44 EST 2023" starttimestamp="1701710826491" timestamp="42878080" />
  <Command __id="9575" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:44 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42878082" type="Run" />
  <Command __id="9576" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:21:44 EST 2023" starttimestamp="1701710826491" timestamp="42878465" />
  <Command __id="9577" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:44 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42878468" type="Run" />
  <Command __id="9578" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:21:45 EST 2023" starttimestamp="1701710826491" timestamp="42879147" />
  <Command __id="9579" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:45 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42879151" type="Run" />
  <Command __id="9580" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Tue Dec 05 00:21:46 EST 2023" starttimestamp="1701710826491" timestamp="42880242" />
  <Command __id="9581" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:46 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42880244" type="Run" />
  <Command __id="9584" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:49 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42883068" type="Run" />
  <Command __id="9585" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:21:57 EST 2023" starttimestamp="1701710826491" timestamp="42890708" />
  <Command __id="9586" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:21:57 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42890713" type="Run" />
  <Command __id="9591" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:22:47 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42940732" type="Run" />
  <Command __id="9554" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:21:06 EST 2023" docASTNodeCount="155" docActiveCodeLength="925" docExpressionCount="111" docLength="925" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42840239">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.Environment;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(!expr.getHead().isAtom()){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9597" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:22:51 EST 2023" starttimestamp="1701710826491" timestamp="42944931" />
  <Command __id="9598" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:22:51 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42944934" type="Run" />
  <Command __id="9599" _type="ExceptionCommand" date="Tue Dec 05 00:22:51 EST 2023" starttimestamp="1701710826491" timestamp="42944943" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.UnsupportedOperationException: Instances of Atom do not have a head
	at main.lisp.parser.terms.Atom.getHead(Atom.java:27)
	at index.LambdaEvaluator.evalHelper(LambdaEvaluator.java:22)
	at index.LambdaEvaluator.eval(LambdaEvaluator.java:17)
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:16)
	at index.FuncallEvaluator.evalHelper(FuncallEvaluator.java:23)
	at index.FuncallEvaluator.eval(FuncallEvaluator.java:16)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="9600" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:22:51 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42944951" type="Debug" />
  <Command __id="9601" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:22:51 EST 2023" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42944951" type="Run" />
  <Command __id="9602" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:22:51 EST 2023" kind="Terminate" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="42944951" type="Debug" />
  <Command __id="9603" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:22:51 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42944951" type="Run" />
  <Command __id="9604" _type="ConsoleOutput" date="Tue Dec 05 00:22:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="42944966" type="ConsoleOutput">
    <outputString><![CDATA[	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:24)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at index.index.main(index.java:17)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"LAMBDA (X) X"), Diff(INSERT,"	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:24)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:17)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9605" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:22:55 EST 2023" docASTNodeCount="209" docActiveCodeLength="1199" docExpressionCount="141" docLength="1214" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42948939">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);		// return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9606" _type="SelectTextCommand" caretOffset="679" date="Tue Dec 05 00:22:55 EST 2023" end="679" start="613" starttimestamp="1701710826491" timestamp="42948979" />
  <Command __id="9607" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:23:04 EST 2023" docASTNodeCount="155" docActiveCodeLength="925" docExpressionCount="111" docLength="925" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42957530">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.Environment;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(!expr.getHead().isAtom()){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9608" _type="SelectTextCommand" caretOffset="628" date="Tue Dec 05 00:23:04 EST 2023" end="628" start="551" starttimestamp="1701710826491" timestamp="42957567" />
  <Command __id="9609" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:23:07 EST 2023" docASTNodeCount="209" docActiveCodeLength="1199" docExpressionCount="141" docLength="1214" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42960854">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);		// return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9610" _type="SelectTextCommand" caretOffset="506" date="Tue Dec 05 00:23:07 EST 2023" end="506" start="467" starttimestamp="1701710826491" timestamp="42960894" />
  <Command __id="9611" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:23:11 EST 2023" docASTNodeCount="155" docActiveCodeLength="925" docExpressionCount="111" docLength="925" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42965106">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.Environment;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(!expr.getHead().isAtom()){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9612" _type="SelectTextCommand" caretOffset="628" date="Tue Dec 05 00:23:11 EST 2023" end="628" start="551" starttimestamp="1701710826491" timestamp="42965144" />
  <Command __id="9613" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:23:13 EST 2023" docASTNodeCount="209" docActiveCodeLength="1199" docExpressionCount="141" docLength="1214" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42966974">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);		// return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9614" _type="SelectTextCommand" caretOffset="506" date="Tue Dec 05 00:23:13 EST 2023" end="506" start="467" starttimestamp="1701710826491" timestamp="42967012" />
  <Command __id="9616" _type="MoveCaretCommand" caretOffset="122" date="Tue Dec 05 00:23:25 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="42979202" />
  <Command __id="9617" _type="ShellCommand" date="Tue Dec 05 00:23:26 EST 2023" starttimestamp="1701710826491" timestamp="42980280" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9618" _type="ShellCommand" date="Tue Dec 05 00:23:59 EST 2023" starttimestamp="1701710826491" timestamp="43013219" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9619" _type="ShellCommand" date="Tue Dec 05 00:24:01 EST 2023" starttimestamp="1701710826491" timestamp="43015149" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9620" _type="ShellCommand" date="Tue Dec 05 00:25:39 EST 2023" starttimestamp="1701710826491" timestamp="43113462" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9621" _type="ShellCommand" date="Tue Dec 05 00:25:48 EST 2023" starttimestamp="1701710826491" timestamp="43121979" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9615" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:23:25 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="42979157">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9622" _type="ShellCommand" date="Tue Dec 05 00:25:56 EST 2023" starttimestamp="1701710826491" timestamp="43129978" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9623" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:26:08 EST 2023" docASTNodeCount="209" docActiveCodeLength="1199" docExpressionCount="141" docLength="1214" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43142091">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);		// return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9624" _type="SelectTextCommand" caretOffset="506" date="Tue Dec 05 00:26:08 EST 2023" end="506" start="467" starttimestamp="1701710826491" timestamp="43142128" />
  <Command __id="9625" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:26:59 EST 2023" docASTNodeCount="155" docActiveCodeLength="925" docExpressionCount="111" docLength="925" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43193175">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.Environment;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(!expr.getHead().isAtom()){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9626" _type="SelectTextCommand" caretOffset="628" date="Tue Dec 05 00:26:59 EST 2023" end="628" start="551" starttimestamp="1701710826491" timestamp="43193212" />
  <Command __id="9628" _type="SelectTextCommand" caretOffset="506" date="Tue Dec 05 00:27:15 EST 2023" end="506" start="467" starttimestamp="1701710826491" timestamp="43209211" />
  <Command __id="9627" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:27:15 EST 2023" docASTNodeCount="209" docActiveCodeLength="1199" docExpressionCount="141" docLength="1214" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43209168">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);		// return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9629" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Tue Dec 05 00:27:23 EST 2023" starttimestamp="1701710826491" timestamp="43216853" />
  <Command __id="9630" _type="BreakPointCommand" date="Tue Dec 05 00:27:23 EST 2023" lineNumber="16" starttimestamp="1701710826491" timestamp="43216854" type="BreakPointAdded" />
  <Command __id="9633" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:27:33 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43226690" type="Run" />
  <Command __id="9634" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:27:33 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43226690" type="Run" />
  <Command __id="9635" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:27:33 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43226800" type="Run" />
  <Command __id="9636" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:27:33 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43226811" type="Run" />
  <Command __id="9637" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:27:33 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43226950" type="Run" />
  <Command __id="9638" _type="PasteCommand" date="Tue Dec 05 00:27:34 EST 2023" starttimestamp="1701710826491" timestamp="43228232" />
  <Command __id="9639" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:27:35 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43228648" type="Run" />
  <Command __id="9640" _type="ConsoleInput" date="Tue Dec 05 00:27:39 EST 2023" starttimestamp="1701710826491" timestamp="43232961" type="Exception">
    <outputString><![CDATA[(setq f (lambda (x) x))(funcall f 1)
]]></outputString>
  </Command>
  <Command __id="9643" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:27:51 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43244767" type="Run" />
  <Command __id="9644" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Tue Dec 05 00:27:51 EST 2023" starttimestamp="1701710826491" timestamp="43244768" />
  <Command __id="9645" _type="ConsoleOutput" date="Tue Dec 05 00:27:51 EST 2023" overflow="false" starttimestamp="1701710826491" timestamp="43244809" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA (X) X
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)¶	at index.BasicExpressionEvaluatorImpl.eval(BasicExpressionEvaluatorImpl.java:24)¶	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)¶	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)¶	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)¶	at main.Main.main(Main.java:31)¶	at index.index.main(index.java:17)"), Diff(INSERT,"LAMBDA (X) X"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9646" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:27:58 EST 2023" starttimestamp="1701710826491" timestamp="43252452" />
  <Command __id="9647" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:27:58 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43252456" type="Run" />
  <Command __id="9648" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:27:59 EST 2023" starttimestamp="1701710826491" timestamp="43252900" />
  <Command __id="9649" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:27:59 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43252905" type="Run" />
  <Command __id="9650" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:27:59 EST 2023" starttimestamp="1701710826491" timestamp="43253369" />
  <Command __id="9651" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:27:59 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43253374" type="Run" />
  <Command __id="9652" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Dec 05 00:28:00 EST 2023" starttimestamp="1701710826491" timestamp="43254005" />
  <Command __id="9653" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:28:00 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43254009" type="Run" />
  <Command __id="9658" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:28:07 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43261504" type="Run" />
  <Command __id="9662" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:28:17 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43270649" type="Run" />
  <Command __id="9663" _type="ShellCommand" date="Tue Dec 05 00:28:32 EST 2023" starttimestamp="1701710826491" timestamp="43286463" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9664" _type="ShellCommand" date="Tue Dec 05 00:28:36 EST 2023" starttimestamp="1701710826491" timestamp="43290400" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9666" _type="MoveCaretCommand" caretOffset="435" date="Tue Dec 05 00:28:36 EST 2023" docOffset="435" starttimestamp="1701710826491" timestamp="43290477" />
  <Command __id="9672" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:28:40 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43294508" type="Run" />
  <Command __id="9673" _type="RunCommand" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:28:41 EST 2023" kind="Run" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43294509" type="Run" />
  <Command __id="9674" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:28:41 EST 2023" kind="Run" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43294615" type="Run" />
  <Command __id="9675" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:28:41 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43294625" type="Run" />
  <Command __id="9676" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:28:41 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43294771" type="Run" />
  <Command __id="9679" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:28:48 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43302093" type="Run" />
  <Command __id="9680" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Tue Dec 05 00:28:48 EST 2023" starttimestamp="1701710826491" timestamp="43302094" />
  <Command __id="9684" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:28:57 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43311251" type="Run" />
  <Command __id="9716" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:29:27 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43340875" type="Run" />
  <Command __id="9717" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:29:27 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43341456" type="Run" />
  <Command __id="9718" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:29:28 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43341740" type="Run" />
  <Command __id="9631" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:27:26 EST 2023" docASTNodeCount="155" docActiveCodeLength="925" docExpressionCount="111" docLength="925" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43219825">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.Environment;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(!expr.getHead().isAtom()){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9665" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:28:36 EST 2023" docASTNodeCount="209" docActiveCodeLength="1199" docExpressionCount="141" docLength="1214" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43290426">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import java.util.ArrayList;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.NilAtom;import main.lisp.evaluator.function.LambdaFactory;import main.lisp.parser.terms.SExpression;public class LambdaEvaluator implements Evaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);		// return expr;	}		public static SExpression evalHelper(SExpression expr, Environment environment) {        IdentifierAtom ids[] = extractIdentifiers(expr.getHead());        return LambdaFactory.newInstance(ids, expr.getTail());	}    private static IdentifierAtom[] extractIdentifiers(SExpression expr) {        ArrayList<IdentifierAtom> ids = new ArrayList<>();        while(!(expr instanceof NilAtom)) {            ids.add((IdentifierAtom) expr.getHead());            expr = expr.getTail();        }        IdentifierAtom[] idArray = new IdentifierAtom[ids.size()];        for(IdentifierAtom id : ids) {            idArray[ids.indexOf(id)] = id;        }        return idArray;    }}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9719" _type="MoveCaretCommand" caretOffset="365" date="Tue Dec 05 00:29:29 EST 2023" docOffset="365" starttimestamp="1701710826491" timestamp="43343129" />
  <Command __id="9720" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:29:29 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43343131" type="Run" />
  <Command __id="9721" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:29:31 EST 2023" docASTNodeCount="90" docActiveCodeLength="717" docExpressionCount="56" docLength="1109" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43344752">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/RunF23A5Tests.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import grader.basics.execution.BasicProjectExecution;import gradingTools.comp524f23.assignment6.F23Assignment6Suite;import trace.grader.basics.GraderBasicsTraceUtility;public class RunF23A5Tests {	public static void main(final String[] args) {				final int maxPrintedTraces = 600;		final int maxTraces = 2000;		final int processTimeOut = 5;				// if you set this to false, grader steps will not be traced		GraderBasicsTraceUtility.setTracerShowInfo(true);			// if you set this to false, all grader steps will be traced,		// not just the ones that failed				GraderBasicsTraceUtility.setBufferTracedMessages(true);		// Change this number if a test trace gets longer than 600 and is clipped		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);		// Change this number if all traces together are longer than 2000		GraderBasicsTraceUtility.setMaxTraces(maxTraces);		// Change this number if your process times out prematurely		BasicProjectExecution.setProcessTimeOut(processTimeOut);		// You need to always call such a method		F23Assignment6Suite.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9722" _type="MoveCaretCommand" caretOffset="0" date="Tue Dec 05 00:29:31 EST 2023" docOffset="0" starttimestamp="1701710826491" timestamp="43344810" />
  <Command __id="9723" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:29:32 EST 2023" docASTNodeCount="155" docActiveCodeLength="925" docExpressionCount="111" docLength="925" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43346195">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/BasicExpressionEvaluatorImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.BasicExpressionEvaluator;import main.lisp.evaluator.Environment;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;public class BasicExpressionEvaluatorImpl extends BasicExpressionEvaluator{	@Override	public SExpression eval(SExpression expr, Environment environment) {		if(!expr.getHead().isAtom()){			Environment childEnvironment = environment.newChild();			LambdaEvaluator lambdaEvaluator = new LambdaEvaluator();			Lambda lambda = (Lambda)lambdaEvaluator.eval(expr.getHead(), environment);			IdentifierAtom[] ids = lambda.getArgumentNames();			for (IdentifierAtom id : ids){				childEnvironment.assign(id, expr.getTail().getHead().eval(environment));				expr = expr.getTail();			}			return lambda.eval(childEnvironment);		}else{			return super.eval(expr, environment);		}	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9724" _type="MoveCaretCommand" caretOffset="401" date="Tue Dec 05 00:29:32 EST 2023" docOffset="401" starttimestamp="1701710826491" timestamp="43346256" />
  <Command __id="9725" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:29:34 EST 2023" docASTNodeCount="96" docActiveCodeLength="627" docExpressionCount="69" docLength="627" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43347595">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/index.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.Main;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.IdentifierAtomFactory;import main.lisp.evaluator.ExpressionEvaluatorFactory;import main.lisp.evaluator.environment.EnvironmentFactory;public class index {	public static void main(String[] args) {		ExpressionEvaluatorFactory.setClass(BasicExpressionEvaluatorImpl.class);		IdentifierAtomFactory.setClass(IdentifierAtomImpl.class);		EnvironmentFactory.setClass(EnvironmentImpl.class);		OperationRegistererImpl.registerAll();		ExpressionFactory.setClass(BasicExpressionImpl.class);		Main.main(args);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9726" _type="MoveCaretCommand" caretOffset="122" date="Tue Dec 05 00:29:34 EST 2023" docOffset="338" starttimestamp="1701710826491" timestamp="43347649" />
  <Command __id="9727" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:29:34 EST 2023" docASTNodeCount="460" docActiveCodeLength="3317" docExpressionCount="226" docLength="3997" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43347956">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/ClassRegistryImpl.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;	import main.lisp.evaluator.OperationRegisterer;import main.lisp.parser.terms.IdentifierAtom;import main.lisp.parser.terms.SExpression;import gradingTools.comp524f23.assignment6.ClassRegistryA6;public class ClassRegistryImpl implements ClassRegistryA6 {	@Override	public Class<? extends Evaluator> getAndEvaluator() {		// TODO Auto-generated method stub		return AndEvaluator.class;	}	@Override	public Class<? extends Evaluator> getCondEvaluator() {		// TODO Auto-generated method stub		return CondEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {		// TODO Auto-generated method stub		return OperationRegistererImpl.class;	}	@Override	public Class<? extends Evaluator> getEvalEvaluator() {		// TODO Auto-generated method stub		return EvalEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEEvaluator() {		// TODO Auto-generated method stub		return GreaterEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getGTEvaluator() {		// TODO Auto-generated method stub		return GreaterEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEEvaluator() {		// TODO Auto-generated method stub		return LesserEqualEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLTEvaluator() {		// TODO Auto-generated method stub		return LesserEvaluator.class;	}	@Override	public Class<? extends Evaluator> getListEvaluator() {		// TODO Auto-generated method stub		return ListEvaluator.class;	}	@Override	public Class<? extends Evaluator> getLoadEvaluator() {		// TODO Auto-generated method stub		return LoadEvaluator.class;	}	@Override	public Class<?> getMain() {		// TODO Auto-generated method stub		return index.class;	}	@Override	public Class<? extends Evaluator> getNotEvaluator() {		// TODO Auto-generated method stub		return NotEvaluator.class;	}	@Override	public Class<? extends Evaluator> getOrEvaluator() {		// TODO Auto-generated method stub		return OrEvaluator.class;	}	@Override	public Class<? extends Evaluator> getQuoteEvaluator() {		// TODO Auto-generated method stub		return QuoteEvaluator.class;	}	@Override	public Class<? extends SExpression> getStringFormattingSExpression() {		// TODO Auto-generated method stub		return BasicExpressionImpl.class;	}	@Override	public Class<? extends SExpression> getFunctionCallingSExpression() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");	}	@Override	public Class<? extends Evaluator> getFunctionEvaluator() {		"), Diff(DELETE,"// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getFunction"), Diff(INSERT,"return Funcall"), Diff(EQUAL,"Evaluator"), Diff(DELETE,"'")"), Diff(INSERT,".class"), Diff(EQUAL,";	}	@Override	public Class<? extends Evaluator> getLetEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");	}	@Override	public Class<? extends Evaluator> getBasicFuncallEvaluator() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");	}	@Override	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {		return IdentifierAtomImpl.class;	}	@Override	public Class<? extends SExpression> getLambdaCallingSExpression() {		return null;	}	@Override	public Class<? extends Evaluator> getLambdaEvaluator() {		return LambdaEvaluator.class;	}	@Override	public Class<? extends Environment> getNestedLexicalEnvironment() {		// TODO Auto-generated method stub		return EnvironmentImpl.class;	}	@Override	public Class<? extends Evaluator> getSetqEvaluator() {		return SetqEvaluator.class;	}	@Override	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {		// TODO Auto-generated method stub		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");	}}")]]></diff>
    <snapshot><![CDATA[package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;	
import main.lisp.evaluator.OperationRegisterer;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import gradingTools.comp524f23.assignment6.ClassRegistryA6;

public class ClassRegistryImpl implements ClassRegistryA6 {

	@Override
	public Class<? extends Evaluator> getAndEvaluator() {
		// TODO Auto-generated method stub
		return AndEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getCondEvaluator() {
		// TODO Auto-generated method stub
		return CondEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {
		// TODO Auto-generated method stub
		return OperationRegistererImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getEvalEvaluator() {
		// TODO Auto-generated method stub
		return EvalEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getGTEvaluator() {
		// TODO Auto-generated method stub
		return GreaterEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEEvaluator() {
		// TODO Auto-generated method stub
		return LesserEqualEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLTEvaluator() {
		// TODO Auto-generated method stub
		return LesserEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getListEvaluator() {
		// TODO Auto-generated method stub
		return ListEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLoadEvaluator() {
		// TODO Auto-generated method stub
		return LoadEvaluator.class;
	}

	@Override
	public Class<?> getMain() {
		// TODO Auto-generated method stub
		return index.class;
	}

	@Override
	public Class<? extends Evaluator> getNotEvaluator() {
		// TODO Auto-generated method stub
		return NotEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getOrEvaluator() {
		// TODO Auto-generated method stub
		return OrEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getQuoteEvaluator() {
		// TODO Auto-generated method stub
		return QuoteEvaluator.class;
	}

	@Override
	public Class<? extends SExpression> getStringFormattingSExpression() {
		// TODO Auto-generated method stub
		return BasicExpressionImpl.class;
	}

	@Override
	public Class<? extends SExpression> getFunctionCallingSExpression() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getFunctionCallingSExpression'");
	}

	@Override
	public Class<? extends Evaluator> getFunctionEvaluator() {
		return FuncallEvaluator.class;
	}

	@Override
	public Class<? extends Evaluator> getLetEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getLetEvaluator'");
	}

	@Override
	public Class<? extends Evaluator> getBasicFuncallEvaluator() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getBasicFuncallEvaluator'");
	}

	@Override
	public Class<? extends IdentifierAtom> getIdentifierAtomWithLookup() {
		return IdentifierAtomImpl.class;
	}

	@Override
	public Class<? extends SExpression> getLambdaCallingSExpression() {
		return null;
	}

	@Override
	public Class<? extends Evaluator> getLambdaEvaluator() {
		return LambdaEvaluator.class;
	}

	@Override
	public Class<? extends Environment> getNestedLexicalEnvironment() {
		// TODO Auto-generated method stub
		return EnvironmentImpl.class;
	}

	@Override
	public Class<? extends Evaluator> getSetqEvaluator() {
		return SetqEvaluator.class;
	}

	@Override
	public Class<? extends OperationRegisterer> getStatefulOperationRegisterer() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Unimplemented method 'getStatefulOperationRegisterer'");
	}

}
]]></snapshot>
  </Command>
  <Command __id="9728" _type="MoveCaretCommand" caretOffset="3315" date="Tue Dec 05 00:29:34 EST 2023" docOffset="3315" starttimestamp="1701710826491" timestamp="43348011" />
  <Command __id="9730" _type="MoveCaretCommand" caretOffset="574" date="Tue Dec 05 00:29:35 EST 2023" docOffset="574" starttimestamp="1701710826491" timestamp="43348587" />
  <Command __id="9731" _type="MoveCaretCommand" caretOffset="781" date="Tue Dec 05 00:29:38 EST 2023" docOffset="781" starttimestamp="1701710826491" timestamp="43351658" />
  <Command __id="9732" _type="MoveCaretCommand" caretOffset="781" date="Tue Dec 05 00:29:38 EST 2023" docOffset="781" starttimestamp="1701710826491" timestamp="43351658" />
  <Command __id="9733" _type="MoveCaretCommand" caretOffset="714" date="Tue Dec 05 00:29:38 EST 2023" docOffset="714" starttimestamp="1701710826491" timestamp="43352061" />
  <Command __id="9734" _type="MoveCaretCommand" caretOffset="714" date="Tue Dec 05 00:29:38 EST 2023" docOffset="714" starttimestamp="1701710826491" timestamp="43352062" />
  <Command __id="9735" _type="MoveCaretCommand" caretOffset="721" date="Tue Dec 05 00:29:38 EST 2023" docOffset="721" starttimestamp="1701710826491" timestamp="43352491" />
  <Command __id="9736" _type="MoveCaretCommand" caretOffset="721" date="Tue Dec 05 00:29:38 EST 2023" docOffset="721" starttimestamp="1701710826491" timestamp="43352491" />
  <Command __id="9729" _type="DiffBasedFileOpenCommand" date="Tue Dec 05 00:29:35 EST 2023" docASTNodeCount="158" docActiveCodeLength="992" docExpressionCount="112" docLength="992" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43348528">
    <filePath><![CDATA[/Users/shanw25/College/JuniorFall/COMP524/Assignment5/src/index/FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[Diff(EQUAL,"package index;import main.lisp.evaluator.Environment;import main.lisp.evaluator.Evaluator;import main.lisp.evaluator.function.Lambda;import main.lisp.parser.terms.ExpressionFactory;import main.lisp.parser.terms.NilAtom;import main.lisp.parser.terms.SExpression;public class FuncallEvaluator implements Evaluator{    @Override    public SExpression eval(SExpression expr, Environment environment) {        expr = expr.getTail();		return evalHelper(expr, environment);    }    public static SExpression evalHelper(SExpression expr, Environment environment) {        Lambda lambda = (Lambda) expr.getHead().eval(environment);        SExpression temp = ExpressionFactory.newInstance(lambda, new NilAtom());        SExpression expression = ExpressionFactory.newInstance(temp, expr.getTail());        BasicExpressionEvaluatorImpl basicExpressionEvaluatorImpl = new BasicExpressionEvaluatorImpl();        return basicExpressionEvaluatorImpl.eval(expression, environment);	}}")]]></diff>
    <snapshot><![CDATA[null]]></snapshot>
  </Command>
  <Command __id="9737" _type="MoveCaretCommand" caretOffset="721" date="Tue Dec 05 00:30:08 EST 2023" docOffset="721" starttimestamp="1701710826491" timestamp="43382392" />
  <Command __id="9738" _type="MoveCaretCommand" caretOffset="721" date="Tue Dec 05 00:30:08 EST 2023" docOffset="721" starttimestamp="1701710826491" timestamp="43382392" />
  <Command __id="9739" _type="InsertStringCommand" date="Tue Dec 05 00:30:09 EST 2023" starttimestamp="1701710826491" timestamp="43383270" timestamp2="43383270">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="9740" _type="InsertStringCommand" date="Tue Dec 05 00:30:09 EST 2023" starttimestamp="1701710826491" timestamp="43383270" timestamp2="43383270">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="9741" _type="MoveCaretCommand" caretOffset="721" date="Tue Dec 05 00:30:10 EST 2023" docOffset="721" starttimestamp="1701710826491" timestamp="43384212" />
  <Command __id="9742" _type="MoveCaretCommand" caretOffset="721" date="Tue Dec 05 00:30:10 EST 2023" docOffset="721" starttimestamp="1701710826491" timestamp="43384212" />
  <Command __id="9744" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Dec 05 00:30:12 EST 2023" starttimestamp="1701710826491" timestamp="43385626" />
  <Command __id="9745" _type="MoveCaretCommand" caretOffset="487" date="Tue Dec 05 00:30:12 EST 2023" docOffset="487" starttimestamp="1701710826491" timestamp="43386004" />
  <Command __id="9746" _type="MoveCaretCommand" caretOffset="487" date="Tue Dec 05 00:30:12 EST 2023" docOffset="487" starttimestamp="1701710826491" timestamp="43386004" />
  <Command __id="9747" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Dec 05 00:30:12 EST 2023" starttimestamp="1701710826491" timestamp="43386170" />
  <Command __id="9748" _type="EclipseCommand" commandID="" date="Tue Dec 05 00:30:12 EST 2023" starttimestamp="1701710826491" timestamp="43386268" />
  <Command __id="9749" _type="EclipseCommand" commandID="" date="Tue Dec 05 00:30:12 EST 2023" starttimestamp="1701710826491" timestamp="43386274" />
  <Command __id="9750" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:30:12 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43386298" type="Run" />
  <Command __id="9751" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:30:12 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43386298" type="Run" />
  <DocumentChange __id="9743" _type="Delete" date="Tue Dec 05 00:30:12 EST 2023" docASTNodeCount="146" docActiveCodeLength="911" docExpressionCount="104" docLength="911" endLine="20" length="81" offset="641" startLine="19" starttimestamp="1701710826491" timestamp="43385619">
    <text><![CDATA[        SExpression temp = ExpressionFactory.newInstance(lambda, new NilAtom());
]]></text>
  </DocumentChange>
  <Command __id="9752" _type="MoveCaretCommand" caretOffset="707" date="Tue Dec 05 00:30:15 EST 2023" docOffset="707" starttimestamp="1701710826491" timestamp="43388553" />
  <Command __id="9753" _type="MoveCaretCommand" caretOffset="707" date="Tue Dec 05 00:30:15 EST 2023" docOffset="707" starttimestamp="1701710826491" timestamp="43388553" />
  <Command __id="9754" _type="SelectTextCommand" caretOffset="708" date="Tue Dec 05 00:30:15 EST 2023" end="708" start="704" starttimestamp="1701710826491" timestamp="43388686" />
  <Command __id="9755" _type="SelectTextCommand" caretOffset="708" date="Tue Dec 05 00:30:15 EST 2023" end="708" start="704" starttimestamp="1701710826491" timestamp="43388686" />
  <DocumentChange __id="9756" _type="Replace" date="Tue Dec 05 00:30:16 EST 2023" docASTNodeCount="146" docActiveCodeLength="908" docExpressionCount="104" docLength="908" endLine="19" insertionLength="1" int_docASTNodeCount="145" int_docActiveCodeLength="907" int_docExpressionCount="103" int_docLength="907" length="4" offset="704" startLine="19" starttimestamp="1701710826491" timestamp="43389878">
    <deletedText><![CDATA[temp]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <Command __id="9757" _type="InsertStringCommand" date="Tue Dec 05 00:30:16 EST 2023" starttimestamp="1701710826491" timestamp="43389887" timestamp2="43389887">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="9758" _type="InsertStringCommand" date="Tue Dec 05 00:30:16 EST 2023" starttimestamp="1701710826491" timestamp="43389887" timestamp2="43389887">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="9760" _type="InsertStringCommand" date="Tue Dec 05 00:30:16 EST 2023" starttimestamp="1701710826491" timestamp="43390067" timestamp2="43390067">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9761" _type="InsertStringCommand" date="Tue Dec 05 00:30:16 EST 2023" starttimestamp="1701710826491" timestamp="43390067" timestamp2="43390067">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9763" _type="InsertStringCommand" date="Tue Dec 05 00:30:16 EST 2023" starttimestamp="1701710826491" timestamp="43390267" timestamp2="43390267">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9764" _type="InsertStringCommand" date="Tue Dec 05 00:30:16 EST 2023" starttimestamp="1701710826491" timestamp="43390267" timestamp2="43390267">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9766" _type="InsertStringCommand" date="Tue Dec 05 00:30:16 EST 2023" starttimestamp="1701710826491" timestamp="43390420" timestamp2="43390420">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="9767" _type="InsertStringCommand" date="Tue Dec 05 00:30:16 EST 2023" starttimestamp="1701710826491" timestamp="43390420" timestamp2="43390420">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="9769" _type="InsertStringCommand" date="Tue Dec 05 00:30:17 EST 2023" starttimestamp="1701710826491" timestamp="43390914" timestamp2="43390914">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="9770" _type="InsertStringCommand" date="Tue Dec 05 00:30:17 EST 2023" starttimestamp="1701710826491" timestamp="43390914" timestamp2="43390914">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="9772" _type="InsertStringCommand" date="Tue Dec 05 00:30:17 EST 2023" starttimestamp="1701710826491" timestamp="43390974" timestamp2="43390974">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9773" _type="InsertStringCommand" date="Tue Dec 05 00:30:17 EST 2023" starttimestamp="1701710826491" timestamp="43390974" timestamp2="43390974">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9774" _type="MoveCaretCommand" caretOffset="441" date="Tue Dec 05 00:30:18 EST 2023" docOffset="441" starttimestamp="1701710826491" timestamp="43392014" />
  <Command __id="9775" _type="MoveCaretCommand" caretOffset="441" date="Tue Dec 05 00:30:18 EST 2023" docOffset="441" starttimestamp="1701710826491" timestamp="43392014" />
  <Command __id="9776" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Dec 05 00:30:18 EST 2023" starttimestamp="1701710826491" timestamp="43392173" />
  <Command __id="9777" _type="EclipseCommand" commandID="" date="Tue Dec 05 00:30:18 EST 2023" starttimestamp="1701710826491" timestamp="43392270" />
  <Command __id="9778" _type="EclipseCommand" commandID="" date="Tue Dec 05 00:30:18 EST 2023" starttimestamp="1701710826491" timestamp="43392276" />
  <Command __id="9779" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:30:18 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43392294" type="Run" />
  <Command __id="9780" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Dec 05 00:30:18 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1701710826491" timestamp="43392294" type="Run" />
  <Command __id="9785" _type="ProgramExecutionEvent" className="/Assignment5/src/index/index.java" date="Tue Dec 05 00:30:22 EST 2023" kind="Terminate" projectName="Assignment5" starttimestamp="1701710826491" timestamp="43395580" type="Run" />
  <Command __id="9786" _type="ShellCommand" date="Tue Dec 05 00:30:25 EST 2023" starttimestamp="1701710826491" timestamp="43399426" type="ECLIPSE_CLOSED" />
  <DocumentChange __id="9759" _type="Insert" date="Tue Dec 05 00:30:16 EST 2023" docASTNodeCount="146" docActiveCodeLength="913" docExpressionCount="104" docLength="913" length="5" offset="705" repeat="5" starttimestamp="1701710826491" timestamp="43390065" timestamp2="43390971">
    <text><![CDATA[ambda]]></text>
  </DocumentChange>
</Events>
