<?xml version="1.0" encoding="UTF-8"?>
<!-- This configuration file was written by the eclipse-cs plugin configuration 
	editor -->
<!-- Checkstyle-Configuration: Test Description: none -->
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">


<module name="unc.tools.checkstyle.AnExtendibleChecker">


	<property name="severity" value="warning" />


	<module name="unc.tools.checkstyle.AnExtendibleTreeWalker">
		<property name="severity" value="info" />

		<module name="STBuilder">
			<property name="configurationFileName"
				value="ClassRegistry.csv" />
			<property name="includeTypeTags" value="*" />
			<property name="severity" value="info" />
			<property name="logNoMatches" value="false" />
			<property name="importsAsExistingClasses" value="true" />
			<property name="logAggregateStatistics" value="false" />

			<property name="logMethodsDeclared" value="false" />
			<property name="logVariablesDeclared" value="false" />
			<property name="logPropertiesDeclared" value="false" />
			<property name="logAccessModifiersUsed" value="false" />
			<property name="logSuperTypes" value="false" />
			<property name="logInnerTypes" value="false" />
			<property name="logInterfaces" value="false" />
			<property name="trackTokenTypesUsedInMethods" value="true" />
			<property name="trackJavaDocComments" value="true" />			


			<property name="excludeClassRegularExpressions"
				value="
				checkstyle.*,
				test.simulation.*
			" />
			<property name="externalPackagePrefixes"
				value="								
								assignments.util,
								java.io,
								weka,
								gradingTools,
							" />
			<property name="expectedTypes" value="
			@StringFormattingSExpression,
			@LTEEvaluator,
			@GTEEvaluator+@GTEvaluator+@LTEEvaluator+@LTEvaluator,
			@GTEEvaluator,
			@NotEvaluator,
			@ListEvaluator,
			@AndEvaluator,
			@LTEvaluator,
			@LoadEvaluator,
			@GTEvaluator,
			@Main,
			@CustomOperationRegisterer,
			@CondEvaluator,
			@EvalEvaluator,
			@QuoteEvaluator,
			@OrEvaluator,
		"/>
							

			</module>
			


	</module>


	<module name="unc.tools.checkstyle.ANonCachingTreeWalker">
		<property name="severity" value="warning" />
		
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@OrEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@OrEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@OrEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@OrEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@OrEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@OrEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@LoadEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@LoadEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@LoadEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@LoadEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@LoadEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.interpreter.InterpreterModelSingleton!newInput:*->.*,
			main.lisp.parser.terms.StringAtom!getValue:*->.*,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			java.nio.file.Files!readAllLines:java.nio.file.Path->List,
			main.lisp.interpreter.InterpreterModelSingleton!get:->.*,
			java.nio.file.Paths!get:java.net.URI->Path,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
			main.lisp.parser.terms.NilAtomicExpressionFactory!newInstance:->.*,
			main.lisp.parser.terms.TAtomicExpressionFactory!newInstance:->.*,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@LoadEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.interpreter.InterpreterModelSingleton!newInput:*->.*,
			main.lisp.parser.terms.StringAtom!getValue:*->.*,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			java.nio.file.Files!readAllLines:java.nio.file.Path->List,
			main.lisp.interpreter.InterpreterModelSingleton!get:->.*,
			java.nio.file.Paths!get:java.net.URI->Path,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
			main.lisp.parser.terms.NilAtomicExpressionFactory!newInstance:->.*,
			main.lisp.parser.terms.TAtomicExpressionFactory!newInstance:->.*,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@QuoteEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@QuoteEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@QuoteEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@QuoteEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@QuoteEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@QuoteEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@EvalEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@EvalEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@EvalEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@EvalEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@EvalEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@EvalEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@GTEEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@GTEEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@GTEEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
			.*:.*;.*->boolean,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@GTEEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
			.*:.*;.*->boolean,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@GTEEvaluator"/>
		<property name="expectedCalls" value="
			@GTEEvaluator+@GTEvaluator+@LTEEvaluator+@LTEvaluator!.*:.*->boolean,
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.IntegerAtom!getValue:*->.*,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
			main.lisp.parser.terms.DecimalAtom!getValue:*->.*,
			main.lisp.parser.terms.NilAtomicExpressionFactory!newInstance:->.*,
			main.lisp.parser.terms.TAtomicExpressionFactory!newInstance:->.*,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@GTEEvaluator"/>
		<property name="expectedCalls" value="
			@GTEEvaluator+@GTEvaluator+@LTEEvaluator+@LTEvaluator!.*:.*->boolean,
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.IntegerAtom!getValue:*->.*,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
			main.lisp.parser.terms.DecimalAtom!getValue:*->.*,
			main.lisp.parser.terms.NilAtomicExpressionFactory!newInstance:->.*,
			main.lisp.parser.terms.TAtomicExpressionFactory!newInstance:->.*,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@GTEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@GTEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@GTEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
			.*:.*;.*->boolean,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@GTEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
			.*:.*;.*->boolean,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@GTEvaluator"/>
		<property name="expectedCalls" value="
			@GTEEvaluator+@GTEvaluator+@LTEEvaluator+@LTEvaluator!.*:.*->boolean,
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.IntegerAtom!getValue:*->.*,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
			main.lisp.parser.terms.DecimalAtom!getValue:*->.*,
			main.lisp.parser.terms.NilAtomicExpressionFactory!newInstance:->.*,
			main.lisp.parser.terms.TAtomicExpressionFactory!newInstance:->.*,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@GTEvaluator"/>
		<property name="expectedCalls" value="
			@GTEEvaluator+@GTEvaluator+@LTEEvaluator+@LTEvaluator!.*:.*->boolean,
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.IntegerAtom!getValue:*->.*,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
			main.lisp.parser.terms.DecimalAtom!getValue:*->.*,
			main.lisp.parser.terms.NilAtomicExpressionFactory!newInstance:->.*,
			main.lisp.parser.terms.TAtomicExpressionFactory!newInstance:->.*,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@LTEEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@LTEEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@LTEEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
			.*:.*;.*->boolean,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@LTEEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
			.*:.*;.*->boolean,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@LTEEvaluator"/>
		<property name="expectedCalls" value="
			@GTEEvaluator+@GTEvaluator+@LTEEvaluator+@LTEvaluator!.*:.*->boolean,
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.IntegerAtom!getValue:*->.*,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
			main.lisp.parser.terms.DecimalAtom!getValue:*->.*,
			main.lisp.parser.terms.NilAtomicExpressionFactory!newInstance:->.*,
			main.lisp.parser.terms.TAtomicExpressionFactory!newInstance:->.*,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@LTEEvaluator"/>
		<property name="expectedCalls" value="
			@GTEEvaluator+@GTEvaluator+@LTEEvaluator+@LTEvaluator!.*:.*->boolean,
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.IntegerAtom!getValue:*->.*,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
			main.lisp.parser.terms.DecimalAtom!getValue:*->.*,
			main.lisp.parser.terms.NilAtomicExpressionFactory!newInstance:->.*,
			main.lisp.parser.terms.TAtomicExpressionFactory!newInstance:->.*,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@CondEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@CondEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@CondEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@CondEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@CondEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@CondEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@AndEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@AndEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@AndEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@AndEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@AndEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@AndEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@ListEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@ListEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@ListEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@ListEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@ListEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.ExpressionFactory!newInstance:main.lisp.parser.terms.SExpression;main.lisp.parser.terms.SExpression->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@ListEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.ExpressionFactory!newInstance:main.lisp.parser.terms.SExpression;main.lisp.parser.terms.SExpression->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@Main"/>
		<property name="expectedSignatures" value="
			main:String[]->.*,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@Main"/>
		<property name="expectedSignatures" value="
			main:String[]->.*,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@Main"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.ExpressionFactory!setClass:Class->void,
			@CustomOperationRegisterer!registerAll:->void,
			main.Main!main:String[]->void,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@Main"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.ExpressionFactory!setClass:Class->void,
			@CustomOperationRegisterer!registerAll:->void,
			main.Main!main:String[]->void,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@NotEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@NotEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@NotEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@NotEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@NotEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
			main.lisp.parser.terms.NilAtomicExpressionFactory!newInstance:->.*,
			main.lisp.parser.terms.TAtomicExpressionFactory!newInstance:->.*,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@NotEvaluator"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
			main.lisp.parser.terms.NilAtomicExpressionFactory!newInstance:->.*,
			main.lisp.parser.terms.TAtomicExpressionFactory!newInstance:->.*,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@CustomOperationRegisterer"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.OperationRegisterer,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@CustomOperationRegisterer"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.OperationRegisterer,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@CustomOperationRegisterer"/>
		<property name="expectedSignatures" value="
			registerAll:->void,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@CustomOperationRegisterer"/>
		<property name="expectedSignatures" value="
			registerAll:->void,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@CustomOperationRegisterer"/>
		<property name="expectedCalls" value="
			main.lisp.evaluator.BuiltinOperationManagerSingleton!get:->.*,
			main.lisp.evaluator.BuiltinOperationManagerSingleton!registerEvaluator:*->.*,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@CustomOperationRegisterer"/>
		<property name="expectedCalls" value="
			main.lisp.evaluator.BuiltinOperationManagerSingleton!get:->.*,
			main.lisp.evaluator.BuiltinOperationManagerSingleton!registerEvaluator:*->.*,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@LTEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@LTEvaluator"/>
		<property name="expectedInterfaces" value="
			main.lisp.evaluator.Evaluator,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@LTEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
			.*:.*;.*->boolean,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@LTEvaluator"/>
		<property name="expectedSignatures" value="
			eval:main.lisp.parser.terms.SExpression;main.lisp.evaluator.Environment->main.lisp.parser.terms.SExpression,
			.*:.*;.*->boolean,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@LTEvaluator"/>
		<property name="expectedCalls" value="
			@GTEEvaluator+@GTEvaluator+@LTEEvaluator+@LTEvaluator!.*:.*->boolean,
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.IntegerAtom!getValue:*->.*,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
			main.lisp.parser.terms.DecimalAtom!getValue:*->.*,
			main.lisp.parser.terms.NilAtomicExpressionFactory!newInstance:->.*,
			main.lisp.parser.terms.TAtomicExpressionFactory!newInstance:->.*,			
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@LTEvaluator"/>
		<property name="expectedCalls" value="
			@GTEEvaluator+@GTEvaluator+@LTEEvaluator+@LTEvaluator!.*:.*->boolean,
			main.lisp.parser.terms.SExpression!eval:main.lisp.evaluator.Environment->SExpression,
			main.lisp.parser.terms.IntegerAtom!getValue:*->.*,
			main.lisp.parser.terms.SExpression!getTail:->SExpression,
			main.lisp.parser.terms.SExpression!getHead:->SExpression,
			main.lisp.parser.terms.DecimalAtom!getValue:*->.*,
			main.lisp.parser.terms.NilAtomicExpressionFactory!newInstance:->.*,
			main.lisp.parser.terms.TAtomicExpressionFactory!newInstance:->.*,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedInterfaces" value="
			main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="ExpectedInterfaces">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedInterfaces" value="
			main.lisp.parser.terms.SExpression,
		"/>
	</module>
	<module name="ExpectedSuperTypes">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedSuperTypes" value="
			main.lisp.parser.terms.BasicExpression,
			main.lisp.parser.terms.AbstractSExpression,
		"/>
	</module>
	<module name="ExpectedSuperTypes">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedSuperTypes" value="
			main.lisp.parser.terms.BasicExpression,
			main.lisp.parser.terms.AbstractSExpression,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedSignatures" value="
			isList:->boolean,
			toString:->String,
			toStringAsList:->String,
			toStringAsSExpression:->String,
			toStringAsListHelperPublic:->String,
			toStringAsSExpressionDeep:->String,
		"/>
	</module>
	<module name="ExpectedSignatures">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedSignatures" value="
			isList:->boolean,
			toString:->String,
			toStringAsList:->String,
			toStringAsSExpression:->String,
			toStringAsSExpressionDeep:->String,
			toStringAsListHelperPublic:->String,
		"/>
	</module>
	
	
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="callingMethod" value="toString:->String"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedCalls" value="
			isList:->boolean,
			toStringAsList:->String,
			toStringAsSExpression:->String,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="callingMethod" value="toString:->String"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedCalls" value="
			isList:->boolean,
			toStringAsList:->String,
			toStringAsSExpression:->String,
		"/>
	</module>
	
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="callingMethod" value="toStringAsList:->String"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedCalls" value="
			toStringAsListHelperPublic:->String,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="callingMethod" value="toStringAsList:->String"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedCalls" value="
			toStringAsListHelperPublic:->String,
		"/>
	</module>
		
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="callingMethod" value="toStringAsListHelperPublic:->String"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedCalls" value="
			toString:->String,
			toStringAsListHelperPublic:->String,
		"/>
	</module>
		<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="callingMethod" value="toStringAsListHelperPublic:->String"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedCalls" value="
			toString:->String,
			toStringAsListHelperPublic:->String,
		"/>
	</module>
	
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="callingMethod" value="toStringAsSExpression:->String"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedCalls" value="
			toString:->String,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="callingMethod" value="toStringAsSExpression:->String"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedCalls" value="
			toString:->String,
		"/>
	</module>
		
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="callingMethod" value="toStringAsSExpressionDeep:->String"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedCalls" value="
			toStringAsSExpressionDeep:->String,
		"/>
	</module>		
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="callingMethod" value="toStringAsSExpressionDeep:->String"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedCalls" value="
			toStringAsSExpressionDeep:->String,
		"/>
	</module>
	
	
	<module name="MissingMethodCall">
		<property name="severity" value="warning"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.BasicExpression!getHead:->SExpression,
			main.lisp.parser.terms.BasicExpression!getTail:->SExpression,
			isList:->boolean,
			toString:->String,
			toStringAsList:->String,
			toStringAsSExpression:->String,
			toStringAsSExpressionDeep:->String,
			toStringAsListHelperPublic:->String,
		"/>
	</module>
	<module name="MissingMethodCall">
		<property name="severity" value="info"/>
		<property name="includeTypeTags" value="@StringFormattingSExpression"/>
		<property name="expectedCalls" value="
			main.lisp.parser.terms.BasicExpression!getHead:->SExpression,
			main.lisp.parser.terms.BasicExpression!getTail:->SExpression,
			isList:->boolean,
			toString:->String,
			toStringAsList:->String,
			toStringAsSExpression:->String,
			toStringAsSExpressionDeep:->String,
			toStringAsListHelperPublic:->String,
		"/>
	</module>
		
		
		
		
		<module name="DuplicateShortTypeName">
			<property name="severity" value="warning" />
			<property name="includeTypeTags" value="*" />
		</module>



		<module name="FunctionAssignsGlobal">
			<property name="severity" value="warning" />
			<property name="excludeMethodTags"
				value="
					next(.*), 
					pop(.*), 
					delete(.*), 
					remove(.*), 
					read(.*), 					
					set(.*), 
					process(.*), 
					scan(.*), 
					(.*)create(.*), 					 
					parse(.*),
					(.*)actory(.*),
					fetch(.*),
					run(.*),
					update(.*),
					add(.*),
					getSingleton(.*),
					
					" />

		</module>
		<module name="SetterAssignsGlobal">
			<property name="severity" value="warning" />
		</module>
		<module name="BulkierThen">
			<property name="severity" value="warning" />
			<property name="minThenElseRatio" value="1" />
			<property name="maxElsePartSize" value="1" />
		</module>
		<module name="ThenBranching">
			<property name="severity" value="warning" />

		</module>

		<module name="LiberalMagicNumber">
			<property name="severity" value="warning" />
			<property name="allowedSiblings" value="Math.(.*)" />

		</module>
		<module name="MethodAccessModifier">
			<property name="severity" value="info" />
		</module>
		<module name="MethodAccessModifier">
			<property name="severity" value="warning" />
		</module>
		<module name="PublicMethodsOverride">
			<property name="severity" value="warning" />
		</module>
		<module name="PublicMethodsOverride">
			<property name="severity" value="info" />
		</module>
		<module name="ClassHasOneInterface">
			<property name="severity" value="warning" />
		</module>
		<module name="VariableHasClassType">
			<property name="severity" value="warning" />
		</module>
		<module name="VariableHasClassType">
			<property name="severity" value="info" />
		</module>


		<module name="PeerCommonProperties">
			<property name="severity" value="warning" />

		</module>
		<module name="PeerCommonProperties">
			<property name="severity" value="info" />
		</module>
		
		<module name="PeerCommonSignatures">
			<property name="severity" value="warning" />

		</module>
		<module name="PeerCommonSignatures">
			<property name="severity" value="info" />
		</module>

		<module name="ConstantDefined">
			<property name="severity" value="info" />
		</module>

	


		<module name="BulkierElse">
			<property name="severity" value="info" />
			<property name="minElseThenRatio" value="1" />
		</module>
		<module name="ElseBranching">
			<property name="severity" value="info" />
		</module>
		<module name="MnemonicNameCheck">
			<property name="severity" value="warning" />
			<property name="processType" value="false" />
			<property name="processLocals" value="true" />
			<property name="processParameters" value="true" />
			<property name="processGlobals" value="true" />
			<property name="processPublicMethods" value="false" />
			<property name="processNonPublicMethods" value="true" />
			<property name="minimumLettersInNameComponent" value="2" />
			<property name="minimumVowelsInNameComponent" value="1" />
			<property name="checkNumVowels" value="true" />
			<property name="checkNumLetters" value="true" />
			<property name="checkInDictionary" value="true" />
			<property name="allowedComponents"
				value="									
					f,
					s,
					cond,
					eval,
					evaluator,
			" />

		</module>
		
		<module name="MnemonicNameCheck">
			<property name="severity" value="info" />
			<property name="processType" value="false" />
			<property name="processLocals" value="true" />
			<property name="processParameters" value="true" />
			<property name="processGlobals" value="true" />
			<property name="processPublicMethods" value="false" />
			<property name="processNonPublicMethods" value="true" />
			<property name="minimumLettersInNameComponent" value="2" />
			<property name="minimumVowelsInNameComponent" value="1" />
			<property name="checkNumVowels" value="true" />
			<property name="checkNumLetters" value="true" />
			<property name="checkInDictionary" value="true" />
			<property name="allowedComponents"
				value="
					f,
					s,
					cond,
					eval,
					evaluator,
			" />

		</module>
		
		<module name="FinalParameterDefined">
			<property name="severity" value="info" />
		</module>

		<module name="MethodBlockLimit">
			<property name="severity" value="warning" />
			<property name="max" value="1" />
		</module>
		<module name="NestedBlockDepth">
			<property name="severity" value="warning" />
			<property name="max" value="1" />
		</module>
		<module name="EqualsAvoidedNullCheck">
			<property name="severity" value="info" />
		</module>
		<module name="EqualsAvoidedNullCheck">
			<property name="severity" value="warning" />
		</module>
		<module name="ClassDecomposition">
			<property name="severity" value="warning" />
		</module>












	</module>
	<module name="TreeWalker">
		<module name="EqualsAvoidNull" />
		<module name="SimplifyBooleanExpression" />
		<module name="SimplifyBooleanReturn" />
		<module name="StringLiteralEquality" />
		<module name="NestedForDepth">
			<property name="max" value="1" />
		</module>
		<module name="NestedIfDepth">
			<property name="max" value="1" />
		</module>
		<module name="PackageDeclaration" />
		<module name="HiddenField" />


		<module name="VisibilityModifier">
			<property name="packageAllowed" value="true" />
			<property name="protectedAllowed" value="true" />
		</module>
		<module name="ConstantName" />
		<module name="TypeName" />
		<module name="MethodName" />
		<module name="LocalVariableName" />
		<module name="MemberName" />
		<module name="StaticVariableName" />
		<module name="NeedBraces" />
		<module name="MultipleStringLiterals" />
		<module name="OuterTypeFilename" />


		<module name="OneTopLevelClass" />
		<module name="EmptyBlock">
			<property name="option" value="TEXT" />
			<property name="tokens"
				value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH" />
		</module>
		<module name="NeedBraces" />
		<module name="ArrayTypeStyle" />
		<module name="MissingSwitchDefault" />
		<module name="FallThrough" />

		
		<module name="TypeName">

		</module>
		<module name="MemberName">

		</module>
		<module name="ParameterName">
		</module>
		<module name="LambdaParameterName"/>

	
		<module name="LocalVariableName">

		</module>
		<module name="ClassTypeParameterName">

		</module>
		<module name="MethodTypeParameterName">

		</module>
		<module name="InterfaceTypeParameterName"/>

		
		<module name="AbbreviationAsWordInName">
			<property name="ignoreFinal" value="false" />
			<property name="allowedAbbreviationLength" value="1" />
		</module>
		<module name="AvoidStarImport" />
		<module name="RedundantImport" />
		<module name="UnusedImports" />
		
		<module name="MethodName">
			
		</module>

		<module name="EmptyCatchBlock">
			<property name="exceptionVariableName" value="expected" />
		</module>

		<module name="BooleanExpressionComplexity">
			<property name="max" value="3" />
		</module>
		<module name="ClassDataAbstractionCoupling">
			<property name="max" value="13" />
		</module>
		<module name="ClassFanOutComplexity">
			<property name="max" value="20" />
		</module>
		<module name="CyclomaticComplexity">
			<property name="max" value="10" />
		</module>
		<module name="JavaNCSS">
			<property name="methodMaximum" value="50" />
			<property name="classMaximum" value="1500" />
			<property name="fileMaximum" value="2000" />
		</module>

		<module name="MissingOverride" />
		<module name="AvoidNestedBlocks" />
		
		<module name="InterfaceIsType" />
		<module name="ThrowsCount">
			<property name="max" value="4" />
		</module>
		<module name="CovariantEquals" />	
		<module name="FinalLocalVariable" />
		<module name="IllegalThrows" />
		<module name="IllegalType" />
		<module name="InnerAssignment" />
		<module name="ModifiedControlVariable" />
		<module name="NestedTryDepth">
			<property name="max" value="1" />
		</module>
		<module name="ParameterAssignment" />
		
		<module name="FinalParameters" />


	</module>
</module>


