
//SESSION START
0,Mon Nov 20 13:03:53 EST 2023,3320
//START OF FILE: index/ClassRegistryClass.java
package index;

import main.ClassRegistry;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.OperationRegisterer;
import main.lisp.parser.terms.SExpression;

public class ClassRegistryClass implements ClassRegistry {

	@Override
	public Class<? extends Evaluator> getAndEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getCondEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getEvalEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getGTEEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getGTEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getLTEEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getLTEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getListEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getLoadEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getMain() {
		// TODO Auto-generated method stub
		return main.class;
	}

	@Override
	public Class<? extends Evaluator> getNotEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getOrEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getQuoteEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends SExpression> getStringFormattingSExpression() {
		// TODO Auto-generated method stub
		return null;
	}

}

//END OF FILE
//START OF FILE: index/main.java
package index;

import main.Main;

public class main {

	public static void main(String[] args) {
		Main.main(args);
	}

}

//END OF FILE
//START OF FILE: index/RunF23A5Tests.java
package index;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp524f23.assignment5.F23Assignment5Suite;
import trace.grader.basics.GraderBasicsTraceUtility;

public class RunF23A5Tests {
	public static void main(final String[] args) {
		
		final int maxPrintedTraces = 600;
		final int maxTraces = 2000;
		final int processTimeOut = 5;
		
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		GraderBasicsTraceUtility.setBufferTracedMessages(true);
		// Change this number if a test trace gets longer than 600 and is clipped
		GraderBasicsTraceUtility.setMaxPrintedTraces(maxPrintedTraces);
		// Change this number if all traces together are longer than 2000
		GraderBasicsTraceUtility.setMaxTraces(maxTraces);
		// Change this number if your process times out prematurely
		BasicProjectExecution.setProcessTimeOut(processTimeOut);
		// You need to always call such a method
		F23Assignment5Suite.main(args);
	}
}

//END OF FILE

//SESSION END

//SESSION START
1,Mon Nov 20 13:24:31 EST 2023,394
//START OF FILE: index/BasicExpressionImpl.java
package index;

import main.lisp.parser.terms.BasicExpression;
import main.lisp.parser.terms.SExpression;

public class BasicExpressionImpl extends BasicExpression{

	protected BasicExpressionImpl(SExpression head, SExpression tail) {
		super(head, tail);
	}

	public boolean isList() {
		if(super.getTail().isNIL()) {
			return true;
		}else {
			return super.getTail().isList();
		}
		
	}

}

//END OF FILE

//SESSION END

//SESSION START
2,Mon Nov 20 14:12:19 EST 2023,569
//START OF FILE: index/ClassRegistryClass.java
//@#$DELETED FILE&^%$
//END OF FILE
//START OF FILE: index/ClassRegistryImpl.java
package index;

import main.ClassRegistry;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.OperationRegisterer;
import main.lisp.parser.terms.SExpression;

public class ClassRegistryImpl implements ClassRegistry {

	@Override
	public Class<? extends Evaluator> getAndEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getCondEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends OperationRegisterer> getCustomOperationRegisterer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getEvalEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getGTEEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getGTEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getLTEEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getLTEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getListEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getLoadEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getMain() {
		// TODO Auto-generated method stub
		return main.class;
	}

	@Override
	public Class<? extends Evaluator> getNotEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getOrEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends Evaluator> getQuoteEvaluator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends SExpression> getStringFormattingSExpression() {
		// TODO Auto-generated method stub
		return null;
	}

}

//END OF FILE
//START OF FILE: index/BasicExpressionImpl.java
=386	+%7D%0A	=3	+public String toStringAsSExpressionDeep() %7B%0A%09%09return %22(%22 + super.getHead().toStringAsSExpressionDeep() + %22 %22 + %22.%22 + %22 %22 +%0A%09%09%09%09super.getTail().toStringAsSExpressionDeep() + %22)%22;%0A%09	=1	+%0A%09%0A%09public String toStringAsSExpression() %7B%0A%09%09return %22(%22 + super.getHead().toString() + %22 %22 + %22.%22 + %22 %22 +%0A%09%09%09%09super.getTail().toString() + %22)%22;%0A%09%7D%0A%09%0A//%09public String toStringAsList() %7B%0A//%09%09return %22(%22 + H1.toString() + %22 %22 + H2.toString() + %22 %22 + %E2%80%A6 HN.toString() + %22)%22;%0A//%09%7D%0A%09%0A%09public String toString() %7B%0A%09%09return super.isList()? super.toStringAsList() : super.toStringAsSExpression();%0A%09%7D%0A%0A	=4
//END OF FILE

//SESSION END

//SESSION START
4,Mon Nov 20 14:17:56 EST 2023,-6
//START OF FILE: index/ClassRegistryImpl.java
=1563	-3	=1	-2	+ul	=1	-3	=514
//END OF FILE

//SESSION END

//SESSION START
5,Mon Nov 20 14:39:57 EST 2023,113
//START OF FILE: index/main.java
=34	+import main.lisp.parser.terms.ExpressionFactory;%0A	=63	+%0A%09%09ExpressionFactory.setClass(BasicExpressionImpl.class);	=26
//END OF FILE
//START OF FILE: index/ClassRegistryImpl.java
=1563	+mai	=1	-2	+.c	=1	+ass	=514
//END OF FILE
//START OF FILE: index/BasicExpressionImpl.java
=165	+%09	=799
//END OF FILE

//SESSION END

//SESSION START
7,Mon Nov 20 14:42:11 EST 2023,-3
//START OF FILE: index/BasicExpressionImpl.java
=169	-4	+ubli	=1	-3	=788
//END OF FILE

//SESSION END

//SESSION START
8,Mon Nov 20 15:00:48 EST 2023,134
//START OF FILE: index/BasicExpressionImpl.java
=46	+Atom;%0Aimport main.lisp.parser.terms.	=244	+(this.getTail() in	=1	-2	+tanc	=1	-1	+of Atom) && this	=58	+thi	=1	-4	=77	+if(this.isAtom()) %7B%0A%09%09%09	=13	+thi	=1	-2	+.toString() + %22)%22;%0A%09%09%7D%0A%09%09%0A%09%09r	=1	+tu	=1	+n %22(%22 + this	=63	+thi	=1	-4	=107	+thi	=1	-4	=46	+thi	=1	-4	=278
//END OF FILE

//SESSION END

//SESSION START
9,Mon Nov 20 15:07:30 EST 2023,-3
//START OF FILE: index/BasicExpressionImpl.java
=1016	+thi	=1	-4	=11	+thi	=1	-4	=20	+thi	=1	-4	=34
//END OF FILE

//SESSION END

//SESSION START
10,Mon Nov 20 15:08:37 EST 2023,21
//START OF FILE: index/ClassRegistryImpl.java
=2075	+BasicExpressio	=1	-1	+Imp	=1	+.c	=1	+ass	=8
//END OF FILE

//SESSION END

//SESSION START
11,Mon Nov 20 15:22:22 EST 2023,0
//START OF FILE: index/main.java
//@#$DELETED FILE&^%$
//END OF FILE
//START OF FILE: index/index.java
package index;

import main.Main;
import main.lisp.parser.terms.ExpressionFactory;

public class index {

	public static void main(String[] args) {
		ExpressionFactory.setClass(BasicExpressionImpl.class);
		Main.main(args);
	}

}

//END OF FILE
//START OF FILE: index/ClassRegistryImpl.java
=1563	-2	=2	+dex	=541
//END OF FILE
//START OF FILE: index/BasicExpressionImpl.java
=1089	-2	=2
//END OF FILE

//SESSION END

//SESSION START
13,Mon Nov 20 15:23:15 EST 2023,42
//START OF FILE: index/BasicExpressionImpl.java
=295	+@Override%0A%09	=26	-0	=138	+@Override%0A%09	=248	+@Override	=270	-0	=1	+%0A%09@Override	=113
//END OF FILE

//SESSION END

//SESSION START
14,Mon Nov 20 15:26:58 EST 2023,64
//START OF FILE: index/RunF23A5Tests.java
=187	+import main.lisp.parser.terms.ExpressionFactory;%0A	=181	+%0A%09%09ExpressionFactory.setClass(BasicExpressionImpl.class);	=741
//END OF FILE
//START OF FILE: index/BasicExpressionImpl.java
=295	-11	=26	+	=138	-11	=248	-9	=270	+	=1	-11	=113
//END OF FILE

//SESSION END

//SESSION START
15,Mon Nov 20 15:44:38 EST 2023,-106
//START OF FILE: index/RunF23A5Tests.java
=187	-49	=181	-57	=741
//END OF FILE

//SESSION END

//SESSION START
16,Mon Nov 20 15:48:32 EST 2023,22
//START OF FILE: index/BasicExpressionImpl.java
=47	+bstractSExpression;%0Aimport main.lisp.parser.terms.A	=5	-0	=306	+)	=1	-2	+%7B%0A%09%09%09return	=23	-18	=450	-2	=34	-2	=9	-1	+(	=1	-7	+Abstrac	=1	-1	=1	-1	+Exp	=1	+ess	=1	+o	=1	-2	+)this	=1	-11	=9	-13	+AsList	=1	-6	+elpe	=1	+Publ	=1	-2	+c	=2	-6	=2	-2	=117
//END OF FILE

//SESSION END

//SESSION START
18,Mon Nov 20 16:03:49 EST 2023,182
//START OF FILE: index/BasicExpressionImpl.java
=1110	+%09%0A%09public String toStringAsListHelperPublic() %7B%0A%09%09if(this instanceof Atom) %7B%0A%09%09%09return this.toStringAsListHelperPublic();%0A%09%09%7Delse %7B%0A%09%09%09return this.getHead().toStringAsList();%0A%09%09%7D%0A%09%7D%0A	=3
//END OF FILE

//SESSION END

//SESSION START
21,Mon Nov 20 16:11:56 EST 2023,-7
//START OF FILE: index/BasicExpressionImpl.java
=1167	-1	+.	=1	-1	=1	-8	=4	+()	=112
//END OF FILE

//SESSION END

//SESSION START
22,Mon Nov 20 16:23:11 EST 2023,10
//START OF FILE: index/BasicExpressionImpl.java
=938	+%22aaaaa%22 + 	=350
//END OF FILE

//SESSION END

//SESSION START
23,Mon Nov 20 16:27:18 EST 2023,-16
//START OF FILE: index/BasicExpressionImpl.java
=938	-10	=330	-6	=14
//END OF FILE

//SESSION END

//SESSION START
25,Mon Nov 20 16:28:42 EST 2023,12
//START OF FILE: index/BasicExpressionImpl.java
=1190	+%22(%22 + 	=33	+ + %22)%22	=59
//END OF FILE

//SESSION END

//SESSION START
26,Mon Nov 20 16:29:38 EST 2023,0
//START OF FILE: index/BasicExpressionImpl.java
=938	+%22(%22 + 	=56	+ + %22)%22	=196	-6	=33	-6	=59
//END OF FILE

//SESSION END

//SESSION START
27,Mon Nov 20 16:30:41 EST 2023,-76
//START OF FILE: index/BasicExpressionImpl.java
=1172	-78	=30	+AsList	=3	-4	=7
//END OF FILE

//SESSION END

//SESSION START
28,Mon Nov 20 16:31:03 EST 2023,76
//START OF FILE: index/BasicExpressionImpl.java
=1172	+if(this.isAtom()) %7B%0A%09%09%09return this.toStringAsListHelperPublic();%0A%09%09%7Delse %7B%0A%09%09%09	=30	-6	=3	+%0A%09%09%7D	=7
//END OF FILE

//SESSION END

//SESSION START
29,Mon Nov 20 16:32:37 EST 2023,63
//START OF FILE: index/BasicExpressionImpl.java
=1257	+%22(%22 + 	=25	+ + %22 %22 + %22.%22 + %22 %22 +%0A%09%09%09%09%09this.getTail().toString() + %22)%22	=12
//END OF FILE

//SESSION END

//SESSION START
30,Mon Nov 20 16:34:19 EST 2023,-57
//START OF FILE: index/BasicExpressionImpl.java
=1257	-6	=23	-30	+AsL	=2	-3	=1	-4	=2	-17	=12
//END OF FILE

//SESSION END

//SESSION START
31,Mon Nov 20 16:34:37 EST 2023,-6
//START OF FILE: index/BasicExpressionImpl.java
=1280	-6	=14
//END OF FILE

//SESSION END

//SESSION START
32,Mon Nov 20 16:35:37 EST 2023,-30
//START OF FILE: index/BasicExpressionImpl.java
=1202	-33	+%221%22	=59
//END OF FILE

//SESSION END

//SESSION START
35,Mon Nov 20 16:40:40 EST 2023,63
//START OF FILE: index/BasicExpressionImpl.java
=1180	+getTail().	=2	-4	+NIL	=16	-3	+this.getHead().toString()	=47	+ + this.getTail().toString()	=1	+%0A%09%09%09	=11
//END OF FILE

//SESSION END

//SESSION START
36,Mon Nov 20 16:41:16 EST 2023,0
//START OF FILE: index/BasicExpressionImpl.java
=938	-6	=56	-6	=205	+%22(%22 + 	=25	+ + %22)%22	=91
//END OF FILE

//SESSION END

//SESSION START
37,Mon Nov 20 16:42:28 EST 2023,0
//START OF FILE: index/BasicExpressionImpl.java
=1200	-1	+%5B	=33	-1	+%5D	=92
//END OF FILE

//SESSION END

//SESSION START
38,Mon Nov 20 16:49:57 EST 2023,0
//START OF FILE: index/BasicExpressionImpl.java
=938	+%22(%22 + 	=56	+ + %22)%22	=205	-6	=25	-6	=91
//END OF FILE

//SESSION END

//SESSION START
39,Mon Nov 20 16:51:02 EST 2023,0
//START OF FILE: index/BasicExpressionImpl.java
=938	-6	=56	-6	=252	+%22(%22 + 	=53	+ + %22)%22	=16
//END OF FILE

//SESSION END

//SESSION START
40,Mon Nov 20 17:02:56 EST 2023,0
//START OF FILE: index/BasicExpressionImpl.java
=938	+%22(%22 + 	=56	+ + %22)%22	=252	-6	=53	-6	=16
//END OF FILE

//SESSION END

//SESSION START
41,Mon Nov 20 17:06:37 EST 2023,-3
//START OF FILE: index/BasicExpressionImpl.java
=938	-6	=56	-6	=205	+%22(%22 + 	=100	+ + %22)%22	=1	-3	=12
//END OF FILE

//SESSION END

//SESSION START
42,Mon Nov 20 17:07:00 EST 2023,0
//START OF FILE: index/BasicExpressionImpl.java
=994	+ + %22)%22	=311	-6	=13
//END OF FILE

//SESSION END

//SESSION START
43,Mon Nov 20 17:09:14 EST 2023,-4
//START OF FILE: index/BasicExpressionImpl.java
=938	+%22(%22+	=56	-1	=1	-1	=207	-6	=114
//END OF FILE

//SESSION END

//SESSION START
44,Mon Nov 20 17:13:38 EST 2023,41
//START OF FILE: index/BasicExpressionImpl.java
=1282	+((AbstractSExpression)	=14	+)	=9	+AsListHelperPublic	=15
//END OF FILE

//SESSION END

//SESSION START
45,Mon Nov 20 17:17:54 EST 2023,6
//START OF FILE: index/BasicExpressionImpl.java
=1282	+%22 %22 + 	=79
//END OF FILE

//SESSION END

//SESSION START
47,Mon Nov 20 22:12:00 EST 2023,859
//START OF FILE: index/OperationRegistererImpl.java
package index;

import main.lisp.evaluator.OperationRegisterer;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;

public class OperationRegistererImpl implements OperationRegisterer{
	
	public static void registerBasic() {
		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("quote", new quoteEvaluator());
	}
	
	

	@Override
	public void registerOperations() {
		registerBasic();
	}

}

//END OF FILE
//START OF FILE: index/index.java
=150	+OperationRegistererImpl operationRegistererImpl = new OperationRegistererImpl();%0A%09%09operationRegistererImpl.registerOperations();%0A%09%09	=80
//END OF FILE
//START OF FILE: index/quoteEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.SExpression;

public class quoteEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		return expr.getTail();
	}

}

//END OF FILE
//START OF FILE: index/ClassRegistryImpl.java
=1937	-1	+q	=1	+oteEva	=1	+uator.c	=1	+ass	=168
//END OF FILE

//SESSION END

//SESSION START
48,Mon Nov 20 22:28:18 EST 2023,778
//START OF FILE: index/listEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.NilAtom;

public class listEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.getHead().isNIL()) {
			return new NilAtom();
		}
		return ExpressionFactory.newInstance(expr.getHead().eval(environment), evalHelper(expr.getTail(), environment));
		
	}

}

//END OF FILE
//START OF FILE: index/OperationRegistererImpl.java
=332	+%09BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(%22list%22, new listEvaluator());%0A%09	=79
//END OF FILE
//START OF FILE: index/ClassRegistryImpl.java
=1344	-1	+listEval	=1	+ator.c	=1	-1	+ass	=777
//END OF FILE

//SESSION END

//SESSION START
50,Mon Nov 20 22:47:44 EST 2023,1626
//START OF FILE: index/listEvaluator.java
//@#$DELETED FILE&^%$
//END OF FILE
//START OF FILE: index/QuoteEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.SExpression;

public class QuoteEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		return expr.getTail();
	}

}

//END OF FILE
//START OF FILE: index/LoadEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.NilAtom;
import main.lisp.parser.terms.TAtom;
import main.lisp.parser.terms.SExpression;
import main.lisp.interpreter.InterpreterModel;
import main.lisp.interpreter.InterpreterModelSingleton;
import main.lisp.interpreter.ObservableLispInterpreter;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

public class LoadEvaluator implements Evaluator {

    @Override
    public SExpression eval(SExpression arg0, Environment arg1) {
        // Ensure the argument is a string
        if (!(arg0 instanceof main.lisp.parser.terms.StringAtom)) {
            return new NilAtom();
        }

        String fileName = ((main.lisp.parser.terms.StringAtom) arg0).getValue();
        try {
            // Read all lines from the specified file
            List<String> lines = Files.readAllLines(Path.of(fileName));

            // Get the singleton instance of the interpreter model
            InterpreterModel interpreterModel = InterpreterModelSingleton.get();

            // Clear any previous property change listeners
            interpreterModel.clearPropertyChangeListeners();

            // Process each line in the loaded file
            for (String line : lines) {
                interpreterModel.newInput(line);
            }

            return new TAtom();
        } catch (Exception e) {
            return new NilAtom();
        }
    }
}

//END OF FILE
//START OF FILE: index/OperationRegistererImpl.java
=312	-1	+Q	=94	+ListEva	=1	+uator());%0A%09%09BuiltinOperationManagerSingleton.get().reg	=3	+erEvaluatorIfNew(%22load%22, new Load	=94
//END OF FILE
//START OF FILE: index/ListEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.NilAtom;

public class ListEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.getHead().isNIL()) {
			return new NilAtom();
		}
		return ExpressionFactory.newInstance(expr.getHead().eval(environment), evalHelper(expr.getTail(), environment));
		
	}

}

//END OF FILE
//START OF FILE: index/quoteEvaluator.java
//@#$DELETED FILE&^%$
//END OF FILE
//START OF FILE: index/ClassRegistryImpl.java
=1344	-1	+L	=607	-1	+Q	=187
//END OF FILE

//SESSION END

//SESSION START
51,Mon Nov 20 22:48:22 EST 2023,2
//START OF FILE: index/LoadEvaluator.java
=1465	+IO	=67
//END OF FILE

//SESSION END

//SESSION START
52,Mon Nov 20 22:49:08 EST 2023,15
//START OF FILE: index/ClassRegistryImpl.java
=1482	-1	+LoadEval	=1	+ator.c	=1	-1	+ass	=654
//END OF FILE

//SESSION END

//SESSION START
53,Mon Nov 20 22:51:41 EST 2023,-62
//START OF FILE: index/LoadEvaluator.java
=316	-56	=213	-1	+exp	=1	-2	=14	-1	+envi	=1	-2	+onment	=57	-1	=1	-1	+expr.getTail	=1	+).getHe	=1	-3	+d()	=12	-2	+N	=1	-2	=1	-23	=4	-1	=12	-4	+%09	=59	-3	+expr.getT	=2	-2	=1	-3	+()	=1	-1	+getHe	=1	-4	+d()	=1	-1	=1	+val(envi	=1	+on	=1	-1	+ent)	=1	+to	=6	-20	=690
//END OF FILE

//SESSION END

//SESSION START
56,Mon Nov 20 23:21:26 EST 2023,38
//START OF FILE: index/LoadEvaluator.java
=794	+System.out.println(fileName);%0A        	=678
//END OF FILE

//SESSION END

//SESSION START
57,Mon Nov 20 23:21:53 EST 2023,15
//START OF FILE: index/LoadEvaluator.java
=813	+%22Filename: %22 + 	=697
//END OF FILE

//SESSION END

//SESSION START
58,Mon Nov 20 23:24:47 EST 2023,121
//START OF FILE: index/LoadEvaluator.java
=332	+BufferedReader;%0Aimport java.io.FileReader;%0Aimport java.io.	=13	-0	=570	+%09BufferedReader	=1	+reader	=1	+=	=1	+new	=1	-7	+BufferedReade	=1	-7	+(	=2	-3	+w	=5	-3	+R	=3	-6	=1	-9	+r	=297	-4	+St	=1	-10	+ing	=5	+;%0A      	=1	-2	=1	-1	+    w	=1	+il	=2	+((	=1	-1	+ine = re	=3	+r.rea	=1	+Line())	=1	-2	+!= nu	=1	-1	+l) %7B	=13	-2	+    // P	=1	+ocess	=1	-2	=1	-4	+he	=6	-5	+h	=1	-4	+re	=13	-4	+%09	=32	+ // Example: Print each line	=134
//END OF FILE

//SESSION END

//SESSION START
59,Mon Nov 20 23:25:20 EST 2023,32
//START OF FILE: index/LoadEvaluator.java
=1602	+%09System.out.println(e);%0A        	=44
//END OF FILE

//SESSION END

//SESSION START
61,Mon Nov 20 23:31:54 EST 2023,5
//START OF FILE: index/LoadEvaluator.java
=1032	-1	+%22./test.l	=1	-6	+sp%22	=638
//END OF FILE

//SESSION END

//SESSION START
63,Mon Nov 20 23:36:05 EST 2023,60
//START OF FILE: index/ListEvaluator.java
=547	+if(expr.isAtom()) %7B%0A%09%09%09return expr.eval(environment);%0A%09%09%7D%0A%09%09	=122
//END OF FILE

//SESSION END

//SESSION START
64,Mon Nov 20 23:36:26 EST 2023,0
//START OF FILE: index/ListEvaluator.java
=495	-10	=2	-3	+Atom	=16	-1	=1	-3	+xpr.eval(env	=1	-3	+r	=1	+n	=1	-1	+ent	=17	+getHead().	=2	-4	+NIL	=16	-5	+n	=1	-2	+w Ni	=1	-6	+At	=1	-1	=1	-3	+(	=131
//END OF FILE

//SESSION END

//SESSION START
65,Mon Nov 20 23:49:56 EST 2023,587
//START OF FILE: index/EvalEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;

public class EvalEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		return expr.getTail().eval(environment);
	}
	
//	public static SExpression evalHelper(SExpression expr, Environment environment) {
//		if(expr.isAtom()) {
//			return expr.eval(environment);
//		}
//		return ExpressionFactory.newInstance(expr.getHead().eval(environment), evalHelper(expr.getTail(), environment));
//		
//	}

}

//END OF FILE
//START OF FILE: index/ListEvaluator.java
=547	-60	=122
//END OF FILE

//SESSION END

//SESSION START
67,Mon Nov 20 23:50:54 EST 2023,109
//START OF FILE: index/OperationRegistererImpl.java
=520	+%09BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(%22load%22, new EvalEvaluator());%0A%09	=79
//END OF FILE
//START OF FILE: index/ClassRegistryImpl.java
=735	-1	+EvalEval	=1	+ator.c	=1	-1	+ass	=1416
//END OF FILE

//SESSION END

//SESSION START
68,Mon Nov 20 23:51:26 EST 2023,0
//START OF FILE: index/OperationRegistererImpl.java
=584	-2	+ev	=1	-1	+l	=105
//END OF FILE

//SESSION END

//SESSION START
69,Mon Nov 20 23:54:23 EST 2023,-5
//START OF FILE: index/LoadEvaluator.java
=1032	-4	+fileNam	=1	-8	=638
//END OF FILE

//SESSION END

//SESSION START
70,Mon Nov 20 23:54:52 EST 2023,3
//START OF FILE: index/LoadEvaluator.java
=1032	-1	+%22test.l	=1	-6	+sp%22	=638
//END OF FILE

//SESSION END

//SESSION START
71,Mon Nov 20 23:55:28 EST 2023,49
//START OF FILE: index/EvalEvaluator.java
=320	+System.out.println(expr.getTail().toString());%0A%09%09	=327
//END OF FILE

//SESSION END

//SESSION START
72,Mon Nov 20 23:57:09 EST 2023,10
//START OF FILE: index/EvalEvaluator.java
=354	+getHead().	=342
//END OF FILE

//SESSION END

//SESSION START
73,Mon Nov 20 23:57:53 EST 2023,10
//START OF FILE: index/EvalEvaluator.java
=401	+getHead().	=305
//END OF FILE

//SESSION END

//SESSION START
75,Tue Nov 21 00:02:27 EST 2023,-122
//START OF FILE: index/LoadEvaluator.java
=1209	-122	=350
//END OF FILE

//SESSION END

//SESSION START
76,Tue Nov 21 10:39:19 EST 2023,325
//START OF FILE: index/CondEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.NilAtom;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.TAtom;

public class CondEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		return evalHelper(expr, environment);
	}
	
	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isNIL()) {
			return new NilAtom();
		}
		if(!expr.getHead().getHead().eval(environment).isNIL()) {
			return new TAtom();
		}else {
			return evalHelper(expr.getTail(), environment);
		}
	}
	
}

//END OF FILE
//START OF FILE: index/ListEvaluator.java
=186	-39	=444
//END OF FILE
//START OF FILE: index/EvalEvaluator.java
=320	-59	=51	-280	=6
//END OF FILE

//SESSION END

//SESSION START
77,Tue Nov 21 10:40:07 EST 2023,109
//START OF FILE: index/OperationRegistererImpl.java
=614	+%09BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(%22cond%22, new CondEvaluator());%0A%09	=79
//END OF FILE
//START OF FILE: index/ClassRegistryImpl.java
=467	+Co	=1	+dEval	=1	-1	+ator.c	=1	+ass	=1699
//END OF FILE

//SESSION END

//SESSION START
81,Tue Nov 21 10:45:52 EST 2023,-6
//START OF FILE: index/CondEvaluator.java
=176	-37	=405	-1	+expr.g	=1	-2	+tHead().get	=1	-2	+ail().eval(envir	=1	+n	=1	-1	+ent	=75
//END OF FILE

//SESSION END

//SESSION START
82,Tue Nov 21 10:46:37 EST 2023,-18
//START OF FILE: index/CondEvaluator.java
=605	-18	=74
//END OF FILE

//SESSION END

//SESSION START
88,Tue Nov 21 10:51:40 EST 2023,27
//START OF FILE: index/EvalEvaluator.java
=335	+Head();%0A//%09%09return expr.get	=42
//END OF FILE

//SESSION END

//SESSION START
89,Tue Nov 21 10:52:06 EST 2023,-27
//START OF FILE: index/EvalEvaluator.java
=335	-27	=42
//END OF FILE

//SESSION END

//SESSION START
90,Tue Nov 21 10:52:27 EST 2023,-50
//START OF FILE: index/CondEvaluator.java
=466	-50	=163
//END OF FILE

//SESSION END

//SESSION START
91,Tue Nov 21 10:54:11 EST 2023,40
//START OF FILE: index/CondEvaluator.java
=524	+System.out.println(%22AAAA: %22 + expr);%0A%09%09%09	=105
//END OF FILE

//SESSION END

//SESSION START
92,Tue Nov 21 10:56:15 EST 2023,39
//START OF FILE: index/CondEvaluator.java
=310	+System.out.println(%22BBBB: %22 + expr);%0A%09%09	=359
//END OF FILE

//SESSION END

//SESSION START
93,Tue Nov 21 10:59:00 EST 2023,39
//START OF FILE: index/CondEvaluator.java
=502	+System.out.println(%22CCCC: %22 + expr);%0A%09%09	=206
//END OF FILE

//SESSION END

//SESSION START
94,Tue Nov 21 11:00:29 EST 2023,10
//START OF FILE: index/CondEvaluator.java
=720	+.getHead()	=27
//END OF FILE

//SESSION END

//SESSION START
95,Tue Nov 21 11:00:56 EST 2023,0
//START OF FILE: index/CondEvaluator.java
=673	+.getHead()	=45	-10	=29
//END OF FILE

//SESSION END

//SESSION START
96,Tue Nov 21 11:01:26 EST 2023,-118
//START OF FILE: index/CondEvaluator.java
=310	-39	=23	+	=128	-39	=59	-40	=119
//END OF FILE

//SESSION END

//SESSION START
99,Tue Nov 21 11:07:41 EST 2023,97
//START OF FILE: index/CondEvaluator.java
=524	+if(expr.getHead().getTail().isAtom()) %7B%0A%09%09%09%09return expr.getHead().getTail();%0A%09%09%09%7Delse %7B%0A%09%09%09%09	=42	+%0A%09%09%09%7D	=73
//END OF FILE

//SESSION END

//SESSION START
100,Tue Nov 21 11:09:15 EST 2023,50
//START OF FILE: index/CondEvaluator.java
=466	+expr.isNIL()) %7B%0A%09%09%09return new NilAtom();%0A%09%09%7D%0A%09%09if(	=270
//END OF FILE

//SESSION END

//SESSION START
101,Tue Nov 21 11:29:19 EST 2023,6428
//START OF FILE: index/LesserEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.DecimalAtom;
import main.lisp.parser.terms.IntegerAtom;
import main.lisp.parser.terms.NilAtom;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.TAtom;

public class LesserEvaluator implements Evaluator {

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		
		SExpression firstEvaled = expr.getHead().eval(environment);
		SExpression secondEvaled = expr.getTail().getHead().eval(environment);
		
		IntegerAtom firstInt = null;
		IntegerAtom secondInt = null;
		DecimalAtom firstDec = null;
		DecimalAtom secondDec = null;
		
		if (firstEvaled instanceof IntegerAtom) {
			firstInt = (IntegerAtom)firstEvaled;
			secondInt = (IntegerAtom)secondEvaled;
		}
		if (firstEvaled instanceof DecimalAtom) {
			firstDec = (DecimalAtom)firstEvaled;
			secondDec = (DecimalAtom)secondEvaled;
		}
		
		if (firstInt != null) {
			long difference = firstInt.getValue() - secondInt.getValue();
			if(difference < 0) {
				return new TAtom();
			}else {
				return new NilAtom();
			}
		} else {
			double difference = 0;
			if (firstDec != null) {
				difference = firstDec.getValue();
			}
			if (secondDec != null) {
				difference -= secondDec.getValue();
			}
			if(difference < 0) {
				return new TAtom();
			}else {
				return new NilAtom();
			}
		}
	}

}

//END OF FILE
//START OF FILE: index/LesserEqualEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.DecimalAtom;
import main.lisp.parser.terms.IntegerAtom;
import main.lisp.parser.terms.NilAtom;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.TAtom;

public class LesserEqualEvaluator implements Evaluator {

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		
		SExpression firstEvaled = expr.getHead().eval(environment);
		SExpression secondEvaled = expr.getTail().getHead().eval(environment);
		
		IntegerAtom firstInt = null;
		IntegerAtom secondInt = null;
		DecimalAtom firstDec = null;
		DecimalAtom secondDec = null;
		
		if (firstEvaled instanceof IntegerAtom) {
			firstInt = (IntegerAtom)firstEvaled;
			secondInt = (IntegerAtom)secondEvaled;
		}
		if (firstEvaled instanceof DecimalAtom) {
			firstDec = (DecimalAtom)firstEvaled;
			secondDec = (DecimalAtom)secondEvaled;
		}
		
		if (firstInt != null) {
			long difference = firstInt.getValue() - secondInt.getValue();
			if(difference <= 0) {
				return new TAtom();
			}else {
				return new NilAtom();
			}
		} else {
			double difference = 0;
			if (firstDec != null) {
				difference = firstDec.getValue();
			}
			if (secondDec != null) {
				difference -= secondDec.getValue();
			}
			if(difference <= 0) {
				return new TAtom();
			}else {
				return new NilAtom();
			}
		}
	}

}

//END OF FILE
//START OF FILE: index/OperationRegistererImpl.java
=713	+public static void registerArithmetic() %7B%0A%09%09BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(%22%3E%22, new GreaterEvaluator());%0A%09%09BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(%22%3C%22, new LesserEvaluator());%0A%09%09BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(%22%3E=%22, new GreaterEqualEvaluator());%0A%09%09BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(%22%3C=%22, new LesserEqualEvaluator());%0A%09%7D%0A%09%0A%09public static void registerLogic() %7B%0A%09%09%0A%09%7D%0A%09%0A%09	=62	+ic();%0A%09%09registerArithmetic();%0A%09%09registerLog	=12
//END OF FILE
//START OF FILE: index/CondEvaluator.java
=782	-2	=2
//END OF FILE
//START OF FILE: index/GreaterEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.DecimalAtom;
import main.lisp.parser.terms.IntegerAtom;
import main.lisp.parser.terms.NilAtom;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.TAtom;

public class GreaterEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		
		SExpression firstEvaled = expr.getHead().eval(environment);
		SExpression secondEvaled = expr.getTail().getHead().eval(environment);
		
		IntegerAtom firstInt = null;
		IntegerAtom secondInt = null;
		DecimalAtom firstDec = null;
		DecimalAtom secondDec = null;
		
		if (firstEvaled instanceof IntegerAtom) {
			firstInt = (IntegerAtom)firstEvaled;
			secondInt = (IntegerAtom)secondEvaled;
		}
		if (firstEvaled instanceof DecimalAtom) {
			firstDec = (DecimalAtom)firstEvaled;
			secondDec = (DecimalAtom)secondEvaled;
		}
		
		if (firstInt != null) {
			long difference = firstInt.getValue() - secondInt.getValue();
			if(difference > 0) {
				return new TAtom();
			}else {
				return new NilAtom();
			}
		} else {
			double difference = 0;
			if (firstDec != null) {
				difference = firstDec.getValue();
			}
			if (secondDec != null) {
				difference -= secondDec.getValue();
			}
			if(difference > 0) {
				return new TAtom();
			}else {
				return new NilAtom();
			}
		}
	}

}

//END OF FILE
//START OF FILE: index/GreaterEqualEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.DecimalAtom;
import main.lisp.parser.terms.IntegerAtom;
import main.lisp.parser.terms.NilAtom;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.TAtom;

public class GreaterEqualEvaluator implements Evaluator {

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		
		SExpression firstEvaled = expr.getHead().eval(environment);
		SExpression secondEvaled = expr.getTail().getHead().eval(environment);
		
		IntegerAtom firstInt = null;
		IntegerAtom secondInt = null;
		DecimalAtom firstDec = null;
		DecimalAtom secondDec = null;
		
		if (firstEvaled instanceof IntegerAtom) {
			firstInt = (IntegerAtom)firstEvaled;
			secondInt = (IntegerAtom)secondEvaled;
		}
		if (firstEvaled instanceof DecimalAtom) {
			firstDec = (DecimalAtom)firstEvaled;
			secondDec = (DecimalAtom)secondEvaled;
		}
		
		if (firstInt != null) {
			long difference = firstInt.getValue() - secondInt.getValue();
			if(difference >= 0) {
				return new TAtom();
			}else {
				return new NilAtom();
			}
		} else {
			double difference = 0;
			if (firstDec != null) {
				difference = firstDec.getValue();
			}
			if (secondDec != null) {
				difference -= secondDec.getValue();
			}
			if(difference >= 0) {
				return new TAtom();
			}else {
				return new NilAtom();
			}
		}
	}

}

//END OF FILE
//START OF FILE: index/ClassRegistryImpl.java
=887	-1	+GreaterEq	=1	+a	=1	+Eva	=1	+uator.class	=117	-2	+GreaterEva	=1	+uator.c	=1	+ass	=118	-1	+LesserEq	=1	+a	=1	+Eva	=1	+uator.class	=117	-1	+LesserEval	=1	-1	+ator.c	=1	+ass	=930
//END OF FILE

//SESSION END

//SESSION START
103,Tue Nov 21 11:40:54 EST 2023,1901
//START OF FILE: index/OrEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.NilAtom;
import main.lisp.parser.terms.SExpression;

public class OrEvaluator implements Evaluator {

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		return evalHelper(expr, environment);
	}

	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			if(expr.isNIL()) {
				return new NilAtom();
			}else {
				return expr;
			}
		}
		if(expr.getHead().isNIL()) {
			return evalHelper(expr.getTail(), environment);
		}else {
			return expr.getHead();
		}		
	}

}

//END OF FILE
//START OF FILE: index/NotEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.NilAtom;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.TAtom;

public class NotEvaluator implements Evaluator {

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		if(expr.isNIL()) {
			return new TAtom();
		}else {
			return new NilAtom();
		}
	}

}

//END OF FILE
//START OF FILE: index/AndEvaluator.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.NilAtom;
import main.lisp.parser.terms.SExpression;

public class AndEvaluator implements Evaluator {

	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		expr = expr.getTail();
		return evalHelper(expr, environment);
	}

	public static SExpression evalHelper(SExpression expr, Environment environment) {
		if(expr.isAtom()) {
			if(expr.isNIL()) {
				return new NilAtom();
			}else {
				return expr;
			}
		}
		if(expr.getHead().isNIL()) {
			return new NilAtom();
		}else {
			return evalHelper(expr.getTail(), environment);
		}		
	}
	
}

//END OF FILE

//SESSION END

//SESSION START
105,Tue Nov 21 11:42:50 EST 2023,312
//START OF FILE: index/OperationRegistererImpl.java
=1186	+BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(%22and%22, new AndEvaluator());%0A%09%09BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(%22or%22, new OrEvaluator());%0A%09%09BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(%22not%22, new NotEvaluator());	=124
//END OF FILE
//START OF FILE: index/ClassRegistryImpl.java
=344	+A	=1	-1	+dEva	=1	+uator.c	=1	+ass	=1484	-2	+NotEva	=1	+uator.c	=1	+ass	=117	-1	+OrEval	=1	-1	+ator.c	=1	+ass	=308
//END OF FILE

//SESSION END

//SESSION START
107,Tue Nov 21 11:44:36 EST 2023,10
//START OF FILE: index/AndEvaluator.java
=717	+.getHead()	=29
//END OF FILE

//SESSION END

//SESSION START
108,Tue Nov 21 11:44:56 EST 2023,-2
//START OF FILE: index/AndEvaluator.java
=746	-2	=8
//END OF FILE

//SESSION END

//SESSION START
109,Tue Nov 21 11:45:21 EST 2023,10
//START OF FILE: index/NotEvaluator.java
=368	+.getHead()	=91
//END OF FILE

//SESSION END

//SESSION START
110,Tue Nov 21 11:50:26 EST 2023,-151
//START OF FILE: index/LoadEvaluator.java
=403	-78	=1078
//END OF FILE
//START OF FILE: index/EvalEvaluator.java
=124	-49	=204
//END OF FILE
//START OF FILE: index/AndEvaluator.java
=124	-49	=581
//END OF FILE
//START OF FILE: index/ClassRegistryImpl.java
=641	+Operatio	=1	-1	+RegistererImp	=1	+.c	=1	+ass	=1661
//END OF FILE

//SESSION END

//SESSION START
121,Tue Nov 21 12:17:56 EST 2023,0
//START OF FILE: index/OperationRegistererImpl.java
=300	-5	+QUOTE	=91	-4	+LIST	=1181
//END OF FILE

//SESSION END

//SESSION START
122,Tue Nov 21 12:18:28 EST 2023,0
//START OF FILE: index/OperationRegistererImpl.java
=490	-4	+LOAD	=90	-4	+EVAL	=90	-4	+COND	=567	-3	+AND	=89	-2	+OR	=88	-3	+NOT	=147
//END OF FILE

//SESSION END

//SESSION START
124,Tue Nov 21 14:19:40 EST 2023,58
//START OF FILE: index/BasicExpressionImpl.java
=193	+import main.lisp.evaluator.BuiltinOperationManagerSingleton;%0A	=417	-3	=754
//END OF FILE

//SESSION END

//SESSION START
125,Tue Nov 21 14:22:10 EST 2023,25
//START OF FILE: index/ListEvaluator.java
=320	+expr = expr.getTail();%0A%09%09	=310
//END OF FILE

//SESSION END

//SESSION START
126,Tue Nov 21 14:22:35 EST 2023,2
//START OF FILE: index/ListEvaluator.java
=318	+//	=337
//END OF FILE

//SESSION END

//SESSION START
127,Tue Nov 21 14:23:35 EST 2023,20
//START OF FILE: index/ListEvaluator.java
=580	+Tail().get	=41	+.getTail()	=36
//END OF FILE

//SESSION END

//SESSION START
128,Tue Nov 21 14:25:25 EST 2023,-22
//START OF FILE: index/ListEvaluator.java
=318	-27	=130	+expr = expr.getTail();%0A%09%09	=105	-10	=41	-10	=36
//END OF FILE

//SESSION END

//SESSION START
129,Tue Nov 21 14:28:19 EST 2023,0
//START OF FILE: index/ListEvaluator.java
=320	+expr = expr.getTail();%0A%09%09	=125	-25	=185
//END OF FILE

//SESSION END

//SESSION START
131,Tue Nov 21 14:32:58 EST 2023,7
//START OF FILE: index/ListEvaluator.java
=571	+valHelper(e	=13	-6	+, 	=65
//END OF FILE

//SESSION END

//SESSION START
132,Tue Nov 21 14:38:45 EST 2023,114
//START OF FILE: index/ListEvaluator.java
=571	-11	=13	-2	+.eval(	=65
//END OF FILE
//START OF FILE: index/EvalEvaluator.java
=137	+import main.lisp.evaluator.BuiltinOperationManagerSingleton;%0A	=141	+BuiltinOp	=1	-2	+rationManage	=1	+Singleton	=4	-1	+().getEv	=1	-1	=1	+uator	=1	-1	+expr	=11	+toString()).	=5	+expr, 	=20
//END OF FILE

//SESSION END

//SESSION START
133,Tue Nov 21 14:39:12 EST 2023,25
//START OF FILE: index/EvalEvaluator.java
=332	+expr = expr.getTail();%0A%09%09	=117
//END OF FILE

//SESSION END

//SESSION START
134,Tue Nov 21 14:40:57 EST 2023,37
//START OF FILE: index/EvalEvaluator.java
=357	+System.out.println(expr.getHead());%0A%09%09	=113	-1	=3
//END OF FILE

//SESSION END

//SESSION START
135,Tue Nov 21 14:41:50 EST 2023,10
//START OF FILE: index/EvalEvaluator.java
=390	+.getHead()	=121
//END OF FILE

//SESSION END

//SESSION START
136,Tue Nov 21 14:42:28 EST 2023,10
//START OF FILE: index/EvalEvaluator.java
=390	-10	=79	+getHead().	=21	+.getHead()	=21
//END OF FILE

//SESSION END

//SESSION START
137,Tue Nov 21 14:43:30 EST 2023,-10
//START OF FILE: index/EvalEvaluator.java
=353	+.getHead()	=116	-10	=21	-10	=21
//END OF FILE

//SESSION END

//SESSION START
138,Tue Nov 21 16:14:34 EST 2023,493
//START OF FILE: index/EvalEvaluator.java
=124	+ExpressionFactory;%0Aimport main.lisp.parser.terms.	=13	-0	=230	+return evalHelper(expr, environment);%0A%09%09%0A%09%7D%0A%09%0A%09public static 	=1	-1	+Expre	=1	+sion evalHelper(SExpression expr, Environmen	=1	+ 	=1	+nviron	=1	+ent) %7B%0A%09%09if(expr	=1	+isAt	=1	+m()) %7B%0A%09%09%09ret	=1	+rn expr;%0A%09%09%7D%0A%09%09if(!expr.ge	=1	+Tail()	=1	+getHead().isAtom()) %7B%0A%09%09%09SEx	=2	+ess	=1	+o	=1	+ expression = ExpressionFac	=1	+ory.newInstance(expr.getHead(), eva	=1	+Helper(expr.getTail().getHead(), e	=1	+vironment));%0A%09%09%09return BuiltinOperationManagerSingleton.get().getEvaluator	=15	+.toString()).eval(expression, environment	=3	+%09%09%7Delse %7B%0A%09	=114	+%09	=1	+%0A%09%09%0A%09%7D%0A%09	=3
//END OF FILE

//SESSION END

//SESSION START
144,Tue Nov 21 16:22:25 EST 2023,56
//START OF FILE: index/OperationRegistererImpl.java
=1578	+%09%0A%09public void registerAll() %7B%0A%09%09this.registerOperations();%0A%09%7D%0A	=3
//END OF FILE
//START OF FILE: index/index.java
=265	-10	+All	=86
//END OF FILE

//SESSION END

//SESSION START
145,Tue Nov 21 16:28:16 EST 2023,196
//START OF FILE: index/LoadEvaluator.java
=316	+import main.lisp.parser.terms.TAtomicExpressionFactory;%0Aimport main.lisp.parser.terms.NilAtomicExpressionFactory;%0A%0A	=343	-4	=7	+icExpressionFactory.newInstance	=680	-4	=5	+icExpressionFactory.newInstance	=89	-4	=7	+icExpressionFactory.newInstance	=22
//END OF FILE

//SESSION END

//SESSION START
146,Tue Nov 21 16:30:30 EST 2023,613
//START OF FILE: index/LesserEvaluator.java
=299	+import main.lisp.parser.terms.TAtomicExpressionFactory;%0Aimport main.lisp.parser.terms.NilAtomicExpressionFactory;%0A%0A	=819	-4	=5	+icExpressionFactory.newInstance	=26	-4	=7	+icExpressionFactory.newInstance	=224	-4	=5	+icExpressionFactory.newInstance	=26	-4	=7	+icExpressionFactory.newInstance	=19
//END OF FILE
//START OF FILE: index/LesserEqualEvaluator.java
=299	+import main.lisp.parser.terms.TAtomicExpressionFactory;%0Aimport main.lisp.parser.terms.NilAtomicExpressionFactory;%0A	=825	-4	=5	+icExpressionFactory.newInstance	=26	-4	=7	+icExpressionFactory.newInstance	=225	-4	=5	+icExpressionFactory.newInstance	=26	-4	=7	+icExpressionFactory.newInstance	=19
//END OF FILE
//START OF FILE: index/NotEvaluator.java
=213	+import main.lisp.parser.terms.TAtomicExpressionFactory;%0Aimport main.lisp.parser.terms.NilAtomicExpressionFactory;%0A	=198	-4	=5	+icExpressionFactory.newInstance	=24	-4	=7	+icExpressionFactory.newInstance	=14
//END OF FILE

//SESSION END

//SESSION START
147,Tue Nov 21 16:33:01 EST 2023,70
//START OF FILE: index/LoadEvaluator.java
=916	+fileName = fileName.substring(fileName.lastIndexOf(%22/%22) + 1);%0A        	=761
//END OF FILE

//SESSION END

//SESSION START
148,Tue Nov 21 16:33:42 EST 2023,23
//START OF FILE: index/LoadEvaluator.java
=975	+, fileName.length() - 1	=772
//END OF FILE

//SESSION END

//SESSION START
149,Tue Nov 21 16:34:11 EST 2023,-3
//START OF FILE: index/LoadEvaluator.java
=1189	-2	+fileNam	=1	-8	=570
//END OF FILE

//SESSION END

//SESSION START
150,Tue Nov 21 16:36:23 EST 2023,-93
//START OF FILE: index/LoadEvaluator.java
=518	+import java.nio.file.Files;%0Aimport java.nio.file.Path;%0Aimport java.util.List;%0A	=558	-15	+%09List%3CString%3E	=7	-8	+=	=1	-11	+F	=3	-15	+s.	=2	-3	=2	-12	+AllLi	=2	-16	+s	=1	-10	+P	=1	-3	+th.of	=13	+%0A	=162	+for (	=11	-3	=1	-7	+:	=1	-10	=4	-29	+s	=20	-38	=32	-28	=220
//END OF FILE

//SESSION END

//SESSION START
153,Tue Nov 21 16:50:00 EST 2023,34
//START OF FILE: index/LoadEvaluator.java
=230	+parser.terms.StringAtom;%0Aimport main.lisp.	=701	+((StringAtom)(	=8	-10	=6	+))	=1	+g	=1	-1	+tV	=2	-9	+u	=1	-12	=4	+//	=93	+//	=595
//END OF FILE

//SESSION END

//SESSION START
154,Tue Nov 21 16:51:43 EST 2023,3
//START OF FILE: index/LoadEvaluator.java
=613	+s	=620	+s	=1	-2	+get	=472
//END OF FILE

//SESSION END

//SESSION START
155,Tue Nov 21 16:52:44 EST 2023,42
//START OF FILE: index/LoadEvaluator.java
=489	-12	+IOExc	=1	-5	=1	-2	=1	-6	=2	-11	+n	=14	+n	=3	-4	=1	+hars	=1	-1	+t.Charse	=1	-3	=632	+Charset charset = Charset.forName(%22ISO-8859-1%22);%0A        %09	=59	+, charset	=462
//END OF FILE

//SESSION END

//SESSION START
156,Tue Nov 21 16:55:35 EST 2023,10
//START OF FILE: index/LoadEvaluator.java
=971	+Tail().get	=782
//END OF FILE

//SESSION END

//SESSION START
158,Tue Nov 21 16:59:30 EST 2023,109
//START OF FILE: index/LoadEvaluator.java
=603	+nio.file.Path;%0Aimport java.	=618	+);%0A        %09List%3CString%3E lineApple = Files.readAllLines(Path.of(fileName), charset	=542
//END OF FILE

//SESSION END

//SESSION START
159,Tue Nov 21 17:00:22 EST 2023,-84
//START OF FILE: index/LoadEvaluator.java
=1277	-5	+s	=29	-80	=481
//END OF FILE

//SESSION END

//SESSION START
160,Tue Nov 21 17:00:39 EST 2023,-28
//START OF FILE: index/LoadEvaluator.java
=588	-28	=1172
//END OF FILE

//SESSION END

//SESSION START
161,Tue Nov 21 17:01:03 EST 2023,-7
//START OF FILE: index/LoadEvaluator.java
=1165	+//	=124	-9	=462
//END OF FILE

//SESSION END

//SESSION START
162,Tue Nov 21 17:07:23 EST 2023,88
//START OF FILE: index/OperationRegistererImpl.java
=92	+asicOperationRegisterer;%0Aimport main.lisp.evaluator.B	=70	+ extends BasicOperationRegisterer	=1361	-5	+All	=5	+%7D%0A	=1	+%0A%09public static void 	=9	-9	+ll	=2	-1	+ %7B	=11	-3	+Bas	=7	-2	=1	-14	=9	-2	+rithmetic	=2	-2	+;	=3	-5	=8	-7	+L	=1	-2	+gic	=10
//END OF FILE
//START OF FILE: index/index.java
=265	-3	+Operations	=86
//END OF FILE

//SESSION END

//SESSION START
163,Tue Nov 21 17:08:47 EST 2023,84
//START OF FILE: index/BasicExpressionImpl.java
=311	+ implements SExpression	=2	-0	=93	+%09@Override%0A	=154	-1	+%0A%09@Override	=246	-1	+%0A%09@Override	=143	-1	+%0A%09@Override	=113	-1	+%0A%09@Override	=110	+%0A	=1	+@Override	=248
//END OF FILE

//SESSION END

//SESSION START
164,Tue Nov 21 17:09:39 EST 2023,-90
//START OF FILE: index/index.java
=173	-4	+.	=1	-6	=7	-5	+A	=1	-29	=1	-48	=86
//END OF FILE

//SESSION END

//SESSION START
166,Tue Nov 21 17:31:19 EST 2023,136
//START OF FILE: index/LesserEqualEvaluator.java
=555	-50	=1	-28	=1	-31	+ub	=2	-1	=1	-23	=1	-11	=1	-27	+f	=1	-23	=2	-6	=1	-2	=1	-17	=1	-15	=1	-1	=3	-15	=1	-33	=1	-9	=1	-2	=1	-17	+h	=1	-22	=1	-4	=1	-4	=1	-16	=1	-28	=4	-21	+u	=1	-23	=2	-10	=1	-10	+H	=1	-4	=1	-105	+p	=2	-15	=4	-39	+D	=9	-56	=1	-7	=1	-27	=3	-37	+,	=2	-23	=1	-40	+v	=1	-3	=1	-43	=2	-2	+m	=1	-5	=1	-37	=1	-6	=5	-6	=22	-1	=52	-1	=8	-1	=51	-5	=11
//END OF FILE
//START OF FILE: index/ArithmeticEvaluatorHelper.java
package index;

import main.lisp.evaluator.Environment;
import main.lisp.parser.terms.DecimalAtom;
import main.lisp.parser.terms.IntegerAtom;
import main.lisp.parser.terms.NilAtomicExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.TAtomicExpressionFactory;

public class ArithmeticEvaluatorHelper {
	
	public static double getDifference(SExpression expr, Environment environment) {
		expr = expr.getTail();
		
		SExpression firstEvaled = expr.getHead().eval(environment);
		SExpression secondEvaled = expr.getTail().getHead().eval(environment);
		
		IntegerAtom firstInt = null;
		IntegerAtom secondInt = null;
		DecimalAtom firstDec = null;
		DecimalAtom secondDec = null;
		
		if (firstEvaled instanceof IntegerAtom) {
			firstInt = (IntegerAtom)firstEvaled;
			secondInt = (IntegerAtom)secondEvaled;
		}
		if (firstEvaled instanceof DecimalAtom) {
			firstDec = (DecimalAtom)firstEvaled;
			secondDec = (DecimalAtom)secondEvaled;
		}
		return firstInt.getValue() - secondInt.getValue();
	}
}

//END OF FILE

//SESSION END

//SESSION START
167,Tue Nov 21 17:35:06 EST 2023,-2647
//START OF FILE: index/LesserEvaluator.java
=551	-50	=1	-28	=1	-31	+ub	=2	-1	=1	-23	=1	-11	=1	-27	=1	-23	+f	=2	-6	=1	-2	=1	-17	=1	-15	=1	-1	=3	-15	=1	-33	=1	-9	=1	-2	=1	-17	+h	=1	-22	=1	-4	=1	-4	=1	-16	=1	-28	=4	-72	+u	=1	-2	=2	-4	=1	-39	+H	=1	-7	=1	-49	+p	=2	-15	=4	-39	+D	=9	-55	=1	-7	=1	-27	=3	-76	+,	=1	-7	=1	-5	=1	-12	+v	=1	-3	=1	-43	=2	-26	+m	=2	-18	=1	-6	=3	-6	=23	-1	=10	+new 	=5	-31	=6	-1	=11	-1	=7	+new 	=7	-31	=3	-5	=11
//END OF FILE
//START OF FILE: index/GreaterEvaluator.java
=436	-50	=1	-28	=1	-31	+ub	=2	-1	=1	-23	=1	-11	=1	-27	+f	=1	-23	=2	-6	=1	-2	=1	-17	=1	-15	=1	-1	=3	-15	=1	-33	=1	-9	=1	-2	=1	-17	+h	=1	-22	=1	-4	=1	-4	=1	-16	=1	-28	=4	-72	+u	=1	-2	=2	-4	=1	-6	+H	=1	-25	=1	-64	+p	=2	-15	=4	-39	+D	=9	-28	=1	-7	=1	-14	+xp	=1	-1	+,	=1	-47	=2	-53	+v	=2	-33	=2	-2	+m	=1	-5	=1	-37	=1	-6	=3	-6	=26	-1	=20	-1	=13	-1	=21	-5	=11
//END OF FILE
//START OF FILE: index/GreaterEqualEvaluator.java
=442	-50	=1	-28	=1	-31	+ub	=2	-3	=1	-21	=1	-11	=1	-27	+f	=1	-23	=2	-6	=1	-2	=1	-17	=1	-15	=1	-1	=3	-15	=1	-33	=1	-9	=1	-2	=1	-17	+h	=1	-24	=1	-2	=1	-4	=1	-16	=1	-28	=4	-21	+u	=1	-7	=1	-4	=1	-22	=1	-10	+H	=1	-4	=1	-105	+p	=2	-15	=4	-39	+D	=9	-29	=1	-7	=1	-14	+xp	=1	-1	+,	=1	-47	=2	-53	+v	=2	-33	=2	-2	+m	=1	-5	=1	-37	=1	-6	=3	-6	=27	-1	=20	-1	=13	-1	=21	-5	=11
//END OF FILE

//SESSION END

//SESSION START
168,Tue Nov 21 17:38:34 EST 2023,135
//START OF FILE: index/LesserEvaluator.java
=444	+extends ArithmeticEvaluatorHelper 	=20	-1	=257
//END OF FILE
//START OF FILE: index/LesserEqualEvaluator.java
=448	+extends ArithmeticEvaluatorHelper 	=333
//END OF FILE
//START OF FILE: index/GreaterEvaluator.java
=330	+extends ArithmeticEvaluatorHelper 	=277
//END OF FILE
//START OF FILE: index/GreaterEqualEvaluator.java
=335	+extends ArithmeticEvaluatorHelper 	=279
//END OF FILE

//SESSION END

//SESSION START
169,Tue Nov 21 17:44:19 EST 2023,434
//START OF FILE: index/LesserEvaluator.java
=584	-5	+r	=1	-6	+tu	=1	-1	=1	-4	=58	-39	+,	=1	-13	+%22	=1	-1	=1	-7	+ss	=1	-2	=1	-14	+%22	=2	-4	=7
//END OF FILE
//START OF FILE: index/LesserEqualEvaluator.java
=589	-5	+r	=1	-6	+tu	=1	-1	=1	-4	=58	-36	+,	=1	-11	+%22L	=3	-12	=1	-26	=1	-2	+Eq	=1	-5	+a	=1	-36	+%22	=3	-1	=2	-4	=3
//END OF FILE
//START OF FILE: index/ArithmeticEvaluatorHelper.java
=179	+;%0Aimport main.lisp.parser.terms.NilAtom	=21	-0	=43	+import main.lisp.parser.terms.TAtom;%0A	=115	-1	+SExpressi	=1	-4	+n	=56	+, String comparator	=561	+double diffe	=2	-3	=1	+ce =	=44	+%0A%09%09if(comparator.equals(%22greater%22)) %7B%0A%09%09%09if(difference %3E 0) %7B%0A%09%09%09%09return TAtomicExpressionFactory.newInstance();%0A%09%09%09%7Delse %7B%0A%09%09%09%09return NilAtomicExpressionFactory.newInstance();%0A%09%09%09%7D%0A%09%09%7Delse if(comparator.equals(%22lesser%22)) %7B%0A%09%09%09if(difference %3C 0) %7B%0A%09%09%09%09return TAtomicExpressionFactory.newInstance();%0A%09%09%09%7Delse %7B%0A%09%09%09%09return NilAtomicExpressionFactory.newInstance();%0A%09%09%09%7D%0A%09%09%7Delse if(comparator.equals(%22GreaterEqual%22))%7B%0A%09%09%09if(difference %3E= 0) %7B%0A%09%09%09%09return TAtomicExpressionFactory.newInstance();%0A%09%09%09%7Delse %7B%0A%09%09%09%09return NilAtomicExpressionFactory.newInstance();%0A%09%09%09%7D%0A%09%09%7Delse %7B%0A%09%09%09if(difference %3C= 0) %7B%0A%09%09%09%09return TAtomicExpressionFactory.newInstance();%0A%09%09%09%7Delse %7B%0A%09%09%09%09return NilAtomicExpressionFactory.newInstance();%0A%09%09%09%7D%0A%09%09%7D	=6
//END OF FILE
//START OF FILE: index/GreaterEvaluator.java
=470	-5	+r	=1	-6	+tu	=1	-1	=1	-4	=58	-18	+,	=1	-10	+%22g	=2	+a	=1	-5	=1	-24	=1	-18	+%22	=2	-4	=7
//END OF FILE
//START OF FILE: index/GreaterEqualEvaluator.java
=476	-5	+r	=1	-6	+tu	=1	-1	=1	-4	=58	-18	+,	=1	-11	+%22G	=2	+a	=1	-5	=1	-24	=1	-2	+Eq	=1	-9	+a	=1	-5	+%22	=2	-4	=7
//END OF FILE

//SESSION END

//SESSION START
170,Tue Nov 21 17:45:33 EST 2023,-80
//START OF FILE: index/LesserEvaluator.java
=591	-14	+s	=1	-7	=54
//END OF FILE
//START OF FILE: index/LesserEqualEvaluator.java
=596	-14	+s	=1	-7	=58
//END OF FILE
//START OF FILE: index/GreaterEvaluator.java
=477	-14	+s	=1	-7	=55
//END OF FILE
//START OF FILE: index/GreaterEqualEvaluator.java
=483	-14	+s	=1	-7	=60
//END OF FILE

//SESSION END
